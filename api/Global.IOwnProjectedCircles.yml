### YamlMime:ManagedReference
items:
- uid: Global.IOwnProjectedCircles
  commentId: T:Global.IOwnProjectedCircles
  id: IOwnProjectedCircles
  parent: Global
  children:
  - Global.IOwnProjectedCircles.CanHostCircle
  - Global.IOwnProjectedCircles.CircleCenter(System.Int32,System.Single)
  - Global.IOwnProjectedCircles.HostingCircleFromRoom
  langs:
  - csharp
  - vb
  name: IOwnProjectedCircles
  nameWithType: IOwnProjectedCircles
  fullName: IOwnProjectedCircles
  type: Interface
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:IOwnProjectedCircles</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public interface IOwnProjectedCircles
    content.vb: Public Interface IOwnProjectedCircles
- uid: Global.IOwnProjectedCircles.CircleCenter(System.Int32,System.Single)
  commentId: M:Global.IOwnProjectedCircles.CircleCenter(System.Int32,System.Single)
  id: CircleCenter(System.Int32,System.Single)
  parent: Global.IOwnProjectedCircles
  langs:
  - csharp
  - vb
  name: CircleCenter(int, float)
  nameWithType: IOwnProjectedCircles.CircleCenter(int, float)
  fullName: IOwnProjectedCircles.CircleCenter(int, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:IOwnProjectedCircles.CircleCenter(System.Int32,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: Vector2 CircleCenter(int index, float timeStacker)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:IOwnProjectedCircles.CircleCenter(System.Int32,System.Single)</parameter>
          </include>
        </markup>
    - id: timeStacker
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timeStacker</parameter>
            <parameter>M:IOwnProjectedCircles.CircleCenter(System.Int32,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:IOwnProjectedCircles.CircleCenter(System.Int32,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Function CircleCenter(index As Integer, timeStacker As Single) As Vector2
  overload: Global.IOwnProjectedCircles.CircleCenter*
  nameWithType.vb: IOwnProjectedCircles.CircleCenter(Integer, Single)
  fullName.vb: IOwnProjectedCircles.CircleCenter(Integer, Single)
  name.vb: CircleCenter(Integer, Single)
- uid: Global.IOwnProjectedCircles.HostingCircleFromRoom
  commentId: M:Global.IOwnProjectedCircles.HostingCircleFromRoom
  id: HostingCircleFromRoom
  parent: Global.IOwnProjectedCircles
  langs:
  - csharp
  - vb
  name: HostingCircleFromRoom()
  nameWithType: IOwnProjectedCircles.HostingCircleFromRoom()
  fullName: IOwnProjectedCircles.HostingCircleFromRoom()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:IOwnProjectedCircles.HostingCircleFromRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: Room HostingCircleFromRoom()
    return:
      type: Global.Room
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:IOwnProjectedCircles.HostingCircleFromRoom</parameter>
          </include>
        </markup>
    content.vb: Function HostingCircleFromRoom() As Room
  overload: Global.IOwnProjectedCircles.HostingCircleFromRoom*
- uid: Global.IOwnProjectedCircles.CanHostCircle
  commentId: M:Global.IOwnProjectedCircles.CanHostCircle
  id: CanHostCircle
  parent: Global.IOwnProjectedCircles
  langs:
  - csharp
  - vb
  name: CanHostCircle()
  nameWithType: IOwnProjectedCircles.CanHostCircle()
  fullName: IOwnProjectedCircles.CanHostCircle()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:IOwnProjectedCircles.CanHostCircle</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: bool CanHostCircle()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:IOwnProjectedCircles.CanHostCircle</parameter>
          </include>
        </markup>
    content.vb: Function CanHostCircle() As Boolean
  overload: Global.IOwnProjectedCircles.CanHostCircle*
references:
- uid: Global
- uid: Global.IOwnProjectedCircles.CircleCenter*
  commentId: Overload:Global.IOwnProjectedCircles.CircleCenter
  isExternal: true
  href: Global.IOwnProjectedCircles.html#IOwnProjectedCircles_CircleCenter_System_Int32_System_Single_
  name: CircleCenter
  nameWithType: IOwnProjectedCircles.CircleCenter
  fullName: IOwnProjectedCircles.CircleCenter
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.IOwnProjectedCircles.HostingCircleFromRoom*
  commentId: Overload:Global.IOwnProjectedCircles.HostingCircleFromRoom
  isExternal: true
  href: Global.IOwnProjectedCircles.html#IOwnProjectedCircles_HostingCircleFromRoom
  name: HostingCircleFromRoom
  nameWithType: IOwnProjectedCircles.HostingCircleFromRoom
  fullName: IOwnProjectedCircles.HostingCircleFromRoom
- uid: Global.Room
  commentId: T:Global.Room
  isExternal: true
  href: Room.html
  name: Room
  nameWithType: Room
  fullName: Room
- uid: Global.IOwnProjectedCircles.CanHostCircle*
  commentId: Overload:Global.IOwnProjectedCircles.CanHostCircle
  isExternal: true
  href: Global.IOwnProjectedCircles.html#IOwnProjectedCircles_CanHostCircle
  name: CanHostCircle
  nameWithType: IOwnProjectedCircles.CanHostCircle
  fullName: IOwnProjectedCircles.CanHostCircle
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
