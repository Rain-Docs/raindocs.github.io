### YamlMime:ManagedReference
items:
- uid: Global.PathCost
  commentId: T:Global.PathCost
  id: PathCost
  parent: Global
  children:
  - Global.PathCost.#ctor(System.Single,PathCost.Legality)
  - Global.PathCost.Allowed
  - Global.PathCost.Considerable
  - Global.PathCost.Equals(PathCost)
  - Global.PathCost.Equals(System.Object)
  - Global.PathCost.GetHashCode
  - Global.PathCost.ToString
  - Global.PathCost.legality
  - Global.PathCost.op_Addition(PathCost,PathCost)
  - Global.PathCost.op_Equality(PathCost,PathCost)
  - Global.PathCost.op_GreaterThan(PathCost,PathCost)
  - Global.PathCost.op_GreaterThanOrEqual(PathCost,PathCost)
  - Global.PathCost.op_Inequality(PathCost,PathCost)
  - Global.PathCost.op_LessThan(PathCost,PathCost)
  - Global.PathCost.op_LessThanOrEqual(PathCost,PathCost)
  - Global.PathCost.op_Multiply(PathCost,System.Single)
  - Global.PathCost.resistance
  langs:
  - csharp
  - vb
  name: PathCost
  nameWithType: PathCost
  fullName: PathCost
  type: Struct
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:PathCost</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public struct PathCost
    content.vb: Public Structure PathCost
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: Global.PathCost.legality
  commentId: F:Global.PathCost.legality
  id: legality
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: legality
  nameWithType: PathCost.legality
  fullName: PathCost.legality
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PathCost.legality</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PathCost.Legality legality
    return:
      type: Global.PathCost.Legality
    content.vb: Public legality As PathCost.Legality
- uid: Global.PathCost.resistance
  commentId: F:Global.PathCost.resistance
  id: resistance
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: resistance
  nameWithType: PathCost.resistance
  fullName: PathCost.resistance
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PathCost.resistance</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float resistance
    return:
      type: System.Single
    content.vb: Public resistance As Single
- uid: Global.PathCost.#ctor(System.Single,PathCost.Legality)
  commentId: M:Global.PathCost.#ctor(System.Single,PathCost.Legality)
  id: '#ctor(System.Single,PathCost.Legality)'
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: PathCost(float, Legality)
  nameWithType: PathCost.PathCost(float, PathCost.Legality)
  fullName: PathCost.PathCost(float, PathCost.Legality)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>PathCost</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PathCost(float resistance, PathCost.Legality legality)
    parameters:
    - id: resistance
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resistance</parameter>
            <parameter>M:PathCost.#ctor(System.Single,PathCost.Legality)</parameter>
          </include>
        </markup>
    - id: legality
      type: Global.PathCost.Legality
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>legality</parameter>
            <parameter>M:PathCost.#ctor(System.Single,PathCost.Legality)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(resistance As Single, legality As PathCost.Legality)
  overload: Global.PathCost.#ctor*
  nameWithType.vb: PathCost.New(Single, PathCost.Legality)
  fullName.vb: PathCost.New(Single, PathCost.Legality)
  name.vb: New(Single, Legality)
- uid: Global.PathCost.Equals(System.Object)
  commentId: M:Global.PathCost.Equals(System.Object)
  id: Equals(System.Object)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: PathCost.Equals(object)
  fullName: PathCost.Equals(object)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.Equals(System.Object)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:PathCost.Equals(System.Object)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.Equals(System.Object)</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Global.PathCost.Equals*
  nameWithType.vb: PathCost.Equals(Object)
  fullName.vb: PathCost.Equals(Object)
  name.vb: Equals(Object)
- uid: Global.PathCost.GetHashCode
  commentId: M:Global.PathCost.GetHashCode
  id: GetHashCode
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: PathCost.GetHashCode()
  fullName: PathCost.GetHashCode()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.GetHashCode</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.GetHashCode</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: Global.PathCost.GetHashCode*
- uid: Global.PathCost.Equals(PathCost)
  commentId: M:Global.PathCost.Equals(PathCost)
  id: Equals(PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: Equals(PathCost)
  nameWithType: PathCost.Equals(PathCost)
  fullName: PathCost.Equals(PathCost)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.Equals(PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Equals(PathCost pathCost)
    parameters:
    - id: pathCost
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pathCost</parameter>
            <parameter>M:PathCost.Equals(PathCost)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.Equals(PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Function Equals(pathCost As PathCost) As Boolean
  overload: Global.PathCost.Equals*
- uid: Global.PathCost.op_Addition(PathCost,PathCost)
  commentId: M:Global.PathCost.op_Addition(PathCost,PathCost)
  id: op_Addition(PathCost,PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator +(PathCost, PathCost)
  nameWithType: PathCost.operator +(PathCost, PathCost)
  fullName: PathCost.operator +(PathCost, PathCost)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_Addition(PathCost,PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static PathCost operator +(PathCost a, PathCost b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_Addition(PathCost,PathCost)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_Addition(PathCost,PathCost)</parameter>
          </include>
        </markup>
    return:
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_Addition(PathCost,PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator +(a As PathCost, b As PathCost) As PathCost
  overload: Global.PathCost.op_Addition*
  nameWithType.vb: PathCost.+(PathCost, PathCost)
  fullName.vb: PathCost.+(PathCost, PathCost)
  name.vb: +(PathCost, PathCost)
- uid: Global.PathCost.op_Multiply(PathCost,System.Single)
  commentId: M:Global.PathCost.op_Multiply(PathCost,System.Single)
  id: op_Multiply(PathCost,System.Single)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator *(PathCost, float)
  nameWithType: PathCost.operator *(PathCost, float)
  fullName: PathCost.operator *(PathCost, float)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_Multiply(PathCost,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static PathCost operator *(PathCost a, float b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_Multiply(PathCost,System.Single)</parameter>
          </include>
        </markup>
    - id: b
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_Multiply(PathCost,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_Multiply(PathCost,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator *(a As PathCost, b As Single) As PathCost
  overload: Global.PathCost.op_Multiply*
  nameWithType.vb: PathCost.*(PathCost, Single)
  fullName.vb: PathCost.*(PathCost, Single)
  name.vb: '*(PathCost, Single)'
- uid: Global.PathCost.op_Equality(PathCost,PathCost)
  commentId: M:Global.PathCost.op_Equality(PathCost,PathCost)
  id: op_Equality(PathCost,PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator ==(PathCost, PathCost)
  nameWithType: PathCost.operator ==(PathCost, PathCost)
  fullName: PathCost.operator ==(PathCost, PathCost)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_Equality(PathCost,PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator ==(PathCost a, PathCost b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_Equality(PathCost,PathCost)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_Equality(PathCost,PathCost)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_Equality(PathCost,PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator =(a As PathCost, b As PathCost) As Boolean
  overload: Global.PathCost.op_Equality*
  nameWithType.vb: PathCost.=(PathCost, PathCost)
  fullName.vb: PathCost.=(PathCost, PathCost)
  name.vb: =(PathCost, PathCost)
- uid: Global.PathCost.op_Inequality(PathCost,PathCost)
  commentId: M:Global.PathCost.op_Inequality(PathCost,PathCost)
  id: op_Inequality(PathCost,PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator !=(PathCost, PathCost)
  nameWithType: PathCost.operator !=(PathCost, PathCost)
  fullName: PathCost.operator !=(PathCost, PathCost)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_Inequality(PathCost,PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator !=(PathCost a, PathCost b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_Inequality(PathCost,PathCost)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_Inequality(PathCost,PathCost)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_Inequality(PathCost,PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator <>(a As PathCost, b As PathCost) As Boolean
  overload: Global.PathCost.op_Inequality*
  nameWithType.vb: PathCost.<>(PathCost, PathCost)
  fullName.vb: PathCost.<>(PathCost, PathCost)
  name.vb: <>(PathCost, PathCost)
- uid: Global.PathCost.op_GreaterThan(PathCost,PathCost)
  commentId: M:Global.PathCost.op_GreaterThan(PathCost,PathCost)
  id: op_GreaterThan(PathCost,PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator >(PathCost, PathCost)
  nameWithType: PathCost.operator >(PathCost, PathCost)
  fullName: PathCost.operator >(PathCost, PathCost)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_GreaterThan(PathCost,PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator >(PathCost a, PathCost b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_GreaterThan(PathCost,PathCost)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_GreaterThan(PathCost,PathCost)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_GreaterThan(PathCost,PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator >(a As PathCost, b As PathCost) As Boolean
  overload: Global.PathCost.op_GreaterThan*
  nameWithType.vb: PathCost.>(PathCost, PathCost)
  fullName.vb: PathCost.>(PathCost, PathCost)
  name.vb: '>(PathCost, PathCost)'
- uid: Global.PathCost.op_GreaterThanOrEqual(PathCost,PathCost)
  commentId: M:Global.PathCost.op_GreaterThanOrEqual(PathCost,PathCost)
  id: op_GreaterThanOrEqual(PathCost,PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator >=(PathCost, PathCost)
  nameWithType: PathCost.operator >=(PathCost, PathCost)
  fullName: PathCost.operator >=(PathCost, PathCost)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_GreaterThanOrEqual(PathCost,PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator >=(PathCost a, PathCost b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_GreaterThanOrEqual(PathCost,PathCost)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_GreaterThanOrEqual(PathCost,PathCost)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_GreaterThanOrEqual(PathCost,PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator >=(a As PathCost, b As PathCost) As Boolean
  overload: Global.PathCost.op_GreaterThanOrEqual*
  nameWithType.vb: PathCost.>=(PathCost, PathCost)
  fullName.vb: PathCost.>=(PathCost, PathCost)
  name.vb: '>=(PathCost, PathCost)'
- uid: Global.PathCost.op_LessThan(PathCost,PathCost)
  commentId: M:Global.PathCost.op_LessThan(PathCost,PathCost)
  id: op_LessThan(PathCost,PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator <(PathCost, PathCost)
  nameWithType: PathCost.operator <(PathCost, PathCost)
  fullName: PathCost.operator <(PathCost, PathCost)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_LessThan(PathCost,PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator <(PathCost a, PathCost b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_LessThan(PathCost,PathCost)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_LessThan(PathCost,PathCost)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_LessThan(PathCost,PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator <(a As PathCost, b As PathCost) As Boolean
  overload: Global.PathCost.op_LessThan*
  nameWithType.vb: PathCost.<(PathCost, PathCost)
  fullName.vb: PathCost.<(PathCost, PathCost)
  name.vb: <(PathCost, PathCost)
- uid: Global.PathCost.op_LessThanOrEqual(PathCost,PathCost)
  commentId: M:Global.PathCost.op_LessThanOrEqual(PathCost,PathCost)
  id: op_LessThanOrEqual(PathCost,PathCost)
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: operator <=(PathCost, PathCost)
  nameWithType: PathCost.operator <=(PathCost, PathCost)
  fullName: PathCost.operator <=(PathCost, PathCost)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.op_LessThanOrEqual(PathCost,PathCost)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator <=(PathCost a, PathCost b)
    parameters:
    - id: a
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:PathCost.op_LessThanOrEqual(PathCost,PathCost)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:PathCost.op_LessThanOrEqual(PathCost,PathCost)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.op_LessThanOrEqual(PathCost,PathCost)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator <=(a As PathCost, b As PathCost) As Boolean
  overload: Global.PathCost.op_LessThanOrEqual*
  nameWithType.vb: PathCost.<=(PathCost, PathCost)
  fullName.vb: PathCost.<=(PathCost, PathCost)
  name.vb: <=(PathCost, PathCost)
- uid: Global.PathCost.ToString
  commentId: M:Global.PathCost.ToString
  id: ToString
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PathCost.ToString()
  fullName: PathCost.ToString()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PathCost.ToString</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PathCost.ToString</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: Global.PathCost.ToString*
- uid: Global.PathCost.Allowed
  commentId: P:Global.PathCost.Allowed
  id: Allowed
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: Allowed
  nameWithType: PathCost.Allowed
  fullName: PathCost.Allowed
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:PathCost.Allowed</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Allowed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Allowed As Boolean
  overload: Global.PathCost.Allowed*
- uid: Global.PathCost.Considerable
  commentId: P:Global.PathCost.Considerable
  id: Considerable
  parent: Global.PathCost
  langs:
  - csharp
  - vb
  name: Considerable
  nameWithType: PathCost.Considerable
  fullName: PathCost.Considerable
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:PathCost.Considerable</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Considerable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Considerable As Boolean
  overload: Global.PathCost.Considerable*
references:
- uid: Global
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.PathCost.Legality
  commentId: T:Global.PathCost.Legality
  isExternal: true
  href: PathCost.html
  name: PathCost.Legality
  nameWithType: PathCost.Legality
  fullName: PathCost.Legality
  spec.csharp:
  - uid: Global.PathCost
    name: PathCost
    isExternal: true
    href: PathCost.html
  - name: .
  - uid: Global.PathCost.Legality
    name: Legality
    isExternal: true
    href: PathCost.Legality.html
  spec.vb:
  - uid: Global.PathCost
    name: PathCost
    isExternal: true
    href: PathCost.html
  - name: .
  - uid: Global.PathCost.Legality
    name: Legality
    isExternal: true
    href: PathCost.Legality.html
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.PathCost.#ctor*
  commentId: Overload:Global.PathCost.#ctor
  isExternal: true
  href: Global.PathCost.html#PathCost__ctor_System_Single_PathCost_Legality_
  name: PathCost
  nameWithType: PathCost.PathCost
  fullName: PathCost.PathCost
  nameWithType.vb: PathCost.New
  fullName.vb: PathCost.New
  name.vb: New
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.PathCost.Equals*
  commentId: Overload:Global.PathCost.Equals
  isExternal: true
  href: Global.PathCost.html#PathCost_Equals_System_Object_
  name: Equals
  nameWithType: PathCost.Equals
  fullName: PathCost.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: Global.PathCost.GetHashCode*
  commentId: Overload:Global.PathCost.GetHashCode
  isExternal: true
  href: Global.PathCost.html#PathCost_GetHashCode
  name: GetHashCode
  nameWithType: PathCost.GetHashCode
  fullName: PathCost.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.PathCost
  commentId: T:Global.PathCost
  isExternal: true
  href: PathCost.html
  name: PathCost
  nameWithType: PathCost
  fullName: PathCost
- uid: Global.PathCost.op_Addition*
  commentId: Overload:Global.PathCost.op_Addition
  isExternal: true
  href: Global.PathCost.html#PathCost_op_Addition_PathCost_PathCost_
  name: operator +
  nameWithType: PathCost.operator +
  fullName: PathCost.operator +
  nameWithType.vb: PathCost.+
  fullName.vb: PathCost.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_Addition*
    name: +
    isExternal: true
    href: Global.PathCost.html#PathCost_op_Addition_PathCost_PathCost_
- uid: Global.PathCost.op_Multiply*
  commentId: Overload:Global.PathCost.op_Multiply
  isExternal: true
  href: Global.PathCost.html#PathCost_op_Multiply_PathCost_System_Single_
  name: operator *
  nameWithType: PathCost.operator *
  fullName: PathCost.operator *
  nameWithType.vb: PathCost.*
  fullName.vb: PathCost.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_Multiply*
    name: '*'
    isExternal: true
    href: Global.PathCost.html#PathCost_op_Multiply_PathCost_System_Single_
- uid: Global.PathCost.op_Equality*
  commentId: Overload:Global.PathCost.op_Equality
  isExternal: true
  href: Global.PathCost.html#PathCost_op_Equality_PathCost_PathCost_
  name: operator ==
  nameWithType: PathCost.operator ==
  fullName: PathCost.operator ==
  nameWithType.vb: PathCost.=
  fullName.vb: PathCost.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_Equality*
    name: ==
    isExternal: true
    href: Global.PathCost.html#PathCost_op_Equality_PathCost_PathCost_
- uid: Global.PathCost.op_Inequality*
  commentId: Overload:Global.PathCost.op_Inequality
  isExternal: true
  href: Global.PathCost.html#PathCost_op_Inequality_PathCost_PathCost_
  name: operator !=
  nameWithType: PathCost.operator !=
  fullName: PathCost.operator !=
  nameWithType.vb: PathCost.<>
  fullName.vb: PathCost.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_Inequality*
    name: '!='
    isExternal: true
    href: Global.PathCost.html#PathCost_op_Inequality_PathCost_PathCost_
- uid: Global.PathCost.op_GreaterThan*
  commentId: Overload:Global.PathCost.op_GreaterThan
  isExternal: true
  href: Global.PathCost.html#PathCost_op_GreaterThan_PathCost_PathCost_
  name: operator >
  nameWithType: PathCost.operator >
  fullName: PathCost.operator >
  nameWithType.vb: PathCost.>
  fullName.vb: PathCost.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_GreaterThan*
    name: '>'
    isExternal: true
    href: Global.PathCost.html#PathCost_op_GreaterThan_PathCost_PathCost_
- uid: Global.PathCost.op_GreaterThanOrEqual*
  commentId: Overload:Global.PathCost.op_GreaterThanOrEqual
  isExternal: true
  href: Global.PathCost.html#PathCost_op_GreaterThanOrEqual_PathCost_PathCost_
  name: operator >=
  nameWithType: PathCost.operator >=
  fullName: PathCost.operator >=
  nameWithType.vb: PathCost.>=
  fullName.vb: PathCost.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_GreaterThanOrEqual*
    name: '>='
    isExternal: true
    href: Global.PathCost.html#PathCost_op_GreaterThanOrEqual_PathCost_PathCost_
- uid: Global.PathCost.op_LessThan*
  commentId: Overload:Global.PathCost.op_LessThan
  isExternal: true
  href: Global.PathCost.html#PathCost_op_LessThan_PathCost_PathCost_
  name: operator <
  nameWithType: PathCost.operator <
  fullName: PathCost.operator <
  nameWithType.vb: PathCost.<
  fullName.vb: PathCost.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_LessThan*
    name: <
    isExternal: true
    href: Global.PathCost.html#PathCost_op_LessThan_PathCost_PathCost_
- uid: Global.PathCost.op_LessThanOrEqual*
  commentId: Overload:Global.PathCost.op_LessThanOrEqual
  isExternal: true
  href: Global.PathCost.html#PathCost_op_LessThanOrEqual_PathCost_PathCost_
  name: operator <=
  nameWithType: PathCost.operator <=
  fullName: PathCost.operator <=
  nameWithType.vb: PathCost.<=
  fullName.vb: PathCost.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.PathCost.op_LessThanOrEqual*
    name: <=
    isExternal: true
    href: Global.PathCost.html#PathCost_op_LessThanOrEqual_PathCost_PathCost_
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: Global.PathCost.ToString*
  commentId: Overload:Global.PathCost.ToString
  isExternal: true
  href: Global.PathCost.html#PathCost_ToString
  name: ToString
  nameWithType: PathCost.ToString
  fullName: PathCost.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.PathCost.Allowed*
  commentId: Overload:Global.PathCost.Allowed
  isExternal: true
  href: Global.PathCost.html#PathCost_Allowed
  name: Allowed
  nameWithType: PathCost.Allowed
  fullName: PathCost.Allowed
- uid: Global.PathCost.Considerable*
  commentId: Overload:Global.PathCost.Considerable
  isExternal: true
  href: Global.PathCost.html#PathCost_Considerable
  name: Considerable
  nameWithType: PathCost.Considerable
  fullName: PathCost.Considerable
