### YamlMime:ManagedReference
items:
- uid: Global.FShader
  commentId: T:Global.FShader
  id: FShader
  parent: Global
  children:
  - Global.FShader.Additive
  - Global.FShader.AdditiveColor
  - Global.FShader.Basic
  - Global.FShader.CreateShader(System.String,UnityEngine.Shader)
  - Global.FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])
  - Global.FShader.Init
  - Global.FShader.Solid
  - Global.FShader.SolidColored
  - Global.FShader.defaultShader
  - Global.FShader.index
  - Global.FShader.keywords
  - Global.FShader.name
  - Global.FShader.shader
  langs:
  - csharp
  - vb
  name: FShader
  nameWithType: FShader
  fullName: FShader
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FShader</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class FShader
    content.vb: Public Class FShader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.FShader.defaultShader
  commentId: F:Global.FShader.defaultShader
  id: defaultShader
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: defaultShader
  nameWithType: FShader.defaultShader
  fullName: FShader.defaultShader
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.defaultShader</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader defaultShader
    return:
      type: Global.FShader
    content.vb: Public Shared defaultShader As FShader
- uid: Global.FShader.Basic
  commentId: F:Global.FShader.Basic
  id: Basic
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: Basic
  nameWithType: FShader.Basic
  fullName: FShader.Basic
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.Basic</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader Basic
    return:
      type: Global.FShader
    content.vb: Public Shared Basic As FShader
- uid: Global.FShader.Additive
  commentId: F:Global.FShader.Additive
  id: Additive
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: Additive
  nameWithType: FShader.Additive
  fullName: FShader.Additive
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.Additive</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader Additive
    return:
      type: Global.FShader
    content.vb: Public Shared Additive As FShader
- uid: Global.FShader.AdditiveColor
  commentId: F:Global.FShader.AdditiveColor
  id: AdditiveColor
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: AdditiveColor
  nameWithType: FShader.AdditiveColor
  fullName: FShader.AdditiveColor
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.AdditiveColor</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader AdditiveColor
    return:
      type: Global.FShader
    content.vb: Public Shared AdditiveColor As FShader
- uid: Global.FShader.Solid
  commentId: F:Global.FShader.Solid
  id: Solid
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: Solid
  nameWithType: FShader.Solid
  fullName: FShader.Solid
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.Solid</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader Solid
    return:
      type: Global.FShader
    content.vb: Public Shared Solid As FShader
- uid: Global.FShader.SolidColored
  commentId: F:Global.FShader.SolidColored
  id: SolidColored
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: SolidColored
  nameWithType: FShader.SolidColored
  fullName: FShader.SolidColored
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.SolidColored</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader SolidColored
    return:
      type: Global.FShader
    content.vb: Public Shared SolidColored As FShader
- uid: Global.FShader.index
  commentId: F:Global.FShader.index
  id: index
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: index
  nameWithType: FShader.index
  fullName: FShader.index
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.index</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int index
    return:
      type: System.Int32
    content.vb: Public index As Integer
- uid: Global.FShader.name
  commentId: F:Global.FShader.name
  id: name
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: name
  nameWithType: FShader.name
  fullName: FShader.name
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.name</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string name
    return:
      type: System.String
    content.vb: Public name As String
- uid: Global.FShader.shader
  commentId: F:Global.FShader.shader
  id: shader
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: shader
  nameWithType: FShader.shader
  fullName: FShader.shader
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.shader</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Shader shader
    return:
      type: UnityEngine.Shader
    content.vb: Public shader As Shader
- uid: Global.FShader.keywords
  commentId: F:Global.FShader.keywords
  id: keywords
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: keywords
  nameWithType: FShader.keywords
  fullName: FShader.keywords
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FShader.keywords</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string[] keywords
    return:
      type: System.String[]
    content.vb: Public keywords As String()
- uid: Global.FShader.Init
  commentId: M:Global.FShader.Init
  id: Init
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: FShader.Init()
  fullName: FShader.Init()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FShader.Init</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void Init()
    content.vb: Public Shared Sub Init()
  overload: Global.FShader.Init*
- uid: Global.FShader.CreateShader(System.String,UnityEngine.Shader)
  commentId: M:Global.FShader.CreateShader(System.String,UnityEngine.Shader)
  id: CreateShader(System.String,UnityEngine.Shader)
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: CreateShader(string, Shader)
  nameWithType: FShader.CreateShader(string, Shader)
  fullName: FShader.CreateShader(string, UnityEngine.Shader)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader CreateShader(string shaderShortName, Shader shader)
    parameters:
    - id: shaderShortName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shaderShortName</parameter>
            <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader)</parameter>
          </include>
        </markup>
    - id: shader
      type: UnityEngine.Shader
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shader</parameter>
            <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader)</parameter>
          </include>
        </markup>
    return:
      type: Global.FShader
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function CreateShader(shaderShortName As String, shader As Shader) As FShader
  overload: Global.FShader.CreateShader*
  nameWithType.vb: FShader.CreateShader(String, Shader)
  fullName.vb: FShader.CreateShader(String, UnityEngine.Shader)
  name.vb: CreateShader(String, Shader)
- uid: Global.FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])
  commentId: M:Global.FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])
  id: CreateShader(System.String,UnityEngine.Shader,System.String[])
  parent: Global.FShader
  langs:
  - csharp
  - vb
  name: CreateShader(string, Shader, string[])
  nameWithType: FShader.CreateShader(string, Shader, string[])
  fullName: FShader.CreateShader(string, UnityEngine.Shader, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FShader CreateShader(string shaderShortName, Shader shader, string[] keywords)
    parameters:
    - id: shaderShortName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shaderShortName</parameter>
            <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])</parameter>
          </include>
        </markup>
    - id: shader
      type: UnityEngine.Shader
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shader</parameter>
            <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])</parameter>
          </include>
        </markup>
    - id: keywords
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>keywords</parameter>
            <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])</parameter>
          </include>
        </markup>
    return:
      type: Global.FShader
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FShader.CreateShader(System.String,UnityEngine.Shader,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function CreateShader(shaderShortName As String, shader As Shader, keywords As String()) As FShader
  overload: Global.FShader.CreateShader*
  nameWithType.vb: FShader.CreateShader(String, Shader, String())
  fullName.vb: FShader.CreateShader(String, UnityEngine.Shader, String())
  name.vb: CreateShader(String, Shader, String())
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.FShader
  commentId: T:Global.FShader
  isExternal: true
  href: FShader.html
  name: FShader
  nameWithType: FShader
  fullName: FShader
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: UnityEngine.Shader
  isExternal: true
  name: Shader
  nameWithType: Shader
  fullName: UnityEngine.Shader
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Global.FShader.Init*
  commentId: Overload:Global.FShader.Init
  isExternal: true
  href: Global.FShader.html#FShader_Init
  name: Init
  nameWithType: FShader.Init
  fullName: FShader.Init
- uid: Global.FShader.CreateShader*
  commentId: Overload:Global.FShader.CreateShader
  isExternal: true
  href: Global.FShader.html#FShader_CreateShader_System_String_UnityEngine_Shader_
  name: CreateShader
  nameWithType: FShader.CreateShader
  fullName: FShader.CreateShader
