### YamlMime:ManagedReference
items:
- uid: Global.RXRandom
  commentId: T:Global.RXRandom
  id: RXRandom
  parent: Global
  children:
  - Global.RXRandom.AnyItem``1(System.Collections.Generic.List{``0})
  - Global.RXRandom.AnyItem``1(``0[])
  - Global.RXRandom.Bool
  - Global.RXRandom.Double
  - Global.RXRandom.Float
  - Global.RXRandom.Float(System.Int32)
  - Global.RXRandom.Float(System.Single)
  - Global.RXRandom.Int
  - Global.RXRandom.Int(System.Int32)
  - Global.RXRandom.Range(System.Int32,System.Int32)
  - Global.RXRandom.Range(System.Single,System.Single)
  - Global.RXRandom.Select(System.Object[])
  - Global.RXRandom.ShuffleList``1(System.Collections.Generic.List{``0})
  - Global.RXRandom.Shuffle``1(System.Collections.Generic.List{``0})
  - Global.RXRandom.Vector2Normalized
  - Global.RXRandom.Vector3Normalized
  langs:
  - csharp
  - vb
  name: RXRandom
  nameWithType: RXRandom
  fullName: RXRandom
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:RXRandom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static class RXRandom
    content.vb: Public Module RXRandom
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.RXRandom.Float
  commentId: M:Global.RXRandom.Float
  id: Float
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Float()
  nameWithType: RXRandom.Float()
  fullName: RXRandom.Float()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Float</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Float()
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Float</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Float() As Single
  overload: Global.RXRandom.Float*
- uid: Global.RXRandom.Float(System.Int32)
  commentId: M:Global.RXRandom.Float(System.Int32)
  id: Float(System.Int32)
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Float(int)
  nameWithType: RXRandom.Float(int)
  fullName: RXRandom.Float(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Float(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Float(int seed)
    parameters:
    - id: seed
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>seed</parameter>
            <parameter>M:RXRandom.Float(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Float(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Float(seed As Integer) As Single
  overload: Global.RXRandom.Float*
  nameWithType.vb: RXRandom.Float(Integer)
  fullName.vb: RXRandom.Float(Integer)
  name.vb: Float(Integer)
- uid: Global.RXRandom.Double
  commentId: M:Global.RXRandom.Double
  id: Double
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Double()
  nameWithType: RXRandom.Double()
  fullName: RXRandom.Double()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Double</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static double Double()
    return:
      type: System.Double
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Double</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function [Double]() As Double
  overload: Global.RXRandom.Double*
- uid: Global.RXRandom.Float(System.Single)
  commentId: M:Global.RXRandom.Float(System.Single)
  id: Float(System.Single)
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Float(float)
  nameWithType: RXRandom.Float(float)
  fullName: RXRandom.Float(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Float(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Float(float max)
    parameters:
    - id: max
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>max</parameter>
            <parameter>M:RXRandom.Float(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Float(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Float(max As Single) As Single
  overload: Global.RXRandom.Float*
  nameWithType.vb: RXRandom.Float(Single)
  fullName.vb: RXRandom.Float(Single)
  name.vb: Float(Single)
- uid: Global.RXRandom.Int
  commentId: M:Global.RXRandom.Int
  id: Int
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Int()
  nameWithType: RXRandom.Int()
  fullName: RXRandom.Int()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Int</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int Int()
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Int</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Int() As Integer
  overload: Global.RXRandom.Int*
- uid: Global.RXRandom.Int(System.Int32)
  commentId: M:Global.RXRandom.Int(System.Int32)
  id: Int(System.Int32)
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Int(int)
  nameWithType: RXRandom.Int(int)
  fullName: RXRandom.Int(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Int(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int Int(int max)
    parameters:
    - id: max
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>max</parameter>
            <parameter>M:RXRandom.Int(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Int(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Int(max As Integer) As Integer
  overload: Global.RXRandom.Int*
  nameWithType.vb: RXRandom.Int(Integer)
  fullName.vb: RXRandom.Int(Integer)
  name.vb: Int(Integer)
- uid: Global.RXRandom.Range(System.Single,System.Single)
  commentId: M:Global.RXRandom.Range(System.Single,System.Single)
  id: Range(System.Single,System.Single)
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Range(float, float)
  nameWithType: RXRandom.Range(float, float)
  fullName: RXRandom.Range(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Range(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Range(float low, float high)
    parameters:
    - id: low
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>low</parameter>
            <parameter>M:RXRandom.Range(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: high
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>high</parameter>
            <parameter>M:RXRandom.Range(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Range(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Range(low As Single, high As Single) As Single
  overload: Global.RXRandom.Range*
  nameWithType.vb: RXRandom.Range(Single, Single)
  fullName.vb: RXRandom.Range(Single, Single)
  name.vb: Range(Single, Single)
- uid: Global.RXRandom.Range(System.Int32,System.Int32)
  commentId: M:Global.RXRandom.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Range(int, int)
  nameWithType: RXRandom.Range(int, int)
  fullName: RXRandom.Range(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Range(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int Range(int low, int high)
    parameters:
    - id: low
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>low</parameter>
            <parameter>M:RXRandom.Range(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: high
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>high</parameter>
            <parameter>M:RXRandom.Range(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Range(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Range(low As Integer, high As Integer) As Integer
  overload: Global.RXRandom.Range*
  nameWithType.vb: RXRandom.Range(Integer, Integer)
  fullName.vb: RXRandom.Range(Integer, Integer)
  name.vb: Range(Integer, Integer)
- uid: Global.RXRandom.Bool
  commentId: M:Global.RXRandom.Bool
  id: Bool
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Bool()
  nameWithType: RXRandom.Bool()
  fullName: RXRandom.Bool()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Bool</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool Bool()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Bool</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Bool() As Boolean
  overload: Global.RXRandom.Bool*
- uid: Global.RXRandom.Select(System.Object[])
  commentId: M:Global.RXRandom.Select(System.Object[])
  id: Select(System.Object[])
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Select(params object[])
  nameWithType: RXRandom.Select(params object[])
  fullName: RXRandom.Select(params object[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Select(System.Object[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static object Select(params object[] objects)
    parameters:
    - id: objects
      type: System.Object[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>objects</parameter>
            <parameter>M:RXRandom.Select(System.Object[])</parameter>
          </include>
        </markup>
    return:
      type: System.Object
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Select(System.Object[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function [Select](ParamArray objects As Object()) As Object
  overload: Global.RXRandom.Select*
  nameWithType.vb: RXRandom.Select(ParamArray Object())
  fullName.vb: RXRandom.Select(ParamArray Object())
  name.vb: Select(ParamArray Object())
- uid: Global.RXRandom.AnyItem``1(``0[])
  commentId: M:Global.RXRandom.AnyItem``1(``0[])
  id: AnyItem``1(``0[])
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: AnyItem<T>(T[])
  nameWithType: RXRandom.AnyItem<T>(T[])
  fullName: RXRandom.AnyItem<T>(T[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.AnyItem``1(``0[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static T AnyItem<T>(T[] items)
    parameters:
    - id: items
      type: '{T}[]'
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>items</parameter>
            <parameter>M:RXRandom.AnyItem``1(``0[])</parameter>
          </include>
        </markup>
    typeParameters:
    - id: T
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:RXRandom.AnyItem``1(``0[])</parameter>
          </include>
        </markup>
    return:
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.AnyItem``1(``0[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function AnyItem(Of T)(items As T()) As T
  overload: Global.RXRandom.AnyItem*
  nameWithType.vb: RXRandom.AnyItem(Of T)(T())
  fullName.vb: RXRandom.AnyItem(Of T)(T())
  name.vb: AnyItem(Of T)(T())
- uid: Global.RXRandom.AnyItem``1(System.Collections.Generic.List{``0})
  commentId: M:Global.RXRandom.AnyItem``1(System.Collections.Generic.List{``0})
  id: AnyItem``1(System.Collections.Generic.List{``0})
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: AnyItem<T>(List<T>)
  nameWithType: RXRandom.AnyItem<T>(List<T>)
  fullName: RXRandom.AnyItem<T>(System.Collections.Generic.List<T>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.AnyItem``1(System.Collections.Generic.List{``0})</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static T AnyItem<T>(List<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.List{{T}}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>items</parameter>
            <parameter>M:RXRandom.AnyItem``1(System.Collections.Generic.List{``0})</parameter>
          </include>
        </markup>
    typeParameters:
    - id: T
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:RXRandom.AnyItem``1(System.Collections.Generic.List{``0})</parameter>
          </include>
        </markup>
    return:
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.AnyItem``1(System.Collections.Generic.List{``0})</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function AnyItem(Of T)(items As List(Of T)) As T
  overload: Global.RXRandom.AnyItem*
  nameWithType.vb: RXRandom.AnyItem(Of T)(List(Of T))
  fullName.vb: RXRandom.AnyItem(Of T)(System.Collections.Generic.List(Of T))
  name.vb: AnyItem(Of T)(List(Of T))
- uid: Global.RXRandom.Vector2Normalized
  commentId: M:Global.RXRandom.Vector2Normalized
  id: Vector2Normalized
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Vector2Normalized()
  nameWithType: RXRandom.Vector2Normalized()
  fullName: RXRandom.Vector2Normalized()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Vector2Normalized</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 Vector2Normalized()
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Vector2Normalized</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Vector2Normalized() As Vector2
  overload: Global.RXRandom.Vector2Normalized*
- uid: Global.RXRandom.Vector3Normalized
  commentId: M:Global.RXRandom.Vector3Normalized
  id: Vector3Normalized
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Vector3Normalized()
  nameWithType: RXRandom.Vector3Normalized()
  fullName: RXRandom.Vector3Normalized()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Vector3Normalized</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector3 Vector3Normalized()
    return:
      type: UnityEngine.Vector3
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXRandom.Vector3Normalized</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Vector3Normalized() As Vector3
  overload: Global.RXRandom.Vector3Normalized*
- uid: Global.RXRandom.ShuffleList``1(System.Collections.Generic.List{``0})
  commentId: M:Global.RXRandom.ShuffleList``1(System.Collections.Generic.List{``0})
  id: ShuffleList``1(System.Collections.Generic.List{``0})
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: ShuffleList<T>(List<T>)
  nameWithType: RXRandom.ShuffleList<T>(List<T>)
  fullName: RXRandom.ShuffleList<T>(System.Collections.Generic.List<T>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.ShuffleList``1(System.Collections.Generic.List{``0})</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void ShuffleList<T>(List<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.List{{T}}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>list</parameter>
            <parameter>M:RXRandom.ShuffleList``1(System.Collections.Generic.List{``0})</parameter>
          </include>
        </markup>
    typeParameters:
    - id: T
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:RXRandom.ShuffleList``1(System.Collections.Generic.List{``0})</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub ShuffleList(Of T)(list As List(Of T))
  overload: Global.RXRandom.ShuffleList*
  nameWithType.vb: RXRandom.ShuffleList(Of T)(List(Of T))
  fullName.vb: RXRandom.ShuffleList(Of T)(System.Collections.Generic.List(Of T))
  name.vb: ShuffleList(Of T)(List(Of T))
- uid: Global.RXRandom.Shuffle``1(System.Collections.Generic.List{``0})
  commentId: M:Global.RXRandom.Shuffle``1(System.Collections.Generic.List{``0})
  id: Shuffle``1(System.Collections.Generic.List{``0})
  isExtensionMethod: true
  parent: Global.RXRandom
  langs:
  - csharp
  - vb
  name: Shuffle<T>(List<T>)
  nameWithType: RXRandom.Shuffle<T>(List<T>)
  fullName: RXRandom.Shuffle<T>(System.Collections.Generic.List<T>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXRandom.Shuffle``1(System.Collections.Generic.List{``0})</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void Shuffle<T>(this List<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.List{{T}}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>list</parameter>
            <parameter>M:RXRandom.Shuffle``1(System.Collections.Generic.List{``0})</parameter>
          </include>
        </markup>
    typeParameters:
    - id: T
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:RXRandom.Shuffle``1(System.Collections.Generic.List{``0})</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub Shuffle(Of T)(list As List(Of T))
  overload: Global.RXRandom.Shuffle*
  nameWithType.vb: RXRandom.Shuffle(Of T)(List(Of T))
  fullName.vb: RXRandom.Shuffle(Of T)(System.Collections.Generic.List(Of T))
  name.vb: Shuffle(Of T)(List(Of T))
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.RXRandom.Float*
  commentId: Overload:Global.RXRandom.Float
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Float
  name: Float
  nameWithType: RXRandom.Float
  fullName: RXRandom.Float
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.RXRandom.Double*
  commentId: Overload:Global.RXRandom.Double
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Double
  name: Double
  nameWithType: RXRandom.Double
  fullName: RXRandom.Double
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: Global.RXRandom.Int*
  commentId: Overload:Global.RXRandom.Int
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Int
  name: Int
  nameWithType: RXRandom.Int
  fullName: RXRandom.Int
- uid: Global.RXRandom.Range*
  commentId: Overload:Global.RXRandom.Range
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Range_System_Single_System_Single_
  name: Range
  nameWithType: RXRandom.Range
  fullName: RXRandom.Range
- uid: Global.RXRandom.Bool*
  commentId: Overload:Global.RXRandom.Bool
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Bool
  name: Bool
  nameWithType: RXRandom.Bool
  fullName: RXRandom.Bool
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.RXRandom.Select*
  commentId: Overload:Global.RXRandom.Select
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Select_System_Object___
  name: Select
  nameWithType: RXRandom.Select
  fullName: RXRandom.Select
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: Global.RXRandom.AnyItem*
  commentId: Overload:Global.RXRandom.AnyItem
  isExternal: true
  href: Global.RXRandom.html#RXRandom_AnyItem__1___0___
  name: AnyItem
  nameWithType: RXRandom.AnyItem
  fullName: RXRandom.AnyItem
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Global.RXRandom.Vector2Normalized*
  commentId: Overload:Global.RXRandom.Vector2Normalized
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Vector2Normalized
  name: Vector2Normalized
  nameWithType: RXRandom.Vector2Normalized
  fullName: RXRandom.Vector2Normalized
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.RXRandom.Vector3Normalized*
  commentId: Overload:Global.RXRandom.Vector3Normalized
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Vector3Normalized
  name: Vector3Normalized
  nameWithType: RXRandom.Vector3Normalized
  fullName: RXRandom.Vector3Normalized
- uid: UnityEngine.Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: Global.RXRandom.ShuffleList*
  commentId: Overload:Global.RXRandom.ShuffleList
  isExternal: true
  href: Global.RXRandom.html#RXRandom_ShuffleList__1_System_Collections_Generic_List___0__
  name: ShuffleList
  nameWithType: RXRandom.ShuffleList
  fullName: RXRandom.ShuffleList
- uid: Global.RXRandom.Shuffle*
  commentId: Overload:Global.RXRandom.Shuffle
  isExternal: true
  href: Global.RXRandom.html#RXRandom_Shuffle__1_System_Collections_Generic_List___0__
  name: Shuffle
  nameWithType: RXRandom.Shuffle
  fullName: RXRandom.Shuffle
