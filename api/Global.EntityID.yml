### YamlMime:ManagedReference
items:
- uid: Global.EntityID
  commentId: T:Global.EntityID
  id: EntityID
  parent: Global
  children:
  - Global.EntityID.#ctor(System.Int32,System.Int32)
  - Global.EntityID.Equals(EntityID)
  - Global.EntityID.Equals(System.Object)
  - Global.EntityID.FromString(System.String)
  - Global.EntityID.GetHashCode
  - Global.EntityID.RandomSeed
  - Global.EntityID.ToString
  - Global.EntityID.number
  - Global.EntityID.op_Equality(EntityID,EntityID)
  - Global.EntityID.op_Inequality(EntityID,EntityID)
  - Global.EntityID.setAltSeed(System.Int32)
  - Global.EntityID.spawner
  langs:
  - csharp
  - vb
  name: EntityID
  nameWithType: EntityID
  fullName: EntityID
  type: Struct
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: An ID used in generating variations in creatures.
  example: []
  syntax:
    content: public struct EntityID
    content.vb: Public Structure EntityID
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: Global.EntityID.spawner
  commentId: F:Global.EntityID.spawner
  id: spawner
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: spawner
  nameWithType: EntityID.spawner
  fullName: EntityID.spawner
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:EntityID.spawner</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int spawner
    return:
      type: System.Int32
    content.vb: Public spawner As Integer
- uid: Global.EntityID.number
  commentId: F:Global.EntityID.number
  id: number
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: number
  nameWithType: EntityID.number
  fullName: EntityID.number
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:EntityID.number</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int number
    return:
      type: System.Int32
    content.vb: Public number As Integer
- uid: Global.EntityID.#ctor(System.Int32,System.Int32)
  commentId: M:Global.EntityID.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: EntityID(int, int)
  nameWithType: EntityID.EntityID(int, int)
  fullName: EntityID.EntityID(int, int)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>EntityID</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public EntityID(int spawner, int number)
    parameters:
    - id: spawner
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>spawner</parameter>
            <parameter>M:EntityID.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: number
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>number</parameter>
            <parameter>M:EntityID.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(spawner As Integer, number As Integer)
  overload: Global.EntityID.#ctor*
  nameWithType.vb: EntityID.New(Integer, Integer)
  fullName.vb: EntityID.New(Integer, Integer)
  name.vb: New(Integer, Integer)
- uid: Global.EntityID.Equals(System.Object)
  commentId: M:Global.EntityID.Equals(System.Object)
  id: Equals(System.Object)
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: EntityID.Equals(object)
  fullName: EntityID.Equals(object)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.Equals(System.Object)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:EntityID.Equals(System.Object)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:EntityID.Equals(System.Object)</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Global.EntityID.Equals*
  nameWithType.vb: EntityID.Equals(Object)
  fullName.vb: EntityID.Equals(Object)
  name.vb: Equals(Object)
- uid: Global.EntityID.Equals(EntityID)
  commentId: M:Global.EntityID.Equals(EntityID)
  id: Equals(EntityID)
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: Equals(EntityID)
  nameWithType: EntityID.Equals(EntityID)
  fullName: EntityID.Equals(EntityID)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.Equals(EntityID)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Equals(EntityID id)
    parameters:
    - id: id
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:EntityID.Equals(EntityID)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:EntityID.Equals(EntityID)</parameter>
          </include>
        </markup>
    content.vb: Public Function Equals(id As EntityID) As Boolean
  overload: Global.EntityID.Equals*
- uid: Global.EntityID.GetHashCode
  commentId: M:Global.EntityID.GetHashCode
  id: GetHashCode
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: EntityID.GetHashCode()
  fullName: EntityID.GetHashCode()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.GetHashCode</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:EntityID.GetHashCode</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: Global.EntityID.GetHashCode*
- uid: Global.EntityID.op_Equality(EntityID,EntityID)
  commentId: M:Global.EntityID.op_Equality(EntityID,EntityID)
  id: op_Equality(EntityID,EntityID)
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: operator ==(EntityID, EntityID)
  nameWithType: EntityID.operator ==(EntityID, EntityID)
  fullName: EntityID.operator ==(EntityID, EntityID)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.op_Equality(EntityID,EntityID)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator ==(EntityID x, EntityID y)
    parameters:
    - id: x
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:EntityID.op_Equality(EntityID,EntityID)</parameter>
          </include>
        </markup>
    - id: y
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:EntityID.op_Equality(EntityID,EntityID)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:EntityID.op_Equality(EntityID,EntityID)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator =(x As EntityID, y As EntityID) As Boolean
  overload: Global.EntityID.op_Equality*
  nameWithType.vb: EntityID.=(EntityID, EntityID)
  fullName.vb: EntityID.=(EntityID, EntityID)
  name.vb: =(EntityID, EntityID)
- uid: Global.EntityID.op_Inequality(EntityID,EntityID)
  commentId: M:Global.EntityID.op_Inequality(EntityID,EntityID)
  id: op_Inequality(EntityID,EntityID)
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: operator !=(EntityID, EntityID)
  nameWithType: EntityID.operator !=(EntityID, EntityID)
  fullName: EntityID.operator !=(EntityID, EntityID)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.op_Inequality(EntityID,EntityID)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator !=(EntityID x, EntityID y)
    parameters:
    - id: x
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:EntityID.op_Inequality(EntityID,EntityID)</parameter>
          </include>
        </markup>
    - id: y
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:EntityID.op_Inequality(EntityID,EntityID)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:EntityID.op_Inequality(EntityID,EntityID)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator <>(x As EntityID, y As EntityID) As Boolean
  overload: Global.EntityID.op_Inequality*
  nameWithType.vb: EntityID.<>(EntityID, EntityID)
  fullName.vb: EntityID.<>(EntityID, EntityID)
  name.vb: <>(EntityID, EntityID)
- uid: Global.EntityID.ToString
  commentId: M:Global.EntityID.ToString
  id: ToString
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: EntityID.ToString()
  fullName: EntityID.ToString()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.ToString</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:EntityID.ToString</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: Global.EntityID.ToString*
- uid: Global.EntityID.FromString(System.String)
  commentId: M:Global.EntityID.FromString(System.String)
  id: FromString(System.String)
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: FromString(string)
  nameWithType: EntityID.FromString(string)
  fullName: EntityID.FromString(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.FromString(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static EntityID FromString(string s)
    parameters:
    - id: s
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>s</parameter>
            <parameter>M:EntityID.FromString(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:EntityID.FromString(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function FromString(s As String) As EntityID
  overload: Global.EntityID.FromString*
  nameWithType.vb: EntityID.FromString(String)
  fullName.vb: EntityID.FromString(String)
  name.vb: FromString(String)
- uid: Global.EntityID.setAltSeed(System.Int32)
  commentId: M:Global.EntityID.setAltSeed(System.Int32)
  id: setAltSeed(System.Int32)
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: setAltSeed(int)
  nameWithType: EntityID.setAltSeed(int)
  fullName: EntityID.setAltSeed(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:EntityID.setAltSeed(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void setAltSeed(int seed)
    parameters:
    - id: seed
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>seed</parameter>
            <parameter>M:EntityID.setAltSeed(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub setAltSeed(seed As Integer)
  overload: Global.EntityID.setAltSeed*
  nameWithType.vb: EntityID.setAltSeed(Integer)
  fullName.vb: EntityID.setAltSeed(Integer)
  name.vb: setAltSeed(Integer)
- uid: Global.EntityID.RandomSeed
  commentId: P:Global.EntityID.RandomSeed
  id: RandomSeed
  parent: Global.EntityID
  langs:
  - csharp
  - vb
  name: RandomSeed
  nameWithType: EntityID.RandomSeed
  fullName: EntityID.RandomSeed
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:EntityID.RandomSeed</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int RandomSeed { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property RandomSeed As Integer
  overload: Global.EntityID.RandomSeed*
references:
- uid: Global
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.EntityID.#ctor*
  commentId: Overload:Global.EntityID.#ctor
  isExternal: true
  href: Global.EntityID.html#EntityID__ctor_System_Int32_System_Int32_
  name: EntityID
  nameWithType: EntityID.EntityID
  fullName: EntityID.EntityID
  nameWithType.vb: EntityID.New
  fullName.vb: EntityID.New
  name.vb: New
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.EntityID.Equals*
  commentId: Overload:Global.EntityID.Equals
  isExternal: true
  href: Global.EntityID.html#EntityID_Equals_System_Object_
  name: Equals
  nameWithType: EntityID.Equals
  fullName: EntityID.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: Global.EntityID
  commentId: T:Global.EntityID
  isExternal: true
  href: EntityID.html
  name: EntityID
  nameWithType: EntityID
  fullName: EntityID
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: Global.EntityID.GetHashCode*
  commentId: Overload:Global.EntityID.GetHashCode
  isExternal: true
  href: Global.EntityID.html#EntityID_GetHashCode
  name: GetHashCode
  nameWithType: EntityID.GetHashCode
  fullName: EntityID.GetHashCode
- uid: Global.EntityID.op_Equality*
  commentId: Overload:Global.EntityID.op_Equality
  isExternal: true
  href: Global.EntityID.html#EntityID_op_Equality_EntityID_EntityID_
  name: operator ==
  nameWithType: EntityID.operator ==
  fullName: EntityID.operator ==
  nameWithType.vb: EntityID.=
  fullName.vb: EntityID.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.EntityID.op_Equality*
    name: ==
    isExternal: true
    href: Global.EntityID.html#EntityID_op_Equality_EntityID_EntityID_
- uid: Global.EntityID.op_Inequality*
  commentId: Overload:Global.EntityID.op_Inequality
  isExternal: true
  href: Global.EntityID.html#EntityID_op_Inequality_EntityID_EntityID_
  name: operator !=
  nameWithType: EntityID.operator !=
  fullName: EntityID.operator !=
  nameWithType.vb: EntityID.<>
  fullName.vb: EntityID.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Global.EntityID.op_Inequality*
    name: '!='
    isExternal: true
    href: Global.EntityID.html#EntityID_op_Inequality_EntityID_EntityID_
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: Global.EntityID.ToString*
  commentId: Overload:Global.EntityID.ToString
  isExternal: true
  href: Global.EntityID.html#EntityID_ToString
  name: ToString
  nameWithType: EntityID.ToString
  fullName: EntityID.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.EntityID.FromString*
  commentId: Overload:Global.EntityID.FromString
  isExternal: true
  href: Global.EntityID.html#EntityID_FromString_System_String_
  name: FromString
  nameWithType: EntityID.FromString
  fullName: EntityID.FromString
- uid: Global.EntityID.setAltSeed*
  commentId: Overload:Global.EntityID.setAltSeed
  isExternal: true
  href: Global.EntityID.html#EntityID_setAltSeed_System_Int32_
  name: setAltSeed
  nameWithType: EntityID.setAltSeed
  fullName: EntityID.setAltSeed
- uid: Global.EntityID.RandomSeed*
  commentId: Overload:Global.EntityID.RandomSeed
  isExternal: true
  href: Global.EntityID.html#EntityID_RandomSeed
  name: RandomSeed
  nameWithType: EntityID.RandomSeed
  fullName: EntityID.RandomSeed
