### YamlMime:ManagedReference
items:
- uid: Global.Options.ControlSetup
  commentId: T:Global.Options.ControlSetup
  id: Options.ControlSetup
  parent: Global
  children:
  - Global.Options.ControlSetup.#ctor(System.Int32,System.Boolean)
  - Global.Options.ControlSetup.FromString(System.String)
  - Global.Options.ControlSetup.GameActionMatchesTemplate(System.Int32,System.Boolean)
  - Global.Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)
  - Global.Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)
  - Global.Options.ControlSetup.GetActive
  - Global.Options.ControlSetup.GetActiveController
  - Global.Options.ControlSetup.GetActivePreset
  - Global.Options.ControlSetup.GetAnyButton
  - Global.Options.ControlSetup.GetAxis(System.Int32)
  - Global.Options.ControlSetup.GetButton(System.Int32)
  - Global.Options.ControlSetup.GetButtonDown(System.Int32)
  - Global.Options.ControlSetup.GetControlPreference
  - Global.Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)
  - Global.Options.ControlSetup.InitRewiredObjects
  - Global.Options.ControlSetup.InitiateControlSetup
  - Global.Options.ControlSetup.IsDefaultControlMapping(Rewired.ControllerMap)
  - Global.Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)
  - Global.Options.ControlSetup.KeyboardDown
  - Global.Options.ControlSetup.KeyboardJump
  - Global.Options.ControlSetup.KeyboardLeft
  - Global.Options.ControlSetup.KeyboardMap
  - Global.Options.ControlSetup.KeyboardPause
  - Global.Options.ControlSetup.KeyboardPickUp
  - Global.Options.ControlSetup.KeyboardRight
  - Global.Options.ControlSetup.KeyboardThrow
  - Global.Options.ControlSetup.KeyboardUp
  - Global.Options.ControlSetup.SaveAllControllerUserdata
  - Global.Options.ControlSetup.SetActive(System.Boolean)
  - Global.Options.ControlSetup.ToString
  - Global.Options.ControlSetup.UIActionMatchesTemplate(System.Int32,System.Boolean)
  - Global.Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Boolean)
  - Global.Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)
  - Global.Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse,System.Boolean)
  - Global.Options.ControlSetup.UpdateTemplateToMatchControllers
  - Global.Options.ControlSetup.controlSetupInitialized
  - Global.Options.ControlSetup.gameControlMap
  - Global.Options.ControlSetup.gamePad
  - Global.Options.ControlSetup.gamePadGuid
  - Global.Options.ControlSetup.gamePadNumber
  - Global.Options.ControlSetup.handler
  - Global.Options.ControlSetup.index
  - Global.Options.ControlSetup.mouseButtonMappings
  - Global.Options.ControlSetup.player
  - Global.Options.ControlSetup.uiControlMap
  - Global.Options.ControlSetup.unrecognizedControlAttrs
  - Global.Options.ControlSetup.usingGamePadNumber
  - Global.Options.ControlSetup.xInvert
  - Global.Options.ControlSetup.yInvert
  langs:
  - csharp
  - vb
  name: Options.ControlSetup
  nameWithType: Options.ControlSetup
  fullName: Options.ControlSetup
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Options.ControlSetup</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class Options.ControlSetup
    content.vb: Public Class Options.ControlSetup
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.Options.ControlSetup.player
  commentId: F:Global.Options.ControlSetup.player
  id: player
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: player
  nameWithType: Options.ControlSetup.player
  fullName: Options.ControlSetup.player
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.player</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Player player
    return:
      type: Rewired.Player
    content.vb: Public player As Player
- uid: Global.Options.ControlSetup.handler
  commentId: F:Global.Options.ControlSetup.handler
  id: handler
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: handler
  nameWithType: Options.ControlSetup.handler
  fullName: Options.ControlSetup.handler
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.handler</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PlayerHandler handler
    return:
      type: Global.PlayerHandler
    content.vb: Public handler As PlayerHandler
- uid: Global.Options.ControlSetup.index
  commentId: F:Global.Options.ControlSetup.index
  id: index
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: index
  nameWithType: Options.ControlSetup.index
  fullName: Options.ControlSetup.index
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.index</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int index
    return:
      type: System.Int32
    content.vb: Public index As Integer
- uid: Global.Options.ControlSetup.xInvert
  commentId: F:Global.Options.ControlSetup.xInvert
  id: xInvert
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: xInvert
  nameWithType: Options.ControlSetup.xInvert
  fullName: Options.ControlSetup.xInvert
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.xInvert</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool xInvert
    return:
      type: System.Boolean
    content.vb: Public xInvert As Boolean
- uid: Global.Options.ControlSetup.yInvert
  commentId: F:Global.Options.ControlSetup.yInvert
  id: yInvert
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: yInvert
  nameWithType: Options.ControlSetup.yInvert
  fullName: Options.ControlSetup.yInvert
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.yInvert</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool yInvert
    return:
      type: System.Boolean
    content.vb: Public yInvert As Boolean
- uid: Global.Options.ControlSetup.controlSetupInitialized
  commentId: F:Global.Options.ControlSetup.controlSetupInitialized
  id: controlSetupInitialized
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: controlSetupInitialized
  nameWithType: Options.ControlSetup.controlSetupInitialized
  fullName: Options.ControlSetup.controlSetupInitialized
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.controlSetupInitialized</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool controlSetupInitialized
    return:
      type: System.Boolean
    content.vb: Public controlSetupInitialized As Boolean
- uid: Global.Options.ControlSetup.mouseButtonMappings
  commentId: F:Global.Options.ControlSetup.mouseButtonMappings
  id: mouseButtonMappings
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: mouseButtonMappings
  nameWithType: Options.ControlSetup.mouseButtonMappings
  fullName: Options.ControlSetup.mouseButtonMappings
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.mouseButtonMappings</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Dictionary<string, int> mouseButtonMappings
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int32}
    content.vb: Public mouseButtonMappings As Dictionary(Of String, Integer)
- uid: Global.Options.ControlSetup.uiControlMap
  commentId: F:Global.Options.ControlSetup.uiControlMap
  id: uiControlMap
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: uiControlMap
  nameWithType: Options.ControlSetup.uiControlMap
  fullName: Options.ControlSetup.uiControlMap
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.uiControlMap</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ControllerMap uiControlMap
    return:
      type: Rewired.ControllerMap
    content.vb: Public uiControlMap As ControllerMap
- uid: Global.Options.ControlSetup.gameControlMap
  commentId: F:Global.Options.ControlSetup.gameControlMap
  id: gameControlMap
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: gameControlMap
  nameWithType: Options.ControlSetup.gameControlMap
  fullName: Options.ControlSetup.gameControlMap
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.gameControlMap</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ControllerMap gameControlMap
    return:
      type: Rewired.ControllerMap
    content.vb: Public gameControlMap As ControllerMap
- uid: Global.Options.ControlSetup.gamePadNumber
  commentId: F:Global.Options.ControlSetup.gamePadNumber
  id: gamePadNumber
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: gamePadNumber
  nameWithType: Options.ControlSetup.gamePadNumber
  fullName: Options.ControlSetup.gamePadNumber
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.gamePadNumber</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int gamePadNumber
    return:
      type: System.Int32
    content.vb: Public gamePadNumber As Integer
- uid: Global.Options.ControlSetup.gamePadGuid
  commentId: F:Global.Options.ControlSetup.gamePadGuid
  id: gamePadGuid
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: gamePadGuid
  nameWithType: Options.ControlSetup.gamePadGuid
  fullName: Options.ControlSetup.gamePadGuid
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.gamePadGuid</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string gamePadGuid
    return:
      type: System.String
    content.vb: Public gamePadGuid As String
- uid: Global.Options.ControlSetup.usingGamePadNumber
  commentId: F:Global.Options.ControlSetup.usingGamePadNumber
  id: usingGamePadNumber
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: usingGamePadNumber
  nameWithType: Options.ControlSetup.usingGamePadNumber
  fullName: Options.ControlSetup.usingGamePadNumber
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.usingGamePadNumber</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int usingGamePadNumber
    return:
      type: System.Int32
    content.vb: Public usingGamePadNumber As Integer
- uid: Global.Options.ControlSetup.unrecognizedControlAttrs
  commentId: F:Global.Options.ControlSetup.unrecognizedControlAttrs
  id: unrecognizedControlAttrs
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: unrecognizedControlAttrs
  nameWithType: Options.ControlSetup.unrecognizedControlAttrs
  fullName: Options.ControlSetup.unrecognizedControlAttrs
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Options.ControlSetup.unrecognizedControlAttrs</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string[] unrecognizedControlAttrs
    return:
      type: System.String[]
    content.vb: Public unrecognizedControlAttrs As String()
- uid: Global.Options.ControlSetup.#ctor(System.Int32,System.Boolean)
  commentId: M:Global.Options.ControlSetup.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: ControlSetup(int, bool)
  nameWithType: Options.ControlSetup.ControlSetup(int, bool)
  fullName: Options.ControlSetup.ControlSetup(int, bool)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Options.ControlSetup</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ControlSetup(int index, bool active)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Options.ControlSetup.#ctor(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: active
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>active</parameter>
            <parameter>M:Options.ControlSetup.#ctor(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(index As Integer, active As Boolean)
  overload: Global.Options.ControlSetup.#ctor*
  nameWithType.vb: Options.ControlSetup.New(Integer, Boolean)
  fullName.vb: Options.ControlSetup.New(Integer, Boolean)
  name.vb: New(Integer, Boolean)
- uid: Global.Options.ControlSetup.InitiateControlSetup
  commentId: M:Global.Options.ControlSetup.InitiateControlSetup
  id: InitiateControlSetup
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: InitiateControlSetup()
  nameWithType: Options.ControlSetup.InitiateControlSetup()
  fullName: Options.ControlSetup.InitiateControlSetup()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.InitiateControlSetup</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void InitiateControlSetup()
    content.vb: Public Sub InitiateControlSetup()
  overload: Global.Options.ControlSetup.InitiateControlSetup*
- uid: Global.Options.ControlSetup.InitRewiredObjects
  commentId: M:Global.Options.ControlSetup.InitRewiredObjects
  id: InitRewiredObjects
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: InitRewiredObjects()
  nameWithType: Options.ControlSetup.InitRewiredObjects()
  fullName: Options.ControlSetup.InitRewiredObjects()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.InitRewiredObjects</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void InitRewiredObjects()
    content.vb: Public Sub InitRewiredObjects()
  overload: Global.Options.ControlSetup.InitRewiredObjects*
- uid: Global.Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse,System.Boolean)
  commentId: M:Global.Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse,System.Boolean)
  id: UpdateControlPreference(Options.ControlSetup.ControlToUse,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: UpdateControlPreference(ControlToUse, bool)
  nameWithType: Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse, bool)
  fullName: Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UpdateControlPreference(Options.ControlSetup.ControlToUse preference, bool forceUpdate = false)
    parameters:
    - id: preference
      type: Global.Options.ControlSetup.ControlToUse
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>preference</parameter>
            <parameter>M:Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse,System.Boolean)</parameter>
          </include>
        </markup>
    - id: forceUpdate
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forceUpdate</parameter>
            <parameter>M:Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub UpdateControlPreference(preference As Options.ControlSetup.ControlToUse, forceUpdate As Boolean = False)
  overload: Global.Options.ControlSetup.UpdateControlPreference*
  nameWithType.vb: Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse, Boolean)
  fullName.vb: Options.ControlSetup.UpdateControlPreference(Options.ControlSetup.ControlToUse, Boolean)
  name.vb: UpdateControlPreference(ControlToUse, Boolean)
- uid: Global.Options.ControlSetup.GetControlPreference
  commentId: M:Global.Options.ControlSetup.GetControlPreference
  id: GetControlPreference
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetControlPreference()
  nameWithType: Options.ControlSetup.GetControlPreference()
  fullName: Options.ControlSetup.GetControlPreference()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetControlPreference</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Options.ControlSetup.ControlToUse GetControlPreference()
    return:
      type: Global.Options.ControlSetup.ControlToUse
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetControlPreference</parameter>
          </include>
        </markup>
    content.vb: Public Function GetControlPreference() As Options.ControlSetup.ControlToUse
  overload: Global.Options.ControlSetup.GetControlPreference*
- uid: Global.Options.ControlSetup.SetActive(System.Boolean)
  commentId: M:Global.Options.ControlSetup.SetActive(System.Boolean)
  id: SetActive(System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: SetActive(bool)
  nameWithType: Options.ControlSetup.SetActive(bool)
  fullName: Options.ControlSetup.SetActive(bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.SetActive(System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SetActive(bool activeState)
    parameters:
    - id: activeState
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>activeState</parameter>
            <parameter>M:Options.ControlSetup.SetActive(System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SetActive(activeState As Boolean)
  overload: Global.Options.ControlSetup.SetActive*
  nameWithType.vb: Options.ControlSetup.SetActive(Boolean)
  fullName.vb: Options.ControlSetup.SetActive(Boolean)
  name.vb: SetActive(Boolean)
- uid: Global.Options.ControlSetup.GetActive
  commentId: M:Global.Options.ControlSetup.GetActive
  id: GetActive
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetActive()
  nameWithType: Options.ControlSetup.GetActive()
  fullName: Options.ControlSetup.GetActive()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetActive</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool GetActive()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetActive</parameter>
          </include>
        </markup>
    content.vb: Public Function GetActive() As Boolean
  overload: Global.Options.ControlSetup.GetActive*
- uid: Global.Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Boolean)
  commentId: M:Global.Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Boolean)
  id: UpdateActiveController(Rewired.Controller,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: UpdateActiveController(Controller, bool)
  nameWithType: Options.ControlSetup.UpdateActiveController(Controller, bool)
  fullName: Options.ControlSetup.UpdateActiveController(Rewired.Controller, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UpdateActiveController(Controller newController, bool forceUpdate = false)
    parameters:
    - id: newController
      type: Rewired.Controller
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newController</parameter>
            <parameter>M:Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Boolean)</parameter>
          </include>
        </markup>
    - id: forceUpdate
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forceUpdate</parameter>
            <parameter>M:Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub UpdateActiveController(newController As Controller, forceUpdate As Boolean = False)
  overload: Global.Options.ControlSetup.UpdateActiveController*
  nameWithType.vb: Options.ControlSetup.UpdateActiveController(Controller, Boolean)
  fullName.vb: Options.ControlSetup.UpdateActiveController(Rewired.Controller, Boolean)
  name.vb: UpdateActiveController(Controller, Boolean)
- uid: Global.Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)
  commentId: M:Global.Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)
  id: UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: UpdateActiveController(Controller, int, bool)
  nameWithType: Options.ControlSetup.UpdateActiveController(Controller, int, bool)
  fullName: Options.ControlSetup.UpdateActiveController(Rewired.Controller, int, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UpdateActiveController(Controller newController, int controllerIndex, bool forceUpdate = false)
    parameters:
    - id: newController
      type: Rewired.Controller
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newController</parameter>
            <parameter>M:Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: controllerIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>controllerIndex</parameter>
            <parameter>M:Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: forceUpdate
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forceUpdate</parameter>
            <parameter>M:Options.ControlSetup.UpdateActiveController(Rewired.Controller,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub UpdateActiveController(newController As Controller, controllerIndex As Integer, forceUpdate As Boolean = False)
  overload: Global.Options.ControlSetup.UpdateActiveController*
  nameWithType.vb: Options.ControlSetup.UpdateActiveController(Controller, Integer, Boolean)
  fullName.vb: Options.ControlSetup.UpdateActiveController(Rewired.Controller, Integer, Boolean)
  name.vb: UpdateActiveController(Controller, Integer, Boolean)
- uid: Global.Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)
  commentId: M:Global.Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)
  id: GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetFirstMapInCategory(MapHelper, ControllerType, int, int)
  nameWithType: Options.ControlSetup.GetFirstMapInCategory(Player.ControllerHelper.MapHelper, ControllerType, int, int)
  fullName: Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper, Rewired.ControllerType, int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static ControllerMap GetFirstMapInCategory(Player.ControllerHelper.MapHelper maps, ControllerType ctype, int controllerId, int categoryId)
    parameters:
    - id: maps
      type: Rewired.Player.ControllerHelper.MapHelper
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maps</parameter>
            <parameter>M:Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: ctype
      type: Rewired.ControllerType
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ctype</parameter>
            <parameter>M:Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: controllerId
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>controllerId</parameter>
            <parameter>M:Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: categoryId
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>categoryId</parameter>
            <parameter>M:Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Rewired.ControllerMap
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper,Rewired.ControllerType,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetFirstMapInCategory(maps As Player.ControllerHelper.MapHelper, [ctype] As ControllerType, controllerId As Integer, categoryId As Integer) As ControllerMap
  overload: Global.Options.ControlSetup.GetFirstMapInCategory*
  nameWithType.vb: Options.ControlSetup.GetFirstMapInCategory(Player.ControllerHelper.MapHelper, ControllerType, Integer, Integer)
  fullName.vb: Options.ControlSetup.GetFirstMapInCategory(Rewired.Player.ControllerHelper.MapHelper, Rewired.ControllerType, Integer, Integer)
  name.vb: GetFirstMapInCategory(MapHelper, ControllerType, Integer, Integer)
- uid: Global.Options.ControlSetup.SaveAllControllerUserdata
  commentId: M:Global.Options.ControlSetup.SaveAllControllerUserdata
  id: SaveAllControllerUserdata
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: SaveAllControllerUserdata()
  nameWithType: Options.ControlSetup.SaveAllControllerUserdata()
  fullName: Options.ControlSetup.SaveAllControllerUserdata()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.SaveAllControllerUserdata</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void SaveAllControllerUserdata()
    content.vb: Public Shared Sub SaveAllControllerUserdata()
  overload: Global.Options.ControlSetup.SaveAllControllerUserdata*
- uid: Global.Options.ControlSetup.GetActiveController
  commentId: M:Global.Options.ControlSetup.GetActiveController
  id: GetActiveController
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetActiveController()
  nameWithType: Options.ControlSetup.GetActiveController()
  fullName: Options.ControlSetup.GetActiveController()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetActiveController</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Controller GetActiveController()
    return:
      type: Rewired.Controller
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetActiveController</parameter>
          </include>
        </markup>
    content.vb: Public Function GetActiveController() As Controller
  overload: Global.Options.ControlSetup.GetActiveController*
- uid: Global.Options.ControlSetup.GetActivePreset
  commentId: M:Global.Options.ControlSetup.GetActivePreset
  id: GetActivePreset
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetActivePreset()
  nameWithType: Options.ControlSetup.GetActivePreset()
  fullName: Options.ControlSetup.GetActivePreset()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetActivePreset</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Options.ControlSetup.Preset GetActivePreset()
    return:
      type: Global.Options.ControlSetup.Preset
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetActivePreset</parameter>
          </include>
        </markup>
    content.vb: Public Function GetActivePreset() As Options.ControlSetup.Preset
  overload: Global.Options.ControlSetup.GetActivePreset*
- uid: Global.Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)
  commentId: M:Global.Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)
  id: GetActionElement(System.Int32,System.Int32,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetActionElement(int, int, bool)
  nameWithType: Options.ControlSetup.GetActionElement(int, int, bool)
  fullName: Options.ControlSetup.GetActionElement(int, int, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ActionElementMap GetActionElement(int actionID, int categoryID, bool axisPositive = true)
    parameters:
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: categoryID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>categoryID</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: axisPositive
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axisPositive</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: Rewired.ActionElementMap
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetActionElement(actionID As Integer, categoryID As Integer, axisPositive As Boolean = True) As ActionElementMap
  overload: Global.Options.ControlSetup.GetActionElement*
  nameWithType.vb: Options.ControlSetup.GetActionElement(Integer, Integer, Boolean)
  fullName.vb: Options.ControlSetup.GetActionElement(Integer, Integer, Boolean)
  name.vb: GetActionElement(Integer, Integer, Boolean)
- uid: Global.Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)
  commentId: M:Global.Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)
  id: GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetActionElement(ControllerMap, int, bool)
  nameWithType: Options.ControlSetup.GetActionElement(ControllerMap, int, bool)
  fullName: Options.ControlSetup.GetActionElement(Rewired.ControllerMap, int, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static ActionElementMap GetActionElement(ControllerMap cmap, int actionID, bool axisPositive = true)
    parameters:
    - id: cmap
      type: Rewired.ControllerMap
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cmap</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: axisPositive
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axisPositive</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: Rewired.ActionElementMap
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetActionElement(Rewired.ControllerMap,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetActionElement(cmap As ControllerMap, actionID As Integer, axisPositive As Boolean = True) As ActionElementMap
  overload: Global.Options.ControlSetup.GetActionElement*
  nameWithType.vb: Options.ControlSetup.GetActionElement(ControllerMap, Integer, Boolean)
  fullName.vb: Options.ControlSetup.GetActionElement(Rewired.ControllerMap, Integer, Boolean)
  name.vb: GetActionElement(ControllerMap, Integer, Boolean)
- uid: Global.Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)
  commentId: M:Global.Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)
  id: KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyCodeFromAction(int, int, bool)
  nameWithType: Options.ControlSetup.KeyCodeFromAction(int, int, bool)
  fullName: Options.ControlSetup.KeyCodeFromAction(int, int, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyCodeFromAction(int actionID, int categoryID, bool axisPositive = true)
    parameters:
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: categoryID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>categoryID</parameter>
            <parameter>M:Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: axisPositive
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axisPositive</parameter>
            <parameter>M:Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.KeyCode
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.KeyCodeFromAction(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Function KeyCodeFromAction(actionID As Integer, categoryID As Integer, axisPositive As Boolean = True) As KeyCode
  overload: Global.Options.ControlSetup.KeyCodeFromAction*
  nameWithType.vb: Options.ControlSetup.KeyCodeFromAction(Integer, Integer, Boolean)
  fullName.vb: Options.ControlSetup.KeyCodeFromAction(Integer, Integer, Boolean)
  name.vb: KeyCodeFromAction(Integer, Integer, Boolean)
- uid: Global.Options.ControlSetup.GetButton(System.Int32)
  commentId: M:Global.Options.ControlSetup.GetButton(System.Int32)
  id: GetButton(System.Int32)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetButton(int)
  nameWithType: Options.ControlSetup.GetButton(int)
  fullName: Options.ControlSetup.GetButton(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetButton(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool GetButton(int actionID)
    parameters:
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.GetButton(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetButton(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetButton(actionID As Integer) As Boolean
  overload: Global.Options.ControlSetup.GetButton*
  nameWithType.vb: Options.ControlSetup.GetButton(Integer)
  fullName.vb: Options.ControlSetup.GetButton(Integer)
  name.vb: GetButton(Integer)
- uid: Global.Options.ControlSetup.GetButtonDown(System.Int32)
  commentId: M:Global.Options.ControlSetup.GetButtonDown(System.Int32)
  id: GetButtonDown(System.Int32)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetButtonDown(int)
  nameWithType: Options.ControlSetup.GetButtonDown(int)
  fullName: Options.ControlSetup.GetButtonDown(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetButtonDown(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool GetButtonDown(int actionID)
    parameters:
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.GetButtonDown(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetButtonDown(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetButtonDown(actionID As Integer) As Boolean
  overload: Global.Options.ControlSetup.GetButtonDown*
  nameWithType.vb: Options.ControlSetup.GetButtonDown(Integer)
  fullName.vb: Options.ControlSetup.GetButtonDown(Integer)
  name.vb: GetButtonDown(Integer)
- uid: Global.Options.ControlSetup.GetAxis(System.Int32)
  commentId: M:Global.Options.ControlSetup.GetAxis(System.Int32)
  id: GetAxis(System.Int32)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetAxis(int)
  nameWithType: Options.ControlSetup.GetAxis(int)
  fullName: Options.ControlSetup.GetAxis(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetAxis(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float GetAxis(int actionID)
    parameters:
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.GetAxis(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetAxis(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAxis(actionID As Integer) As Single
  overload: Global.Options.ControlSetup.GetAxis*
  nameWithType.vb: Options.ControlSetup.GetAxis(Integer)
  fullName.vb: Options.ControlSetup.GetAxis(Integer)
  name.vb: GetAxis(Integer)
- uid: Global.Options.ControlSetup.GetAnyButton
  commentId: M:Global.Options.ControlSetup.GetAnyButton
  id: GetAnyButton
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GetAnyButton()
  nameWithType: Options.ControlSetup.GetAnyButton()
  fullName: Options.ControlSetup.GetAnyButton()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GetAnyButton</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool GetAnyButton()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GetAnyButton</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAnyButton() As Boolean
  overload: Global.Options.ControlSetup.GetAnyButton*
- uid: Global.Options.ControlSetup.GameActionMatchesTemplate(System.Int32,System.Boolean)
  commentId: M:Global.Options.ControlSetup.GameActionMatchesTemplate(System.Int32,System.Boolean)
  id: GameActionMatchesTemplate(System.Int32,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: GameActionMatchesTemplate(int, bool)
  nameWithType: Options.ControlSetup.GameActionMatchesTemplate(int, bool)
  fullName: Options.ControlSetup.GameActionMatchesTemplate(int, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.GameActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool GameActionMatchesTemplate(int actionID, bool axisPositive = true)
    parameters:
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.GameActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: axisPositive
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axisPositive</parameter>
            <parameter>M:Options.ControlSetup.GameActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.GameActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Function GameActionMatchesTemplate(actionID As Integer, axisPositive As Boolean = True) As Boolean
  overload: Global.Options.ControlSetup.GameActionMatchesTemplate*
  nameWithType.vb: Options.ControlSetup.GameActionMatchesTemplate(Integer, Boolean)
  fullName.vb: Options.ControlSetup.GameActionMatchesTemplate(Integer, Boolean)
  name.vb: GameActionMatchesTemplate(Integer, Boolean)
- uid: Global.Options.ControlSetup.UIActionMatchesTemplate(System.Int32,System.Boolean)
  commentId: M:Global.Options.ControlSetup.UIActionMatchesTemplate(System.Int32,System.Boolean)
  id: UIActionMatchesTemplate(System.Int32,System.Boolean)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: UIActionMatchesTemplate(int, bool)
  nameWithType: Options.ControlSetup.UIActionMatchesTemplate(int, bool)
  fullName: Options.ControlSetup.UIActionMatchesTemplate(int, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.UIActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool UIActionMatchesTemplate(int actionID, bool axisPositive = true)
    parameters:
    - id: actionID
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actionID</parameter>
            <parameter>M:Options.ControlSetup.UIActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    - id: axisPositive
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axisPositive</parameter>
            <parameter>M:Options.ControlSetup.UIActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.UIActionMatchesTemplate(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Function UIActionMatchesTemplate(actionID As Integer, axisPositive As Boolean = True) As Boolean
  overload: Global.Options.ControlSetup.UIActionMatchesTemplate*
  nameWithType.vb: Options.ControlSetup.UIActionMatchesTemplate(Integer, Boolean)
  fullName.vb: Options.ControlSetup.UIActionMatchesTemplate(Integer, Boolean)
  name.vb: UIActionMatchesTemplate(Integer, Boolean)
- uid: Global.Options.ControlSetup.UpdateTemplateToMatchControllers
  commentId: M:Global.Options.ControlSetup.UpdateTemplateToMatchControllers
  id: UpdateTemplateToMatchControllers
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: UpdateTemplateToMatchControllers()
  nameWithType: Options.ControlSetup.UpdateTemplateToMatchControllers()
  fullName: Options.ControlSetup.UpdateTemplateToMatchControllers()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.UpdateTemplateToMatchControllers</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UpdateTemplateToMatchControllers()
    content.vb: Public Sub UpdateTemplateToMatchControllers()
  overload: Global.Options.ControlSetup.UpdateTemplateToMatchControllers*
- uid: Global.Options.ControlSetup.IsDefaultControlMapping(Rewired.ControllerMap)
  commentId: M:Global.Options.ControlSetup.IsDefaultControlMapping(Rewired.ControllerMap)
  id: IsDefaultControlMapping(Rewired.ControllerMap)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: IsDefaultControlMapping(ControllerMap)
  nameWithType: Options.ControlSetup.IsDefaultControlMapping(ControllerMap)
  fullName: Options.ControlSetup.IsDefaultControlMapping(Rewired.ControllerMap)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.IsDefaultControlMapping(Rewired.ControllerMap)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsDefaultControlMapping(ControllerMap compareMap)
    parameters:
    - id: compareMap
      type: Rewired.ControllerMap
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>compareMap</parameter>
            <parameter>M:Options.ControlSetup.IsDefaultControlMapping(Rewired.ControllerMap)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.IsDefaultControlMapping(Rewired.ControllerMap)</parameter>
          </include>
        </markup>
    content.vb: Public Function IsDefaultControlMapping(compareMap As ControllerMap) As Boolean
  overload: Global.Options.ControlSetup.IsDefaultControlMapping*
- uid: Global.Options.ControlSetup.ToString
  commentId: M:Global.Options.ControlSetup.ToString
  id: ToString
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Options.ControlSetup.ToString()
  fullName: Options.ControlSetup.ToString()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.ToString</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Options.ControlSetup.ToString</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Global.Options.ControlSetup.ToString*
- uid: Global.Options.ControlSetup.FromString(System.String)
  commentId: M:Global.Options.ControlSetup.FromString(System.String)
  id: FromString(System.String)
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: FromString(string)
  nameWithType: Options.ControlSetup.FromString(string)
  fullName: Options.ControlSetup.FromString(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Options.ControlSetup.FromString(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void FromString(string s)
    parameters:
    - id: s
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>s</parameter>
            <parameter>M:Options.ControlSetup.FromString(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub FromString(s As String)
  overload: Global.Options.ControlSetup.FromString*
  nameWithType.vb: Options.ControlSetup.FromString(String)
  fullName.vb: Options.ControlSetup.FromString(String)
  name.vb: FromString(String)
- uid: Global.Options.ControlSetup.gamePad
  commentId: P:Global.Options.ControlSetup.gamePad
  id: gamePad
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: gamePad
  nameWithType: Options.ControlSetup.gamePad
  fullName: Options.ControlSetup.gamePad
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.gamePad</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool gamePad { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property gamePad As Boolean
  overload: Global.Options.ControlSetup.gamePad*
- uid: Global.Options.ControlSetup.KeyboardPause
  commentId: P:Global.Options.ControlSetup.KeyboardPause
  id: KeyboardPause
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardPause
  nameWithType: Options.ControlSetup.KeyboardPause
  fullName: Options.ControlSetup.KeyboardPause
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardPause</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardPause { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardPause As KeyCode
  overload: Global.Options.ControlSetup.KeyboardPause*
- uid: Global.Options.ControlSetup.KeyboardMap
  commentId: P:Global.Options.ControlSetup.KeyboardMap
  id: KeyboardMap
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardMap
  nameWithType: Options.ControlSetup.KeyboardMap
  fullName: Options.ControlSetup.KeyboardMap
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardMap</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardMap { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardMap As KeyCode
  overload: Global.Options.ControlSetup.KeyboardMap*
- uid: Global.Options.ControlSetup.KeyboardPickUp
  commentId: P:Global.Options.ControlSetup.KeyboardPickUp
  id: KeyboardPickUp
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardPickUp
  nameWithType: Options.ControlSetup.KeyboardPickUp
  fullName: Options.ControlSetup.KeyboardPickUp
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardPickUp</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardPickUp { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardPickUp As KeyCode
  overload: Global.Options.ControlSetup.KeyboardPickUp*
- uid: Global.Options.ControlSetup.KeyboardJump
  commentId: P:Global.Options.ControlSetup.KeyboardJump
  id: KeyboardJump
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardJump
  nameWithType: Options.ControlSetup.KeyboardJump
  fullName: Options.ControlSetup.KeyboardJump
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardJump</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardJump { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardJump As KeyCode
  overload: Global.Options.ControlSetup.KeyboardJump*
- uid: Global.Options.ControlSetup.KeyboardThrow
  commentId: P:Global.Options.ControlSetup.KeyboardThrow
  id: KeyboardThrow
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardThrow
  nameWithType: Options.ControlSetup.KeyboardThrow
  fullName: Options.ControlSetup.KeyboardThrow
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardThrow</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardThrow { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardThrow As KeyCode
  overload: Global.Options.ControlSetup.KeyboardThrow*
- uid: Global.Options.ControlSetup.KeyboardLeft
  commentId: P:Global.Options.ControlSetup.KeyboardLeft
  id: KeyboardLeft
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardLeft
  nameWithType: Options.ControlSetup.KeyboardLeft
  fullName: Options.ControlSetup.KeyboardLeft
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardLeft</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardLeft { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardLeft As KeyCode
  overload: Global.Options.ControlSetup.KeyboardLeft*
- uid: Global.Options.ControlSetup.KeyboardUp
  commentId: P:Global.Options.ControlSetup.KeyboardUp
  id: KeyboardUp
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardUp
  nameWithType: Options.ControlSetup.KeyboardUp
  fullName: Options.ControlSetup.KeyboardUp
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardUp</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardUp { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardUp As KeyCode
  overload: Global.Options.ControlSetup.KeyboardUp*
- uid: Global.Options.ControlSetup.KeyboardRight
  commentId: P:Global.Options.ControlSetup.KeyboardRight
  id: KeyboardRight
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardRight
  nameWithType: Options.ControlSetup.KeyboardRight
  fullName: Options.ControlSetup.KeyboardRight
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardRight</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardRight { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardRight As KeyCode
  overload: Global.Options.ControlSetup.KeyboardRight*
- uid: Global.Options.ControlSetup.KeyboardDown
  commentId: P:Global.Options.ControlSetup.KeyboardDown
  id: KeyboardDown
  parent: Global.Options.ControlSetup
  langs:
  - csharp
  - vb
  name: KeyboardDown
  nameWithType: Options.ControlSetup.KeyboardDown
  fullName: Options.ControlSetup.KeyboardDown
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Options.ControlSetup.KeyboardDown</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public KeyCode KeyboardDown { get; }
    parameters: []
    return:
      type: UnityEngine.KeyCode
    content.vb: Public ReadOnly Property KeyboardDown As KeyCode
  overload: Global.Options.ControlSetup.KeyboardDown*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Rewired.Player
  isExternal: true
  name: Player
  nameWithType: Player
  fullName: Rewired.Player
- uid: Global.PlayerHandler
  commentId: T:Global.PlayerHandler
  isExternal: true
  href: PlayerHandler.html
  name: PlayerHandler
  nameWithType: PlayerHandler
  fullName: PlayerHandler
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.Dictionary{System.String,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, int>
  nameWithType: Dictionary<string, int>
  fullName: System.Collections.Generic.Dictionary<string, int>
  nameWithType.vb: Dictionary(Of String, Integer)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, Integer)
  name.vb: Dictionary(Of String, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Rewired.ControllerMap
  isExternal: true
  name: ControllerMap
  nameWithType: ControllerMap
  fullName: Rewired.ControllerMap
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Global.Options.ControlSetup.#ctor*
  commentId: Overload:Global.Options.ControlSetup.#ctor
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup__ctor_System_Int32_System_Boolean_
  name: ControlSetup
  nameWithType: Options.ControlSetup.ControlSetup
  fullName: Options.ControlSetup.ControlSetup
  nameWithType.vb: Options.ControlSetup.New
  fullName.vb: Options.ControlSetup.New
  name.vb: New
- uid: Global.Options.ControlSetup.InitiateControlSetup*
  commentId: Overload:Global.Options.ControlSetup.InitiateControlSetup
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_InitiateControlSetup
  name: InitiateControlSetup
  nameWithType: Options.ControlSetup.InitiateControlSetup
  fullName: Options.ControlSetup.InitiateControlSetup
- uid: Global.Options.ControlSetup.InitRewiredObjects*
  commentId: Overload:Global.Options.ControlSetup.InitRewiredObjects
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_InitRewiredObjects
  name: InitRewiredObjects
  nameWithType: Options.ControlSetup.InitRewiredObjects
  fullName: Options.ControlSetup.InitRewiredObjects
- uid: Global.Options.ControlSetup.UpdateControlPreference*
  commentId: Overload:Global.Options.ControlSetup.UpdateControlPreference
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_UpdateControlPreference_Options_ControlSetup_ControlToUse_System_Boolean_
  name: UpdateControlPreference
  nameWithType: Options.ControlSetup.UpdateControlPreference
  fullName: Options.ControlSetup.UpdateControlPreference
- uid: Global.Options.ControlSetup.ControlToUse
  commentId: T:Global.Options.ControlSetup.ControlToUse
  isExternal: true
  href: Options.html
  name: Options.ControlSetup.ControlToUse
  nameWithType: Options.ControlSetup.ControlToUse
  fullName: Options.ControlSetup.ControlToUse
  spec.csharp:
  - uid: Global.Options
    name: Options
    isExternal: true
    href: Options.html
  - name: .
  - uid: Global.Options.ControlSetup
    name: ControlSetup
    isExternal: true
    href: Options.ControlSetup.html
  - name: .
  - uid: Global.Options.ControlSetup.ControlToUse
    name: ControlToUse
    isExternal: true
    href: Options.ControlSetup.ControlToUse.html
  spec.vb:
  - uid: Global.Options
    name: Options
    isExternal: true
    href: Options.html
  - name: .
  - uid: Global.Options.ControlSetup
    name: ControlSetup
    isExternal: true
    href: Options.ControlSetup.html
  - name: .
  - uid: Global.Options.ControlSetup.ControlToUse
    name: ControlToUse
    isExternal: true
    href: Options.ControlSetup.ControlToUse.html
- uid: Global.Options.ControlSetup.GetControlPreference*
  commentId: Overload:Global.Options.ControlSetup.GetControlPreference
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetControlPreference
  name: GetControlPreference
  nameWithType: Options.ControlSetup.GetControlPreference
  fullName: Options.ControlSetup.GetControlPreference
- uid: Global.Options.ControlSetup.SetActive*
  commentId: Overload:Global.Options.ControlSetup.SetActive
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_SetActive_System_Boolean_
  name: SetActive
  nameWithType: Options.ControlSetup.SetActive
  fullName: Options.ControlSetup.SetActive
- uid: Global.Options.ControlSetup.GetActive*
  commentId: Overload:Global.Options.ControlSetup.GetActive
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetActive
  name: GetActive
  nameWithType: Options.ControlSetup.GetActive
  fullName: Options.ControlSetup.GetActive
- uid: Global.Options.ControlSetup.UpdateActiveController*
  commentId: Overload:Global.Options.ControlSetup.UpdateActiveController
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_UpdateActiveController_Rewired_Controller_System_Boolean_
  name: UpdateActiveController
  nameWithType: Options.ControlSetup.UpdateActiveController
  fullName: Options.ControlSetup.UpdateActiveController
- uid: Rewired.Controller
  isExternal: true
  name: Controller
  nameWithType: Controller
  fullName: Rewired.Controller
- uid: Global.Options.ControlSetup.GetFirstMapInCategory*
  commentId: Overload:Global.Options.ControlSetup.GetFirstMapInCategory
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetFirstMapInCategory_Rewired_Player_ControllerHelper_MapHelper_Rewired_ControllerType_System_Int32_System_Int32_
  name: GetFirstMapInCategory
  nameWithType: Options.ControlSetup.GetFirstMapInCategory
  fullName: Options.ControlSetup.GetFirstMapInCategory
- uid: Rewired.Player.ControllerHelper.MapHelper
  commentId: '!:Rewired.Player.ControllerHelper.MapHelper'
  isExternal: true
  name: MapHelper
  nameWithType: Player.ControllerHelper.MapHelper
  fullName: Rewired.Player.ControllerHelper.MapHelper
- uid: Rewired.ControllerType
  isExternal: true
  name: ControllerType
  nameWithType: ControllerType
  fullName: Rewired.ControllerType
- uid: Global.Options.ControlSetup.SaveAllControllerUserdata*
  commentId: Overload:Global.Options.ControlSetup.SaveAllControllerUserdata
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_SaveAllControllerUserdata
  name: SaveAllControllerUserdata
  nameWithType: Options.ControlSetup.SaveAllControllerUserdata
  fullName: Options.ControlSetup.SaveAllControllerUserdata
- uid: Global.Options.ControlSetup.GetActiveController*
  commentId: Overload:Global.Options.ControlSetup.GetActiveController
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetActiveController
  name: GetActiveController
  nameWithType: Options.ControlSetup.GetActiveController
  fullName: Options.ControlSetup.GetActiveController
- uid: Global.Options.ControlSetup.GetActivePreset*
  commentId: Overload:Global.Options.ControlSetup.GetActivePreset
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetActivePreset
  name: GetActivePreset
  nameWithType: Options.ControlSetup.GetActivePreset
  fullName: Options.ControlSetup.GetActivePreset
- uid: Global.Options.ControlSetup.Preset
  commentId: T:Global.Options.ControlSetup.Preset
  isExternal: true
  href: Options.html
  name: Options.ControlSetup.Preset
  nameWithType: Options.ControlSetup.Preset
  fullName: Options.ControlSetup.Preset
  spec.csharp:
  - uid: Global.Options
    name: Options
    isExternal: true
    href: Options.html
  - name: .
  - uid: Global.Options.ControlSetup
    name: ControlSetup
    isExternal: true
    href: Options.ControlSetup.html
  - name: .
  - uid: Global.Options.ControlSetup.Preset
    name: Preset
    isExternal: true
    href: Options.ControlSetup.Preset.html
  spec.vb:
  - uid: Global.Options
    name: Options
    isExternal: true
    href: Options.html
  - name: .
  - uid: Global.Options.ControlSetup
    name: ControlSetup
    isExternal: true
    href: Options.ControlSetup.html
  - name: .
  - uid: Global.Options.ControlSetup.Preset
    name: Preset
    isExternal: true
    href: Options.ControlSetup.Preset.html
- uid: Global.Options.ControlSetup.GetActionElement*
  commentId: Overload:Global.Options.ControlSetup.GetActionElement
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetActionElement_System_Int32_System_Int32_System_Boolean_
  name: GetActionElement
  nameWithType: Options.ControlSetup.GetActionElement
  fullName: Options.ControlSetup.GetActionElement
- uid: Rewired.ActionElementMap
  isExternal: true
  name: ActionElementMap
  nameWithType: ActionElementMap
  fullName: Rewired.ActionElementMap
- uid: Global.Options.ControlSetup.KeyCodeFromAction*
  commentId: Overload:Global.Options.ControlSetup.KeyCodeFromAction
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyCodeFromAction_System_Int32_System_Int32_System_Boolean_
  name: KeyCodeFromAction
  nameWithType: Options.ControlSetup.KeyCodeFromAction
  fullName: Options.ControlSetup.KeyCodeFromAction
- uid: UnityEngine.KeyCode
  isExternal: true
  name: KeyCode
  nameWithType: KeyCode
  fullName: UnityEngine.KeyCode
- uid: Global.Options.ControlSetup.GetButton*
  commentId: Overload:Global.Options.ControlSetup.GetButton
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetButton_System_Int32_
  name: GetButton
  nameWithType: Options.ControlSetup.GetButton
  fullName: Options.ControlSetup.GetButton
- uid: Global.Options.ControlSetup.GetButtonDown*
  commentId: Overload:Global.Options.ControlSetup.GetButtonDown
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetButtonDown_System_Int32_
  name: GetButtonDown
  nameWithType: Options.ControlSetup.GetButtonDown
  fullName: Options.ControlSetup.GetButtonDown
- uid: Global.Options.ControlSetup.GetAxis*
  commentId: Overload:Global.Options.ControlSetup.GetAxis
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetAxis_System_Int32_
  name: GetAxis
  nameWithType: Options.ControlSetup.GetAxis
  fullName: Options.ControlSetup.GetAxis
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.Options.ControlSetup.GetAnyButton*
  commentId: Overload:Global.Options.ControlSetup.GetAnyButton
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GetAnyButton
  name: GetAnyButton
  nameWithType: Options.ControlSetup.GetAnyButton
  fullName: Options.ControlSetup.GetAnyButton
- uid: Global.Options.ControlSetup.GameActionMatchesTemplate*
  commentId: Overload:Global.Options.ControlSetup.GameActionMatchesTemplate
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_GameActionMatchesTemplate_System_Int32_System_Boolean_
  name: GameActionMatchesTemplate
  nameWithType: Options.ControlSetup.GameActionMatchesTemplate
  fullName: Options.ControlSetup.GameActionMatchesTemplate
- uid: Global.Options.ControlSetup.UIActionMatchesTemplate*
  commentId: Overload:Global.Options.ControlSetup.UIActionMatchesTemplate
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_UIActionMatchesTemplate_System_Int32_System_Boolean_
  name: UIActionMatchesTemplate
  nameWithType: Options.ControlSetup.UIActionMatchesTemplate
  fullName: Options.ControlSetup.UIActionMatchesTemplate
- uid: Global.Options.ControlSetup.UpdateTemplateToMatchControllers*
  commentId: Overload:Global.Options.ControlSetup.UpdateTemplateToMatchControllers
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_UpdateTemplateToMatchControllers
  name: UpdateTemplateToMatchControllers
  nameWithType: Options.ControlSetup.UpdateTemplateToMatchControllers
  fullName: Options.ControlSetup.UpdateTemplateToMatchControllers
- uid: Global.Options.ControlSetup.IsDefaultControlMapping*
  commentId: Overload:Global.Options.ControlSetup.IsDefaultControlMapping
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_IsDefaultControlMapping_Rewired_ControllerMap_
  name: IsDefaultControlMapping
  nameWithType: Options.ControlSetup.IsDefaultControlMapping
  fullName: Options.ControlSetup.IsDefaultControlMapping
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Global.Options.ControlSetup.ToString*
  commentId: Overload:Global.Options.ControlSetup.ToString
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_ToString
  name: ToString
  nameWithType: Options.ControlSetup.ToString
  fullName: Options.ControlSetup.ToString
- uid: Global.Options.ControlSetup.FromString*
  commentId: Overload:Global.Options.ControlSetup.FromString
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_FromString_System_String_
  name: FromString
  nameWithType: Options.ControlSetup.FromString
  fullName: Options.ControlSetup.FromString
- uid: Global.Options.ControlSetup.gamePad*
  commentId: Overload:Global.Options.ControlSetup.gamePad
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_gamePad
  name: gamePad
  nameWithType: Options.ControlSetup.gamePad
  fullName: Options.ControlSetup.gamePad
- uid: Global.Options.ControlSetup.KeyboardPause*
  commentId: Overload:Global.Options.ControlSetup.KeyboardPause
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardPause
  name: KeyboardPause
  nameWithType: Options.ControlSetup.KeyboardPause
  fullName: Options.ControlSetup.KeyboardPause
- uid: Global.Options.ControlSetup.KeyboardMap*
  commentId: Overload:Global.Options.ControlSetup.KeyboardMap
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardMap
  name: KeyboardMap
  nameWithType: Options.ControlSetup.KeyboardMap
  fullName: Options.ControlSetup.KeyboardMap
- uid: Global.Options.ControlSetup.KeyboardPickUp*
  commentId: Overload:Global.Options.ControlSetup.KeyboardPickUp
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardPickUp
  name: KeyboardPickUp
  nameWithType: Options.ControlSetup.KeyboardPickUp
  fullName: Options.ControlSetup.KeyboardPickUp
- uid: Global.Options.ControlSetup.KeyboardJump*
  commentId: Overload:Global.Options.ControlSetup.KeyboardJump
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardJump
  name: KeyboardJump
  nameWithType: Options.ControlSetup.KeyboardJump
  fullName: Options.ControlSetup.KeyboardJump
- uid: Global.Options.ControlSetup.KeyboardThrow*
  commentId: Overload:Global.Options.ControlSetup.KeyboardThrow
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardThrow
  name: KeyboardThrow
  nameWithType: Options.ControlSetup.KeyboardThrow
  fullName: Options.ControlSetup.KeyboardThrow
- uid: Global.Options.ControlSetup.KeyboardLeft*
  commentId: Overload:Global.Options.ControlSetup.KeyboardLeft
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardLeft
  name: KeyboardLeft
  nameWithType: Options.ControlSetup.KeyboardLeft
  fullName: Options.ControlSetup.KeyboardLeft
- uid: Global.Options.ControlSetup.KeyboardUp*
  commentId: Overload:Global.Options.ControlSetup.KeyboardUp
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardUp
  name: KeyboardUp
  nameWithType: Options.ControlSetup.KeyboardUp
  fullName: Options.ControlSetup.KeyboardUp
- uid: Global.Options.ControlSetup.KeyboardRight*
  commentId: Overload:Global.Options.ControlSetup.KeyboardRight
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardRight
  name: KeyboardRight
  nameWithType: Options.ControlSetup.KeyboardRight
  fullName: Options.ControlSetup.KeyboardRight
- uid: Global.Options.ControlSetup.KeyboardDown*
  commentId: Overload:Global.Options.ControlSetup.KeyboardDown
  isExternal: true
  href: Global.Options.ControlSetup.html#Options_ControlSetup_KeyboardDown
  name: KeyboardDown
  nameWithType: Options.ControlSetup.KeyboardDown
  fullName: Options.ControlSetup.KeyboardDown
