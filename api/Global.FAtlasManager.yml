### YamlMime:ManagedReference
items:
- uid: Global.FAtlasManager
  commentId: T:Global.FAtlasManager
  id: FAtlasManager
  parent: Global
  children:
  - Global.FAtlasManager.#ctor
  - Global.FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)
  - Global.FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)
  - Global.FAtlasManager.ActuallyUnloadAtlasOrImage(System.String)
  - Global.FAtlasManager.AddElement(FAtlasElement)
  - Global.FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)
  - Global.FAtlasManager.DoesContainAtlas(System.String)
  - Global.FAtlasManager.DoesContainElementWithName(System.String)
  - Global.FAtlasManager.DoesContainFontWithName(System.String)
  - Global.FAtlasManager.GetAtlasWithName(System.String)
  - Global.FAtlasManager.GetElementWithName(System.String)
  - Global.FAtlasManager.GetFontWithName(System.String)
  - Global.FAtlasManager.LoadAtlas(System.String)
  - Global.FAtlasManager.LoadAtlasFromAddress(System.String,System.String)
  - Global.FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)
  - Global.FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)
  - Global.FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)
  - Global.FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)
  - Global.FAtlasManager.LoadImage(System.String)
  - Global.FAtlasManager.LogAllElementNames
  - Global.FAtlasManager.UnloadAtlas(System.String)
  - Global.FAtlasManager.UnloadFont(System.String)
  - Global.FAtlasManager.UnloadImage(System.String)
  langs:
  - csharp
  - vb
  name: FAtlasManager
  nameWithType: FAtlasManager
  fullName: FAtlasManager
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FAtlasManager</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class FAtlasManager
    content.vb: Public Class FAtlasManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.FAtlasManager.#ctor
  commentId: M:Global.FAtlasManager.#ctor
  id: '#ctor'
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: FAtlasManager()
  nameWithType: FAtlasManager.FAtlasManager()
  fullName: FAtlasManager.FAtlasManager()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FAtlasManager</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlasManager()
    content.vb: Public Sub New()
  overload: Global.FAtlasManager.#ctor*
  nameWithType.vb: FAtlasManager.New()
  fullName.vb: FAtlasManager.New()
  name.vb: New()
- uid: Global.FAtlasManager.GetAtlasWithName(System.String)
  commentId: M:Global.FAtlasManager.GetAtlasWithName(System.String)
  id: GetAtlasWithName(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: GetAtlasWithName(string)
  nameWithType: FAtlasManager.GetAtlasWithName(string)
  fullName: FAtlasManager.GetAtlasWithName(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.GetAtlasWithName(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas GetAtlasWithName(string name)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.GetAtlasWithName(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.GetAtlasWithName(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAtlasWithName(name As String) As FAtlas
  overload: Global.FAtlasManager.GetAtlasWithName*
  nameWithType.vb: FAtlasManager.GetAtlasWithName(String)
  fullName.vb: FAtlasManager.GetAtlasWithName(String)
  name.vb: GetAtlasWithName(String)
- uid: Global.FAtlasManager.DoesContainAtlas(System.String)
  commentId: M:Global.FAtlasManager.DoesContainAtlas(System.String)
  id: DoesContainAtlas(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: DoesContainAtlas(string)
  nameWithType: FAtlasManager.DoesContainAtlas(string)
  fullName: FAtlasManager.DoesContainAtlas(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.DoesContainAtlas(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool DoesContainAtlas(string name)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.DoesContainAtlas(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.DoesContainAtlas(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function DoesContainAtlas(name As String) As Boolean
  overload: Global.FAtlasManager.DoesContainAtlas*
  nameWithType.vb: FAtlasManager.DoesContainAtlas(String)
  fullName.vb: FAtlasManager.DoesContainAtlas(String)
  name.vb: DoesContainAtlas(String)
- uid: Global.FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)
  commentId: M:Global.FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)
  id: LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LoadAtlasFromTexture(string, Texture, bool)
  nameWithType: FAtlasManager.LoadAtlasFromTexture(string, Texture, bool)
  fullName: FAtlasManager.LoadAtlasFromTexture(string, UnityEngine.Texture, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas LoadAtlasFromTexture(string name, Texture texture, bool textureFromAsset)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    - id: texture
      type: UnityEngine.Texture
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>texture</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    - id: textureFromAsset
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>textureFromAsset</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Function LoadAtlasFromTexture(name As String, texture As Texture, textureFromAsset As Boolean) As FAtlas
  overload: Global.FAtlasManager.LoadAtlasFromTexture*
  nameWithType.vb: FAtlasManager.LoadAtlasFromTexture(String, Texture, Boolean)
  fullName.vb: FAtlasManager.LoadAtlasFromTexture(String, UnityEngine.Texture, Boolean)
  name.vb: LoadAtlasFromTexture(String, Texture, Boolean)
- uid: Global.FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)
  commentId: M:Global.FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)
  id: LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LoadAtlasFromTexture(string, string, Texture, bool)
  nameWithType: FAtlasManager.LoadAtlasFromTexture(string, string, Texture, bool)
  fullName: FAtlasManager.LoadAtlasFromTexture(string, string, UnityEngine.Texture, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas LoadAtlasFromTexture(string name, string dataPath, Texture texture, bool textureFromAsset)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    - id: dataPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataPath</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    - id: texture
      type: UnityEngine.Texture
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>texture</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    - id: textureFromAsset
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>textureFromAsset</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromTexture(System.String,System.String,UnityEngine.Texture,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Function LoadAtlasFromTexture(name As String, dataPath As String, texture As Texture, textureFromAsset As Boolean) As FAtlas
  overload: Global.FAtlasManager.LoadAtlasFromTexture*
  nameWithType.vb: FAtlasManager.LoadAtlasFromTexture(String, String, Texture, Boolean)
  fullName.vb: FAtlasManager.LoadAtlasFromTexture(String, String, UnityEngine.Texture, Boolean)
  name.vb: LoadAtlasFromTexture(String, String, Texture, Boolean)
- uid: Global.FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)
  commentId: M:Global.FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)
  id: ActuallyLoadAtlasOrImage(System.String,System.String,System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: ActuallyLoadAtlasOrImage(string, string, string)
  nameWithType: FAtlasManager.ActuallyLoadAtlasOrImage(string, string, string)
  fullName: FAtlasManager.ActuallyLoadAtlasOrImage(string, string, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas ActuallyLoadAtlasOrImage(string name, string imagePath, string dataPath)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: imagePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>imagePath</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: dataPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataPath</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImage(System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function ActuallyLoadAtlasOrImage(name As String, imagePath As String, dataPath As String) As FAtlas
  overload: Global.FAtlasManager.ActuallyLoadAtlasOrImage*
  nameWithType.vb: FAtlasManager.ActuallyLoadAtlasOrImage(String, String, String)
  fullName.vb: FAtlasManager.ActuallyLoadAtlasOrImage(String, String, String)
  name.vb: ActuallyLoadAtlasOrImage(String, String, String)
- uid: Global.FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)
  commentId: M:Global.FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)
  id: ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: ActuallyLoadAtlasOrImageFromAddress(string, string, string, string)
  nameWithType: FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(string, string, string, string)
  fullName: FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(string, string, string, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas ActuallyLoadAtlasOrImageFromAddress(string name, string imagePath, string dataPath, string address)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: imagePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>imagePath</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: dataPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataPath</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: address
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>address</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(System.String,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function ActuallyLoadAtlasOrImageFromAddress(name As String, imagePath As String, dataPath As String, address As String) As FAtlas
  overload: Global.FAtlasManager.ActuallyLoadAtlasOrImageFromAddress*
  nameWithType.vb: FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(String, String, String, String)
  fullName.vb: FAtlasManager.ActuallyLoadAtlasOrImageFromAddress(String, String, String, String)
  name.vb: ActuallyLoadAtlasOrImageFromAddress(String, String, String, String)
- uid: Global.FAtlasManager.LoadAtlas(System.String)
  commentId: M:Global.FAtlasManager.LoadAtlas(System.String)
  id: LoadAtlas(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LoadAtlas(string)
  nameWithType: FAtlasManager.LoadAtlas(string)
  fullName: FAtlasManager.LoadAtlas(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LoadAtlas(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas LoadAtlas(string atlasPath)
    parameters:
    - id: atlasPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>atlasPath</parameter>
            <parameter>M:FAtlasManager.LoadAtlas(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.LoadAtlas(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function LoadAtlas(atlasPath As String) As FAtlas
  overload: Global.FAtlasManager.LoadAtlas*
  nameWithType.vb: FAtlasManager.LoadAtlas(String)
  fullName.vb: FAtlasManager.LoadAtlas(String)
  name.vb: LoadAtlas(String)
- uid: Global.FAtlasManager.LoadAtlasFromAddress(System.String,System.String)
  commentId: M:Global.FAtlasManager.LoadAtlasFromAddress(System.String,System.String)
  id: LoadAtlasFromAddress(System.String,System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LoadAtlasFromAddress(string, string)
  nameWithType: FAtlasManager.LoadAtlasFromAddress(string, string)
  fullName: FAtlasManager.LoadAtlasFromAddress(string, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LoadAtlasFromAddress(System.String,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas LoadAtlasFromAddress(string atlasPath, string addressablesPath)
    parameters:
    - id: atlasPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>atlasPath</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromAddress(System.String,System.String)</parameter>
          </include>
        </markup>
    - id: addressablesPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addressablesPath</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromAddress(System.String,System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.LoadAtlasFromAddress(System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function LoadAtlasFromAddress(atlasPath As String, addressablesPath As String) As FAtlas
  overload: Global.FAtlasManager.LoadAtlasFromAddress*
  nameWithType.vb: FAtlasManager.LoadAtlasFromAddress(String, String)
  fullName.vb: FAtlasManager.LoadAtlasFromAddress(String, String)
  name.vb: LoadAtlasFromAddress(String, String)
- uid: Global.FAtlasManager.LoadImage(System.String)
  commentId: M:Global.FAtlasManager.LoadImage(System.String)
  id: LoadImage(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LoadImage(string)
  nameWithType: FAtlasManager.LoadImage(string)
  fullName: FAtlasManager.LoadImage(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LoadImage(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlas LoadImage(string imagePath)
    parameters:
    - id: imagePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>imagePath</parameter>
            <parameter>M:FAtlasManager.LoadImage(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlas
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.LoadImage(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function LoadImage(imagePath As String) As FAtlas
  overload: Global.FAtlasManager.LoadImage*
  nameWithType.vb: FAtlasManager.LoadImage(String)
  fullName.vb: FAtlasManager.LoadImage(String)
  name.vb: LoadImage(String)
- uid: Global.FAtlasManager.ActuallyUnloadAtlasOrImage(System.String)
  commentId: M:Global.FAtlasManager.ActuallyUnloadAtlasOrImage(System.String)
  id: ActuallyUnloadAtlasOrImage(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: ActuallyUnloadAtlasOrImage(string)
  nameWithType: FAtlasManager.ActuallyUnloadAtlasOrImage(string)
  fullName: FAtlasManager.ActuallyUnloadAtlasOrImage(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.ActuallyUnloadAtlasOrImage(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ActuallyUnloadAtlasOrImage(string name)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.ActuallyUnloadAtlasOrImage(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ActuallyUnloadAtlasOrImage(name As String)
  overload: Global.FAtlasManager.ActuallyUnloadAtlasOrImage*
  nameWithType.vb: FAtlasManager.ActuallyUnloadAtlasOrImage(String)
  fullName.vb: FAtlasManager.ActuallyUnloadAtlasOrImage(String)
  name.vb: ActuallyUnloadAtlasOrImage(String)
- uid: Global.FAtlasManager.UnloadAtlas(System.String)
  commentId: M:Global.FAtlasManager.UnloadAtlas(System.String)
  id: UnloadAtlas(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: UnloadAtlas(string)
  nameWithType: FAtlasManager.UnloadAtlas(string)
  fullName: FAtlasManager.UnloadAtlas(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.UnloadAtlas(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UnloadAtlas(string atlasPath)
    parameters:
    - id: atlasPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>atlasPath</parameter>
            <parameter>M:FAtlasManager.UnloadAtlas(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub UnloadAtlas(atlasPath As String)
  overload: Global.FAtlasManager.UnloadAtlas*
  nameWithType.vb: FAtlasManager.UnloadAtlas(String)
  fullName.vb: FAtlasManager.UnloadAtlas(String)
  name.vb: UnloadAtlas(String)
- uid: Global.FAtlasManager.UnloadImage(System.String)
  commentId: M:Global.FAtlasManager.UnloadImage(System.String)
  id: UnloadImage(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: UnloadImage(string)
  nameWithType: FAtlasManager.UnloadImage(string)
  fullName: FAtlasManager.UnloadImage(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.UnloadImage(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UnloadImage(string imagePath)
    parameters:
    - id: imagePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>imagePath</parameter>
            <parameter>M:FAtlasManager.UnloadImage(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub UnloadImage(imagePath As String)
  overload: Global.FAtlasManager.UnloadImage*
  nameWithType.vb: FAtlasManager.UnloadImage(String)
  fullName.vb: FAtlasManager.UnloadImage(String)
  name.vb: UnloadImage(String)
- uid: Global.FAtlasManager.DoesContainElementWithName(System.String)
  commentId: M:Global.FAtlasManager.DoesContainElementWithName(System.String)
  id: DoesContainElementWithName(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: DoesContainElementWithName(string)
  nameWithType: FAtlasManager.DoesContainElementWithName(string)
  fullName: FAtlasManager.DoesContainElementWithName(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.DoesContainElementWithName(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool DoesContainElementWithName(string elementName)
    parameters:
    - id: elementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementName</parameter>
            <parameter>M:FAtlasManager.DoesContainElementWithName(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.DoesContainElementWithName(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function DoesContainElementWithName(elementName As String) As Boolean
  overload: Global.FAtlasManager.DoesContainElementWithName*
  nameWithType.vb: FAtlasManager.DoesContainElementWithName(String)
  fullName.vb: FAtlasManager.DoesContainElementWithName(String)
  name.vb: DoesContainElementWithName(String)
- uid: Global.FAtlasManager.GetElementWithName(System.String)
  commentId: M:Global.FAtlasManager.GetElementWithName(System.String)
  id: GetElementWithName(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: GetElementWithName(string)
  nameWithType: FAtlasManager.GetElementWithName(string)
  fullName: FAtlasManager.GetElementWithName(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.GetElementWithName(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FAtlasElement GetElementWithName(string elementName)
    parameters:
    - id: elementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementName</parameter>
            <parameter>M:FAtlasManager.GetElementWithName(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FAtlasElement
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.GetElementWithName(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetElementWithName(elementName As String) As FAtlasElement
  overload: Global.FAtlasManager.GetElementWithName*
  nameWithType.vb: FAtlasManager.GetElementWithName(String)
  fullName.vb: FAtlasManager.GetElementWithName(String)
  name.vb: GetElementWithName(String)
- uid: Global.FAtlasManager.DoesContainFontWithName(System.String)
  commentId: M:Global.FAtlasManager.DoesContainFontWithName(System.String)
  id: DoesContainFontWithName(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: DoesContainFontWithName(string)
  nameWithType: FAtlasManager.DoesContainFontWithName(string)
  fullName: FAtlasManager.DoesContainFontWithName(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.DoesContainFontWithName(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool DoesContainFontWithName(string fontName)
    parameters:
    - id: fontName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fontName</parameter>
            <parameter>M:FAtlasManager.DoesContainFontWithName(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.DoesContainFontWithName(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function DoesContainFontWithName(fontName As String) As Boolean
  overload: Global.FAtlasManager.DoesContainFontWithName*
  nameWithType.vb: FAtlasManager.DoesContainFontWithName(String)
  fullName.vb: FAtlasManager.DoesContainFontWithName(String)
  name.vb: DoesContainFontWithName(String)
- uid: Global.FAtlasManager.GetFontWithName(System.String)
  commentId: M:Global.FAtlasManager.GetFontWithName(System.String)
  id: GetFontWithName(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: GetFontWithName(string)
  nameWithType: FAtlasManager.GetFontWithName(string)
  fullName: FAtlasManager.GetFontWithName(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.GetFontWithName(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FFont GetFontWithName(string fontName)
    parameters:
    - id: fontName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fontName</parameter>
            <parameter>M:FAtlasManager.GetFontWithName(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.FFont
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FAtlasManager.GetFontWithName(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetFontWithName(fontName As String) As FFont
  overload: Global.FAtlasManager.GetFontWithName*
  nameWithType.vb: FAtlasManager.GetFontWithName(String)
  fullName.vb: FAtlasManager.GetFontWithName(String)
  name.vb: GetFontWithName(String)
- uid: Global.FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)
  commentId: M:Global.FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)
  id: LoadFont(System.String,System.String,System.String,System.Single,System.Single)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LoadFont(string, string, string, float, float)
  nameWithType: FAtlasManager.LoadFont(string, string, string, float, float)
  fullName: FAtlasManager.LoadFont(string, string, string, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LoadFont(string name, string elementName, string configPath, float offsetX, float offsetY)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: elementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementName</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: configPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>configPath</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: offsetX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offsetX</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: offsetY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offsetY</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub LoadFont(name As String, elementName As String, configPath As String, offsetX As Single, offsetY As Single)
  overload: Global.FAtlasManager.LoadFont*
  nameWithType.vb: FAtlasManager.LoadFont(String, String, String, Single, Single)
  fullName.vb: FAtlasManager.LoadFont(String, String, String, Single, Single)
  name.vb: LoadFont(String, String, String, Single, Single)
- uid: Global.FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)
  commentId: M:Global.FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)
  id: LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LoadFont(string, string, string, float, float, FTextParams, float)
  nameWithType: FAtlasManager.LoadFont(string, string, string, float, float, FTextParams, float)
  fullName: FAtlasManager.LoadFont(string, string, string, float, float, FTextParams, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LoadFont(string name, string elementName, string configPath, float offsetX, float offsetY, FTextParams textParams, float fontScale)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: elementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementName</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: configPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>configPath</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: offsetX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offsetX</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: offsetY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offsetY</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: textParams
      type: Global.FTextParams
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>textParams</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: fontScale
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fontScale</parameter>
            <parameter>M:FAtlasManager.LoadFont(System.String,System.String,System.String,System.Single,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub LoadFont(name As String, elementName As String, configPath As String, offsetX As Single, offsetY As Single, textParams As FTextParams, fontScale As Single)
  overload: Global.FAtlasManager.LoadFont*
  nameWithType.vb: FAtlasManager.LoadFont(String, String, String, Single, Single, FTextParams, Single)
  fullName.vb: FAtlasManager.LoadFont(String, String, String, Single, Single, FTextParams, Single)
  name.vb: LoadFont(String, String, String, Single, Single, FTextParams, Single)
- uid: Global.FAtlasManager.UnloadFont(System.String)
  commentId: M:Global.FAtlasManager.UnloadFont(System.String)
  id: UnloadFont(System.String)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: UnloadFont(string)
  nameWithType: FAtlasManager.UnloadFont(string)
  fullName: FAtlasManager.UnloadFont(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.UnloadFont(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UnloadFont(string name)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:FAtlasManager.UnloadFont(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub UnloadFont(name As String)
  overload: Global.FAtlasManager.UnloadFont*
  nameWithType.vb: FAtlasManager.UnloadFont(String)
  fullName.vb: FAtlasManager.UnloadFont(String)
  name.vb: UnloadFont(String)
- uid: Global.FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)
  commentId: M:Global.FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)
  id: CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: CombineFonts(string, string, string, string, float, FTextParams, float)
  nameWithType: FAtlasManager.CombineFonts(string, string, string, string, float, FTextParams, float)
  fullName: FAtlasManager.CombineFonts(string, string, string, string, float, FTextParams, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void CombineFonts(string baseFontName, string addFontName, string addElementName, string addConfigPath, float addOffsetY, FTextParams addTextParams, float addFontScale)
    parameters:
    - id: baseFontName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>baseFontName</parameter>
            <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: addFontName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addFontName</parameter>
            <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: addElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addElementName</parameter>
            <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: addConfigPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addConfigPath</parameter>
            <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: addOffsetY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addOffsetY</parameter>
            <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: addTextParams
      type: Global.FTextParams
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addTextParams</parameter>
            <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    - id: addFontScale
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addFontScale</parameter>
            <parameter>M:FAtlasManager.CombineFonts(System.String,System.String,System.String,System.String,System.Single,FTextParams,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub CombineFonts(baseFontName As String, addFontName As String, addElementName As String, addConfigPath As String, addOffsetY As Single, addTextParams As FTextParams, addFontScale As Single)
  overload: Global.FAtlasManager.CombineFonts*
  nameWithType.vb: FAtlasManager.CombineFonts(String, String, String, String, Single, FTextParams, Single)
  fullName.vb: FAtlasManager.CombineFonts(String, String, String, String, Single, FTextParams, Single)
  name.vb: CombineFonts(String, String, String, String, Single, FTextParams, Single)
- uid: Global.FAtlasManager.AddElement(FAtlasElement)
  commentId: M:Global.FAtlasManager.AddElement(FAtlasElement)
  id: AddElement(FAtlasElement)
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: AddElement(FAtlasElement)
  nameWithType: FAtlasManager.AddElement(FAtlasElement)
  fullName: FAtlasManager.AddElement(FAtlasElement)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.AddElement(FAtlasElement)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddElement(FAtlasElement element)
    parameters:
    - id: element
      type: Global.FAtlasElement
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>element</parameter>
            <parameter>M:FAtlasManager.AddElement(FAtlasElement)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddElement(element As FAtlasElement)
  overload: Global.FAtlasManager.AddElement*
- uid: Global.FAtlasManager.LogAllElementNames
  commentId: M:Global.FAtlasManager.LogAllElementNames
  id: LogAllElementNames
  parent: Global.FAtlasManager
  langs:
  - csharp
  - vb
  name: LogAllElementNames()
  nameWithType: FAtlasManager.LogAllElementNames()
  fullName: FAtlasManager.LogAllElementNames()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FAtlasManager.LogAllElementNames</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LogAllElementNames()
    content.vb: Public Sub LogAllElementNames()
  overload: Global.FAtlasManager.LogAllElementNames*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.FAtlasManager.#ctor*
  commentId: Overload:Global.FAtlasManager.#ctor
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager__ctor
  name: FAtlasManager
  nameWithType: FAtlasManager.FAtlasManager
  fullName: FAtlasManager.FAtlasManager
  nameWithType.vb: FAtlasManager.New
  fullName.vb: FAtlasManager.New
  name.vb: New
- uid: Global.FAtlasManager.GetAtlasWithName*
  commentId: Overload:Global.FAtlasManager.GetAtlasWithName
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_GetAtlasWithName_System_String_
  name: GetAtlasWithName
  nameWithType: FAtlasManager.GetAtlasWithName
  fullName: FAtlasManager.GetAtlasWithName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.FAtlas
  commentId: T:Global.FAtlas
  isExternal: true
  href: FAtlas.html
  name: FAtlas
  nameWithType: FAtlas
  fullName: FAtlas
- uid: Global.FAtlasManager.DoesContainAtlas*
  commentId: Overload:Global.FAtlasManager.DoesContainAtlas
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_DoesContainAtlas_System_String_
  name: DoesContainAtlas
  nameWithType: FAtlasManager.DoesContainAtlas
  fullName: FAtlasManager.DoesContainAtlas
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.FAtlasManager.LoadAtlasFromTexture*
  commentId: Overload:Global.FAtlasManager.LoadAtlasFromTexture
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_LoadAtlasFromTexture_System_String_UnityEngine_Texture_System_Boolean_
  name: LoadAtlasFromTexture
  nameWithType: FAtlasManager.LoadAtlasFromTexture
  fullName: FAtlasManager.LoadAtlasFromTexture
- uid: UnityEngine.Texture
  isExternal: true
  name: Texture
  nameWithType: Texture
  fullName: UnityEngine.Texture
- uid: Global.FAtlasManager.ActuallyLoadAtlasOrImage*
  commentId: Overload:Global.FAtlasManager.ActuallyLoadAtlasOrImage
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_ActuallyLoadAtlasOrImage_System_String_System_String_System_String_
  name: ActuallyLoadAtlasOrImage
  nameWithType: FAtlasManager.ActuallyLoadAtlasOrImage
  fullName: FAtlasManager.ActuallyLoadAtlasOrImage
- uid: Global.FAtlasManager.ActuallyLoadAtlasOrImageFromAddress*
  commentId: Overload:Global.FAtlasManager.ActuallyLoadAtlasOrImageFromAddress
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_ActuallyLoadAtlasOrImageFromAddress_System_String_System_String_System_String_System_String_
  name: ActuallyLoadAtlasOrImageFromAddress
  nameWithType: FAtlasManager.ActuallyLoadAtlasOrImageFromAddress
  fullName: FAtlasManager.ActuallyLoadAtlasOrImageFromAddress
- uid: Global.FAtlasManager.LoadAtlas*
  commentId: Overload:Global.FAtlasManager.LoadAtlas
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_LoadAtlas_System_String_
  name: LoadAtlas
  nameWithType: FAtlasManager.LoadAtlas
  fullName: FAtlasManager.LoadAtlas
- uid: Global.FAtlasManager.LoadAtlasFromAddress*
  commentId: Overload:Global.FAtlasManager.LoadAtlasFromAddress
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_LoadAtlasFromAddress_System_String_System_String_
  name: LoadAtlasFromAddress
  nameWithType: FAtlasManager.LoadAtlasFromAddress
  fullName: FAtlasManager.LoadAtlasFromAddress
- uid: Global.FAtlasManager.LoadImage*
  commentId: Overload:Global.FAtlasManager.LoadImage
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_LoadImage_System_String_
  name: LoadImage
  nameWithType: FAtlasManager.LoadImage
  fullName: FAtlasManager.LoadImage
- uid: Global.FAtlasManager.ActuallyUnloadAtlasOrImage*
  commentId: Overload:Global.FAtlasManager.ActuallyUnloadAtlasOrImage
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_ActuallyUnloadAtlasOrImage_System_String_
  name: ActuallyUnloadAtlasOrImage
  nameWithType: FAtlasManager.ActuallyUnloadAtlasOrImage
  fullName: FAtlasManager.ActuallyUnloadAtlasOrImage
- uid: Global.FAtlasManager.UnloadAtlas*
  commentId: Overload:Global.FAtlasManager.UnloadAtlas
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_UnloadAtlas_System_String_
  name: UnloadAtlas
  nameWithType: FAtlasManager.UnloadAtlas
  fullName: FAtlasManager.UnloadAtlas
- uid: Global.FAtlasManager.UnloadImage*
  commentId: Overload:Global.FAtlasManager.UnloadImage
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_UnloadImage_System_String_
  name: UnloadImage
  nameWithType: FAtlasManager.UnloadImage
  fullName: FAtlasManager.UnloadImage
- uid: Global.FAtlasManager.DoesContainElementWithName*
  commentId: Overload:Global.FAtlasManager.DoesContainElementWithName
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_DoesContainElementWithName_System_String_
  name: DoesContainElementWithName
  nameWithType: FAtlasManager.DoesContainElementWithName
  fullName: FAtlasManager.DoesContainElementWithName
- uid: Global.FAtlasManager.GetElementWithName*
  commentId: Overload:Global.FAtlasManager.GetElementWithName
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_GetElementWithName_System_String_
  name: GetElementWithName
  nameWithType: FAtlasManager.GetElementWithName
  fullName: FAtlasManager.GetElementWithName
- uid: Global.FAtlasElement
  commentId: T:Global.FAtlasElement
  isExternal: true
  href: FAtlasElement.html
  name: FAtlasElement
  nameWithType: FAtlasElement
  fullName: FAtlasElement
- uid: Global.FAtlasManager.DoesContainFontWithName*
  commentId: Overload:Global.FAtlasManager.DoesContainFontWithName
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_DoesContainFontWithName_System_String_
  name: DoesContainFontWithName
  nameWithType: FAtlasManager.DoesContainFontWithName
  fullName: FAtlasManager.DoesContainFontWithName
- uid: Global.FAtlasManager.GetFontWithName*
  commentId: Overload:Global.FAtlasManager.GetFontWithName
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_GetFontWithName_System_String_
  name: GetFontWithName
  nameWithType: FAtlasManager.GetFontWithName
  fullName: FAtlasManager.GetFontWithName
- uid: Global.FFont
  commentId: T:Global.FFont
  isExternal: true
  href: FFont.html
  name: FFont
  nameWithType: FFont
  fullName: FFont
- uid: Global.FAtlasManager.LoadFont*
  commentId: Overload:Global.FAtlasManager.LoadFont
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_LoadFont_System_String_System_String_System_String_System_Single_System_Single_
  name: LoadFont
  nameWithType: FAtlasManager.LoadFont
  fullName: FAtlasManager.LoadFont
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.FTextParams
  commentId: T:Global.FTextParams
  isExternal: true
  href: FTextParams.html
  name: FTextParams
  nameWithType: FTextParams
  fullName: FTextParams
- uid: Global.FAtlasManager.UnloadFont*
  commentId: Overload:Global.FAtlasManager.UnloadFont
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_UnloadFont_System_String_
  name: UnloadFont
  nameWithType: FAtlasManager.UnloadFont
  fullName: FAtlasManager.UnloadFont
- uid: Global.FAtlasManager.CombineFonts*
  commentId: Overload:Global.FAtlasManager.CombineFonts
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_CombineFonts_System_String_System_String_System_String_System_String_System_Single_FTextParams_System_Single_
  name: CombineFonts
  nameWithType: FAtlasManager.CombineFonts
  fullName: FAtlasManager.CombineFonts
- uid: Global.FAtlasManager.AddElement*
  commentId: Overload:Global.FAtlasManager.AddElement
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_AddElement_FAtlasElement_
  name: AddElement
  nameWithType: FAtlasManager.AddElement
  fullName: FAtlasManager.AddElement
- uid: Global.FAtlasManager.LogAllElementNames*
  commentId: Overload:Global.FAtlasManager.LogAllElementNames
  isExternal: true
  href: Global.FAtlasManager.html#FAtlasManager_LogAllElementNames
  name: LogAllElementNames
  nameWithType: FAtlasManager.LogAllElementNames
  fullName: FAtlasManager.LogAllElementNames
