### YamlMime:ManagedReference
items:
- uid: Global.Tentacle
  commentId: T:Global.Tentacle
  id: Tentacle
  parent: Global
  children:
  - Global.Tentacle.#ctor(PhysicalObject,BodyChunk,System.Single)
  - Global.Tentacle.BasePos
  - Global.Tentacle.CurrentLength
  - Global.Tentacle.FloatBase
  - Global.Tentacle.GravityDirection
  - Global.Tentacle.MoveBase(RWCustom.IntVector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  - Global.Tentacle.MoveGrabDest(UnityEngine.Vector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  - Global.Tentacle.NewRoom(Room)
  - Global.Tentacle.PushChunksApart(System.Int32,System.Int32)
  - Global.Tentacle.Reset(UnityEngine.Vector2)
  - Global.Tentacle.Tip
  - Global.Tentacle.TotalRope
  - Global.Tentacle.Update
  - Global.Tentacle.Visual(RWCustom.IntVector2,RWCustom.IntVector2)
  - Global.Tentacle.backtrackFrom
  - Global.Tentacle.connectedChunk
  - Global.Tentacle.debugViz
  - Global.Tentacle.floatGrabDest
  - Global.Tentacle.goForGoalPower
  - Global.Tentacle.grabDest
  - Global.Tentacle.grabPath
  - Global.Tentacle.grabPathSprites
  - Global.Tentacle.idealLength
  - Global.Tentacle.limp
  - Global.Tentacle.owner
  - Global.Tentacle.pullCounter
  - Global.Tentacle.pullsThisTick
  - Global.Tentacle.retractFac
  - Global.Tentacle.room
  - Global.Tentacle.segments
  - Global.Tentacle.sprites
  - Global.Tentacle.stretchAndSqueeze
  - Global.Tentacle.tChunks
  - Global.Tentacle.tProps
  langs:
  - csharp
  - vb
  name: Tentacle
  nameWithType: Tentacle
  fullName: Tentacle
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Tentacle</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class Tentacle
    content.vb: Public Class Tentacle
  inheritance:
  - System.Object
  derivedClasses:
  - Global.DaddyTentacle
  - Global.DeerTentacle
  - Global.VultureTentacle
  - Watcher.LoachLeg
  - Watcher.LoachTentacle
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.Tentacle.debugViz
  commentId: F:Global.Tentacle.debugViz
  id: debugViz
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: debugViz
  nameWithType: Tentacle.debugViz
  fullName: Tentacle.debugViz
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.debugViz</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool debugViz
    return:
      type: System.Boolean
    content.vb: Public debugViz As Boolean
- uid: Global.Tentacle.sprites
  commentId: F:Global.Tentacle.sprites
  id: sprites
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: sprites
  nameWithType: Tentacle.sprites
  fullName: Tentacle.sprites
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.sprites</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<DebugSprite> sprites
    return:
      type: System.Collections.Generic.List{DebugSprite}
    content.vb: Public sprites As List(Of DebugSprite)
- uid: Global.Tentacle.grabPathSprites
  commentId: F:Global.Tentacle.grabPathSprites
  id: grabPathSprites
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: grabPathSprites
  nameWithType: Tentacle.grabPathSprites
  fullName: Tentacle.grabPathSprites
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.grabPathSprites</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<DebugSprite> grabPathSprites
    return:
      type: System.Collections.Generic.List{DebugSprite}
    content.vb: Public grabPathSprites As List(Of DebugSprite)
- uid: Global.Tentacle.pullCounter
  commentId: F:Global.Tentacle.pullCounter
  id: pullCounter
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: pullCounter
  nameWithType: Tentacle.pullCounter
  fullName: Tentacle.pullCounter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.pullCounter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int pullCounter
    return:
      type: System.Int32
    content.vb: Public pullCounter As Integer
- uid: Global.Tentacle.floatGrabDest
  commentId: F:Global.Tentacle.floatGrabDest
  id: floatGrabDest
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: floatGrabDest
  nameWithType: Tentacle.floatGrabDest
  fullName: Tentacle.floatGrabDest
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.floatGrabDest</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2? floatGrabDest
    return:
      type: System.Nullable{UnityEngine.Vector2}
    content.vb: Public floatGrabDest As Vector2?
- uid: Global.Tentacle.grabPath
  commentId: F:Global.Tentacle.grabPath
  id: grabPath
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: grabPath
  nameWithType: Tentacle.grabPath
  fullName: Tentacle.grabPath
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.grabPath</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<IntVector2> grabPath
    return:
      type: System.Collections.Generic.List{RWCustom.IntVector2}
    content.vb: Public grabPath As List(Of IntVector2)
- uid: Global.Tentacle.segments
  commentId: F:Global.Tentacle.segments
  id: segments
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: segments
  nameWithType: Tentacle.segments
  fullName: Tentacle.segments
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.segments</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<IntVector2> segments
    return:
      type: System.Collections.Generic.List{RWCustom.IntVector2}
    content.vb: Public segments As List(Of IntVector2)
- uid: Global.Tentacle.room
  commentId: F:Global.Tentacle.room
  id: room
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: room
  nameWithType: Tentacle.room
  fullName: Tentacle.room
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.room</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Room room
    return:
      type: Global.Room
    content.vb: Public room As Room
- uid: Global.Tentacle.idealLength
  commentId: F:Global.Tentacle.idealLength
  id: idealLength
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: idealLength
  nameWithType: Tentacle.idealLength
  fullName: Tentacle.idealLength
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.idealLength</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float idealLength
    return:
      type: System.Single
    content.vb: Public idealLength As Single
- uid: Global.Tentacle.tChunks
  commentId: F:Global.Tentacle.tChunks
  id: tChunks
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: tChunks
  nameWithType: Tentacle.tChunks
  fullName: Tentacle.tChunks
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.tChunks</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Tentacle.TentacleChunk[] tChunks
    return:
      type: Global.Tentacle.TentacleChunk[]
    content.vb: Public tChunks As Tentacle.TentacleChunk()
- uid: Global.Tentacle.owner
  commentId: F:Global.Tentacle.owner
  id: owner
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: owner
  nameWithType: Tentacle.owner
  fullName: Tentacle.owner
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.owner</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PhysicalObject owner
    return:
      type: Global.PhysicalObject
    content.vb: Public owner As PhysicalObject
- uid: Global.Tentacle.pullsThisTick
  commentId: F:Global.Tentacle.pullsThisTick
  id: pullsThisTick
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: pullsThisTick
  nameWithType: Tentacle.pullsThisTick
  fullName: Tentacle.pullsThisTick
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.pullsThisTick</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int pullsThisTick
    return:
      type: System.Int32
    content.vb: Public pullsThisTick As Integer
- uid: Global.Tentacle.connectedChunk
  commentId: F:Global.Tentacle.connectedChunk
  id: connectedChunk
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: connectedChunk
  nameWithType: Tentacle.connectedChunk
  fullName: Tentacle.connectedChunk
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.connectedChunk</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public BodyChunk connectedChunk
    return:
      type: Global.BodyChunk
    content.vb: Public connectedChunk As BodyChunk
- uid: Global.Tentacle.stretchAndSqueeze
  commentId: F:Global.Tentacle.stretchAndSqueeze
  id: stretchAndSqueeze
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: stretchAndSqueeze
  nameWithType: Tentacle.stretchAndSqueeze
  fullName: Tentacle.stretchAndSqueeze
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.stretchAndSqueeze</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float stretchAndSqueeze
    return:
      type: System.Single
    content.vb: Public stretchAndSqueeze As Single
- uid: Global.Tentacle.goForGoalPower
  commentId: F:Global.Tentacle.goForGoalPower
  id: goForGoalPower
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: goForGoalPower
  nameWithType: Tentacle.goForGoalPower
  fullName: Tentacle.goForGoalPower
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.goForGoalPower</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float goForGoalPower
    return:
      type: System.Single
    content.vb: Public goForGoalPower As Single
- uid: Global.Tentacle.backtrackFrom
  commentId: F:Global.Tentacle.backtrackFrom
  id: backtrackFrom
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: backtrackFrom
  nameWithType: Tentacle.backtrackFrom
  fullName: Tentacle.backtrackFrom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.backtrackFrom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int backtrackFrom
    return:
      type: System.Int32
    content.vb: Public backtrackFrom As Integer
- uid: Global.Tentacle.limp
  commentId: F:Global.Tentacle.limp
  id: limp
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: limp
  nameWithType: Tentacle.limp
  fullName: Tentacle.limp
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.limp</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool limp
    return:
      type: System.Boolean
    content.vb: Public limp As Boolean
- uid: Global.Tentacle.tProps
  commentId: F:Global.Tentacle.tProps
  id: tProps
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: tProps
  nameWithType: Tentacle.tProps
  fullName: Tentacle.tProps
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Tentacle.tProps</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Tentacle.TentacleProps tProps
    return:
      type: Global.Tentacle.TentacleProps
    content.vb: Public tProps As Tentacle.TentacleProps
- uid: Global.Tentacle.#ctor(PhysicalObject,BodyChunk,System.Single)
  commentId: M:Global.Tentacle.#ctor(PhysicalObject,BodyChunk,System.Single)
  id: '#ctor(PhysicalObject,BodyChunk,System.Single)'
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: Tentacle(PhysicalObject, BodyChunk, float)
  nameWithType: Tentacle.Tentacle(PhysicalObject, BodyChunk, float)
  fullName: Tentacle.Tentacle(PhysicalObject, BodyChunk, float)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Tentacle</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Tentacle(PhysicalObject owner, BodyChunk connectedChunk, float length)
    parameters:
    - id: owner
      type: Global.PhysicalObject
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>owner</parameter>
            <parameter>M:Tentacle.#ctor(PhysicalObject,BodyChunk,System.Single)</parameter>
          </include>
        </markup>
    - id: connectedChunk
      type: Global.BodyChunk
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>connectedChunk</parameter>
            <parameter>M:Tentacle.#ctor(PhysicalObject,BodyChunk,System.Single)</parameter>
          </include>
        </markup>
    - id: length
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>length</parameter>
            <parameter>M:Tentacle.#ctor(PhysicalObject,BodyChunk,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(owner As PhysicalObject, connectedChunk As BodyChunk, length As Single)
  overload: Global.Tentacle.#ctor*
  nameWithType.vb: Tentacle.New(PhysicalObject, BodyChunk, Single)
  fullName.vb: Tentacle.New(PhysicalObject, BodyChunk, Single)
  name.vb: New(PhysicalObject, BodyChunk, Single)
- uid: Global.Tentacle.NewRoom(Room)
  commentId: M:Global.Tentacle.NewRoom(Room)
  id: NewRoom(Room)
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: NewRoom(Room)
  nameWithType: Tentacle.NewRoom(Room)
  fullName: Tentacle.NewRoom(Room)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.NewRoom(Room)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void NewRoom(Room room)
    parameters:
    - id: room
      type: Global.Room
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:Tentacle.NewRoom(Room)</parameter>
          </include>
        </markup>
    content.vb: Public Overridable Sub NewRoom(room As Room)
  overload: Global.Tentacle.NewRoom*
- uid: Global.Tentacle.Update
  commentId: M:Global.Tentacle.Update
  id: Update
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: Tentacle.Update()
  fullName: Tentacle.Update()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.Update</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void Update()
    content.vb: Public Overridable Sub Update()
  overload: Global.Tentacle.Update*
- uid: Global.Tentacle.MoveGrabDest(UnityEngine.Vector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  commentId: M:Global.Tentacle.MoveGrabDest(UnityEngine.Vector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  id: MoveGrabDest(UnityEngine.Vector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: MoveGrabDest(Vector2, ref List<IntVector2>)
  nameWithType: Tentacle.MoveGrabDest(Vector2, ref List<IntVector2>)
  fullName: Tentacle.MoveGrabDest(UnityEngine.Vector2, ref System.Collections.Generic.List<RWCustom.IntVector2>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.MoveGrabDest(UnityEngine.Vector2,System.Collections.Generic.List{RWCustom.IntVector2}@)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveGrabDest(Vector2 newGrabDest, ref List<IntVector2> path)
    parameters:
    - id: newGrabDest
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newGrabDest</parameter>
            <parameter>M:Tentacle.MoveGrabDest(UnityEngine.Vector2,System.Collections.Generic.List{RWCustom.IntVector2}@)</parameter>
          </include>
        </markup>
    - id: path
      type: System.Collections.Generic.List{RWCustom.IntVector2}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:Tentacle.MoveGrabDest(UnityEngine.Vector2,System.Collections.Generic.List{RWCustom.IntVector2}@)</parameter>
          </include>
        </markup>
    content.vb: Public Sub MoveGrabDest(newGrabDest As Vector2, path As List(Of IntVector2))
  overload: Global.Tentacle.MoveGrabDest*
  nameWithType.vb: Tentacle.MoveGrabDest(Vector2, List(Of IntVector2))
  fullName.vb: Tentacle.MoveGrabDest(UnityEngine.Vector2, System.Collections.Generic.List(Of RWCustom.IntVector2))
  name.vb: MoveGrabDest(Vector2, List(Of IntVector2))
- uid: Global.Tentacle.Visual(RWCustom.IntVector2,RWCustom.IntVector2)
  commentId: M:Global.Tentacle.Visual(RWCustom.IntVector2,RWCustom.IntVector2)
  id: Visual(RWCustom.IntVector2,RWCustom.IntVector2)
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: Visual(IntVector2, IntVector2)
  nameWithType: Tentacle.Visual(IntVector2, IntVector2)
  fullName: Tentacle.Visual(RWCustom.IntVector2, RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.Visual(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected bool Visual(IntVector2 a, IntVector2 b)
    parameters:
    - id: a
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Tentacle.Visual(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    - id: b
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Tentacle.Visual(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Tentacle.Visual(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Protected Function Visual(a As IntVector2, b As IntVector2) As Boolean
  overload: Global.Tentacle.Visual*
- uid: Global.Tentacle.MoveBase(RWCustom.IntVector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  commentId: M:Global.Tentacle.MoveBase(RWCustom.IntVector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  id: MoveBase(RWCustom.IntVector2,System.Collections.Generic.List{RWCustom.IntVector2}@)
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: MoveBase(IntVector2, ref List<IntVector2>)
  nameWithType: Tentacle.MoveBase(IntVector2, ref List<IntVector2>)
  fullName: Tentacle.MoveBase(RWCustom.IntVector2, ref System.Collections.Generic.List<RWCustom.IntVector2>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.MoveBase(RWCustom.IntVector2,System.Collections.Generic.List{RWCustom.IntVector2}@)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveBase(IntVector2 newPos, ref List<IntVector2> path)
    parameters:
    - id: newPos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newPos</parameter>
            <parameter>M:Tentacle.MoveBase(RWCustom.IntVector2,System.Collections.Generic.List{RWCustom.IntVector2}@)</parameter>
          </include>
        </markup>
    - id: path
      type: System.Collections.Generic.List{RWCustom.IntVector2}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:Tentacle.MoveBase(RWCustom.IntVector2,System.Collections.Generic.List{RWCustom.IntVector2}@)</parameter>
          </include>
        </markup>
    content.vb: Public Sub MoveBase(newPos As IntVector2, path As List(Of IntVector2))
  overload: Global.Tentacle.MoveBase*
  nameWithType.vb: Tentacle.MoveBase(IntVector2, List(Of IntVector2))
  fullName.vb: Tentacle.MoveBase(RWCustom.IntVector2, System.Collections.Generic.List(Of RWCustom.IntVector2))
  name.vb: MoveBase(IntVector2, List(Of IntVector2))
- uid: Global.Tentacle.CurrentLength
  commentId: M:Global.Tentacle.CurrentLength
  id: CurrentLength
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: CurrentLength()
  nameWithType: Tentacle.CurrentLength()
  fullName: Tentacle.CurrentLength()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.CurrentLength</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float CurrentLength()
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Tentacle.CurrentLength</parameter>
          </include>
        </markup>
    content.vb: Public Function CurrentLength() As Single
  overload: Global.Tentacle.CurrentLength*
- uid: Global.Tentacle.Reset(UnityEngine.Vector2)
  commentId: M:Global.Tentacle.Reset(UnityEngine.Vector2)
  id: Reset(UnityEngine.Vector2)
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: Reset(Vector2)
  nameWithType: Tentacle.Reset(Vector2)
  fullName: Tentacle.Reset(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.Reset(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Reset(Vector2 resetPos)
    parameters:
    - id: resetPos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resetPos</parameter>
            <parameter>M:Tentacle.Reset(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Reset(resetPos As Vector2)
  overload: Global.Tentacle.Reset*
- uid: Global.Tentacle.GravityDirection
  commentId: M:Global.Tentacle.GravityDirection
  id: GravityDirection
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: GravityDirection()
  nameWithType: Tentacle.GravityDirection()
  fullName: Tentacle.GravityDirection()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.GravityDirection</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected virtual IntVector2 GravityDirection()
    return:
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Tentacle.GravityDirection</parameter>
          </include>
        </markup>
    content.vb: Protected Overridable Function GravityDirection() As IntVector2
  overload: Global.Tentacle.GravityDirection*
- uid: Global.Tentacle.PushChunksApart(System.Int32,System.Int32)
  commentId: M:Global.Tentacle.PushChunksApart(System.Int32,System.Int32)
  id: PushChunksApart(System.Int32,System.Int32)
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: PushChunksApart(int, int)
  nameWithType: Tentacle.PushChunksApart(int, int)
  fullName: Tentacle.PushChunksApart(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Tentacle.PushChunksApart(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected void PushChunksApart(int a, int b)
    parameters:
    - id: a
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Tentacle.PushChunksApart(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: b
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Tentacle.PushChunksApart(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Protected Sub PushChunksApart(a As Integer, b As Integer)
  overload: Global.Tentacle.PushChunksApart*
  nameWithType.vb: Tentacle.PushChunksApart(Integer, Integer)
  fullName.vb: Tentacle.PushChunksApart(Integer, Integer)
  name.vb: PushChunksApart(Integer, Integer)
- uid: Global.Tentacle.grabDest
  commentId: P:Global.Tentacle.grabDest
  id: grabDest
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: grabDest
  nameWithType: Tentacle.grabDest
  fullName: Tentacle.grabDest
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Tentacle.grabDest</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public IntVector2? grabDest { get; }
    parameters: []
    return:
      type: System.Nullable{RWCustom.IntVector2}
    content.vb: Public ReadOnly Property grabDest As IntVector2?
  overload: Global.Tentacle.grabDest*
- uid: Global.Tentacle.Tip
  commentId: P:Global.Tentacle.Tip
  id: Tip
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: Tip
  nameWithType: Tentacle.Tip
  fullName: Tentacle.Tip
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Tentacle.Tip</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Tentacle.TentacleChunk Tip { get; }
    parameters: []
    return:
      type: Global.Tentacle.TentacleChunk
    content.vb: Public ReadOnly Property Tip As Tentacle.TentacleChunk
  overload: Global.Tentacle.Tip*
- uid: Global.Tentacle.BasePos
  commentId: P:Global.Tentacle.BasePos
  id: BasePos
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: BasePos
  nameWithType: Tentacle.BasePos
  fullName: Tentacle.BasePos
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Tentacle.BasePos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public IntVector2 BasePos { get; }
    parameters: []
    return:
      type: RWCustom.IntVector2
    content.vb: Public ReadOnly Property BasePos As IntVector2
  overload: Global.Tentacle.BasePos*
- uid: Global.Tentacle.TotalRope
  commentId: P:Global.Tentacle.TotalRope
  id: TotalRope
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: TotalRope
  nameWithType: Tentacle.TotalRope
  fullName: Tentacle.TotalRope
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Tentacle.TotalRope</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float TotalRope { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property TotalRope As Single
  overload: Global.Tentacle.TotalRope*
- uid: Global.Tentacle.FloatBase
  commentId: P:Global.Tentacle.FloatBase
  id: FloatBase
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: FloatBase
  nameWithType: Tentacle.FloatBase
  fullName: Tentacle.FloatBase
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Tentacle.FloatBase</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 FloatBase { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public ReadOnly Property FloatBase As Vector2
  overload: Global.Tentacle.FloatBase*
- uid: Global.Tentacle.retractFac
  commentId: P:Global.Tentacle.retractFac
  id: retractFac
  parent: Global.Tentacle
  langs:
  - csharp
  - vb
  name: retractFac
  nameWithType: Tentacle.retractFac
  fullName: Tentacle.retractFac
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Tentacle.retractFac</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float retractFac { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property retractFac As Single
  overload: Global.Tentacle.retractFac*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.List{DebugSprite}
  commentId: T:System.Collections.Generic.List{DebugSprite}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<DebugSprite>
  nameWithType: List<DebugSprite>
  fullName: System.Collections.Generic.List<DebugSprite>
  nameWithType.vb: List(Of DebugSprite)
  fullName.vb: System.Collections.Generic.List(Of DebugSprite)
  name.vb: List(Of DebugSprite)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.DebugSprite
    name: DebugSprite
    isExternal: true
    href: DebugSprite.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.DebugSprite
    name: DebugSprite
    isExternal: true
    href: DebugSprite.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Nullable{UnityEngine.Vector2}
  commentId: T:System.Nullable{UnityEngine.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Vector2?
  nameWithType: Vector2?
  fullName: UnityEngine.Vector2?
  spec.csharp:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List{RWCustom.IntVector2}
  commentId: T:System.Collections.Generic.List{RWCustom.IntVector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<IntVector2>
  nameWithType: List<IntVector2>
  fullName: System.Collections.Generic.List<RWCustom.IntVector2>
  nameWithType.vb: List(Of IntVector2)
  fullName.vb: System.Collections.Generic.List(Of RWCustom.IntVector2)
  name.vb: List(Of IntVector2)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: RWCustom.IntVector2
    name: IntVector2
    isExternal: true
    href: RWCustom.IntVector2.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: RWCustom.IntVector2
    name: IntVector2
    isExternal: true
    href: RWCustom.IntVector2.html
  - name: )
- uid: Global.Room
  commentId: T:Global.Room
  isExternal: true
  href: Room.html
  name: Room
  nameWithType: Room
  fullName: Room
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.Tentacle.TentacleChunk[]
  isExternal: true
  href: Tentacle.TentacleChunk.html
  name: TentacleChunk[]
  nameWithType: Tentacle.TentacleChunk[]
  fullName: Tentacle.TentacleChunk[]
  nameWithType.vb: Tentacle.TentacleChunk()
  fullName.vb: Tentacle.TentacleChunk()
  name.vb: TentacleChunk()
  spec.csharp:
  - uid: Global.Tentacle.TentacleChunk
    name: TentacleChunk
    isExternal: true
    href: Tentacle.TentacleChunk.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.Tentacle.TentacleChunk
    name: TentacleChunk
    isExternal: true
    href: Tentacle.TentacleChunk.html
  - name: (
  - name: )
- uid: Global.PhysicalObject
  commentId: T:Global.PhysicalObject
  isExternal: true
  href: PhysicalObject.html
  name: PhysicalObject
  nameWithType: PhysicalObject
  fullName: PhysicalObject
- uid: Global.BodyChunk
  commentId: T:Global.BodyChunk
  isExternal: true
  href: BodyChunk.html
  name: BodyChunk
  nameWithType: BodyChunk
  fullName: BodyChunk
- uid: Global.Tentacle.TentacleProps
  commentId: T:Global.Tentacle.TentacleProps
  isExternal: true
  href: Tentacle.html
  name: Tentacle.TentacleProps
  nameWithType: Tentacle.TentacleProps
  fullName: Tentacle.TentacleProps
  spec.csharp:
  - uid: Global.Tentacle
    name: Tentacle
    isExternal: true
    href: Tentacle.html
  - name: .
  - uid: Global.Tentacle.TentacleProps
    name: TentacleProps
    isExternal: true
    href: Tentacle.TentacleProps.html
  spec.vb:
  - uid: Global.Tentacle
    name: Tentacle
    isExternal: true
    href: Tentacle.html
  - name: .
  - uid: Global.Tentacle.TentacleProps
    name: TentacleProps
    isExternal: true
    href: Tentacle.TentacleProps.html
- uid: Global.Tentacle.#ctor*
  commentId: Overload:Global.Tentacle.#ctor
  isExternal: true
  href: Global.Tentacle.html#Tentacle__ctor_PhysicalObject_BodyChunk_System_Single_
  name: Tentacle
  nameWithType: Tentacle.Tentacle
  fullName: Tentacle.Tentacle
  nameWithType.vb: Tentacle.New
  fullName.vb: Tentacle.New
  name.vb: New
- uid: Global.Tentacle.NewRoom*
  commentId: Overload:Global.Tentacle.NewRoom
  isExternal: true
  href: Global.Tentacle.html#Tentacle_NewRoom_Room_
  name: NewRoom
  nameWithType: Tentacle.NewRoom
  fullName: Tentacle.NewRoom
- uid: Global.Tentacle.Update*
  commentId: Overload:Global.Tentacle.Update
  isExternal: true
  href: Global.Tentacle.html#Tentacle_Update
  name: Update
  nameWithType: Tentacle.Update
  fullName: Tentacle.Update
- uid: Global.Tentacle.MoveGrabDest*
  commentId: Overload:Global.Tentacle.MoveGrabDest
  isExternal: true
  href: Global.Tentacle.html#Tentacle_MoveGrabDest_UnityEngine_Vector2_System_Collections_Generic_List_RWCustom_IntVector2___
  name: MoveGrabDest
  nameWithType: Tentacle.MoveGrabDest
  fullName: Tentacle.MoveGrabDest
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.Tentacle.Visual*
  commentId: Overload:Global.Tentacle.Visual
  isExternal: true
  href: Global.Tentacle.html#Tentacle_Visual_RWCustom_IntVector2_RWCustom_IntVector2_
  name: Visual
  nameWithType: Tentacle.Visual
  fullName: Tentacle.Visual
- uid: RWCustom.IntVector2
  commentId: T:RWCustom.IntVector2
  parent: RWCustom
  isExternal: true
  href: RWCustom.IntVector2.html
  name: IntVector2
  nameWithType: IntVector2
  fullName: RWCustom.IntVector2
- uid: RWCustom
  commentId: N:RWCustom
  isExternal: true
  href: RWCustom.html
  name: RWCustom
  nameWithType: RWCustom
  fullName: RWCustom
- uid: Global.Tentacle.MoveBase*
  commentId: Overload:Global.Tentacle.MoveBase
  isExternal: true
  href: Global.Tentacle.html#Tentacle_MoveBase_RWCustom_IntVector2_System_Collections_Generic_List_RWCustom_IntVector2___
  name: MoveBase
  nameWithType: Tentacle.MoveBase
  fullName: Tentacle.MoveBase
- uid: Global.Tentacle.CurrentLength*
  commentId: Overload:Global.Tentacle.CurrentLength
  isExternal: true
  href: Global.Tentacle.html#Tentacle_CurrentLength
  name: CurrentLength
  nameWithType: Tentacle.CurrentLength
  fullName: Tentacle.CurrentLength
- uid: Global.Tentacle.Reset*
  commentId: Overload:Global.Tentacle.Reset
  isExternal: true
  href: Global.Tentacle.html#Tentacle_Reset_UnityEngine_Vector2_
  name: Reset
  nameWithType: Tentacle.Reset
  fullName: Tentacle.Reset
- uid: Global.Tentacle.GravityDirection*
  commentId: Overload:Global.Tentacle.GravityDirection
  isExternal: true
  href: Global.Tentacle.html#Tentacle_GravityDirection
  name: GravityDirection
  nameWithType: Tentacle.GravityDirection
  fullName: Tentacle.GravityDirection
- uid: Global.Tentacle.PushChunksApart*
  commentId: Overload:Global.Tentacle.PushChunksApart
  isExternal: true
  href: Global.Tentacle.html#Tentacle_PushChunksApart_System_Int32_System_Int32_
  name: PushChunksApart
  nameWithType: Tentacle.PushChunksApart
  fullName: Tentacle.PushChunksApart
- uid: Global.Tentacle.grabDest*
  commentId: Overload:Global.Tentacle.grabDest
  isExternal: true
  href: Global.Tentacle.html#Tentacle_grabDest
  name: grabDest
  nameWithType: Tentacle.grabDest
  fullName: Tentacle.grabDest
- uid: System.Nullable{RWCustom.IntVector2}
  commentId: T:System.Nullable{RWCustom.IntVector2}
  parent: System
  definition: System.Nullable`1
  href: RWCustom.IntVector2.html
  name: IntVector2?
  nameWithType: IntVector2?
  fullName: RWCustom.IntVector2?
  spec.csharp:
  - uid: RWCustom.IntVector2
    name: IntVector2
    isExternal: true
    href: RWCustom.IntVector2.html
  - name: '?'
  spec.vb:
  - uid: RWCustom.IntVector2
    name: IntVector2
    isExternal: true
    href: RWCustom.IntVector2.html
  - name: '?'
- uid: Global.Tentacle.Tip*
  commentId: Overload:Global.Tentacle.Tip
  isExternal: true
  href: Global.Tentacle.html#Tentacle_Tip
  name: Tip
  nameWithType: Tentacle.Tip
  fullName: Tentacle.Tip
- uid: Global.Tentacle.TentacleChunk
  commentId: T:Global.Tentacle.TentacleChunk
  isExternal: true
  href: Tentacle.html
  name: Tentacle.TentacleChunk
  nameWithType: Tentacle.TentacleChunk
  fullName: Tentacle.TentacleChunk
  spec.csharp:
  - uid: Global.Tentacle
    name: Tentacle
    isExternal: true
    href: Tentacle.html
  - name: .
  - uid: Global.Tentacle.TentacleChunk
    name: TentacleChunk
    isExternal: true
    href: Tentacle.TentacleChunk.html
  spec.vb:
  - uid: Global.Tentacle
    name: Tentacle
    isExternal: true
    href: Tentacle.html
  - name: .
  - uid: Global.Tentacle.TentacleChunk
    name: TentacleChunk
    isExternal: true
    href: Tentacle.TentacleChunk.html
- uid: Global.Tentacle.BasePos*
  commentId: Overload:Global.Tentacle.BasePos
  isExternal: true
  href: Global.Tentacle.html#Tentacle_BasePos
  name: BasePos
  nameWithType: Tentacle.BasePos
  fullName: Tentacle.BasePos
- uid: Global.Tentacle.TotalRope*
  commentId: Overload:Global.Tentacle.TotalRope
  isExternal: true
  href: Global.Tentacle.html#Tentacle_TotalRope
  name: TotalRope
  nameWithType: Tentacle.TotalRope
  fullName: Tentacle.TotalRope
- uid: Global.Tentacle.FloatBase*
  commentId: Overload:Global.Tentacle.FloatBase
  isExternal: true
  href: Global.Tentacle.html#Tentacle_FloatBase
  name: FloatBase
  nameWithType: Tentacle.FloatBase
  fullName: Tentacle.FloatBase
- uid: Global.Tentacle.retractFac*
  commentId: Overload:Global.Tentacle.retractFac
  isExternal: true
  href: Global.Tentacle.html#Tentacle_retractFac
  name: retractFac
  nameWithType: Tentacle.retractFac
  fullName: Tentacle.retractFac
