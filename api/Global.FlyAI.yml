### YamlMime:ManagedReference
items:
- uid: Global.FlyAI
  commentId: T:Global.FlyAI
  id: FlyAI
  parent: Global
  children:
  - Global.FlyAI.#ctor(Fly,World)
  - Global.FlyAI.Burrowed
  - Global.FlyAI.CurrentFollowDijkstraIsToHive
  - Global.FlyAI.DoingSpecificAnimation
  - Global.FlyAI.FlyPos
  - Global.FlyAI.InActiveSwarmRoom
  - Global.FlyAI.LeaveRoom(WorldCoordinate)
  - Global.FlyAI.NewRoom
  - Global.FlyAI.RoomNotACycleHazard(Room)
  - Global.FlyAI.Stuck
  - Global.FlyAI.Update
  - Global.FlyAI.afraid
  - Global.FlyAI.behavior
  - Global.FlyAI.dropStatus
  - Global.FlyAI.fleeFromRain
  - Global.FlyAI.flockBehavior
  - Global.FlyAI.followingDijkstraMap
  - Global.FlyAI.getBackToGround
  - Global.FlyAI.leaveRoomDijkstra
  - Global.FlyAI.localGoal
  - Global.FlyAI.lowestOtherPos
  - Global.FlyAI.lure
  - Global.FlyAI.luredCounter
  - Global.FlyAI.noSwarmCounter
  - Global.FlyAI.otherFly
  - Global.FlyAI.panicFlee
  - Global.FlyAI.room
  - Global.FlyAI.stuckCounter
  - Global.FlyAI.stuckPos
  langs:
  - csharp
  - vb
  name: FlyAI
  nameWithType: FlyAI
  fullName: FlyAI
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FlyAI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class FlyAI
    content.vb: Public Class FlyAI
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.FlyAI.localGoal
  commentId: F:Global.FlyAI.localGoal
  id: localGoal
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: localGoal
  nameWithType: FlyAI.localGoal
  fullName: FlyAI.localGoal
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.localGoal</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 localGoal
    return:
      type: UnityEngine.Vector2
    content.vb: Public localGoal As Vector2
- uid: Global.FlyAI.followingDijkstraMap
  commentId: F:Global.FlyAI.followingDijkstraMap
  id: followingDijkstraMap
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: followingDijkstraMap
  nameWithType: FlyAI.followingDijkstraMap
  fullName: FlyAI.followingDijkstraMap
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.followingDijkstraMap</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int followingDijkstraMap
    return:
      type: System.Int32
    content.vb: Public followingDijkstraMap As Integer
- uid: Global.FlyAI.leaveRoomDijkstra
  commentId: F:Global.FlyAI.leaveRoomDijkstra
  id: leaveRoomDijkstra
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: leaveRoomDijkstra
  nameWithType: FlyAI.leaveRoomDijkstra
  fullName: FlyAI.leaveRoomDijkstra
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.leaveRoomDijkstra</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int leaveRoomDijkstra
    return:
      type: System.Int32
    content.vb: Public leaveRoomDijkstra As Integer
- uid: Global.FlyAI.otherFly
  commentId: F:Global.FlyAI.otherFly
  id: otherFly
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: otherFly
  nameWithType: FlyAI.otherFly
  fullName: FlyAI.otherFly
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.otherFly</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Fly otherFly
    return:
      type: Global.Fly
    content.vb: Public otherFly As Fly
- uid: Global.FlyAI.lowestOtherPos
  commentId: F:Global.FlyAI.lowestOtherPos
  id: lowestOtherPos
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: lowestOtherPos
  nameWithType: FlyAI.lowestOtherPos
  fullName: FlyAI.lowestOtherPos
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.lowestOtherPos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 lowestOtherPos
    return:
      type: UnityEngine.Vector2
    content.vb: Public lowestOtherPos As Vector2
- uid: Global.FlyAI.flockBehavior
  commentId: F:Global.FlyAI.flockBehavior
  id: flockBehavior
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: flockBehavior
  nameWithType: FlyAI.flockBehavior
  fullName: FlyAI.flockBehavior
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.flockBehavior</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FlyAI.FlockBehavior flockBehavior
    return:
      type: Global.FlyAI.FlockBehavior
    content.vb: Public flockBehavior As FlyAI.FlockBehavior
- uid: Global.FlyAI.afraid
  commentId: F:Global.FlyAI.afraid
  id: afraid
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: afraid
  nameWithType: FlyAI.afraid
  fullName: FlyAI.afraid
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.afraid</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float afraid
    return:
      type: System.Single
    content.vb: Public afraid As Single
- uid: Global.FlyAI.panicFlee
  commentId: F:Global.FlyAI.panicFlee
  id: panicFlee
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: panicFlee
  nameWithType: FlyAI.panicFlee
  fullName: FlyAI.panicFlee
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.panicFlee</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int panicFlee
    return:
      type: System.Int32
    content.vb: Public panicFlee As Integer
- uid: Global.FlyAI.fleeFromRain
  commentId: F:Global.FlyAI.fleeFromRain
  id: fleeFromRain
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: fleeFromRain
  nameWithType: FlyAI.fleeFromRain
  fullName: FlyAI.fleeFromRain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.fleeFromRain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool fleeFromRain
    return:
      type: System.Boolean
    content.vb: Public fleeFromRain As Boolean
- uid: Global.FlyAI.dropStatus
  commentId: F:Global.FlyAI.dropStatus
  id: dropStatus
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: dropStatus
  nameWithType: FlyAI.dropStatus
  fullName: FlyAI.dropStatus
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.dropStatus</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FlyAI.DropStatus dropStatus
    return:
      type: Global.FlyAI.DropStatus
    content.vb: Public dropStatus As FlyAI.DropStatus
- uid: Global.FlyAI.stuckCounter
  commentId: F:Global.FlyAI.stuckCounter
  id: stuckCounter
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: stuckCounter
  nameWithType: FlyAI.stuckCounter
  fullName: FlyAI.stuckCounter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.stuckCounter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int stuckCounter
    return:
      type: System.Int32
    content.vb: Public stuckCounter As Integer
- uid: Global.FlyAI.stuckPos
  commentId: F:Global.FlyAI.stuckPos
  id: stuckPos
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: stuckPos
  nameWithType: FlyAI.stuckPos
  fullName: FlyAI.stuckPos
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.stuckPos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 stuckPos
    return:
      type: UnityEngine.Vector2
    content.vb: Public stuckPos As Vector2
- uid: Global.FlyAI.getBackToGround
  commentId: F:Global.FlyAI.getBackToGround
  id: getBackToGround
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: getBackToGround
  nameWithType: FlyAI.getBackToGround
  fullName: FlyAI.getBackToGround
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.getBackToGround</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int getBackToGround
    return:
      type: System.Int32
    content.vb: Public getBackToGround As Integer
- uid: Global.FlyAI.noSwarmCounter
  commentId: F:Global.FlyAI.noSwarmCounter
  id: noSwarmCounter
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: noSwarmCounter
  nameWithType: FlyAI.noSwarmCounter
  fullName: FlyAI.noSwarmCounter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.noSwarmCounter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int noSwarmCounter
    return:
      type: System.Int32
    content.vb: Public noSwarmCounter As Integer
- uid: Global.FlyAI.luredCounter
  commentId: F:Global.FlyAI.luredCounter
  id: luredCounter
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: luredCounter
  nameWithType: FlyAI.luredCounter
  fullName: FlyAI.luredCounter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.luredCounter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int luredCounter
    return:
      type: System.Int32
    content.vb: Public luredCounter As Integer
- uid: Global.FlyAI.lure
  commentId: F:Global.FlyAI.lure
  id: lure
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: lure
  nameWithType: FlyAI.lure
  fullName: FlyAI.lure
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.lure</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FlyLure lure
    return:
      type: Global.FlyLure
    content.vb: Public lure As FlyLure
- uid: Global.FlyAI.behavior
  commentId: F:Global.FlyAI.behavior
  id: behavior
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: behavior
  nameWithType: FlyAI.behavior
  fullName: FlyAI.behavior
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FlyAI.behavior</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FlyAI.Behavior behavior
    return:
      type: Global.FlyAI.Behavior
    content.vb: Public behavior As FlyAI.Behavior
- uid: Global.FlyAI.#ctor(Fly,World)
  commentId: M:Global.FlyAI.#ctor(Fly,World)
  id: '#ctor(Fly,World)'
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: FlyAI(Fly, World)
  nameWithType: FlyAI.FlyAI(Fly, World)
  fullName: FlyAI.FlyAI(Fly, World)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FlyAI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FlyAI(Fly fly, World world)
    parameters:
    - id: fly
      type: Global.Fly
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fly</parameter>
            <parameter>M:FlyAI.#ctor(Fly,World)</parameter>
          </include>
        </markup>
    - id: world
      type: Global.World
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>world</parameter>
            <parameter>M:FlyAI.#ctor(Fly,World)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(fly As Fly, world As World)
  overload: Global.FlyAI.#ctor*
  nameWithType.vb: FlyAI.New(Fly, World)
  fullName.vb: FlyAI.New(Fly, World)
  name.vb: New(Fly, World)
- uid: Global.FlyAI.Update
  commentId: M:Global.FlyAI.Update
  id: Update
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: FlyAI.Update()
  fullName: FlyAI.Update()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FlyAI.Update</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update()
  overload: Global.FlyAI.Update*
- uid: Global.FlyAI.LeaveRoom(WorldCoordinate)
  commentId: M:Global.FlyAI.LeaveRoom(WorldCoordinate)
  id: LeaveRoom(WorldCoordinate)
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: LeaveRoom(WorldCoordinate)
  nameWithType: FlyAI.LeaveRoom(WorldCoordinate)
  fullName: FlyAI.LeaveRoom(WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FlyAI.LeaveRoom(WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LeaveRoom(WorldCoordinate coord)
    parameters:
    - id: coord
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>coord</parameter>
            <parameter>M:FlyAI.LeaveRoom(WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub LeaveRoom(coord As WorldCoordinate)
  overload: Global.FlyAI.LeaveRoom*
- uid: Global.FlyAI.RoomNotACycleHazard(Room)
  commentId: M:Global.FlyAI.RoomNotACycleHazard(Room)
  id: RoomNotACycleHazard(Room)
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: RoomNotACycleHazard(Room)
  nameWithType: FlyAI.RoomNotACycleHazard(Room)
  fullName: FlyAI.RoomNotACycleHazard(Room)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FlyAI.RoomNotACycleHazard(Room)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool RoomNotACycleHazard(Room room)
    parameters:
    - id: room
      type: Global.Room
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:FlyAI.RoomNotACycleHazard(Room)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FlyAI.RoomNotACycleHazard(Room)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RoomNotACycleHazard(room As Room) As Boolean
  overload: Global.FlyAI.RoomNotACycleHazard*
- uid: Global.FlyAI.NewRoom
  commentId: M:Global.FlyAI.NewRoom
  id: NewRoom
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: NewRoom()
  nameWithType: FlyAI.NewRoom()
  fullName: FlyAI.NewRoom()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FlyAI.NewRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void NewRoom()
    content.vb: Public Sub NewRoom()
  overload: Global.FlyAI.NewRoom*
- uid: Global.FlyAI.Burrowed
  commentId: M:Global.FlyAI.Burrowed
  id: Burrowed
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: Burrowed()
  nameWithType: FlyAI.Burrowed()
  fullName: FlyAI.Burrowed()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FlyAI.Burrowed</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Burrowed()
    content.vb: Public Sub Burrowed()
  overload: Global.FlyAI.Burrowed*
- uid: Global.FlyAI.room
  commentId: P:Global.FlyAI.room
  id: room
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: room
  nameWithType: FlyAI.room
  fullName: FlyAI.room
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FlyAI.room</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Room room { get; }
    parameters: []
    return:
      type: Global.Room
    content.vb: Public ReadOnly Property room As Room
  overload: Global.FlyAI.room*
- uid: Global.FlyAI.CurrentFollowDijkstraIsToHive
  commentId: P:Global.FlyAI.CurrentFollowDijkstraIsToHive
  id: CurrentFollowDijkstraIsToHive
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: CurrentFollowDijkstraIsToHive
  nameWithType: FlyAI.CurrentFollowDijkstraIsToHive
  fullName: FlyAI.CurrentFollowDijkstraIsToHive
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FlyAI.CurrentFollowDijkstraIsToHive</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool CurrentFollowDijkstraIsToHive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CurrentFollowDijkstraIsToHive As Boolean
  overload: Global.FlyAI.CurrentFollowDijkstraIsToHive*
- uid: Global.FlyAI.InActiveSwarmRoom
  commentId: P:Global.FlyAI.InActiveSwarmRoom
  id: InActiveSwarmRoom
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: InActiveSwarmRoom
  nameWithType: FlyAI.InActiveSwarmRoom
  fullName: FlyAI.InActiveSwarmRoom
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FlyAI.InActiveSwarmRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool InActiveSwarmRoom { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property InActiveSwarmRoom As Boolean
  overload: Global.FlyAI.InActiveSwarmRoom*
- uid: Global.FlyAI.Stuck
  commentId: P:Global.FlyAI.Stuck
  id: Stuck
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: Stuck
  nameWithType: FlyAI.Stuck
  fullName: FlyAI.Stuck
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FlyAI.Stuck</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Stuck { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Stuck As Boolean
  overload: Global.FlyAI.Stuck*
- uid: Global.FlyAI.FlyPos
  commentId: P:Global.FlyAI.FlyPos
  id: FlyPos
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: FlyPos
  nameWithType: FlyAI.FlyPos
  fullName: FlyAI.FlyPos
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FlyAI.FlyPos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 FlyPos { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public ReadOnly Property FlyPos As Vector2
  overload: Global.FlyAI.FlyPos*
- uid: Global.FlyAI.DoingSpecificAnimation
  commentId: P:Global.FlyAI.DoingSpecificAnimation
  id: DoingSpecificAnimation
  parent: Global.FlyAI
  langs:
  - csharp
  - vb
  name: DoingSpecificAnimation
  nameWithType: FlyAI.DoingSpecificAnimation
  fullName: FlyAI.DoingSpecificAnimation
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FlyAI.DoingSpecificAnimation</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool DoingSpecificAnimation { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property DoingSpecificAnimation As Boolean
  overload: Global.FlyAI.DoingSpecificAnimation*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.Fly
  commentId: T:Global.Fly
  isExternal: true
  href: Fly.html
  name: Fly
  nameWithType: Fly
  fullName: Fly
- uid: Global.FlyAI.FlockBehavior
  commentId: T:Global.FlyAI.FlockBehavior
  isExternal: true
  href: FlyAI.html
  name: FlyAI.FlockBehavior
  nameWithType: FlyAI.FlockBehavior
  fullName: FlyAI.FlockBehavior
  spec.csharp:
  - uid: Global.FlyAI
    name: FlyAI
    isExternal: true
    href: FlyAI.html
  - name: .
  - uid: Global.FlyAI.FlockBehavior
    name: FlockBehavior
    isExternal: true
    href: FlyAI.FlockBehavior.html
  spec.vb:
  - uid: Global.FlyAI
    name: FlyAI
    isExternal: true
    href: FlyAI.html
  - name: .
  - uid: Global.FlyAI.FlockBehavior
    name: FlockBehavior
    isExternal: true
    href: FlyAI.FlockBehavior.html
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.FlyAI.DropStatus
  commentId: T:Global.FlyAI.DropStatus
  isExternal: true
  href: FlyAI.html
  name: FlyAI.DropStatus
  nameWithType: FlyAI.DropStatus
  fullName: FlyAI.DropStatus
  spec.csharp:
  - uid: Global.FlyAI
    name: FlyAI
    isExternal: true
    href: FlyAI.html
  - name: .
  - uid: Global.FlyAI.DropStatus
    name: DropStatus
    isExternal: true
    href: FlyAI.DropStatus.html
  spec.vb:
  - uid: Global.FlyAI
    name: FlyAI
    isExternal: true
    href: FlyAI.html
  - name: .
  - uid: Global.FlyAI.DropStatus
    name: DropStatus
    isExternal: true
    href: FlyAI.DropStatus.html
- uid: Global.FlyLure
  commentId: T:Global.FlyLure
  isExternal: true
  href: FlyLure.html
  name: FlyLure
  nameWithType: FlyLure
  fullName: FlyLure
- uid: Global.FlyAI.Behavior
  commentId: T:Global.FlyAI.Behavior
  isExternal: true
  href: FlyAI.html
  name: FlyAI.Behavior
  nameWithType: FlyAI.Behavior
  fullName: FlyAI.Behavior
  spec.csharp:
  - uid: Global.FlyAI
    name: FlyAI
    isExternal: true
    href: FlyAI.html
  - name: .
  - uid: Global.FlyAI.Behavior
    name: Behavior
    isExternal: true
    href: FlyAI.Behavior.html
  spec.vb:
  - uid: Global.FlyAI
    name: FlyAI
    isExternal: true
    href: FlyAI.html
  - name: .
  - uid: Global.FlyAI.Behavior
    name: Behavior
    isExternal: true
    href: FlyAI.Behavior.html
- uid: Global.FlyAI.#ctor*
  commentId: Overload:Global.FlyAI.#ctor
  isExternal: true
  href: Global.FlyAI.html#FlyAI__ctor_Fly_World_
  name: FlyAI
  nameWithType: FlyAI.FlyAI
  fullName: FlyAI.FlyAI
  nameWithType.vb: FlyAI.New
  fullName.vb: FlyAI.New
  name.vb: New
- uid: Global.World
  commentId: T:Global.World
  isExternal: true
  href: World.html
  name: World
  nameWithType: World
  fullName: World
- uid: Global.FlyAI.Update*
  commentId: Overload:Global.FlyAI.Update
  isExternal: true
  href: Global.FlyAI.html#FlyAI_Update
  name: Update
  nameWithType: FlyAI.Update
  fullName: FlyAI.Update
- uid: Global.FlyAI.LeaveRoom*
  commentId: Overload:Global.FlyAI.LeaveRoom
  isExternal: true
  href: Global.FlyAI.html#FlyAI_LeaveRoom_WorldCoordinate_
  name: LeaveRoom
  nameWithType: FlyAI.LeaveRoom
  fullName: FlyAI.LeaveRoom
- uid: Global.WorldCoordinate
  commentId: T:Global.WorldCoordinate
  isExternal: true
  href: WorldCoordinate.html
  name: WorldCoordinate
  nameWithType: WorldCoordinate
  fullName: WorldCoordinate
- uid: Global.FlyAI.RoomNotACycleHazard*
  commentId: Overload:Global.FlyAI.RoomNotACycleHazard
  isExternal: true
  href: Global.FlyAI.html#FlyAI_RoomNotACycleHazard_Room_
  name: RoomNotACycleHazard
  nameWithType: FlyAI.RoomNotACycleHazard
  fullName: FlyAI.RoomNotACycleHazard
- uid: Global.Room
  commentId: T:Global.Room
  isExternal: true
  href: Room.html
  name: Room
  nameWithType: Room
  fullName: Room
- uid: Global.FlyAI.NewRoom*
  commentId: Overload:Global.FlyAI.NewRoom
  isExternal: true
  href: Global.FlyAI.html#FlyAI_NewRoom
  name: NewRoom
  nameWithType: FlyAI.NewRoom
  fullName: FlyAI.NewRoom
- uid: Global.FlyAI.Burrowed*
  commentId: Overload:Global.FlyAI.Burrowed
  isExternal: true
  href: Global.FlyAI.html#FlyAI_Burrowed
  name: Burrowed
  nameWithType: FlyAI.Burrowed
  fullName: FlyAI.Burrowed
- uid: Global.FlyAI.room*
  commentId: Overload:Global.FlyAI.room
  isExternal: true
  href: Global.FlyAI.html#FlyAI_room
  name: room
  nameWithType: FlyAI.room
  fullName: FlyAI.room
- uid: Global.FlyAI.CurrentFollowDijkstraIsToHive*
  commentId: Overload:Global.FlyAI.CurrentFollowDijkstraIsToHive
  isExternal: true
  href: Global.FlyAI.html#FlyAI_CurrentFollowDijkstraIsToHive
  name: CurrentFollowDijkstraIsToHive
  nameWithType: FlyAI.CurrentFollowDijkstraIsToHive
  fullName: FlyAI.CurrentFollowDijkstraIsToHive
- uid: Global.FlyAI.InActiveSwarmRoom*
  commentId: Overload:Global.FlyAI.InActiveSwarmRoom
  isExternal: true
  href: Global.FlyAI.html#FlyAI_InActiveSwarmRoom
  name: InActiveSwarmRoom
  nameWithType: FlyAI.InActiveSwarmRoom
  fullName: FlyAI.InActiveSwarmRoom
- uid: Global.FlyAI.Stuck*
  commentId: Overload:Global.FlyAI.Stuck
  isExternal: true
  href: Global.FlyAI.html#FlyAI_Stuck
  name: Stuck
  nameWithType: FlyAI.Stuck
  fullName: FlyAI.Stuck
- uid: Global.FlyAI.FlyPos*
  commentId: Overload:Global.FlyAI.FlyPos
  isExternal: true
  href: Global.FlyAI.html#FlyAI_FlyPos
  name: FlyPos
  nameWithType: FlyAI.FlyPos
  fullName: FlyAI.FlyPos
- uid: Global.FlyAI.DoingSpecificAnimation*
  commentId: Overload:Global.FlyAI.DoingSpecificAnimation
  isExternal: true
  href: Global.FlyAI.html#FlyAI_DoingSpecificAnimation
  name: DoingSpecificAnimation
  nameWithType: FlyAI.DoingSpecificAnimation
  fullName: FlyAI.DoingSpecificAnimation
