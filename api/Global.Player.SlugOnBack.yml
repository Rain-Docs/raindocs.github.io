### YamlMime:ManagedReference
items:
- uid: Global.Player.SlugOnBack
  commentId: T:Global.Player.SlugOnBack
  id: Player.SlugOnBack
  parent: Global
  children:
  - Global.Player.SlugOnBack.#ctor(Player)
  - Global.Player.SlugOnBack.ChangeOverlap(System.Boolean)
  - Global.Player.SlugOnBack.CheckCircularGrabbing(Player,Player,System.Boolean)
  - Global.Player.SlugOnBack.DropSlug
  - Global.Player.SlugOnBack.GraphicsModuleUpdated(System.Boolean,System.Boolean)
  - Global.Player.SlugOnBack.HasASlug
  - Global.Player.SlugOnBack.SlugToBack(Player)
  - Global.Player.SlugOnBack.SlugToHand(System.Boolean)
  - Global.Player.SlugOnBack.Update(System.Boolean)
  - Global.Player.SlugOnBack.abstractStick
  - Global.Player.SlugOnBack.counter
  - Global.Player.SlugOnBack.increment
  - Global.Player.SlugOnBack.interactionLocked
  - Global.Player.SlugOnBack.owner
  - Global.Player.SlugOnBack.slugcat
  langs:
  - csharp
  - vb
  name: Player.SlugOnBack
  nameWithType: Player.SlugOnBack
  fullName: Player.SlugOnBack
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Player.SlugOnBack</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class Player.SlugOnBack
    content.vb: Public Class Player.SlugOnBack
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.Player.SlugOnBack.owner
  commentId: F:Global.Player.SlugOnBack.owner
  id: owner
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: owner
  nameWithType: Player.SlugOnBack.owner
  fullName: Player.SlugOnBack.owner
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Player.SlugOnBack.owner</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Player owner
    return:
      type: Global.Player
    content.vb: Public owner As Player
- uid: Global.Player.SlugOnBack.slugcat
  commentId: F:Global.Player.SlugOnBack.slugcat
  id: slugcat
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: slugcat
  nameWithType: Player.SlugOnBack.slugcat
  fullName: Player.SlugOnBack.slugcat
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Player.SlugOnBack.slugcat</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Player slugcat
    return:
      type: Global.Player
    content.vb: Public slugcat As Player
- uid: Global.Player.SlugOnBack.increment
  commentId: F:Global.Player.SlugOnBack.increment
  id: increment
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: increment
  nameWithType: Player.SlugOnBack.increment
  fullName: Player.SlugOnBack.increment
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Player.SlugOnBack.increment</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool increment
    return:
      type: System.Boolean
    content.vb: Public increment As Boolean
- uid: Global.Player.SlugOnBack.counter
  commentId: F:Global.Player.SlugOnBack.counter
  id: counter
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: counter
  nameWithType: Player.SlugOnBack.counter
  fullName: Player.SlugOnBack.counter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Player.SlugOnBack.counter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int counter
    return:
      type: System.Int32
    content.vb: Public counter As Integer
- uid: Global.Player.SlugOnBack.interactionLocked
  commentId: F:Global.Player.SlugOnBack.interactionLocked
  id: interactionLocked
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: interactionLocked
  nameWithType: Player.SlugOnBack.interactionLocked
  fullName: Player.SlugOnBack.interactionLocked
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Player.SlugOnBack.interactionLocked</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool interactionLocked
    return:
      type: System.Boolean
    content.vb: Public interactionLocked As Boolean
- uid: Global.Player.SlugOnBack.abstractStick
  commentId: F:Global.Player.SlugOnBack.abstractStick
  id: abstractStick
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: abstractStick
  nameWithType: Player.SlugOnBack.abstractStick
  fullName: Player.SlugOnBack.abstractStick
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Player.SlugOnBack.abstractStick</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Player.AbstractOnBackStick abstractStick
    return:
      type: Global.Player.AbstractOnBackStick
    content.vb: Public abstractStick As Player.AbstractOnBackStick
- uid: Global.Player.SlugOnBack.#ctor(Player)
  commentId: M:Global.Player.SlugOnBack.#ctor(Player)
  id: '#ctor(Player)'
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: SlugOnBack(Player)
  nameWithType: Player.SlugOnBack.SlugOnBack(Player)
  fullName: Player.SlugOnBack.SlugOnBack(Player)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Player.SlugOnBack</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public SlugOnBack(Player owner)
    parameters:
    - id: owner
      type: Global.Player
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>owner</parameter>
            <parameter>M:Player.SlugOnBack.#ctor(Player)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(owner As Player)
  overload: Global.Player.SlugOnBack.#ctor*
  nameWithType.vb: Player.SlugOnBack.New(Player)
  fullName.vb: Player.SlugOnBack.New(Player)
  name.vb: New(Player)
- uid: Global.Player.SlugOnBack.Update(System.Boolean)
  commentId: M:Global.Player.SlugOnBack.Update(System.Boolean)
  id: Update(System.Boolean)
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: Update(bool)
  nameWithType: Player.SlugOnBack.Update(bool)
  fullName: Player.SlugOnBack.Update(bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Player.SlugOnBack.Update(System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update(bool eu)
    parameters:
    - id: eu
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>eu</parameter>
            <parameter>M:Player.SlugOnBack.Update(System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Update(eu As Boolean)
  overload: Global.Player.SlugOnBack.Update*
  nameWithType.vb: Player.SlugOnBack.Update(Boolean)
  fullName.vb: Player.SlugOnBack.Update(Boolean)
  name.vb: Update(Boolean)
- uid: Global.Player.SlugOnBack.GraphicsModuleUpdated(System.Boolean,System.Boolean)
  commentId: M:Global.Player.SlugOnBack.GraphicsModuleUpdated(System.Boolean,System.Boolean)
  id: GraphicsModuleUpdated(System.Boolean,System.Boolean)
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: GraphicsModuleUpdated(bool, bool)
  nameWithType: Player.SlugOnBack.GraphicsModuleUpdated(bool, bool)
  fullName: Player.SlugOnBack.GraphicsModuleUpdated(bool, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Player.SlugOnBack.GraphicsModuleUpdated(System.Boolean,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void GraphicsModuleUpdated(bool actuallyViewed, bool eu)
    parameters:
    - id: actuallyViewed
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>actuallyViewed</parameter>
            <parameter>M:Player.SlugOnBack.GraphicsModuleUpdated(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: eu
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>eu</parameter>
            <parameter>M:Player.SlugOnBack.GraphicsModuleUpdated(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub GraphicsModuleUpdated(actuallyViewed As Boolean, eu As Boolean)
  overload: Global.Player.SlugOnBack.GraphicsModuleUpdated*
  nameWithType.vb: Player.SlugOnBack.GraphicsModuleUpdated(Boolean, Boolean)
  fullName.vb: Player.SlugOnBack.GraphicsModuleUpdated(Boolean, Boolean)
  name.vb: GraphicsModuleUpdated(Boolean, Boolean)
- uid: Global.Player.SlugOnBack.SlugToHand(System.Boolean)
  commentId: M:Global.Player.SlugOnBack.SlugToHand(System.Boolean)
  id: SlugToHand(System.Boolean)
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: SlugToHand(bool)
  nameWithType: Player.SlugOnBack.SlugToHand(bool)
  fullName: Player.SlugOnBack.SlugToHand(bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Player.SlugOnBack.SlugToHand(System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SlugToHand(bool eu)
    parameters:
    - id: eu
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>eu</parameter>
            <parameter>M:Player.SlugOnBack.SlugToHand(System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SlugToHand(eu As Boolean)
  overload: Global.Player.SlugOnBack.SlugToHand*
  nameWithType.vb: Player.SlugOnBack.SlugToHand(Boolean)
  fullName.vb: Player.SlugOnBack.SlugToHand(Boolean)
  name.vb: SlugToHand(Boolean)
- uid: Global.Player.SlugOnBack.CheckCircularGrabbing(Player,Player,System.Boolean)
  commentId: M:Global.Player.SlugOnBack.CheckCircularGrabbing(Player,Player,System.Boolean)
  id: CheckCircularGrabbing(Player,Player,System.Boolean)
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: CheckCircularGrabbing(Player, Player, bool)
  nameWithType: Player.SlugOnBack.CheckCircularGrabbing(Player, Player, bool)
  fullName: Player.SlugOnBack.CheckCircularGrabbing(Player, Player, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Player.SlugOnBack.CheckCircularGrabbing(Player,Player,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void CheckCircularGrabbing(Player playerToGrab, Player reference, bool slugOnBack)
    parameters:
    - id: playerToGrab
      type: Global.Player
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>playerToGrab</parameter>
            <parameter>M:Player.SlugOnBack.CheckCircularGrabbing(Player,Player,System.Boolean)</parameter>
          </include>
        </markup>
    - id: reference
      type: Global.Player
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reference</parameter>
            <parameter>M:Player.SlugOnBack.CheckCircularGrabbing(Player,Player,System.Boolean)</parameter>
          </include>
        </markup>
    - id: slugOnBack
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>slugOnBack</parameter>
            <parameter>M:Player.SlugOnBack.CheckCircularGrabbing(Player,Player,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub CheckCircularGrabbing(playerToGrab As Player, reference As Player, slugOnBack As Boolean)
  overload: Global.Player.SlugOnBack.CheckCircularGrabbing*
  nameWithType.vb: Player.SlugOnBack.CheckCircularGrabbing(Player, Player, Boolean)
  fullName.vb: Player.SlugOnBack.CheckCircularGrabbing(Player, Player, Boolean)
  name.vb: CheckCircularGrabbing(Player, Player, Boolean)
- uid: Global.Player.SlugOnBack.SlugToBack(Player)
  commentId: M:Global.Player.SlugOnBack.SlugToBack(Player)
  id: SlugToBack(Player)
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: SlugToBack(Player)
  nameWithType: Player.SlugOnBack.SlugToBack(Player)
  fullName: Player.SlugOnBack.SlugToBack(Player)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Player.SlugOnBack.SlugToBack(Player)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SlugToBack(Player playerToBack)
    parameters:
    - id: playerToBack
      type: Global.Player
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>playerToBack</parameter>
            <parameter>M:Player.SlugOnBack.SlugToBack(Player)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SlugToBack(playerToBack As Player)
  overload: Global.Player.SlugOnBack.SlugToBack*
- uid: Global.Player.SlugOnBack.DropSlug
  commentId: M:Global.Player.SlugOnBack.DropSlug
  id: DropSlug
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: DropSlug()
  nameWithType: Player.SlugOnBack.DropSlug()
  fullName: Player.SlugOnBack.DropSlug()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Player.SlugOnBack.DropSlug</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void DropSlug()
    content.vb: Public Sub DropSlug()
  overload: Global.Player.SlugOnBack.DropSlug*
- uid: Global.Player.SlugOnBack.ChangeOverlap(System.Boolean)
  commentId: M:Global.Player.SlugOnBack.ChangeOverlap(System.Boolean)
  id: ChangeOverlap(System.Boolean)
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: ChangeOverlap(bool)
  nameWithType: Player.SlugOnBack.ChangeOverlap(bool)
  fullName: Player.SlugOnBack.ChangeOverlap(bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Player.SlugOnBack.ChangeOverlap(System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ChangeOverlap(bool newOverlap)
    parameters:
    - id: newOverlap
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newOverlap</parameter>
            <parameter>M:Player.SlugOnBack.ChangeOverlap(System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ChangeOverlap(newOverlap As Boolean)
  overload: Global.Player.SlugOnBack.ChangeOverlap*
  nameWithType.vb: Player.SlugOnBack.ChangeOverlap(Boolean)
  fullName.vb: Player.SlugOnBack.ChangeOverlap(Boolean)
  name.vb: ChangeOverlap(Boolean)
- uid: Global.Player.SlugOnBack.HasASlug
  commentId: P:Global.Player.SlugOnBack.HasASlug
  id: HasASlug
  parent: Global.Player.SlugOnBack
  langs:
  - csharp
  - vb
  name: HasASlug
  nameWithType: Player.SlugOnBack.HasASlug
  fullName: Player.SlugOnBack.HasASlug
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Player.SlugOnBack.HasASlug</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool HasASlug { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasASlug As Boolean
  overload: Global.Player.SlugOnBack.HasASlug*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Player
  commentId: T:Global.Player
  isExternal: true
  href: Player.html
  name: Player
  nameWithType: Player
  fullName: Player
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.Player.AbstractOnBackStick
  commentId: T:Global.Player.AbstractOnBackStick
  isExternal: true
  href: Player.html
  name: Player.AbstractOnBackStick
  nameWithType: Player.AbstractOnBackStick
  fullName: Player.AbstractOnBackStick
  spec.csharp:
  - uid: Global.Player
    name: Player
    isExternal: true
    href: Player.html
  - name: .
  - uid: Global.Player.AbstractOnBackStick
    name: AbstractOnBackStick
    isExternal: true
    href: Player.AbstractOnBackStick.html
  spec.vb:
  - uid: Global.Player
    name: Player
    isExternal: true
    href: Player.html
  - name: .
  - uid: Global.Player.AbstractOnBackStick
    name: AbstractOnBackStick
    isExternal: true
    href: Player.AbstractOnBackStick.html
- uid: Global.Player.SlugOnBack.#ctor*
  commentId: Overload:Global.Player.SlugOnBack.#ctor
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack__ctor_Player_
  name: SlugOnBack
  nameWithType: Player.SlugOnBack.SlugOnBack
  fullName: Player.SlugOnBack.SlugOnBack
  nameWithType.vb: Player.SlugOnBack.New
  fullName.vb: Player.SlugOnBack.New
  name.vb: New
- uid: Global.Player.SlugOnBack.Update*
  commentId: Overload:Global.Player.SlugOnBack.Update
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_Update_System_Boolean_
  name: Update
  nameWithType: Player.SlugOnBack.Update
  fullName: Player.SlugOnBack.Update
- uid: Global.Player.SlugOnBack.GraphicsModuleUpdated*
  commentId: Overload:Global.Player.SlugOnBack.GraphicsModuleUpdated
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_GraphicsModuleUpdated_System_Boolean_System_Boolean_
  name: GraphicsModuleUpdated
  nameWithType: Player.SlugOnBack.GraphicsModuleUpdated
  fullName: Player.SlugOnBack.GraphicsModuleUpdated
- uid: Global.Player.SlugOnBack.SlugToHand*
  commentId: Overload:Global.Player.SlugOnBack.SlugToHand
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_SlugToHand_System_Boolean_
  name: SlugToHand
  nameWithType: Player.SlugOnBack.SlugToHand
  fullName: Player.SlugOnBack.SlugToHand
- uid: Global.Player.SlugOnBack.CheckCircularGrabbing*
  commentId: Overload:Global.Player.SlugOnBack.CheckCircularGrabbing
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_CheckCircularGrabbing_Player_Player_System_Boolean_
  name: CheckCircularGrabbing
  nameWithType: Player.SlugOnBack.CheckCircularGrabbing
  fullName: Player.SlugOnBack.CheckCircularGrabbing
- uid: Global.Player.SlugOnBack.SlugToBack*
  commentId: Overload:Global.Player.SlugOnBack.SlugToBack
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_SlugToBack_Player_
  name: SlugToBack
  nameWithType: Player.SlugOnBack.SlugToBack
  fullName: Player.SlugOnBack.SlugToBack
- uid: Global.Player.SlugOnBack.DropSlug*
  commentId: Overload:Global.Player.SlugOnBack.DropSlug
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_DropSlug
  name: DropSlug
  nameWithType: Player.SlugOnBack.DropSlug
  fullName: Player.SlugOnBack.DropSlug
- uid: Global.Player.SlugOnBack.ChangeOverlap*
  commentId: Overload:Global.Player.SlugOnBack.ChangeOverlap
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_ChangeOverlap_System_Boolean_
  name: ChangeOverlap
  nameWithType: Player.SlugOnBack.ChangeOverlap
  fullName: Player.SlugOnBack.ChangeOverlap
- uid: Global.Player.SlugOnBack.HasASlug*
  commentId: Overload:Global.Player.SlugOnBack.HasASlug
  isExternal: true
  href: Global.Player.SlugOnBack.html#Player_SlugOnBack_HasASlug
  name: HasASlug
  nameWithType: Player.SlugOnBack.HasASlug
  fullName: Player.SlugOnBack.HasASlug
