### YamlMime:ManagedReference
items:
- uid: Global.FNode
  commentId: T:Global.FNode
  id: FNode
  parent: Global
  children:
  - Global.FNode.#ctor
  - Global.FNode.AddEnabler(FNodeEnabler)
  - Global.FNode.CreateSpecialMatrices
  - Global.FNode.DisableMultiTouch
  - Global.FNode.DisableSingleTouch
  - Global.FNode.DisableSmartTouch
  - Global.FNode.EnableMultiTouch
  - Global.FNode.EnableSingleTouch
  - Global.FNode.EnableSmartTouch
  - Global.FNode.GetLocalMousePosition
  - Global.FNode.GetLocalTouchPosition(FTouch)
  - Global.FNode.GetPosition
  - Global.FNode.GlobalToLocal(UnityEngine.Vector2)
  - Global.FNode.HandleAddedToContainer(FContainer)
  - Global.FNode.HandleAddedToStage
  - Global.FNode.HandleRemovedFromContainer
  - Global.FNode.HandleRemovedFromStage
  - Global.FNode.IsAncestryVisible
  - Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  - Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  - Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  - Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.LocalToGlobal(UnityEngine.Vector2)
  - Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
  - Global.FNode.LocalToScreen(UnityEngine.Vector2)
  - Global.FNode.LocalToStage(UnityEngine.Vector2)
  - Global.FNode.MoveBehindOtherNode(FNode)
  - Global.FNode.MoveInFrontOfOtherNode(FNode)
  - Global.FNode.MoveToBack
  - Global.FNode.MoveToFront
  - Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
  - Global.FNode.Redraw(System.Boolean,System.Boolean)
  - Global.FNode.RemoveEnabler(FNodeEnabler)
  - Global.FNode.RemoveEnablerOfType(System.Type)
  - Global.FNode.RemoveFromContainer
  - Global.FNode.RemoveListenForAddedOrRemoved
  - Global.FNode.RemoveListenForAfterUpdate
  - Global.FNode.RemoveListenForFixedUpdate
  - Global.FNode.RemoveListenForLateUpdate
  - Global.FNode.RemoveListenForOrientationChange
  - Global.FNode.RemoveListenForResize
  - Global.FNode.RemoveListenForUpdate
  - Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
  - Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
  - Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
  - Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
  - Global.FNode.ScreenToLocal(UnityEngine.Vector2)
  - Global.FNode.SetPosition(System.Single,System.Single)
  - Global.FNode.SetPosition(UnityEngine.Vector2)
  - Global.FNode.StageToLocal(UnityEngine.Vector2)
  - Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
  - Global.FNode.UpdateMatrix
  - Global.FNode._alpha
  - Global.FNode._concatenatedAlpha
  - Global.FNode._concatenatedMatrix
  - Global.FNode._container
  - Global.FNode._depth
  - Global.FNode._inverseConcatenatedMatrix
  - Global.FNode._isAlphaDirty
  - Global.FNode._isMatrixDirty
  - Global.FNode._isOnStage
  - Global.FNode._isVisible
  - Global.FNode._matrix
  - Global.FNode._meshZ
  - Global.FNode._needsSpecialMatrices
  - Global.FNode._rotation
  - Global.FNode._scaleX
  - Global.FNode._scaleY
  - Global.FNode._screenConcatenatedMatrix
  - Global.FNode._screenInverseConcatenatedMatrix
  - Global.FNode._sortZ
  - Global.FNode._stage
  - Global.FNode._visibleScale
  - Global.FNode._x
  - Global.FNode._y
  - Global.FNode.alpha
  - Global.FNode.concatenatedAlpha
  - Global.FNode.concatenatedMatrix
  - Global.FNode.container
  - Global.FNode.data
  - Global.FNode.depth
  - Global.FNode.inverseConcatenatedMatrix
  - Global.FNode.isMatrixDirty
  - Global.FNode.isVisible
  - Global.FNode.matrix
  - Global.FNode.meshZ
  - Global.FNode.rotation
  - Global.FNode.scale
  - Global.FNode.scaleX
  - Global.FNode.scaleY
  - Global.FNode.screenConcatenatedMatrix
  - Global.FNode.screenInverseConcatenatedMatrix
  - Global.FNode.sortZ
  - Global.FNode.stage
  - Global.FNode.touchPriority
  - Global.FNode.x
  - Global.FNode.y
  langs:
  - csharp
  - vb
  name: FNode
  nameWithType: FNode
  fullName: FNode
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FNode</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class FNode
    content.vb: Public Class FNode
  inheritance:
  - System.Object
  derivedClasses:
  - Global.FContainer
  - Global.FFacetNode
  - Global.FGameObjectNode
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.FNode._x
  commentId: F:Global.FNode._x
  id: _x
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _x
  nameWithType: FNode._x
  fullName: FNode._x
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._x</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _x
    return:
      type: System.Single
    content.vb: Protected _x As Single
- uid: Global.FNode._y
  commentId: F:Global.FNode._y
  id: _y
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _y
  nameWithType: FNode._y
  fullName: FNode._y
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._y</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _y
    return:
      type: System.Single
    content.vb: Protected _y As Single
- uid: Global.FNode._scaleX
  commentId: F:Global.FNode._scaleX
  id: _scaleX
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _scaleX
  nameWithType: FNode._scaleX
  fullName: FNode._scaleX
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._scaleX</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _scaleX
    return:
      type: System.Single
    content.vb: Protected _scaleX As Single
- uid: Global.FNode._scaleY
  commentId: F:Global.FNode._scaleY
  id: _scaleY
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _scaleY
  nameWithType: FNode._scaleY
  fullName: FNode._scaleY
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._scaleY</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _scaleY
    return:
      type: System.Single
    content.vb: Protected _scaleY As Single
- uid: Global.FNode._rotation
  commentId: F:Global.FNode._rotation
  id: _rotation
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _rotation
  nameWithType: FNode._rotation
  fullName: FNode._rotation
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._rotation</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _rotation
    return:
      type: System.Single
    content.vb: Protected _rotation As Single
- uid: Global.FNode._meshZ
  commentId: F:Global.FNode._meshZ
  id: _meshZ
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _meshZ
  nameWithType: FNode._meshZ
  fullName: FNode._meshZ
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._meshZ</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _meshZ
    return:
      type: System.Single
    content.vb: Protected _meshZ As Single
- uid: Global.FNode._sortZ
  commentId: F:Global.FNode._sortZ
  id: _sortZ
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _sortZ
  nameWithType: FNode._sortZ
  fullName: FNode._sortZ
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._sortZ</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _sortZ
    return:
      type: System.Single
    content.vb: Protected _sortZ As Single
- uid: Global.FNode._isMatrixDirty
  commentId: F:Global.FNode._isMatrixDirty
  id: _isMatrixDirty
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _isMatrixDirty
  nameWithType: FNode._isMatrixDirty
  fullName: FNode._isMatrixDirty
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._isMatrixDirty</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected bool _isMatrixDirty
    return:
      type: System.Boolean
    content.vb: Protected _isMatrixDirty As Boolean
- uid: Global.FNode._container
  commentId: F:Global.FNode._container
  id: _container
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _container
  nameWithType: FNode._container
  fullName: FNode._container
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._container</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FContainer _container
    return:
      type: Global.FContainer
    content.vb: Protected _container As FContainer
- uid: Global.FNode._matrix
  commentId: F:Global.FNode._matrix
  id: _matrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _matrix
  nameWithType: FNode._matrix
  fullName: FNode._matrix
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._matrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FMatrix _matrix
    return:
      type: Global.FMatrix
    content.vb: Protected _matrix As FMatrix
- uid: Global.FNode._concatenatedMatrix
  commentId: F:Global.FNode._concatenatedMatrix
  id: _concatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _concatenatedMatrix
  nameWithType: FNode._concatenatedMatrix
  fullName: FNode._concatenatedMatrix
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._concatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FMatrix _concatenatedMatrix
    return:
      type: Global.FMatrix
    content.vb: Protected _concatenatedMatrix As FMatrix
- uid: Global.FNode._inverseConcatenatedMatrix
  commentId: F:Global.FNode._inverseConcatenatedMatrix
  id: _inverseConcatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _inverseConcatenatedMatrix
  nameWithType: FNode._inverseConcatenatedMatrix
  fullName: FNode._inverseConcatenatedMatrix
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._inverseConcatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FMatrix _inverseConcatenatedMatrix
    return:
      type: Global.FMatrix
    content.vb: Protected _inverseConcatenatedMatrix As FMatrix
- uid: Global.FNode._screenConcatenatedMatrix
  commentId: F:Global.FNode._screenConcatenatedMatrix
  id: _screenConcatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _screenConcatenatedMatrix
  nameWithType: FNode._screenConcatenatedMatrix
  fullName: FNode._screenConcatenatedMatrix
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._screenConcatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FMatrix _screenConcatenatedMatrix
    return:
      type: Global.FMatrix
    content.vb: Protected _screenConcatenatedMatrix As FMatrix
- uid: Global.FNode._screenInverseConcatenatedMatrix
  commentId: F:Global.FNode._screenInverseConcatenatedMatrix
  id: _screenInverseConcatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _screenInverseConcatenatedMatrix
  nameWithType: FNode._screenInverseConcatenatedMatrix
  fullName: FNode._screenInverseConcatenatedMatrix
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._screenInverseConcatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FMatrix _screenInverseConcatenatedMatrix
    return:
      type: Global.FMatrix
    content.vb: Protected _screenInverseConcatenatedMatrix As FMatrix
- uid: Global.FNode._needsSpecialMatrices
  commentId: F:Global.FNode._needsSpecialMatrices
  id: _needsSpecialMatrices
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _needsSpecialMatrices
  nameWithType: FNode._needsSpecialMatrices
  fullName: FNode._needsSpecialMatrices
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._needsSpecialMatrices</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected bool _needsSpecialMatrices
    return:
      type: System.Boolean
    content.vb: Protected _needsSpecialMatrices As Boolean
- uid: Global.FNode._alpha
  commentId: F:Global.FNode._alpha
  id: _alpha
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _alpha
  nameWithType: FNode._alpha
  fullName: FNode._alpha
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._alpha</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _alpha
    return:
      type: System.Single
    content.vb: Protected _alpha As Single
- uid: Global.FNode._concatenatedAlpha
  commentId: F:Global.FNode._concatenatedAlpha
  id: _concatenatedAlpha
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _concatenatedAlpha
  nameWithType: FNode._concatenatedAlpha
  fullName: FNode._concatenatedAlpha
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._concatenatedAlpha</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _concatenatedAlpha
    return:
      type: System.Single
    content.vb: Protected _concatenatedAlpha As Single
- uid: Global.FNode._isAlphaDirty
  commentId: F:Global.FNode._isAlphaDirty
  id: _isAlphaDirty
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _isAlphaDirty
  nameWithType: FNode._isAlphaDirty
  fullName: FNode._isAlphaDirty
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._isAlphaDirty</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected bool _isAlphaDirty
    return:
      type: System.Boolean
    content.vb: Protected _isAlphaDirty As Boolean
- uid: Global.FNode._visibleScale
  commentId: F:Global.FNode._visibleScale
  id: _visibleScale
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _visibleScale
  nameWithType: FNode._visibleScale
  fullName: FNode._visibleScale
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._visibleScale</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected float _visibleScale
    return:
      type: System.Single
    content.vb: Protected _visibleScale As Single
- uid: Global.FNode._isOnStage
  commentId: F:Global.FNode._isOnStage
  id: _isOnStage
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _isOnStage
  nameWithType: FNode._isOnStage
  fullName: FNode._isOnStage
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._isOnStage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected bool _isOnStage
    return:
      type: System.Boolean
    content.vb: Protected _isOnStage As Boolean
- uid: Global.FNode._depth
  commentId: F:Global.FNode._depth
  id: _depth
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _depth
  nameWithType: FNode._depth
  fullName: FNode._depth
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._depth</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected int _depth
    return:
      type: System.Int32
    content.vb: Protected _depth As Integer
- uid: Global.FNode._stage
  commentId: F:Global.FNode._stage
  id: _stage
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _stage
  nameWithType: FNode._stage
  fullName: FNode._stage
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._stage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FStage _stage
    return:
      type: Global.FStage
    content.vb: Protected _stage As FStage
- uid: Global.FNode._isVisible
  commentId: F:Global.FNode._isVisible
  id: _isVisible
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: _isVisible
  nameWithType: FNode._isVisible
  fullName: FNode._isVisible
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode._isVisible</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected bool _isVisible
    return:
      type: System.Boolean
    content.vb: Protected _isVisible As Boolean
- uid: Global.FNode.data
  commentId: F:Global.FNode.data
  id: data
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: data
  nameWithType: FNode.data
  fullName: FNode.data
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FNode.data</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public object data
    return:
      type: System.Object
    content.vb: Public data As Object
- uid: Global.FNode.#ctor
  commentId: M:Global.FNode.#ctor
  id: '#ctor'
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: FNode()
  nameWithType: FNode.FNode()
  fullName: FNode.FNode()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FNode</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FNode()
    content.vb: Public Sub New()
  overload: Global.FNode.#ctor*
  nameWithType.vb: FNode.New()
  fullName.vb: FNode.New()
  name.vb: New()
- uid: Global.FNode.AddEnabler(FNodeEnabler)
  commentId: M:Global.FNode.AddEnabler(FNodeEnabler)
  id: AddEnabler(FNodeEnabler)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: AddEnabler(FNodeEnabler)
  nameWithType: FNode.AddEnabler(FNodeEnabler)
  fullName: FNode.AddEnabler(FNodeEnabler)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.AddEnabler(FNodeEnabler)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected void AddEnabler(FNodeEnabler enabler)
    parameters:
    - id: enabler
      type: Global.FNodeEnabler
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enabler</parameter>
            <parameter>M:FNode.AddEnabler(FNodeEnabler)</parameter>
          </include>
        </markup>
    content.vb: Protected Sub AddEnabler(enabler As FNodeEnabler)
  overload: Global.FNode.AddEnabler*
- uid: Global.FNode.RemoveEnabler(FNodeEnabler)
  commentId: M:Global.FNode.RemoveEnabler(FNodeEnabler)
  id: RemoveEnabler(FNodeEnabler)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveEnabler(FNodeEnabler)
  nameWithType: FNode.RemoveEnabler(FNodeEnabler)
  fullName: FNode.RemoveEnabler(FNodeEnabler)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveEnabler(FNodeEnabler)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected void RemoveEnabler(FNodeEnabler enabler)
    parameters:
    - id: enabler
      type: Global.FNodeEnabler
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enabler</parameter>
            <parameter>M:FNode.RemoveEnabler(FNodeEnabler)</parameter>
          </include>
        </markup>
    content.vb: Protected Sub RemoveEnabler(enabler As FNodeEnabler)
  overload: Global.FNode.RemoveEnabler*
- uid: Global.FNode.RemoveEnablerOfType(System.Type)
  commentId: M:Global.FNode.RemoveEnablerOfType(System.Type)
  id: RemoveEnablerOfType(System.Type)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveEnablerOfType(Type)
  nameWithType: FNode.RemoveEnablerOfType(Type)
  fullName: FNode.RemoveEnablerOfType(System.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveEnablerOfType(System.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected void RemoveEnablerOfType(Type enablerType)
    parameters:
    - id: enablerType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enablerType</parameter>
            <parameter>M:FNode.RemoveEnablerOfType(System.Type)</parameter>
          </include>
        </markup>
    content.vb: Protected Sub RemoveEnablerOfType(enablerType As Type)
  overload: Global.FNode.RemoveEnablerOfType*
- uid: Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  commentId: M:Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  id: ListenForResize(FScreen.ScreenResizeDelegate)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ListenForResize(ScreenResizeDelegate)
  nameWithType: FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  fullName: FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ListenForResize(FScreen.ScreenResizeDelegate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ListenForResize(FScreen.ScreenResizeDelegate handleResizeCallback)
    parameters:
    - id: handleResizeCallback
      type: Global.FScreen.ScreenResizeDelegate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handleResizeCallback</parameter>
            <parameter>M:FNode.ListenForResize(FScreen.ScreenResizeDelegate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ListenForResize(handleResizeCallback As FScreen.ScreenResizeDelegate)
  overload: Global.FNode.ListenForResize*
- uid: Global.FNode.RemoveListenForResize
  commentId: M:Global.FNode.RemoveListenForResize
  id: RemoveListenForResize
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveListenForResize()
  nameWithType: FNode.RemoveListenForResize()
  fullName: FNode.RemoveListenForResize()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveListenForResize</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveListenForResize()
    content.vb: Public Sub RemoveListenForResize()
  overload: Global.FNode.RemoveListenForResize*
- uid: Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  commentId: M:Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  id: ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ListenForOrientationChange(ScreenOrientationChangeDelegate)
  nameWithType: FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  fullName: FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate handleOrientationChangeCallback)
    parameters:
    - id: handleOrientationChangeCallback
      type: Global.FScreen.ScreenOrientationChangeDelegate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handleOrientationChangeCallback</parameter>
            <parameter>M:FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ListenForOrientationChange(handleOrientationChangeCallback As FScreen.ScreenOrientationChangeDelegate)
  overload: Global.FNode.ListenForOrientationChange*
- uid: Global.FNode.RemoveListenForOrientationChange
  commentId: M:Global.FNode.RemoveListenForOrientationChange
  id: RemoveListenForOrientationChange
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveListenForOrientationChange()
  nameWithType: FNode.RemoveListenForOrientationChange()
  fullName: FNode.RemoveListenForOrientationChange()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveListenForOrientationChange</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveListenForOrientationChange()
    content.vb: Public Sub RemoveListenForOrientationChange()
  overload: Global.FNode.RemoveListenForOrientationChange*
- uid: Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  id: ListenForUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ListenForUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ListenForUpdate(Futile.FutileUpdateDelegate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ListenForUpdate(Futile.FutileUpdateDelegate handleUpdateCallback)
    parameters:
    - id: handleUpdateCallback
      type: Global.Futile.FutileUpdateDelegate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handleUpdateCallback</parameter>
            <parameter>M:FNode.ListenForUpdate(Futile.FutileUpdateDelegate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ListenForUpdate(handleUpdateCallback As Futile.FutileUpdateDelegate)
  overload: Global.FNode.ListenForUpdate*
- uid: Global.FNode.RemoveListenForUpdate
  commentId: M:Global.FNode.RemoveListenForUpdate
  id: RemoveListenForUpdate
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveListenForUpdate()
  nameWithType: FNode.RemoveListenForUpdate()
  fullName: FNode.RemoveListenForUpdate()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveListenForUpdate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveListenForUpdate()
    content.vb: Public Sub RemoveListenForUpdate()
  overload: Global.FNode.RemoveListenForUpdate*
- uid: Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  id: ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ListenForAfterUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ListenForAfterUpdate(Futile.FutileUpdateDelegate handleUpdateCallback)
    parameters:
    - id: handleUpdateCallback
      type: Global.Futile.FutileUpdateDelegate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handleUpdateCallback</parameter>
            <parameter>M:FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ListenForAfterUpdate(handleUpdateCallback As Futile.FutileUpdateDelegate)
  overload: Global.FNode.ListenForAfterUpdate*
- uid: Global.FNode.RemoveListenForAfterUpdate
  commentId: M:Global.FNode.RemoveListenForAfterUpdate
  id: RemoveListenForAfterUpdate
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveListenForAfterUpdate()
  nameWithType: FNode.RemoveListenForAfterUpdate()
  fullName: FNode.RemoveListenForAfterUpdate()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveListenForAfterUpdate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveListenForAfterUpdate()
    content.vb: Public Sub RemoveListenForAfterUpdate()
  overload: Global.FNode.RemoveListenForAfterUpdate*
- uid: Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  id: ListenForLateUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ListenForLateUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ListenForLateUpdate(Futile.FutileUpdateDelegate handleUpdateCallback)
    parameters:
    - id: handleUpdateCallback
      type: Global.Futile.FutileUpdateDelegate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handleUpdateCallback</parameter>
            <parameter>M:FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ListenForLateUpdate(handleUpdateCallback As Futile.FutileUpdateDelegate)
  overload: Global.FNode.ListenForLateUpdate*
- uid: Global.FNode.RemoveListenForLateUpdate
  commentId: M:Global.FNode.RemoveListenForLateUpdate
  id: RemoveListenForLateUpdate
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveListenForLateUpdate()
  nameWithType: FNode.RemoveListenForLateUpdate()
  fullName: FNode.RemoveListenForLateUpdate()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveListenForLateUpdate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveListenForLateUpdate()
    content.vb: Public Sub RemoveListenForLateUpdate()
  overload: Global.FNode.RemoveListenForLateUpdate*
- uid: Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  id: ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ListenForFixedUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ListenForFixedUpdate(Futile.FutileUpdateDelegate handleUpdateCallback)
    parameters:
    - id: handleUpdateCallback
      type: Global.Futile.FutileUpdateDelegate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handleUpdateCallback</parameter>
            <parameter>M:FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ListenForFixedUpdate(handleUpdateCallback As Futile.FutileUpdateDelegate)
  overload: Global.FNode.ListenForFixedUpdate*
- uid: Global.FNode.RemoveListenForFixedUpdate
  commentId: M:Global.FNode.RemoveListenForFixedUpdate
  id: RemoveListenForFixedUpdate
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveListenForFixedUpdate()
  nameWithType: FNode.RemoveListenForFixedUpdate()
  fullName: FNode.RemoveListenForFixedUpdate()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveListenForFixedUpdate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveListenForFixedUpdate()
    content.vb: Public Sub RemoveListenForFixedUpdate()
  overload: Global.FNode.RemoveListenForFixedUpdate*
- uid: Global.FNode.EnableSingleTouch
  commentId: M:Global.FNode.EnableSingleTouch
  id: EnableSingleTouch
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: EnableSingleTouch()
  nameWithType: FNode.EnableSingleTouch()
  fullName: FNode.EnableSingleTouch()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.EnableSingleTouch</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void EnableSingleTouch()
    content.vb: Public Sub EnableSingleTouch()
  overload: Global.FNode.EnableSingleTouch*
- uid: Global.FNode.DisableSingleTouch
  commentId: M:Global.FNode.DisableSingleTouch
  id: DisableSingleTouch
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: DisableSingleTouch()
  nameWithType: FNode.DisableSingleTouch()
  fullName: FNode.DisableSingleTouch()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.DisableSingleTouch</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void DisableSingleTouch()
    content.vb: Public Sub DisableSingleTouch()
  overload: Global.FNode.DisableSingleTouch*
- uid: Global.FNode.EnableMultiTouch
  commentId: M:Global.FNode.EnableMultiTouch
  id: EnableMultiTouch
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: EnableMultiTouch()
  nameWithType: FNode.EnableMultiTouch()
  fullName: FNode.EnableMultiTouch()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.EnableMultiTouch</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void EnableMultiTouch()
    content.vb: Public Sub EnableMultiTouch()
  overload: Global.FNode.EnableMultiTouch*
- uid: Global.FNode.DisableMultiTouch
  commentId: M:Global.FNode.DisableMultiTouch
  id: DisableMultiTouch
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: DisableMultiTouch()
  nameWithType: FNode.DisableMultiTouch()
  fullName: FNode.DisableMultiTouch()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.DisableMultiTouch</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void DisableMultiTouch()
    content.vb: Public Sub DisableMultiTouch()
  overload: Global.FNode.DisableMultiTouch*
- uid: Global.FNode.EnableSmartTouch
  commentId: M:Global.FNode.EnableSmartTouch
  id: EnableSmartTouch
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: EnableSmartTouch()
  nameWithType: FNode.EnableSmartTouch()
  fullName: FNode.EnableSmartTouch()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.EnableSmartTouch</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void EnableSmartTouch()
    content.vb: Public Sub EnableSmartTouch()
  overload: Global.FNode.EnableSmartTouch*
- uid: Global.FNode.DisableSmartTouch
  commentId: M:Global.FNode.DisableSmartTouch
  id: DisableSmartTouch
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: DisableSmartTouch()
  nameWithType: FNode.DisableSmartTouch()
  fullName: FNode.DisableSmartTouch()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.DisableSmartTouch</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void DisableSmartTouch()
    content.vb: Public Sub DisableSmartTouch()
  overload: Global.FNode.DisableSmartTouch*
- uid: Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  commentId: M:Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  id: ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ListenForAddedOrRemoved(Delegate)
  nameWithType: FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  fullName: FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate handleAddedOrRemoved)
    parameters:
    - id: handleAddedOrRemoved
      type: Global.FNodeEnablerForAddedOrRemoved.Delegate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handleAddedOrRemoved</parameter>
            <parameter>M:FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ListenForAddedOrRemoved(handleAddedOrRemoved As FNodeEnablerForAddedOrRemoved.Delegate)
  overload: Global.FNode.ListenForAddedOrRemoved*
- uid: Global.FNode.RemoveListenForAddedOrRemoved
  commentId: M:Global.FNode.RemoveListenForAddedOrRemoved
  id: RemoveListenForAddedOrRemoved
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveListenForAddedOrRemoved()
  nameWithType: FNode.RemoveListenForAddedOrRemoved()
  fullName: FNode.RemoveListenForAddedOrRemoved()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveListenForAddedOrRemoved</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveListenForAddedOrRemoved()
    content.vb: Public Sub RemoveListenForAddedOrRemoved()
  overload: Global.FNode.RemoveListenForAddedOrRemoved*
- uid: Global.FNode.HandleAddedToStage
  commentId: M:Global.FNode.HandleAddedToStage
  id: HandleAddedToStage
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: HandleAddedToStage()
  nameWithType: FNode.HandleAddedToStage()
  fullName: FNode.HandleAddedToStage()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.HandleAddedToStage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void HandleAddedToStage()
    content.vb: Public Overridable Sub HandleAddedToStage()
  overload: Global.FNode.HandleAddedToStage*
- uid: Global.FNode.HandleRemovedFromStage
  commentId: M:Global.FNode.HandleRemovedFromStage
  id: HandleRemovedFromStage
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: HandleRemovedFromStage()
  nameWithType: FNode.HandleRemovedFromStage()
  fullName: FNode.HandleRemovedFromStage()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.HandleRemovedFromStage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void HandleRemovedFromStage()
    content.vb: Public Overridable Sub HandleRemovedFromStage()
  overload: Global.FNode.HandleRemovedFromStage*
- uid: Global.FNode.LocalToScreen(UnityEngine.Vector2)
  commentId: M:Global.FNode.LocalToScreen(UnityEngine.Vector2)
  id: LocalToScreen(UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: LocalToScreen(Vector2)
  nameWithType: FNode.LocalToScreen(Vector2)
  fullName: FNode.LocalToScreen(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.LocalToScreen(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 LocalToScreen(Vector2 localVector)
    parameters:
    - id: localVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localVector</parameter>
            <parameter>M:FNode.LocalToScreen(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.LocalToScreen(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function LocalToScreen(localVector As Vector2) As Vector2
  overload: Global.FNode.LocalToScreen*
- uid: Global.FNode.ScreenToLocal(UnityEngine.Vector2)
  commentId: M:Global.FNode.ScreenToLocal(UnityEngine.Vector2)
  id: ScreenToLocal(UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ScreenToLocal(Vector2)
  nameWithType: FNode.ScreenToLocal(Vector2)
  fullName: FNode.ScreenToLocal(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ScreenToLocal(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 ScreenToLocal(Vector2 screenVector)
    parameters:
    - id: screenVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>screenVector</parameter>
            <parameter>M:FNode.ScreenToLocal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.ScreenToLocal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function ScreenToLocal(screenVector As Vector2) As Vector2
  overload: Global.FNode.ScreenToLocal*
- uid: Global.FNode.LocalToStage(UnityEngine.Vector2)
  commentId: M:Global.FNode.LocalToStage(UnityEngine.Vector2)
  id: LocalToStage(UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: LocalToStage(Vector2)
  nameWithType: FNode.LocalToStage(Vector2)
  fullName: FNode.LocalToStage(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.LocalToStage(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 LocalToStage(Vector2 localVector)
    parameters:
    - id: localVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localVector</parameter>
            <parameter>M:FNode.LocalToStage(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.LocalToStage(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function LocalToStage(localVector As Vector2) As Vector2
  overload: Global.FNode.LocalToStage*
- uid: Global.FNode.StageToLocal(UnityEngine.Vector2)
  commentId: M:Global.FNode.StageToLocal(UnityEngine.Vector2)
  id: StageToLocal(UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: StageToLocal(Vector2)
  nameWithType: FNode.StageToLocal(Vector2)
  fullName: FNode.StageToLocal(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.StageToLocal(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 StageToLocal(Vector2 globalVector)
    parameters:
    - id: globalVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>globalVector</parameter>
            <parameter>M:FNode.StageToLocal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.StageToLocal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function StageToLocal(globalVector As Vector2) As Vector2
  overload: Global.FNode.StageToLocal*
- uid: Global.FNode.LocalToGlobal(UnityEngine.Vector2)
  commentId: M:Global.FNode.LocalToGlobal(UnityEngine.Vector2)
  id: LocalToGlobal(UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: LocalToGlobal(Vector2)
  nameWithType: FNode.LocalToGlobal(Vector2)
  fullName: FNode.LocalToGlobal(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.LocalToGlobal(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 LocalToGlobal(Vector2 localVector)
    parameters:
    - id: localVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localVector</parameter>
            <parameter>M:FNode.LocalToGlobal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.LocalToGlobal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function LocalToGlobal(localVector As Vector2) As Vector2
  overload: Global.FNode.LocalToGlobal*
- uid: Global.FNode.GlobalToLocal(UnityEngine.Vector2)
  commentId: M:Global.FNode.GlobalToLocal(UnityEngine.Vector2)
  id: GlobalToLocal(UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: GlobalToLocal(Vector2)
  nameWithType: FNode.GlobalToLocal(Vector2)
  fullName: FNode.GlobalToLocal(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.GlobalToLocal(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GlobalToLocal(Vector2 globalVector)
    parameters:
    - id: globalVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>globalVector</parameter>
            <parameter>M:FNode.GlobalToLocal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.GlobalToLocal(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function GlobalToLocal(globalVector As Vector2) As Vector2
  overload: Global.FNode.GlobalToLocal*
- uid: Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
  commentId: M:Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
  id: OtherToLocal(FNode,UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: OtherToLocal(FNode, Vector2)
  nameWithType: FNode.OtherToLocal(FNode, Vector2)
  fullName: FNode.OtherToLocal(FNode, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.OtherToLocal(FNode,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 OtherToLocal(FNode otherNode, Vector2 otherVector)
    parameters:
    - id: otherNode
      type: Global.FNode
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>otherNode</parameter>
            <parameter>M:FNode.OtherToLocal(FNode,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: otherVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>otherVector</parameter>
            <parameter>M:FNode.OtherToLocal(FNode,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.OtherToLocal(FNode,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function OtherToLocal(otherNode As FNode, otherVector As Vector2) As Vector2
  overload: Global.FNode.OtherToLocal*
- uid: Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
  commentId: M:Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
  id: LocalToOther(UnityEngine.Vector2,FNode)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: LocalToOther(Vector2, FNode)
  nameWithType: FNode.LocalToOther(Vector2, FNode)
  fullName: FNode.LocalToOther(UnityEngine.Vector2, FNode)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.LocalToOther(UnityEngine.Vector2,FNode)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 LocalToOther(Vector2 localVector, FNode otherNode)
    parameters:
    - id: localVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localVector</parameter>
            <parameter>M:FNode.LocalToOther(UnityEngine.Vector2,FNode)</parameter>
          </include>
        </markup>
    - id: otherNode
      type: Global.FNode
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>otherNode</parameter>
            <parameter>M:FNode.LocalToOther(UnityEngine.Vector2,FNode)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.LocalToOther(UnityEngine.Vector2,FNode)</parameter>
          </include>
        </markup>
    content.vb: Public Function LocalToOther(localVector As Vector2, otherNode As FNode) As Vector2
  overload: Global.FNode.LocalToOther*
- uid: Global.FNode.GetLocalMousePosition
  commentId: M:Global.FNode.GetLocalMousePosition
  id: GetLocalMousePosition
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: GetLocalMousePosition()
  nameWithType: FNode.GetLocalMousePosition()
  fullName: FNode.GetLocalMousePosition()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.GetLocalMousePosition</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetLocalMousePosition()
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.GetLocalMousePosition</parameter>
          </include>
        </markup>
    content.vb: Public Function GetLocalMousePosition() As Vector2
  overload: Global.FNode.GetLocalMousePosition*
- uid: Global.FNode.GetLocalTouchPosition(FTouch)
  commentId: M:Global.FNode.GetLocalTouchPosition(FTouch)
  id: GetLocalTouchPosition(FTouch)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: GetLocalTouchPosition(FTouch)
  nameWithType: FNode.GetLocalTouchPosition(FTouch)
  fullName: FNode.GetLocalTouchPosition(FTouch)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.GetLocalTouchPosition(FTouch)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetLocalTouchPosition(FTouch touch)
    parameters:
    - id: touch
      type: Global.FTouch
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>touch</parameter>
            <parameter>M:FNode.GetLocalTouchPosition(FTouch)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.GetLocalTouchPosition(FTouch)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetLocalTouchPosition(touch As FTouch) As Vector2
  overload: Global.FNode.GetLocalTouchPosition*
- uid: Global.FNode.UpdateMatrix
  commentId: M:Global.FNode.UpdateMatrix
  id: UpdateMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: UpdateMatrix()
  nameWithType: FNode.UpdateMatrix()
  fullName: FNode.UpdateMatrix()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.UpdateMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UpdateMatrix()
    content.vb: Public Sub UpdateMatrix()
  overload: Global.FNode.UpdateMatrix*
- uid: Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
  commentId: M:Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
  id: UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: UpdateDepthMatrixAlpha(bool, bool)
  nameWithType: FNode.UpdateDepthMatrixAlpha(bool, bool)
  fullName: FNode.UpdateDepthMatrixAlpha(bool, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected virtual void UpdateDepthMatrixAlpha(bool shouldForceDirty, bool shouldUpdateDepth)
    parameters:
    - id: shouldForceDirty
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shouldForceDirty</parameter>
            <parameter>M:FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: shouldUpdateDepth
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shouldUpdateDepth</parameter>
            <parameter>M:FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Protected Overridable Sub UpdateDepthMatrixAlpha(shouldForceDirty As Boolean, shouldUpdateDepth As Boolean)
  overload: Global.FNode.UpdateDepthMatrixAlpha*
  nameWithType.vb: FNode.UpdateDepthMatrixAlpha(Boolean, Boolean)
  fullName.vb: FNode.UpdateDepthMatrixAlpha(Boolean, Boolean)
  name.vb: UpdateDepthMatrixAlpha(Boolean, Boolean)
- uid: Global.FNode.Redraw(System.Boolean,System.Boolean)
  commentId: M:Global.FNode.Redraw(System.Boolean,System.Boolean)
  id: Redraw(System.Boolean,System.Boolean)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: Redraw(bool, bool)
  nameWithType: FNode.Redraw(bool, bool)
  fullName: FNode.Redraw(bool, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.Redraw(System.Boolean,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void Redraw(bool shouldForceDirty, bool shouldUpdateDepth)
    parameters:
    - id: shouldForceDirty
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shouldForceDirty</parameter>
            <parameter>M:FNode.Redraw(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: shouldUpdateDepth
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shouldUpdateDepth</parameter>
            <parameter>M:FNode.Redraw(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Overridable Sub Redraw(shouldForceDirty As Boolean, shouldUpdateDepth As Boolean)
  overload: Global.FNode.Redraw*
  nameWithType.vb: FNode.Redraw(Boolean, Boolean)
  fullName.vb: FNode.Redraw(Boolean, Boolean)
  name.vb: Redraw(Boolean, Boolean)
- uid: Global.FNode.HandleAddedToContainer(FContainer)
  commentId: M:Global.FNode.HandleAddedToContainer(FContainer)
  id: HandleAddedToContainer(FContainer)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: HandleAddedToContainer(FContainer)
  nameWithType: FNode.HandleAddedToContainer(FContainer)
  fullName: FNode.HandleAddedToContainer(FContainer)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.HandleAddedToContainer(FContainer)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void HandleAddedToContainer(FContainer container)
    parameters:
    - id: container
      type: Global.FContainer
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>container</parameter>
            <parameter>M:FNode.HandleAddedToContainer(FContainer)</parameter>
          </include>
        </markup>
    content.vb: Public Overridable Sub HandleAddedToContainer(container As FContainer)
  overload: Global.FNode.HandleAddedToContainer*
- uid: Global.FNode.HandleRemovedFromContainer
  commentId: M:Global.FNode.HandleRemovedFromContainer
  id: HandleRemovedFromContainer
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: HandleRemovedFromContainer()
  nameWithType: FNode.HandleRemovedFromContainer()
  fullName: FNode.HandleRemovedFromContainer()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.HandleRemovedFromContainer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void HandleRemovedFromContainer()
    content.vb: Public Overridable Sub HandleRemovedFromContainer()
  overload: Global.FNode.HandleRemovedFromContainer*
- uid: Global.FNode.RemoveFromContainer
  commentId: M:Global.FNode.RemoveFromContainer
  id: RemoveFromContainer
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RemoveFromContainer()
  nameWithType: FNode.RemoveFromContainer()
  fullName: FNode.RemoveFromContainer()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RemoveFromContainer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveFromContainer()
    content.vb: Public Sub RemoveFromContainer()
  overload: Global.FNode.RemoveFromContainer*
- uid: Global.FNode.MoveToFront
  commentId: M:Global.FNode.MoveToFront
  id: MoveToFront
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: MoveToFront()
  nameWithType: FNode.MoveToFront()
  fullName: FNode.MoveToFront()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.MoveToFront</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveToFront()
    content.vb: Public Sub MoveToFront()
  overload: Global.FNode.MoveToFront*
- uid: Global.FNode.MoveToBack
  commentId: M:Global.FNode.MoveToBack
  id: MoveToBack
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: MoveToBack()
  nameWithType: FNode.MoveToBack()
  fullName: FNode.MoveToBack()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.MoveToBack</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveToBack()
    content.vb: Public Sub MoveToBack()
  overload: Global.FNode.MoveToBack*
- uid: Global.FNode.MoveInFrontOfOtherNode(FNode)
  commentId: M:Global.FNode.MoveInFrontOfOtherNode(FNode)
  id: MoveInFrontOfOtherNode(FNode)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: MoveInFrontOfOtherNode(FNode)
  nameWithType: FNode.MoveInFrontOfOtherNode(FNode)
  fullName: FNode.MoveInFrontOfOtherNode(FNode)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.MoveInFrontOfOtherNode(FNode)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveInFrontOfOtherNode(FNode otherNode)
    parameters:
    - id: otherNode
      type: Global.FNode
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>otherNode</parameter>
            <parameter>M:FNode.MoveInFrontOfOtherNode(FNode)</parameter>
          </include>
        </markup>
    content.vb: Public Sub MoveInFrontOfOtherNode(otherNode As FNode)
  overload: Global.FNode.MoveInFrontOfOtherNode*
- uid: Global.FNode.MoveBehindOtherNode(FNode)
  commentId: M:Global.FNode.MoveBehindOtherNode(FNode)
  id: MoveBehindOtherNode(FNode)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: MoveBehindOtherNode(FNode)
  nameWithType: FNode.MoveBehindOtherNode(FNode)
  fullName: FNode.MoveBehindOtherNode(FNode)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.MoveBehindOtherNode(FNode)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveBehindOtherNode(FNode otherNode)
    parameters:
    - id: otherNode
      type: Global.FNode
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>otherNode</parameter>
            <parameter>M:FNode.MoveBehindOtherNode(FNode)</parameter>
          </include>
        </markup>
    content.vb: Public Sub MoveBehindOtherNode(otherNode As FNode)
  overload: Global.FNode.MoveBehindOtherNode*
- uid: Global.FNode.IsAncestryVisible
  commentId: M:Global.FNode.IsAncestryVisible
  id: IsAncestryVisible
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: IsAncestryVisible()
  nameWithType: FNode.IsAncestryVisible()
  fullName: FNode.IsAncestryVisible()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.IsAncestryVisible</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsAncestryVisible()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.IsAncestryVisible</parameter>
          </include>
        </markup>
    content.vb: Public Function IsAncestryVisible() As Boolean
  overload: Global.FNode.IsAncestryVisible*
- uid: Global.FNode.CreateSpecialMatrices
  commentId: M:Global.FNode.CreateSpecialMatrices
  id: CreateSpecialMatrices
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: CreateSpecialMatrices()
  nameWithType: FNode.CreateSpecialMatrices()
  fullName: FNode.CreateSpecialMatrices()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.CreateSpecialMatrices</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected void CreateSpecialMatrices()
    content.vb: Protected Sub CreateSpecialMatrices()
  overload: Global.FNode.CreateSpecialMatrices*
- uid: Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
  commentId: M:Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
  id: RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RotateAroundPointRelative(Vector2, float)
  nameWithType: FNode.RotateAroundPointRelative(Vector2, float)
  fullName: FNode.RotateAroundPointRelative(UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RotateAroundPointRelative(Vector2 localPoint, float relativeDegrees)
    parameters:
    - id: localPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localPoint</parameter>
            <parameter>M:FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: relativeDegrees
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>relativeDegrees</parameter>
            <parameter>M:FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RotateAroundPointRelative(localPoint As Vector2, relativeDegrees As Single)
  overload: Global.FNode.RotateAroundPointRelative*
  nameWithType.vb: FNode.RotateAroundPointRelative(Vector2, Single)
  fullName.vb: FNode.RotateAroundPointRelative(UnityEngine.Vector2, Single)
  name.vb: RotateAroundPointRelative(Vector2, Single)
- uid: Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
  commentId: M:Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
  id: RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: RotateAroundPointAbsolute(Vector2, float)
  nameWithType: FNode.RotateAroundPointAbsolute(Vector2, float)
  fullName: FNode.RotateAroundPointAbsolute(UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RotateAroundPointAbsolute(Vector2 localPoint, float absoluteDegrees)
    parameters:
    - id: localPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localPoint</parameter>
            <parameter>M:FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: absoluteDegrees
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>absoluteDegrees</parameter>
            <parameter>M:FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RotateAroundPointAbsolute(localPoint As Vector2, absoluteDegrees As Single)
  overload: Global.FNode.RotateAroundPointAbsolute*
  nameWithType.vb: FNode.RotateAroundPointAbsolute(Vector2, Single)
  fullName.vb: FNode.RotateAroundPointAbsolute(UnityEngine.Vector2, Single)
  name.vb: RotateAroundPointAbsolute(Vector2, Single)
- uid: Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
  id: ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ScaleAroundPointRelative(Vector2, float, float)
  nameWithType: FNode.ScaleAroundPointRelative(Vector2, float, float)
  fullName: FNode.ScaleAroundPointRelative(UnityEngine.Vector2, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ScaleAroundPointRelative(Vector2 localPoint, float relativeScaleX, float relativeScaleY)
    parameters:
    - id: localPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localPoint</parameter>
            <parameter>M:FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: relativeScaleX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>relativeScaleX</parameter>
            <parameter>M:FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: relativeScaleY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>relativeScaleY</parameter>
            <parameter>M:FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ScaleAroundPointRelative(localPoint As Vector2, relativeScaleX As Single, relativeScaleY As Single)
  overload: Global.FNode.ScaleAroundPointRelative*
  nameWithType.vb: FNode.ScaleAroundPointRelative(Vector2, Single, Single)
  fullName.vb: FNode.ScaleAroundPointRelative(UnityEngine.Vector2, Single, Single)
  name.vb: ScaleAroundPointRelative(Vector2, Single, Single)
- uid: Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
  id: ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: ScaleAroundPointAbsolute(Vector2, float, float)
  nameWithType: FNode.ScaleAroundPointAbsolute(Vector2, float, float)
  fullName: FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ScaleAroundPointAbsolute(Vector2 localPoint, float absoluteScaleX, float absoluteScaleY)
    parameters:
    - id: localPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localPoint</parameter>
            <parameter>M:FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: absoluteScaleX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>absoluteScaleX</parameter>
            <parameter>M:FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: absoluteScaleY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>absoluteScaleY</parameter>
            <parameter>M:FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ScaleAroundPointAbsolute(localPoint As Vector2, absoluteScaleX As Single, absoluteScaleY As Single)
  overload: Global.FNode.ScaleAroundPointAbsolute*
  nameWithType.vb: FNode.ScaleAroundPointAbsolute(Vector2, Single, Single)
  fullName.vb: FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2, Single, Single)
  name.vb: ScaleAroundPointAbsolute(Vector2, Single, Single)
- uid: Global.FNode.SetPosition(System.Single,System.Single)
  commentId: M:Global.FNode.SetPosition(System.Single,System.Single)
  id: SetPosition(System.Single,System.Single)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: SetPosition(float, float)
  nameWithType: FNode.SetPosition(float, float)
  fullName: FNode.SetPosition(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.SetPosition(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SetPosition(float newX, float newY)
    parameters:
    - id: newX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newX</parameter>
            <parameter>M:FNode.SetPosition(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: newY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newY</parameter>
            <parameter>M:FNode.SetPosition(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SetPosition(newX As Single, newY As Single)
  overload: Global.FNode.SetPosition*
  nameWithType.vb: FNode.SetPosition(Single, Single)
  fullName.vb: FNode.SetPosition(Single, Single)
  name.vb: SetPosition(Single, Single)
- uid: Global.FNode.SetPosition(UnityEngine.Vector2)
  commentId: M:Global.FNode.SetPosition(UnityEngine.Vector2)
  id: SetPosition(UnityEngine.Vector2)
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: SetPosition(Vector2)
  nameWithType: FNode.SetPosition(Vector2)
  fullName: FNode.SetPosition(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.SetPosition(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SetPosition(Vector2 newPosition)
    parameters:
    - id: newPosition
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newPosition</parameter>
            <parameter>M:FNode.SetPosition(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SetPosition(newPosition As Vector2)
  overload: Global.FNode.SetPosition*
- uid: Global.FNode.GetPosition
  commentId: M:Global.FNode.GetPosition
  id: GetPosition
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: GetPosition()
  nameWithType: FNode.GetPosition()
  fullName: FNode.GetPosition()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FNode.GetPosition</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetPosition()
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FNode.GetPosition</parameter>
          </include>
        </markup>
    content.vb: Public Function GetPosition() As Vector2
  overload: Global.FNode.GetPosition*
- uid: Global.FNode.isVisible
  commentId: P:Global.FNode.isVisible
  id: isVisible
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: isVisible
  nameWithType: FNode.isVisible
  fullName: FNode.isVisible
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.isVisible</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool isVisible { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property isVisible As Boolean
  overload: Global.FNode.isVisible*
- uid: Global.FNode.x
  commentId: P:Global.FNode.x
  id: x
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: x
  nameWithType: FNode.x
  fullName: FNode.x
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.x</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float x { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property x As Single
  overload: Global.FNode.x*
- uid: Global.FNode.y
  commentId: P:Global.FNode.y
  id: y
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: y
  nameWithType: FNode.y
  fullName: FNode.y
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.y</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float y { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property y As Single
  overload: Global.FNode.y*
- uid: Global.FNode.meshZ
  commentId: P:Global.FNode.meshZ
  id: meshZ
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: meshZ
  nameWithType: FNode.meshZ
  fullName: FNode.meshZ
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.meshZ</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float meshZ { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property meshZ As Single
  overload: Global.FNode.meshZ*
- uid: Global.FNode.sortZ
  commentId: P:Global.FNode.sortZ
  id: sortZ
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: sortZ
  nameWithType: FNode.sortZ
  fullName: FNode.sortZ
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.sortZ</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual float sortZ { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Overridable Property sortZ As Single
  overload: Global.FNode.sortZ*
- uid: Global.FNode.scaleX
  commentId: P:Global.FNode.scaleX
  id: scaleX
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: scaleX
  nameWithType: FNode.scaleX
  fullName: FNode.scaleX
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.scaleX</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float scaleX { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property scaleX As Single
  overload: Global.FNode.scaleX*
- uid: Global.FNode.scaleY
  commentId: P:Global.FNode.scaleY
  id: scaleY
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: scaleY
  nameWithType: FNode.scaleY
  fullName: FNode.scaleY
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.scaleY</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float scaleY { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property scaleY As Single
  overload: Global.FNode.scaleY*
- uid: Global.FNode.scale
  commentId: P:Global.FNode.scale
  id: scale
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: scale
  nameWithType: FNode.scale
  fullName: FNode.scale
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.scale</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float scale { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property scale As Single
  overload: Global.FNode.scale*
- uid: Global.FNode.rotation
  commentId: P:Global.FNode.rotation
  id: rotation
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: rotation
  nameWithType: FNode.rotation
  fullName: FNode.rotation
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.rotation</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float rotation { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property rotation As Single
  overload: Global.FNode.rotation*
- uid: Global.FNode.isMatrixDirty
  commentId: P:Global.FNode.isMatrixDirty
  id: isMatrixDirty
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: isMatrixDirty
  nameWithType: FNode.isMatrixDirty
  fullName: FNode.isMatrixDirty
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.isMatrixDirty</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool isMatrixDirty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property isMatrixDirty As Boolean
  overload: Global.FNode.isMatrixDirty*
- uid: Global.FNode.container
  commentId: P:Global.FNode.container
  id: container
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: container
  nameWithType: FNode.container
  fullName: FNode.container
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.container</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FContainer container { get; }
    parameters: []
    return:
      type: Global.FContainer
    content.vb: Public ReadOnly Property container As FContainer
  overload: Global.FNode.container*
- uid: Global.FNode.depth
  commentId: P:Global.FNode.depth
  id: depth
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: depth
  nameWithType: FNode.depth
  fullName: FNode.depth
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.depth</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int depth { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property depth As Integer
  overload: Global.FNode.depth*
- uid: Global.FNode.touchPriority
  commentId: P:Global.FNode.touchPriority
  id: touchPriority
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: touchPriority
  nameWithType: FNode.touchPriority
  fullName: FNode.touchPriority
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.touchPriority</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual int touchPriority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property touchPriority As Integer
  overload: Global.FNode.touchPriority*
- uid: Global.FNode.matrix
  commentId: P:Global.FNode.matrix
  id: matrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: matrix
  nameWithType: FNode.matrix
  fullName: FNode.matrix
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.matrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual FMatrix matrix { get; }
    parameters: []
    return:
      type: Global.FMatrix
    content.vb: Public Overridable ReadOnly Property matrix As FMatrix
  overload: Global.FNode.matrix*
- uid: Global.FNode.concatenatedMatrix
  commentId: P:Global.FNode.concatenatedMatrix
  id: concatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: concatenatedMatrix
  nameWithType: FNode.concatenatedMatrix
  fullName: FNode.concatenatedMatrix
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.concatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual FMatrix concatenatedMatrix { get; }
    parameters: []
    return:
      type: Global.FMatrix
    content.vb: Public Overridable ReadOnly Property concatenatedMatrix As FMatrix
  overload: Global.FNode.concatenatedMatrix*
- uid: Global.FNode.inverseConcatenatedMatrix
  commentId: P:Global.FNode.inverseConcatenatedMatrix
  id: inverseConcatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: inverseConcatenatedMatrix
  nameWithType: FNode.inverseConcatenatedMatrix
  fullName: FNode.inverseConcatenatedMatrix
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.inverseConcatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual FMatrix inverseConcatenatedMatrix { get; }
    parameters: []
    return:
      type: Global.FMatrix
    content.vb: Public Overridable ReadOnly Property inverseConcatenatedMatrix As FMatrix
  overload: Global.FNode.inverseConcatenatedMatrix*
- uid: Global.FNode.screenConcatenatedMatrix
  commentId: P:Global.FNode.screenConcatenatedMatrix
  id: screenConcatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: screenConcatenatedMatrix
  nameWithType: FNode.screenConcatenatedMatrix
  fullName: FNode.screenConcatenatedMatrix
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.screenConcatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual FMatrix screenConcatenatedMatrix { get; }
    parameters: []
    return:
      type: Global.FMatrix
    content.vb: Public Overridable ReadOnly Property screenConcatenatedMatrix As FMatrix
  overload: Global.FNode.screenConcatenatedMatrix*
- uid: Global.FNode.screenInverseConcatenatedMatrix
  commentId: P:Global.FNode.screenInverseConcatenatedMatrix
  id: screenInverseConcatenatedMatrix
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: screenInverseConcatenatedMatrix
  nameWithType: FNode.screenInverseConcatenatedMatrix
  fullName: FNode.screenInverseConcatenatedMatrix
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.screenInverseConcatenatedMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual FMatrix screenInverseConcatenatedMatrix { get; }
    parameters: []
    return:
      type: Global.FMatrix
    content.vb: Public Overridable ReadOnly Property screenInverseConcatenatedMatrix As FMatrix
  overload: Global.FNode.screenInverseConcatenatedMatrix*
- uid: Global.FNode.alpha
  commentId: P:Global.FNode.alpha
  id: alpha
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: alpha
  nameWithType: FNode.alpha
  fullName: FNode.alpha
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.alpha</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float alpha { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property alpha As Single
  overload: Global.FNode.alpha*
- uid: Global.FNode.concatenatedAlpha
  commentId: P:Global.FNode.concatenatedAlpha
  id: concatenatedAlpha
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: concatenatedAlpha
  nameWithType: FNode.concatenatedAlpha
  fullName: FNode.concatenatedAlpha
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.concatenatedAlpha</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float concatenatedAlpha { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property concatenatedAlpha As Single
  overload: Global.FNode.concatenatedAlpha*
- uid: Global.FNode.stage
  commentId: P:Global.FNode.stage
  id: stage
  parent: Global.FNode
  langs:
  - csharp
  - vb
  name: stage
  nameWithType: FNode.stage
  fullName: FNode.stage
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FNode.stage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FStage stage { get; set; }
    parameters: []
    return:
      type: Global.FStage
    content.vb: Public Property stage As FStage
  overload: Global.FNode.stage*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.FContainer
  commentId: T:Global.FContainer
  isExternal: true
  href: FContainer.html
  name: FContainer
  nameWithType: FContainer
  fullName: FContainer
- uid: Global.FMatrix
  commentId: T:Global.FMatrix
  isExternal: true
  href: FMatrix.html
  name: FMatrix
  nameWithType: FMatrix
  fullName: FMatrix
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.FStage
  commentId: T:Global.FStage
  isExternal: true
  href: FStage.html
  name: FStage
  nameWithType: FStage
  fullName: FStage
- uid: Global.FNode.#ctor*
  commentId: Overload:Global.FNode.#ctor
  isExternal: true
  href: Global.FNode.html#FNode__ctor
  name: FNode
  nameWithType: FNode.FNode
  fullName: FNode.FNode
  nameWithType.vb: FNode.New
  fullName.vb: FNode.New
  name.vb: New
- uid: Global.FNode.AddEnabler*
  commentId: Overload:Global.FNode.AddEnabler
  isExternal: true
  href: Global.FNode.html#FNode_AddEnabler_FNodeEnabler_
  name: AddEnabler
  nameWithType: FNode.AddEnabler
  fullName: FNode.AddEnabler
- uid: Global.FNodeEnabler
  commentId: T:Global.FNodeEnabler
  isExternal: true
  href: FNodeEnabler.html
  name: FNodeEnabler
  nameWithType: FNodeEnabler
  fullName: FNodeEnabler
- uid: Global.FNode.RemoveEnabler*
  commentId: Overload:Global.FNode.RemoveEnabler
  isExternal: true
  href: Global.FNode.html#FNode_RemoveEnabler_FNodeEnabler_
  name: RemoveEnabler
  nameWithType: FNode.RemoveEnabler
  fullName: FNode.RemoveEnabler
- uid: Global.FNode.RemoveEnablerOfType*
  commentId: Overload:Global.FNode.RemoveEnablerOfType
  isExternal: true
  href: Global.FNode.html#FNode_RemoveEnablerOfType_System_Type_
  name: RemoveEnablerOfType
  nameWithType: FNode.RemoveEnablerOfType
  fullName: FNode.RemoveEnablerOfType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Global.FNode.ListenForResize*
  commentId: Overload:Global.FNode.ListenForResize
  isExternal: true
  href: Global.FNode.html#FNode_ListenForResize_FScreen_ScreenResizeDelegate_
  name: ListenForResize
  nameWithType: FNode.ListenForResize
  fullName: FNode.ListenForResize
- uid: Global.FScreen.ScreenResizeDelegate
  commentId: T:Global.FScreen.ScreenResizeDelegate
  isExternal: true
  href: FScreen.html
  name: FScreen.ScreenResizeDelegate
  nameWithType: FScreen.ScreenResizeDelegate
  fullName: FScreen.ScreenResizeDelegate
  spec.csharp:
  - uid: Global.FScreen
    name: FScreen
    isExternal: true
    href: FScreen.html
  - name: .
  - uid: Global.FScreen.ScreenResizeDelegate
    name: ScreenResizeDelegate
    isExternal: true
    href: FScreen.ScreenResizeDelegate.html
  spec.vb:
  - uid: Global.FScreen
    name: FScreen
    isExternal: true
    href: FScreen.html
  - name: .
  - uid: Global.FScreen.ScreenResizeDelegate
    name: ScreenResizeDelegate
    isExternal: true
    href: FScreen.ScreenResizeDelegate.html
- uid: Global.FNode.RemoveListenForResize*
  commentId: Overload:Global.FNode.RemoveListenForResize
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForResize
  name: RemoveListenForResize
  nameWithType: FNode.RemoveListenForResize
  fullName: FNode.RemoveListenForResize
- uid: Global.FNode.ListenForOrientationChange*
  commentId: Overload:Global.FNode.ListenForOrientationChange
  isExternal: true
  href: Global.FNode.html#FNode_ListenForOrientationChange_FScreen_ScreenOrientationChangeDelegate_
  name: ListenForOrientationChange
  nameWithType: FNode.ListenForOrientationChange
  fullName: FNode.ListenForOrientationChange
- uid: Global.FScreen.ScreenOrientationChangeDelegate
  commentId: T:Global.FScreen.ScreenOrientationChangeDelegate
  isExternal: true
  href: FScreen.html
  name: FScreen.ScreenOrientationChangeDelegate
  nameWithType: FScreen.ScreenOrientationChangeDelegate
  fullName: FScreen.ScreenOrientationChangeDelegate
  spec.csharp:
  - uid: Global.FScreen
    name: FScreen
    isExternal: true
    href: FScreen.html
  - name: .
  - uid: Global.FScreen.ScreenOrientationChangeDelegate
    name: ScreenOrientationChangeDelegate
    isExternal: true
    href: FScreen.ScreenOrientationChangeDelegate.html
  spec.vb:
  - uid: Global.FScreen
    name: FScreen
    isExternal: true
    href: FScreen.html
  - name: .
  - uid: Global.FScreen.ScreenOrientationChangeDelegate
    name: ScreenOrientationChangeDelegate
    isExternal: true
    href: FScreen.ScreenOrientationChangeDelegate.html
- uid: Global.FNode.RemoveListenForOrientationChange*
  commentId: Overload:Global.FNode.RemoveListenForOrientationChange
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForOrientationChange
  name: RemoveListenForOrientationChange
  nameWithType: FNode.RemoveListenForOrientationChange
  fullName: FNode.RemoveListenForOrientationChange
- uid: Global.FNode.ListenForUpdate*
  commentId: Overload:Global.FNode.ListenForUpdate
  isExternal: true
  href: Global.FNode.html#FNode_ListenForUpdate_Futile_FutileUpdateDelegate_
  name: ListenForUpdate
  nameWithType: FNode.ListenForUpdate
  fullName: FNode.ListenForUpdate
- uid: Global.Futile.FutileUpdateDelegate
  commentId: T:Global.Futile.FutileUpdateDelegate
  isExternal: true
  href: Futile.html
  name: Futile.FutileUpdateDelegate
  nameWithType: Futile.FutileUpdateDelegate
  fullName: Futile.FutileUpdateDelegate
  spec.csharp:
  - uid: Global.Futile
    name: Futile
    isExternal: true
    href: Futile.html
  - name: .
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  spec.vb:
  - uid: Global.Futile
    name: Futile
    isExternal: true
    href: Futile.html
  - name: .
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
- uid: Global.FNode.RemoveListenForUpdate*
  commentId: Overload:Global.FNode.RemoveListenForUpdate
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForUpdate
  name: RemoveListenForUpdate
  nameWithType: FNode.RemoveListenForUpdate
  fullName: FNode.RemoveListenForUpdate
- uid: Global.FNode.ListenForAfterUpdate*
  commentId: Overload:Global.FNode.ListenForAfterUpdate
  isExternal: true
  href: Global.FNode.html#FNode_ListenForAfterUpdate_Futile_FutileUpdateDelegate_
  name: ListenForAfterUpdate
  nameWithType: FNode.ListenForAfterUpdate
  fullName: FNode.ListenForAfterUpdate
- uid: Global.FNode.RemoveListenForAfterUpdate*
  commentId: Overload:Global.FNode.RemoveListenForAfterUpdate
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForAfterUpdate
  name: RemoveListenForAfterUpdate
  nameWithType: FNode.RemoveListenForAfterUpdate
  fullName: FNode.RemoveListenForAfterUpdate
- uid: Global.FNode.ListenForLateUpdate*
  commentId: Overload:Global.FNode.ListenForLateUpdate
  isExternal: true
  href: Global.FNode.html#FNode_ListenForLateUpdate_Futile_FutileUpdateDelegate_
  name: ListenForLateUpdate
  nameWithType: FNode.ListenForLateUpdate
  fullName: FNode.ListenForLateUpdate
- uid: Global.FNode.RemoveListenForLateUpdate*
  commentId: Overload:Global.FNode.RemoveListenForLateUpdate
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForLateUpdate
  name: RemoveListenForLateUpdate
  nameWithType: FNode.RemoveListenForLateUpdate
  fullName: FNode.RemoveListenForLateUpdate
- uid: Global.FNode.ListenForFixedUpdate*
  commentId: Overload:Global.FNode.ListenForFixedUpdate
  isExternal: true
  href: Global.FNode.html#FNode_ListenForFixedUpdate_Futile_FutileUpdateDelegate_
  name: ListenForFixedUpdate
  nameWithType: FNode.ListenForFixedUpdate
  fullName: FNode.ListenForFixedUpdate
- uid: Global.FNode.RemoveListenForFixedUpdate*
  commentId: Overload:Global.FNode.RemoveListenForFixedUpdate
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForFixedUpdate
  name: RemoveListenForFixedUpdate
  nameWithType: FNode.RemoveListenForFixedUpdate
  fullName: FNode.RemoveListenForFixedUpdate
- uid: Global.FNode.EnableSingleTouch*
  commentId: Overload:Global.FNode.EnableSingleTouch
  isExternal: true
  href: Global.FNode.html#FNode_EnableSingleTouch
  name: EnableSingleTouch
  nameWithType: FNode.EnableSingleTouch
  fullName: FNode.EnableSingleTouch
- uid: Global.FNode.DisableSingleTouch*
  commentId: Overload:Global.FNode.DisableSingleTouch
  isExternal: true
  href: Global.FNode.html#FNode_DisableSingleTouch
  name: DisableSingleTouch
  nameWithType: FNode.DisableSingleTouch
  fullName: FNode.DisableSingleTouch
- uid: Global.FNode.EnableMultiTouch*
  commentId: Overload:Global.FNode.EnableMultiTouch
  isExternal: true
  href: Global.FNode.html#FNode_EnableMultiTouch
  name: EnableMultiTouch
  nameWithType: FNode.EnableMultiTouch
  fullName: FNode.EnableMultiTouch
- uid: Global.FNode.DisableMultiTouch*
  commentId: Overload:Global.FNode.DisableMultiTouch
  isExternal: true
  href: Global.FNode.html#FNode_DisableMultiTouch
  name: DisableMultiTouch
  nameWithType: FNode.DisableMultiTouch
  fullName: FNode.DisableMultiTouch
- uid: Global.FNode.EnableSmartTouch*
  commentId: Overload:Global.FNode.EnableSmartTouch
  isExternal: true
  href: Global.FNode.html#FNode_EnableSmartTouch
  name: EnableSmartTouch
  nameWithType: FNode.EnableSmartTouch
  fullName: FNode.EnableSmartTouch
- uid: Global.FNode.DisableSmartTouch*
  commentId: Overload:Global.FNode.DisableSmartTouch
  isExternal: true
  href: Global.FNode.html#FNode_DisableSmartTouch
  name: DisableSmartTouch
  nameWithType: FNode.DisableSmartTouch
  fullName: FNode.DisableSmartTouch
- uid: Global.FNode.ListenForAddedOrRemoved*
  commentId: Overload:Global.FNode.ListenForAddedOrRemoved
  isExternal: true
  href: Global.FNode.html#FNode_ListenForAddedOrRemoved_FNodeEnablerForAddedOrRemoved_Delegate_
  name: ListenForAddedOrRemoved
  nameWithType: FNode.ListenForAddedOrRemoved
  fullName: FNode.ListenForAddedOrRemoved
- uid: Global.FNodeEnablerForAddedOrRemoved.Delegate
  commentId: T:Global.FNodeEnablerForAddedOrRemoved.Delegate
  isExternal: true
  href: FNodeEnablerForAddedOrRemoved.html
  name: FNodeEnablerForAddedOrRemoved.Delegate
  nameWithType: FNodeEnablerForAddedOrRemoved.Delegate
  fullName: FNodeEnablerForAddedOrRemoved.Delegate
  spec.csharp:
  - uid: Global.FNodeEnablerForAddedOrRemoved
    name: FNodeEnablerForAddedOrRemoved
    isExternal: true
    href: FNodeEnablerForAddedOrRemoved.html
  - name: .
  - uid: Global.FNodeEnablerForAddedOrRemoved.Delegate
    name: Delegate
    isExternal: true
    href: FNodeEnablerForAddedOrRemoved.Delegate.html
  spec.vb:
  - uid: Global.FNodeEnablerForAddedOrRemoved
    name: FNodeEnablerForAddedOrRemoved
    isExternal: true
    href: FNodeEnablerForAddedOrRemoved.html
  - name: .
  - uid: Global.FNodeEnablerForAddedOrRemoved.Delegate
    name: Delegate
    isExternal: true
    href: FNodeEnablerForAddedOrRemoved.Delegate.html
- uid: Global.FNode.RemoveListenForAddedOrRemoved*
  commentId: Overload:Global.FNode.RemoveListenForAddedOrRemoved
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForAddedOrRemoved
  name: RemoveListenForAddedOrRemoved
  nameWithType: FNode.RemoveListenForAddedOrRemoved
  fullName: FNode.RemoveListenForAddedOrRemoved
- uid: Global.FNode.HandleAddedToStage*
  commentId: Overload:Global.FNode.HandleAddedToStage
  isExternal: true
  href: Global.FNode.html#FNode_HandleAddedToStage
  name: HandleAddedToStage
  nameWithType: FNode.HandleAddedToStage
  fullName: FNode.HandleAddedToStage
- uid: Global.FNode.HandleRemovedFromStage*
  commentId: Overload:Global.FNode.HandleRemovedFromStage
  isExternal: true
  href: Global.FNode.html#FNode_HandleRemovedFromStage
  name: HandleRemovedFromStage
  nameWithType: FNode.HandleRemovedFromStage
  fullName: FNode.HandleRemovedFromStage
- uid: Global.FNode.LocalToScreen*
  commentId: Overload:Global.FNode.LocalToScreen
  isExternal: true
  href: Global.FNode.html#FNode_LocalToScreen_UnityEngine_Vector2_
  name: LocalToScreen
  nameWithType: FNode.LocalToScreen
  fullName: FNode.LocalToScreen
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.FNode.ScreenToLocal*
  commentId: Overload:Global.FNode.ScreenToLocal
  isExternal: true
  href: Global.FNode.html#FNode_ScreenToLocal_UnityEngine_Vector2_
  name: ScreenToLocal
  nameWithType: FNode.ScreenToLocal
  fullName: FNode.ScreenToLocal
- uid: Global.FNode.LocalToStage*
  commentId: Overload:Global.FNode.LocalToStage
  isExternal: true
  href: Global.FNode.html#FNode_LocalToStage_UnityEngine_Vector2_
  name: LocalToStage
  nameWithType: FNode.LocalToStage
  fullName: FNode.LocalToStage
- uid: Global.FNode.StageToLocal*
  commentId: Overload:Global.FNode.StageToLocal
  isExternal: true
  href: Global.FNode.html#FNode_StageToLocal_UnityEngine_Vector2_
  name: StageToLocal
  nameWithType: FNode.StageToLocal
  fullName: FNode.StageToLocal
- uid: Global.FNode.LocalToGlobal*
  commentId: Overload:Global.FNode.LocalToGlobal
  isExternal: true
  href: Global.FNode.html#FNode_LocalToGlobal_UnityEngine_Vector2_
  name: LocalToGlobal
  nameWithType: FNode.LocalToGlobal
  fullName: FNode.LocalToGlobal
- uid: Global.FNode.GlobalToLocal*
  commentId: Overload:Global.FNode.GlobalToLocal
  isExternal: true
  href: Global.FNode.html#FNode_GlobalToLocal_UnityEngine_Vector2_
  name: GlobalToLocal
  nameWithType: FNode.GlobalToLocal
  fullName: FNode.GlobalToLocal
- uid: Global.FNode.OtherToLocal*
  commentId: Overload:Global.FNode.OtherToLocal
  isExternal: true
  href: Global.FNode.html#FNode_OtherToLocal_FNode_UnityEngine_Vector2_
  name: OtherToLocal
  nameWithType: FNode.OtherToLocal
  fullName: FNode.OtherToLocal
- uid: Global.FNode
  commentId: T:Global.FNode
  isExternal: true
  href: FNode.html
  name: FNode
  nameWithType: FNode
  fullName: FNode
- uid: Global.FNode.LocalToOther*
  commentId: Overload:Global.FNode.LocalToOther
  isExternal: true
  href: Global.FNode.html#FNode_LocalToOther_UnityEngine_Vector2_FNode_
  name: LocalToOther
  nameWithType: FNode.LocalToOther
  fullName: FNode.LocalToOther
- uid: Global.FNode.GetLocalMousePosition*
  commentId: Overload:Global.FNode.GetLocalMousePosition
  isExternal: true
  href: Global.FNode.html#FNode_GetLocalMousePosition
  name: GetLocalMousePosition
  nameWithType: FNode.GetLocalMousePosition
  fullName: FNode.GetLocalMousePosition
- uid: Global.FNode.GetLocalTouchPosition*
  commentId: Overload:Global.FNode.GetLocalTouchPosition
  isExternal: true
  href: Global.FNode.html#FNode_GetLocalTouchPosition_FTouch_
  name: GetLocalTouchPosition
  nameWithType: FNode.GetLocalTouchPosition
  fullName: FNode.GetLocalTouchPosition
- uid: Global.FTouch
  commentId: T:Global.FTouch
  isExternal: true
  href: FTouch.html
  name: FTouch
  nameWithType: FTouch
  fullName: FTouch
- uid: Global.FNode.UpdateMatrix*
  commentId: Overload:Global.FNode.UpdateMatrix
  isExternal: true
  href: Global.FNode.html#FNode_UpdateMatrix
  name: UpdateMatrix
  nameWithType: FNode.UpdateMatrix
  fullName: FNode.UpdateMatrix
- uid: Global.FNode.UpdateDepthMatrixAlpha*
  commentId: Overload:Global.FNode.UpdateDepthMatrixAlpha
  isExternal: true
  href: Global.FNode.html#FNode_UpdateDepthMatrixAlpha_System_Boolean_System_Boolean_
  name: UpdateDepthMatrixAlpha
  nameWithType: FNode.UpdateDepthMatrixAlpha
  fullName: FNode.UpdateDepthMatrixAlpha
- uid: Global.FNode.Redraw*
  commentId: Overload:Global.FNode.Redraw
  isExternal: true
  href: Global.FNode.html#FNode_Redraw_System_Boolean_System_Boolean_
  name: Redraw
  nameWithType: FNode.Redraw
  fullName: FNode.Redraw
- uid: Global.FNode.HandleAddedToContainer*
  commentId: Overload:Global.FNode.HandleAddedToContainer
  isExternal: true
  href: Global.FNode.html#FNode_HandleAddedToContainer_FContainer_
  name: HandleAddedToContainer
  nameWithType: FNode.HandleAddedToContainer
  fullName: FNode.HandleAddedToContainer
- uid: Global.FNode.HandleRemovedFromContainer*
  commentId: Overload:Global.FNode.HandleRemovedFromContainer
  isExternal: true
  href: Global.FNode.html#FNode_HandleRemovedFromContainer
  name: HandleRemovedFromContainer
  nameWithType: FNode.HandleRemovedFromContainer
  fullName: FNode.HandleRemovedFromContainer
- uid: Global.FNode.RemoveFromContainer*
  commentId: Overload:Global.FNode.RemoveFromContainer
  isExternal: true
  href: Global.FNode.html#FNode_RemoveFromContainer
  name: RemoveFromContainer
  nameWithType: FNode.RemoveFromContainer
  fullName: FNode.RemoveFromContainer
- uid: Global.FNode.MoveToFront*
  commentId: Overload:Global.FNode.MoveToFront
  isExternal: true
  href: Global.FNode.html#FNode_MoveToFront
  name: MoveToFront
  nameWithType: FNode.MoveToFront
  fullName: FNode.MoveToFront
- uid: Global.FNode.MoveToBack*
  commentId: Overload:Global.FNode.MoveToBack
  isExternal: true
  href: Global.FNode.html#FNode_MoveToBack
  name: MoveToBack
  nameWithType: FNode.MoveToBack
  fullName: FNode.MoveToBack
- uid: Global.FNode.MoveInFrontOfOtherNode*
  commentId: Overload:Global.FNode.MoveInFrontOfOtherNode
  isExternal: true
  href: Global.FNode.html#FNode_MoveInFrontOfOtherNode_FNode_
  name: MoveInFrontOfOtherNode
  nameWithType: FNode.MoveInFrontOfOtherNode
  fullName: FNode.MoveInFrontOfOtherNode
- uid: Global.FNode.MoveBehindOtherNode*
  commentId: Overload:Global.FNode.MoveBehindOtherNode
  isExternal: true
  href: Global.FNode.html#FNode_MoveBehindOtherNode_FNode_
  name: MoveBehindOtherNode
  nameWithType: FNode.MoveBehindOtherNode
  fullName: FNode.MoveBehindOtherNode
- uid: Global.FNode.IsAncestryVisible*
  commentId: Overload:Global.FNode.IsAncestryVisible
  isExternal: true
  href: Global.FNode.html#FNode_IsAncestryVisible
  name: IsAncestryVisible
  nameWithType: FNode.IsAncestryVisible
  fullName: FNode.IsAncestryVisible
- uid: Global.FNode.CreateSpecialMatrices*
  commentId: Overload:Global.FNode.CreateSpecialMatrices
  isExternal: true
  href: Global.FNode.html#FNode_CreateSpecialMatrices
  name: CreateSpecialMatrices
  nameWithType: FNode.CreateSpecialMatrices
  fullName: FNode.CreateSpecialMatrices
- uid: Global.FNode.RotateAroundPointRelative*
  commentId: Overload:Global.FNode.RotateAroundPointRelative
  isExternal: true
  href: Global.FNode.html#FNode_RotateAroundPointRelative_UnityEngine_Vector2_System_Single_
  name: RotateAroundPointRelative
  nameWithType: FNode.RotateAroundPointRelative
  fullName: FNode.RotateAroundPointRelative
- uid: Global.FNode.RotateAroundPointAbsolute*
  commentId: Overload:Global.FNode.RotateAroundPointAbsolute
  isExternal: true
  href: Global.FNode.html#FNode_RotateAroundPointAbsolute_UnityEngine_Vector2_System_Single_
  name: RotateAroundPointAbsolute
  nameWithType: FNode.RotateAroundPointAbsolute
  fullName: FNode.RotateAroundPointAbsolute
- uid: Global.FNode.ScaleAroundPointRelative*
  commentId: Overload:Global.FNode.ScaleAroundPointRelative
  isExternal: true
  href: Global.FNode.html#FNode_ScaleAroundPointRelative_UnityEngine_Vector2_System_Single_System_Single_
  name: ScaleAroundPointRelative
  nameWithType: FNode.ScaleAroundPointRelative
  fullName: FNode.ScaleAroundPointRelative
- uid: Global.FNode.ScaleAroundPointAbsolute*
  commentId: Overload:Global.FNode.ScaleAroundPointAbsolute
  isExternal: true
  href: Global.FNode.html#FNode_ScaleAroundPointAbsolute_UnityEngine_Vector2_System_Single_System_Single_
  name: ScaleAroundPointAbsolute
  nameWithType: FNode.ScaleAroundPointAbsolute
  fullName: FNode.ScaleAroundPointAbsolute
- uid: Global.FNode.SetPosition*
  commentId: Overload:Global.FNode.SetPosition
  isExternal: true
  href: Global.FNode.html#FNode_SetPosition_System_Single_System_Single_
  name: SetPosition
  nameWithType: FNode.SetPosition
  fullName: FNode.SetPosition
- uid: Global.FNode.GetPosition*
  commentId: Overload:Global.FNode.GetPosition
  isExternal: true
  href: Global.FNode.html#FNode_GetPosition
  name: GetPosition
  nameWithType: FNode.GetPosition
  fullName: FNode.GetPosition
- uid: Global.FNode.isVisible*
  commentId: Overload:Global.FNode.isVisible
  isExternal: true
  href: Global.FNode.html#FNode_isVisible
  name: isVisible
  nameWithType: FNode.isVisible
  fullName: FNode.isVisible
- uid: Global.FNode.x*
  commentId: Overload:Global.FNode.x
  isExternal: true
  href: Global.FNode.html#FNode_x
  name: x
  nameWithType: FNode.x
  fullName: FNode.x
- uid: Global.FNode.y*
  commentId: Overload:Global.FNode.y
  isExternal: true
  href: Global.FNode.html#FNode_y
  name: y
  nameWithType: FNode.y
  fullName: FNode.y
- uid: Global.FNode.meshZ*
  commentId: Overload:Global.FNode.meshZ
  isExternal: true
  href: Global.FNode.html#FNode_meshZ
  name: meshZ
  nameWithType: FNode.meshZ
  fullName: FNode.meshZ
- uid: Global.FNode.sortZ*
  commentId: Overload:Global.FNode.sortZ
  isExternal: true
  href: Global.FNode.html#FNode_sortZ
  name: sortZ
  nameWithType: FNode.sortZ
  fullName: FNode.sortZ
- uid: Global.FNode.scaleX*
  commentId: Overload:Global.FNode.scaleX
  isExternal: true
  href: Global.FNode.html#FNode_scaleX
  name: scaleX
  nameWithType: FNode.scaleX
  fullName: FNode.scaleX
- uid: Global.FNode.scaleY*
  commentId: Overload:Global.FNode.scaleY
  isExternal: true
  href: Global.FNode.html#FNode_scaleY
  name: scaleY
  nameWithType: FNode.scaleY
  fullName: FNode.scaleY
- uid: Global.FNode.scale*
  commentId: Overload:Global.FNode.scale
  isExternal: true
  href: Global.FNode.html#FNode_scale
  name: scale
  nameWithType: FNode.scale
  fullName: FNode.scale
- uid: Global.FNode.rotation*
  commentId: Overload:Global.FNode.rotation
  isExternal: true
  href: Global.FNode.html#FNode_rotation
  name: rotation
  nameWithType: FNode.rotation
  fullName: FNode.rotation
- uid: Global.FNode.isMatrixDirty*
  commentId: Overload:Global.FNode.isMatrixDirty
  isExternal: true
  href: Global.FNode.html#FNode_isMatrixDirty
  name: isMatrixDirty
  nameWithType: FNode.isMatrixDirty
  fullName: FNode.isMatrixDirty
- uid: Global.FNode.container*
  commentId: Overload:Global.FNode.container
  isExternal: true
  href: Global.FNode.html#FNode_container
  name: container
  nameWithType: FNode.container
  fullName: FNode.container
- uid: Global.FNode.depth*
  commentId: Overload:Global.FNode.depth
  isExternal: true
  href: Global.FNode.html#FNode_depth
  name: depth
  nameWithType: FNode.depth
  fullName: FNode.depth
- uid: Global.FNode.touchPriority*
  commentId: Overload:Global.FNode.touchPriority
  isExternal: true
  href: Global.FNode.html#FNode_touchPriority
  name: touchPriority
  nameWithType: FNode.touchPriority
  fullName: FNode.touchPriority
- uid: Global.FNode.matrix*
  commentId: Overload:Global.FNode.matrix
  isExternal: true
  href: Global.FNode.html#FNode_matrix
  name: matrix
  nameWithType: FNode.matrix
  fullName: FNode.matrix
- uid: Global.FNode.concatenatedMatrix*
  commentId: Overload:Global.FNode.concatenatedMatrix
  isExternal: true
  href: Global.FNode.html#FNode_concatenatedMatrix
  name: concatenatedMatrix
  nameWithType: FNode.concatenatedMatrix
  fullName: FNode.concatenatedMatrix
- uid: Global.FNode.inverseConcatenatedMatrix*
  commentId: Overload:Global.FNode.inverseConcatenatedMatrix
  isExternal: true
  href: Global.FNode.html#FNode_inverseConcatenatedMatrix
  name: inverseConcatenatedMatrix
  nameWithType: FNode.inverseConcatenatedMatrix
  fullName: FNode.inverseConcatenatedMatrix
- uid: Global.FNode.screenConcatenatedMatrix*
  commentId: Overload:Global.FNode.screenConcatenatedMatrix
  isExternal: true
  href: Global.FNode.html#FNode_screenConcatenatedMatrix
  name: screenConcatenatedMatrix
  nameWithType: FNode.screenConcatenatedMatrix
  fullName: FNode.screenConcatenatedMatrix
- uid: Global.FNode.screenInverseConcatenatedMatrix*
  commentId: Overload:Global.FNode.screenInverseConcatenatedMatrix
  isExternal: true
  href: Global.FNode.html#FNode_screenInverseConcatenatedMatrix
  name: screenInverseConcatenatedMatrix
  nameWithType: FNode.screenInverseConcatenatedMatrix
  fullName: FNode.screenInverseConcatenatedMatrix
- uid: Global.FNode.alpha*
  commentId: Overload:Global.FNode.alpha
  isExternal: true
  href: Global.FNode.html#FNode_alpha
  name: alpha
  nameWithType: FNode.alpha
  fullName: FNode.alpha
- uid: Global.FNode.concatenatedAlpha*
  commentId: Overload:Global.FNode.concatenatedAlpha
  isExternal: true
  href: Global.FNode.html#FNode_concatenatedAlpha
  name: concatenatedAlpha
  nameWithType: FNode.concatenatedAlpha
  fullName: FNode.concatenatedAlpha
- uid: Global.FNode.stage*
  commentId: Overload:Global.FNode.stage
  isExternal: true
  href: Global.FNode.html#FNode_stage
  name: stage
  nameWithType: FNode.stage
  fullName: FNode.stage
