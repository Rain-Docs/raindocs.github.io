### YamlMime:ManagedReference
items:
- uid: Global.FloatRect
  commentId: T:Global.FloatRect
  id: FloatRect
  parent: Global
  children:
  - Global.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)
  - Global.FloatRect.Center
  - Global.FloatRect.GetCorner(FloatRect.CornerLabel)
  - Global.FloatRect.GetCorner(System.Int32)
  - Global.FloatRect.Grow(System.Single)
  - Global.FloatRect.Height
  - Global.FloatRect.MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)
  - Global.FloatRect.RandomPos
  - Global.FloatRect.Shrink(System.Single)
  - Global.FloatRect.ToString
  - Global.FloatRect.Vector2Inside(UnityEngine.Vector2)
  - Global.FloatRect.Width
  - Global.FloatRect.bottom
  - Global.FloatRect.left
  - Global.FloatRect.right
  - Global.FloatRect.top
  langs:
  - csharp
  - vb
  name: FloatRect
  nameWithType: FloatRect
  fullName: FloatRect
  type: Struct
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FloatRect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public struct FloatRect
    content.vb: Public Structure FloatRect
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: Global.FloatRect.left
  commentId: F:Global.FloatRect.left
  id: left
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: left
  nameWithType: FloatRect.left
  fullName: FloatRect.left
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FloatRect.left</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float left
    return:
      type: System.Single
    content.vb: Public left As Single
- uid: Global.FloatRect.bottom
  commentId: F:Global.FloatRect.bottom
  id: bottom
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: bottom
  nameWithType: FloatRect.bottom
  fullName: FloatRect.bottom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FloatRect.bottom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float bottom
    return:
      type: System.Single
    content.vb: Public bottom As Single
- uid: Global.FloatRect.right
  commentId: F:Global.FloatRect.right
  id: right
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: right
  nameWithType: FloatRect.right
  fullName: FloatRect.right
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FloatRect.right</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float right
    return:
      type: System.Single
    content.vb: Public right As Single
- uid: Global.FloatRect.top
  commentId: F:Global.FloatRect.top
  id: top
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: top
  nameWithType: FloatRect.top
  fullName: FloatRect.top
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FloatRect.top</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float top
    return:
      type: System.Single
    content.vb: Public top As Single
- uid: Global.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)
  commentId: M:Global.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: FloatRect(float, float, float, float)
  nameWithType: FloatRect.FloatRect(float, float, float, float)
  fullName: FloatRect.FloatRect(float, float, float, float)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FloatRect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FloatRect(float left, float bottom, float right, float top)
    parameters:
    - id: left
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>left</parameter>
            <parameter>M:FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: bottom
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bottom</parameter>
            <parameter>M:FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: right
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>right</parameter>
            <parameter>M:FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: top
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>top</parameter>
            <parameter>M:FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(left As Single, bottom As Single, right As Single, top As Single)
  overload: Global.FloatRect.#ctor*
  nameWithType.vb: FloatRect.New(Single, Single, Single, Single)
  fullName.vb: FloatRect.New(Single, Single, Single, Single)
  name.vb: New(Single, Single, Single, Single)
- uid: Global.FloatRect.GetCorner(System.Int32)
  commentId: M:Global.FloatRect.GetCorner(System.Int32)
  id: GetCorner(System.Int32)
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: GetCorner(int)
  nameWithType: FloatRect.GetCorner(int)
  fullName: FloatRect.GetCorner(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.GetCorner(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetCorner(int corner)
    parameters:
    - id: corner
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>corner</parameter>
            <parameter>M:FloatRect.GetCorner(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.GetCorner(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetCorner(corner As Integer) As Vector2
  overload: Global.FloatRect.GetCorner*
  nameWithType.vb: FloatRect.GetCorner(Integer)
  fullName.vb: FloatRect.GetCorner(Integer)
  name.vb: GetCorner(Integer)
- uid: Global.FloatRect.GetCorner(FloatRect.CornerLabel)
  commentId: M:Global.FloatRect.GetCorner(FloatRect.CornerLabel)
  id: GetCorner(FloatRect.CornerLabel)
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: GetCorner(CornerLabel)
  nameWithType: FloatRect.GetCorner(FloatRect.CornerLabel)
  fullName: FloatRect.GetCorner(FloatRect.CornerLabel)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.GetCorner(FloatRect.CornerLabel)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetCorner(FloatRect.CornerLabel corner)
    parameters:
    - id: corner
      type: Global.FloatRect.CornerLabel
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>corner</parameter>
            <parameter>M:FloatRect.GetCorner(FloatRect.CornerLabel)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.GetCorner(FloatRect.CornerLabel)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetCorner(corner As FloatRect.CornerLabel) As Vector2
  overload: Global.FloatRect.GetCorner*
- uid: Global.FloatRect.MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Global.FloatRect.MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)
  id: MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: MakeFromVector2(Vector2, Vector2)
  nameWithType: FloatRect.MakeFromVector2(Vector2, Vector2)
  fullName: FloatRect.MakeFromVector2(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FloatRect MakeFromVector2(Vector2 lowerLeft, Vector2 upperRight)
    parameters:
    - id: lowerLeft
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lowerLeft</parameter>
            <parameter>M:FloatRect.MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: upperRight
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upperRight</parameter>
            <parameter>M:FloatRect.MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.MakeFromVector2(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MakeFromVector2(lowerLeft As Vector2, upperRight As Vector2) As FloatRect
  overload: Global.FloatRect.MakeFromVector2*
- uid: Global.FloatRect.Vector2Inside(UnityEngine.Vector2)
  commentId: M:Global.FloatRect.Vector2Inside(UnityEngine.Vector2)
  id: Vector2Inside(UnityEngine.Vector2)
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: Vector2Inside(Vector2)
  nameWithType: FloatRect.Vector2Inside(Vector2)
  fullName: FloatRect.Vector2Inside(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.Vector2Inside(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Vector2Inside(Vector2 v2)
    parameters:
    - id: v2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v2</parameter>
            <parameter>M:FloatRect.Vector2Inside(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.Vector2Inside(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function Vector2Inside(v2 As Vector2) As Boolean
  overload: Global.FloatRect.Vector2Inside*
- uid: Global.FloatRect.Grow(System.Single)
  commentId: M:Global.FloatRect.Grow(System.Single)
  id: Grow(System.Single)
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: Grow(float)
  nameWithType: FloatRect.Grow(float)
  fullName: FloatRect.Grow(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.Grow(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FloatRect Grow(float grow)
    parameters:
    - id: grow
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>grow</parameter>
            <parameter>M:FloatRect.Grow(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.Grow(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Function Grow(grow As Single) As FloatRect
  overload: Global.FloatRect.Grow*
  nameWithType.vb: FloatRect.Grow(Single)
  fullName.vb: FloatRect.Grow(Single)
  name.vb: Grow(Single)
- uid: Global.FloatRect.Shrink(System.Single)
  commentId: M:Global.FloatRect.Shrink(System.Single)
  id: Shrink(System.Single)
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: Shrink(float)
  nameWithType: FloatRect.Shrink(float)
  fullName: FloatRect.Shrink(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.Shrink(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FloatRect Shrink(float shrink)
    parameters:
    - id: shrink
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shrink</parameter>
            <parameter>M:FloatRect.Shrink(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.Shrink(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Function Shrink(shrink As Single) As FloatRect
  overload: Global.FloatRect.Shrink*
  nameWithType.vb: FloatRect.Shrink(Single)
  fullName.vb: FloatRect.Shrink(Single)
  name.vb: Shrink(Single)
- uid: Global.FloatRect.RandomPos
  commentId: M:Global.FloatRect.RandomPos
  id: RandomPos
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: RandomPos()
  nameWithType: FloatRect.RandomPos()
  fullName: FloatRect.RandomPos()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.RandomPos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 RandomPos()
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.RandomPos</parameter>
          </include>
        </markup>
    content.vb: Public Function RandomPos() As Vector2
  overload: Global.FloatRect.RandomPos*
- uid: Global.FloatRect.ToString
  commentId: M:Global.FloatRect.ToString
  id: ToString
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FloatRect.ToString()
  fullName: FloatRect.ToString()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FloatRect.ToString</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FloatRect.ToString</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: Global.FloatRect.ToString*
- uid: Global.FloatRect.Center
  commentId: P:Global.FloatRect.Center
  id: Center
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: FloatRect.Center
  fullName: FloatRect.Center
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FloatRect.Center</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 Center { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public ReadOnly Property Center As Vector2
  overload: Global.FloatRect.Center*
- uid: Global.FloatRect.Width
  commentId: P:Global.FloatRect.Width
  id: Width
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: FloatRect.Width
  fullName: FloatRect.Width
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FloatRect.Width</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float Width { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Width As Single
  overload: Global.FloatRect.Width*
- uid: Global.FloatRect.Height
  commentId: P:Global.FloatRect.Height
  id: Height
  parent: Global.FloatRect
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: FloatRect.Height
  fullName: FloatRect.Height
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FloatRect.Height</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float Height { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Height As Single
  overload: Global.FloatRect.Height*
references:
- uid: Global
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.FloatRect.#ctor*
  commentId: Overload:Global.FloatRect.#ctor
  isExternal: true
  href: Global.FloatRect.html#FloatRect__ctor_System_Single_System_Single_System_Single_System_Single_
  name: FloatRect
  nameWithType: FloatRect.FloatRect
  fullName: FloatRect.FloatRect
  nameWithType.vb: FloatRect.New
  fullName.vb: FloatRect.New
  name.vb: New
- uid: Global.FloatRect.GetCorner*
  commentId: Overload:Global.FloatRect.GetCorner
  isExternal: true
  href: Global.FloatRect.html#FloatRect_GetCorner_System_Int32_
  name: GetCorner
  nameWithType: FloatRect.GetCorner
  fullName: FloatRect.GetCorner
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.FloatRect.CornerLabel
  commentId: T:Global.FloatRect.CornerLabel
  isExternal: true
  href: FloatRect.html
  name: FloatRect.CornerLabel
  nameWithType: FloatRect.CornerLabel
  fullName: FloatRect.CornerLabel
  spec.csharp:
  - uid: Global.FloatRect
    name: FloatRect
    isExternal: true
    href: FloatRect.html
  - name: .
  - uid: Global.FloatRect.CornerLabel
    name: CornerLabel
    isExternal: true
    href: FloatRect.CornerLabel.html
  spec.vb:
  - uid: Global.FloatRect
    name: FloatRect
    isExternal: true
    href: FloatRect.html
  - name: .
  - uid: Global.FloatRect.CornerLabel
    name: CornerLabel
    isExternal: true
    href: FloatRect.CornerLabel.html
- uid: Global.FloatRect.MakeFromVector2*
  commentId: Overload:Global.FloatRect.MakeFromVector2
  isExternal: true
  href: Global.FloatRect.html#FloatRect_MakeFromVector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: MakeFromVector2
  nameWithType: FloatRect.MakeFromVector2
  fullName: FloatRect.MakeFromVector2
- uid: Global.FloatRect
  commentId: T:Global.FloatRect
  isExternal: true
  href: FloatRect.html
  name: FloatRect
  nameWithType: FloatRect
  fullName: FloatRect
- uid: Global.FloatRect.Vector2Inside*
  commentId: Overload:Global.FloatRect.Vector2Inside
  isExternal: true
  href: Global.FloatRect.html#FloatRect_Vector2Inside_UnityEngine_Vector2_
  name: Vector2Inside
  nameWithType: FloatRect.Vector2Inside
  fullName: FloatRect.Vector2Inside
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.FloatRect.Grow*
  commentId: Overload:Global.FloatRect.Grow
  isExternal: true
  href: Global.FloatRect.html#FloatRect_Grow_System_Single_
  name: Grow
  nameWithType: FloatRect.Grow
  fullName: FloatRect.Grow
- uid: Global.FloatRect.Shrink*
  commentId: Overload:Global.FloatRect.Shrink
  isExternal: true
  href: Global.FloatRect.html#FloatRect_Shrink_System_Single_
  name: Shrink
  nameWithType: FloatRect.Shrink
  fullName: FloatRect.Shrink
- uid: Global.FloatRect.RandomPos*
  commentId: Overload:Global.FloatRect.RandomPos
  isExternal: true
  href: Global.FloatRect.html#FloatRect_RandomPos
  name: RandomPos
  nameWithType: FloatRect.RandomPos
  fullName: FloatRect.RandomPos
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: Global.FloatRect.ToString*
  commentId: Overload:Global.FloatRect.ToString
  isExternal: true
  href: Global.FloatRect.html#FloatRect_ToString
  name: ToString
  nameWithType: FloatRect.ToString
  fullName: FloatRect.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.FloatRect.Center*
  commentId: Overload:Global.FloatRect.Center
  isExternal: true
  href: Global.FloatRect.html#FloatRect_Center
  name: Center
  nameWithType: FloatRect.Center
  fullName: FloatRect.Center
- uid: Global.FloatRect.Width*
  commentId: Overload:Global.FloatRect.Width
  isExternal: true
  href: Global.FloatRect.html#FloatRect_Width
  name: Width
  nameWithType: FloatRect.Width
  fullName: FloatRect.Width
- uid: Global.FloatRect.Height*
  commentId: Overload:Global.FloatRect.Height
  isExternal: true
  href: Global.FloatRect.html#FloatRect_Height
  name: Height
  nameWithType: FloatRect.Height
  fullName: FloatRect.Height
