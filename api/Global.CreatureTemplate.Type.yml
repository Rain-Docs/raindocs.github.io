### YamlMime:ManagedReference
items:
- uid: Global.CreatureTemplate.Type
  commentId: T:Global.CreatureTemplate.Type
  id: CreatureTemplate.Type
  parent: Global
  children:
  - Global.CreatureTemplate.Type.#ctor(System.String,System.Boolean)
  - Global.CreatureTemplate.Type.BigEel
  - Global.CreatureTemplate.Type.BigNeedleWorm
  - Global.CreatureTemplate.Type.BigSpider
  - Global.CreatureTemplate.Type.BlackLizard
  - Global.CreatureTemplate.Type.BlueLizard
  - Global.CreatureTemplate.Type.BrotherLongLegs
  - Global.CreatureTemplate.Type.Centipede
  - Global.CreatureTemplate.Type.Centiwing
  - Global.CreatureTemplate.Type.CicadaA
  - Global.CreatureTemplate.Type.CicadaB
  - Global.CreatureTemplate.Type.CyanLizard
  - Global.CreatureTemplate.Type.DaddyLongLegs
  - Global.CreatureTemplate.Type.Deer
  - Global.CreatureTemplate.Type.DropBug
  - Global.CreatureTemplate.Type.EggBug
  - Global.CreatureTemplate.Type.Fly
  - Global.CreatureTemplate.Type.GarbageWorm
  - Global.CreatureTemplate.Type.GreenLizard
  - Global.CreatureTemplate.Type.Hazer
  - Global.CreatureTemplate.Type.JetFish
  - Global.CreatureTemplate.Type.KingVulture
  - Global.CreatureTemplate.Type.LanternMouse
  - Global.CreatureTemplate.Type.Leech
  - Global.CreatureTemplate.Type.LizardTemplate
  - Global.CreatureTemplate.Type.MirosBird
  - Global.CreatureTemplate.Type.Overseer
  - Global.CreatureTemplate.Type.PinkLizard
  - Global.CreatureTemplate.Type.PoleMimic
  - Global.CreatureTemplate.Type.RedCentipede
  - Global.CreatureTemplate.Type.RedLizard
  - Global.CreatureTemplate.Type.Salamander
  - Global.CreatureTemplate.Type.Scavenger
  - Global.CreatureTemplate.Type.SeaLeech
  - Global.CreatureTemplate.Type.Slugcat
  - Global.CreatureTemplate.Type.SmallCentipede
  - Global.CreatureTemplate.Type.SmallNeedleWorm
  - Global.CreatureTemplate.Type.Snail
  - Global.CreatureTemplate.Type.Spider
  - Global.CreatureTemplate.Type.SpitterSpider
  - Global.CreatureTemplate.Type.StandardGroundCreature
  - Global.CreatureTemplate.Type.TempleGuard
  - Global.CreatureTemplate.Type.TentaclePlant
  - Global.CreatureTemplate.Type.TubeWorm
  - Global.CreatureTemplate.Type.Vulture
  - Global.CreatureTemplate.Type.VultureGrub
  - Global.CreatureTemplate.Type.WhiteLizard
  - Global.CreatureTemplate.Type.YellowLizard
  langs:
  - csharp
  - vb
  name: CreatureTemplate.Type
  nameWithType: CreatureTemplate.Type
  fullName: CreatureTemplate.Type
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:CreatureTemplate.Type</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public class CreatureTemplate.Type : ExtEnum<CreatureTemplate.Type>, IComparable, IEquatable<CreatureTemplate.Type>'
    content.vb: Public Class CreatureTemplate.Type Inherits ExtEnum(Of CreatureTemplate.Type) Implements IComparable, IEquatable(Of CreatureTemplate.Type)
  inheritance:
  - System.Object
  - Global.ExtEnumBase
  - Global.ExtEnum{CreatureTemplate.Type}
  implements:
  - System.IComparable
  - System.IEquatable{CreatureTemplate.Type}
  inheritedMembers:
  - Global.ExtEnum{CreatureTemplate.Type}.values
  - Global.ExtEnum{CreatureTemplate.Type}.Equals(System.Object)
  - Global.ExtEnum{CreatureTemplate.Type}.Equals(ExtEnum{CreatureTemplate.Type})
  - Global.ExtEnum{CreatureTemplate.Type}.Equals(CreatureTemplate.Type)
  - Global.ExtEnum{CreatureTemplate.Type}.GetHashCode
  - Global.ExtEnum{CreatureTemplate.Type}.Unregister
  - Global.ExtEnum{CreatureTemplate.Type}.valuesVersion
  - Global.ExtEnum{CreatureTemplate.Type}.Index
  - Global.ExtEnumBase.value
  - Global.ExtEnumBase.valueHash
  - Global.ExtEnumBase.index
  - Global.ExtEnumBase.localVersion
  - Global.ExtEnumBase.enumType
  - Global.ExtEnumBase.valueDictionary
  - Global.ExtEnumBase.ToString
  - Global.ExtEnumBase.CompareTo(System.Object)
  - Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  - Global.ExtEnumBase.GetExtEnumType(System.Type)
  - Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  - Global.ExtEnumBase.GetNames(System.Type)
  - Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.CreatureTemplate.Type.StandardGroundCreature
  commentId: F:Global.CreatureTemplate.Type.StandardGroundCreature
  id: StandardGroundCreature
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: StandardGroundCreature
  nameWithType: CreatureTemplate.Type.StandardGroundCreature
  fullName: CreatureTemplate.Type.StandardGroundCreature
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.StandardGroundCreature</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type StandardGroundCreature
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly StandardGroundCreature As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Slugcat
  commentId: F:Global.CreatureTemplate.Type.Slugcat
  id: Slugcat
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Slugcat
  nameWithType: CreatureTemplate.Type.Slugcat
  fullName: CreatureTemplate.Type.Slugcat
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Slugcat</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Slugcat
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Slugcat As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.LizardTemplate
  commentId: F:Global.CreatureTemplate.Type.LizardTemplate
  id: LizardTemplate
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: LizardTemplate
  nameWithType: CreatureTemplate.Type.LizardTemplate
  fullName: CreatureTemplate.Type.LizardTemplate
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.LizardTemplate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type LizardTemplate
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly LizardTemplate As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.PinkLizard
  commentId: F:Global.CreatureTemplate.Type.PinkLizard
  id: PinkLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: PinkLizard
  nameWithType: CreatureTemplate.Type.PinkLizard
  fullName: CreatureTemplate.Type.PinkLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.PinkLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type PinkLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly PinkLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.GreenLizard
  commentId: F:Global.CreatureTemplate.Type.GreenLizard
  id: GreenLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: GreenLizard
  nameWithType: CreatureTemplate.Type.GreenLizard
  fullName: CreatureTemplate.Type.GreenLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.GreenLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type GreenLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly GreenLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.BlueLizard
  commentId: F:Global.CreatureTemplate.Type.BlueLizard
  id: BlueLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: BlueLizard
  nameWithType: CreatureTemplate.Type.BlueLizard
  fullName: CreatureTemplate.Type.BlueLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.BlueLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type BlueLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly BlueLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.YellowLizard
  commentId: F:Global.CreatureTemplate.Type.YellowLizard
  id: YellowLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: YellowLizard
  nameWithType: CreatureTemplate.Type.YellowLizard
  fullName: CreatureTemplate.Type.YellowLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.YellowLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type YellowLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly YellowLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.WhiteLizard
  commentId: F:Global.CreatureTemplate.Type.WhiteLizard
  id: WhiteLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: WhiteLizard
  nameWithType: CreatureTemplate.Type.WhiteLizard
  fullName: CreatureTemplate.Type.WhiteLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.WhiteLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type WhiteLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly WhiteLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.RedLizard
  commentId: F:Global.CreatureTemplate.Type.RedLizard
  id: RedLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: RedLizard
  nameWithType: CreatureTemplate.Type.RedLizard
  fullName: CreatureTemplate.Type.RedLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.RedLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type RedLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly RedLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.BlackLizard
  commentId: F:Global.CreatureTemplate.Type.BlackLizard
  id: BlackLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: BlackLizard
  nameWithType: CreatureTemplate.Type.BlackLizard
  fullName: CreatureTemplate.Type.BlackLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.BlackLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type BlackLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly BlackLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Salamander
  commentId: F:Global.CreatureTemplate.Type.Salamander
  id: Salamander
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Salamander
  nameWithType: CreatureTemplate.Type.Salamander
  fullName: CreatureTemplate.Type.Salamander
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Salamander</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Salamander
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Salamander As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.CyanLizard
  commentId: F:Global.CreatureTemplate.Type.CyanLizard
  id: CyanLizard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: CyanLizard
  nameWithType: CreatureTemplate.Type.CyanLizard
  fullName: CreatureTemplate.Type.CyanLizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.CyanLizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type CyanLizard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly CyanLizard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Fly
  commentId: F:Global.CreatureTemplate.Type.Fly
  id: Fly
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Fly
  nameWithType: CreatureTemplate.Type.Fly
  fullName: CreatureTemplate.Type.Fly
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Fly</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Fly
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Fly As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Leech
  commentId: F:Global.CreatureTemplate.Type.Leech
  id: Leech
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Leech
  nameWithType: CreatureTemplate.Type.Leech
  fullName: CreatureTemplate.Type.Leech
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Leech</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Leech
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Leech As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.SeaLeech
  commentId: F:Global.CreatureTemplate.Type.SeaLeech
  id: SeaLeech
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: SeaLeech
  nameWithType: CreatureTemplate.Type.SeaLeech
  fullName: CreatureTemplate.Type.SeaLeech
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.SeaLeech</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type SeaLeech
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly SeaLeech As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Snail
  commentId: F:Global.CreatureTemplate.Type.Snail
  id: Snail
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Snail
  nameWithType: CreatureTemplate.Type.Snail
  fullName: CreatureTemplate.Type.Snail
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Snail</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Snail
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Snail As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Vulture
  commentId: F:Global.CreatureTemplate.Type.Vulture
  id: Vulture
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Vulture
  nameWithType: CreatureTemplate.Type.Vulture
  fullName: CreatureTemplate.Type.Vulture
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Vulture</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Vulture
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Vulture As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.GarbageWorm
  commentId: F:Global.CreatureTemplate.Type.GarbageWorm
  id: GarbageWorm
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: GarbageWorm
  nameWithType: CreatureTemplate.Type.GarbageWorm
  fullName: CreatureTemplate.Type.GarbageWorm
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.GarbageWorm</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type GarbageWorm
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly GarbageWorm As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.LanternMouse
  commentId: F:Global.CreatureTemplate.Type.LanternMouse
  id: LanternMouse
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: LanternMouse
  nameWithType: CreatureTemplate.Type.LanternMouse
  fullName: CreatureTemplate.Type.LanternMouse
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.LanternMouse</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type LanternMouse
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly LanternMouse As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.CicadaA
  commentId: F:Global.CreatureTemplate.Type.CicadaA
  id: CicadaA
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: CicadaA
  nameWithType: CreatureTemplate.Type.CicadaA
  fullName: CreatureTemplate.Type.CicadaA
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.CicadaA</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type CicadaA
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly CicadaA As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.CicadaB
  commentId: F:Global.CreatureTemplate.Type.CicadaB
  id: CicadaB
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: CicadaB
  nameWithType: CreatureTemplate.Type.CicadaB
  fullName: CreatureTemplate.Type.CicadaB
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.CicadaB</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type CicadaB
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly CicadaB As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Spider
  commentId: F:Global.CreatureTemplate.Type.Spider
  id: Spider
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Spider
  nameWithType: CreatureTemplate.Type.Spider
  fullName: CreatureTemplate.Type.Spider
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Spider</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Spider
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Spider As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.JetFish
  commentId: F:Global.CreatureTemplate.Type.JetFish
  id: JetFish
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: JetFish
  nameWithType: CreatureTemplate.Type.JetFish
  fullName: CreatureTemplate.Type.JetFish
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.JetFish</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type JetFish
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly JetFish As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.BigEel
  commentId: F:Global.CreatureTemplate.Type.BigEel
  id: BigEel
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: BigEel
  nameWithType: CreatureTemplate.Type.BigEel
  fullName: CreatureTemplate.Type.BigEel
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.BigEel</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type BigEel
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly BigEel As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Deer
  commentId: F:Global.CreatureTemplate.Type.Deer
  id: Deer
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Deer
  nameWithType: CreatureTemplate.Type.Deer
  fullName: CreatureTemplate.Type.Deer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Deer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Deer
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Deer As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.TubeWorm
  commentId: F:Global.CreatureTemplate.Type.TubeWorm
  id: TubeWorm
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: TubeWorm
  nameWithType: CreatureTemplate.Type.TubeWorm
  fullName: CreatureTemplate.Type.TubeWorm
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.TubeWorm</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type TubeWorm
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly TubeWorm As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.DaddyLongLegs
  commentId: F:Global.CreatureTemplate.Type.DaddyLongLegs
  id: DaddyLongLegs
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: DaddyLongLegs
  nameWithType: CreatureTemplate.Type.DaddyLongLegs
  fullName: CreatureTemplate.Type.DaddyLongLegs
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.DaddyLongLegs</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type DaddyLongLegs
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly DaddyLongLegs As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.BrotherLongLegs
  commentId: F:Global.CreatureTemplate.Type.BrotherLongLegs
  id: BrotherLongLegs
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: BrotherLongLegs
  nameWithType: CreatureTemplate.Type.BrotherLongLegs
  fullName: CreatureTemplate.Type.BrotherLongLegs
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.BrotherLongLegs</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type BrotherLongLegs
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly BrotherLongLegs As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.TentaclePlant
  commentId: F:Global.CreatureTemplate.Type.TentaclePlant
  id: TentaclePlant
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: TentaclePlant
  nameWithType: CreatureTemplate.Type.TentaclePlant
  fullName: CreatureTemplate.Type.TentaclePlant
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.TentaclePlant</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type TentaclePlant
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly TentaclePlant As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.PoleMimic
  commentId: F:Global.CreatureTemplate.Type.PoleMimic
  id: PoleMimic
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: PoleMimic
  nameWithType: CreatureTemplate.Type.PoleMimic
  fullName: CreatureTemplate.Type.PoleMimic
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.PoleMimic</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type PoleMimic
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly PoleMimic As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.MirosBird
  commentId: F:Global.CreatureTemplate.Type.MirosBird
  id: MirosBird
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: MirosBird
  nameWithType: CreatureTemplate.Type.MirosBird
  fullName: CreatureTemplate.Type.MirosBird
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.MirosBird</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type MirosBird
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly MirosBird As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.TempleGuard
  commentId: F:Global.CreatureTemplate.Type.TempleGuard
  id: TempleGuard
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: TempleGuard
  nameWithType: CreatureTemplate.Type.TempleGuard
  fullName: CreatureTemplate.Type.TempleGuard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.TempleGuard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type TempleGuard
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly TempleGuard As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Centipede
  commentId: F:Global.CreatureTemplate.Type.Centipede
  id: Centipede
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Centipede
  nameWithType: CreatureTemplate.Type.Centipede
  fullName: CreatureTemplate.Type.Centipede
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Centipede</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Centipede
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Centipede As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.RedCentipede
  commentId: F:Global.CreatureTemplate.Type.RedCentipede
  id: RedCentipede
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: RedCentipede
  nameWithType: CreatureTemplate.Type.RedCentipede
  fullName: CreatureTemplate.Type.RedCentipede
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.RedCentipede</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type RedCentipede
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly RedCentipede As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Centiwing
  commentId: F:Global.CreatureTemplate.Type.Centiwing
  id: Centiwing
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Centiwing
  nameWithType: CreatureTemplate.Type.Centiwing
  fullName: CreatureTemplate.Type.Centiwing
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Centiwing</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Centiwing
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Centiwing As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.SmallCentipede
  commentId: F:Global.CreatureTemplate.Type.SmallCentipede
  id: SmallCentipede
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: SmallCentipede
  nameWithType: CreatureTemplate.Type.SmallCentipede
  fullName: CreatureTemplate.Type.SmallCentipede
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.SmallCentipede</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type SmallCentipede
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly SmallCentipede As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Scavenger
  commentId: F:Global.CreatureTemplate.Type.Scavenger
  id: Scavenger
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Scavenger
  nameWithType: CreatureTemplate.Type.Scavenger
  fullName: CreatureTemplate.Type.Scavenger
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Scavenger</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Scavenger
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Scavenger As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Overseer
  commentId: F:Global.CreatureTemplate.Type.Overseer
  id: Overseer
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Overseer
  nameWithType: CreatureTemplate.Type.Overseer
  fullName: CreatureTemplate.Type.Overseer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Overseer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Overseer
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Overseer As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.VultureGrub
  commentId: F:Global.CreatureTemplate.Type.VultureGrub
  id: VultureGrub
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: VultureGrub
  nameWithType: CreatureTemplate.Type.VultureGrub
  fullName: CreatureTemplate.Type.VultureGrub
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.VultureGrub</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type VultureGrub
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly VultureGrub As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.EggBug
  commentId: F:Global.CreatureTemplate.Type.EggBug
  id: EggBug
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: EggBug
  nameWithType: CreatureTemplate.Type.EggBug
  fullName: CreatureTemplate.Type.EggBug
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.EggBug</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type EggBug
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly EggBug As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.BigSpider
  commentId: F:Global.CreatureTemplate.Type.BigSpider
  id: BigSpider
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: BigSpider
  nameWithType: CreatureTemplate.Type.BigSpider
  fullName: CreatureTemplate.Type.BigSpider
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.BigSpider</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type BigSpider
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly BigSpider As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.SpitterSpider
  commentId: F:Global.CreatureTemplate.Type.SpitterSpider
  id: SpitterSpider
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: SpitterSpider
  nameWithType: CreatureTemplate.Type.SpitterSpider
  fullName: CreatureTemplate.Type.SpitterSpider
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.SpitterSpider</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type SpitterSpider
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly SpitterSpider As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.SmallNeedleWorm
  commentId: F:Global.CreatureTemplate.Type.SmallNeedleWorm
  id: SmallNeedleWorm
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: SmallNeedleWorm
  nameWithType: CreatureTemplate.Type.SmallNeedleWorm
  fullName: CreatureTemplate.Type.SmallNeedleWorm
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.SmallNeedleWorm</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type SmallNeedleWorm
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly SmallNeedleWorm As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.BigNeedleWorm
  commentId: F:Global.CreatureTemplate.Type.BigNeedleWorm
  id: BigNeedleWorm
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: BigNeedleWorm
  nameWithType: CreatureTemplate.Type.BigNeedleWorm
  fullName: CreatureTemplate.Type.BigNeedleWorm
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.BigNeedleWorm</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type BigNeedleWorm
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly BigNeedleWorm As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.DropBug
  commentId: F:Global.CreatureTemplate.Type.DropBug
  id: DropBug
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: DropBug
  nameWithType: CreatureTemplate.Type.DropBug
  fullName: CreatureTemplate.Type.DropBug
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.DropBug</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type DropBug
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly DropBug As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.KingVulture
  commentId: F:Global.CreatureTemplate.Type.KingVulture
  id: KingVulture
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: KingVulture
  nameWithType: CreatureTemplate.Type.KingVulture
  fullName: CreatureTemplate.Type.KingVulture
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.KingVulture</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type KingVulture
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly KingVulture As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.Hazer
  commentId: F:Global.CreatureTemplate.Type.Hazer
  id: Hazer
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Hazer
  nameWithType: CreatureTemplate.Type.Hazer
  fullName: CreatureTemplate.Type.Hazer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CreatureTemplate.Type.Hazer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly CreatureTemplate.Type Hazer
    return:
      type: Global.CreatureTemplate.Type
    content.vb: Public Shared ReadOnly Hazer As CreatureTemplate.Type
- uid: Global.CreatureTemplate.Type.#ctor(System.String,System.Boolean)
  commentId: M:Global.CreatureTemplate.Type.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Global.CreatureTemplate.Type
  langs:
  - csharp
  - vb
  name: Type(string, bool)
  nameWithType: CreatureTemplate.Type.Type(string, bool)
  fullName: CreatureTemplate.Type.Type(string, bool)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>CreatureTemplate.Type</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Type(string value, bool register = false)
    parameters:
    - id: value
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:CreatureTemplate.Type.#ctor(System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: register
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>register</parameter>
            <parameter>M:CreatureTemplate.Type.#ctor(System.String,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(value As String, register As Boolean = False)
  overload: Global.CreatureTemplate.Type.#ctor*
  nameWithType.vb: CreatureTemplate.Type.New(String, Boolean)
  fullName.vb: CreatureTemplate.Type.New(String, Boolean)
  name.vb: New(String, Boolean)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ExtEnumBase
  commentId: T:Global.ExtEnumBase
  isExternal: true
  href: ExtEnumBase.html
  name: ExtEnumBase
  nameWithType: ExtEnumBase
  fullName: ExtEnumBase
- uid: Global.ExtEnum{CreatureTemplate.Type}
  commentId: T:Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1
  href: ExtEnum-1.html
  name: ExtEnum<CreatureTemplate.Type>
  nameWithType: ExtEnum<CreatureTemplate.Type>
  fullName: ExtEnum<CreatureTemplate.Type>
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type)
  fullName.vb: ExtEnum(Of CreatureTemplate.Type)
  name.vb: ExtEnum(Of CreatureTemplate.Type)
  spec.csharp:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: '>'
  spec.vb:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IEquatable{CreatureTemplate.Type}
  commentId: T:System.IEquatable{CreatureTemplate.Type}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<CreatureTemplate.Type>
  nameWithType: IEquatable<CreatureTemplate.Type>
  fullName: System.IEquatable<CreatureTemplate.Type>
  nameWithType.vb: IEquatable(Of CreatureTemplate.Type)
  fullName.vb: System.IEquatable(Of CreatureTemplate.Type)
  name.vb: IEquatable(Of CreatureTemplate.Type)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: )
- uid: Global.ExtEnum{CreatureTemplate.Type}.values
  commentId: F:Global.ExtEnum{CreatureTemplate.Type}.values
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.values
  href: Global.ExtEnum-1.html#ExtEnum_1_values
  name: values
  nameWithType: ExtEnum<CreatureTemplate.Type>.values
  fullName: ExtEnum<CreatureTemplate.Type>.values
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).values
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).values
- uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(System.Object)
  commentId: M:Global.ExtEnum{CreatureTemplate.Type}.Equals(System.Object)
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.Equals(System.Object)
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  name: Equals(object)
  nameWithType: ExtEnum<CreatureTemplate.Type>.Equals(object)
  fullName: ExtEnum<CreatureTemplate.Type>.Equals(object)
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).Equals(Object)
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(ExtEnum{CreatureTemplate.Type})
  commentId: M:Global.ExtEnum{CreatureTemplate.Type}.Equals(ExtEnum{CreatureTemplate.Type})
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.Equals(ExtEnum{`0})
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  name: Equals(ExtEnum<Type>)
  nameWithType: ExtEnum<CreatureTemplate.Type>.Equals(ExtEnum<CreatureTemplate.Type>)
  fullName: ExtEnum<CreatureTemplate.Type>.Equals(ExtEnum<CreatureTemplate.Type>)
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).Equals(ExtEnum(Of CreatureTemplate.Type))
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).Equals(ExtEnum(Of CreatureTemplate.Type))
  name.vb: Equals(ExtEnum(Of Type))
  spec.csharp:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(ExtEnum{CreatureTemplate.Type})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(ExtEnum{CreatureTemplate.Type})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: )
  - name: )
- uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(CreatureTemplate.Type)
  commentId: M:Global.ExtEnum{CreatureTemplate.Type}.Equals(CreatureTemplate.Type)
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.Equals(`0)
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  name: Equals(Type)
  nameWithType: ExtEnum<CreatureTemplate.Type>.Equals(CreatureTemplate.Type)
  fullName: ExtEnum<CreatureTemplate.Type>.Equals(CreatureTemplate.Type)
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).Equals(CreatureTemplate.Type)
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).Equals(CreatureTemplate.Type)
  spec.csharp:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(CreatureTemplate.Type)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Equals(CreatureTemplate.Type)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: )
- uid: Global.ExtEnum{CreatureTemplate.Type}.GetHashCode
  commentId: M:Global.ExtEnum{CreatureTemplate.Type}.GetHashCode
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.GetHashCode
  href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  name: GetHashCode()
  nameWithType: ExtEnum<CreatureTemplate.Type>.GetHashCode()
  fullName: ExtEnum<CreatureTemplate.Type>.GetHashCode()
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).GetHashCode()
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).GetHashCode()
  spec.csharp:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
- uid: Global.ExtEnum{CreatureTemplate.Type}.Unregister
  commentId: M:Global.ExtEnum{CreatureTemplate.Type}.Unregister
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.Unregister
  href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  name: Unregister()
  nameWithType: ExtEnum<CreatureTemplate.Type>.Unregister()
  fullName: ExtEnum<CreatureTemplate.Type>.Unregister()
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).Unregister()
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).Unregister()
  spec.csharp:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{CreatureTemplate.Type}.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
- uid: Global.ExtEnum{CreatureTemplate.Type}.valuesVersion
  commentId: P:Global.ExtEnum{CreatureTemplate.Type}.valuesVersion
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.valuesVersion
  href: Global.ExtEnum-1.html#ExtEnum_1_valuesVersion
  name: valuesVersion
  nameWithType: ExtEnum<CreatureTemplate.Type>.valuesVersion
  fullName: ExtEnum<CreatureTemplate.Type>.valuesVersion
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).valuesVersion
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).valuesVersion
- uid: Global.ExtEnum{CreatureTemplate.Type}.Index
  commentId: P:Global.ExtEnum{CreatureTemplate.Type}.Index
  parent: Global.ExtEnum{CreatureTemplate.Type}
  definition: Global.ExtEnum`1.Index
  href: Global.ExtEnum-1.html#ExtEnum_1_Index
  name: Index
  nameWithType: ExtEnum<CreatureTemplate.Type>.Index
  fullName: ExtEnum<CreatureTemplate.Type>.Index
  nameWithType.vb: ExtEnum(Of CreatureTemplate.Type).Index
  fullName.vb: ExtEnum(Of CreatureTemplate.Type).Index
- uid: Global.ExtEnumBase.value
  commentId: F:Global.ExtEnumBase.value
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_value
  name: value
  nameWithType: ExtEnumBase.value
  fullName: ExtEnumBase.value
- uid: Global.ExtEnumBase.valueHash
  commentId: F:Global.ExtEnumBase.valueHash
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_valueHash
  name: valueHash
  nameWithType: ExtEnumBase.valueHash
  fullName: ExtEnumBase.valueHash
- uid: Global.ExtEnumBase.index
  commentId: F:Global.ExtEnumBase.index
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_index
  name: index
  nameWithType: ExtEnumBase.index
  fullName: ExtEnumBase.index
- uid: Global.ExtEnumBase.localVersion
  commentId: F:Global.ExtEnumBase.localVersion
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_localVersion
  name: localVersion
  nameWithType: ExtEnumBase.localVersion
  fullName: ExtEnumBase.localVersion
- uid: Global.ExtEnumBase.enumType
  commentId: F:Global.ExtEnumBase.enumType
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_enumType
  name: enumType
  nameWithType: ExtEnumBase.enumType
  fullName: ExtEnumBase.enumType
- uid: Global.ExtEnumBase.valueDictionary
  commentId: F:Global.ExtEnumBase.valueDictionary
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_valueDictionary
  name: valueDictionary
  nameWithType: ExtEnumBase.valueDictionary
  fullName: ExtEnumBase.valueDictionary
- uid: Global.ExtEnumBase.ToString
  commentId: M:Global.ExtEnumBase.ToString
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  name: ToString()
  nameWithType: ExtEnumBase.ToString()
  fullName: ExtEnumBase.ToString()
  spec.csharp:
  - uid: Global.ExtEnumBase.ToString
    name: ToString
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.ToString
    name: ToString
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  - name: (
  - name: )
- uid: Global.ExtEnumBase.CompareTo(System.Object)
  commentId: M:Global.ExtEnumBase.CompareTo(System.Object)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  name: CompareTo(object)
  nameWithType: ExtEnumBase.CompareTo(object)
  fullName: ExtEnumBase.CompareTo(object)
  nameWithType.vb: ExtEnumBase.CompareTo(Object)
  fullName.vb: ExtEnumBase.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: Global.ExtEnumBase.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  name: Parse(Type, string, bool)
  nameWithType: ExtEnumBase.Parse(Type, string, bool)
  fullName: ExtEnumBase.Parse(System.Type, string, bool)
  nameWithType.vb: ExtEnumBase.Parse(Type, String, Boolean)
  fullName.vb: ExtEnumBase.Parse(System.Type, String, Boolean)
  name.vb: Parse(Type, String, Boolean)
  spec.csharp:
  - uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
    name: Parse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
    name: Parse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  commentId: M:Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  name: TryParse(Type, string, bool, out ExtEnumBase)
  nameWithType: ExtEnumBase.TryParse(Type, string, bool, out ExtEnumBase)
  fullName: ExtEnumBase.TryParse(System.Type, string, bool, out ExtEnumBase)
  nameWithType.vb: ExtEnumBase.TryParse(Type, String, Boolean, ExtEnumBase)
  fullName.vb: ExtEnumBase.TryParse(System.Type, String, Boolean, ExtEnumBase)
  name.vb: TryParse(Type, String, Boolean, ExtEnumBase)
  spec.csharp:
  - uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
    name: TryParse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Global.ExtEnumBase
    name: ExtEnumBase
    isExternal: true
    href: ExtEnumBase.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
    name: TryParse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Global.ExtEnumBase
    name: ExtEnumBase
    isExternal: true
    href: ExtEnumBase.html
  - name: )
- uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
  commentId: M:Global.ExtEnumBase.GetExtEnumType(System.Type)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  name: GetExtEnumType(Type)
  nameWithType: ExtEnumBase.GetExtEnumType(Type)
  fullName: ExtEnumBase.GetExtEnumType(System.Type)
  spec.csharp:
  - uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
    name: GetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
    name: GetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  commentId: M:Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  name: TryGetExtEnumType(Type, out ExtEnumType)
  nameWithType: ExtEnumBase.TryGetExtEnumType(Type, out ExtEnumType)
  fullName: ExtEnumBase.TryGetExtEnumType(System.Type, out ExtEnumType)
  nameWithType.vb: ExtEnumBase.TryGetExtEnumType(Type, ExtEnumType)
  fullName.vb: ExtEnumBase.TryGetExtEnumType(System.Type, ExtEnumType)
  name.vb: TryGetExtEnumType(Type, ExtEnumType)
  spec.csharp:
  - uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
    name: TryGetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
    name: TryGetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: )
- uid: Global.ExtEnumBase.GetNames(System.Type)
  commentId: M:Global.ExtEnumBase.GetNames(System.Type)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  name: GetNames(Type)
  nameWithType: ExtEnumBase.GetNames(Type)
  fullName: ExtEnumBase.GetNames(System.Type)
  spec.csharp:
  - uid: Global.ExtEnumBase.GetNames(System.Type)
    name: GetNames
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.GetNames(System.Type)
    name: GetNames
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  name: IsDefined(Type, string, bool)
  nameWithType: ExtEnumBase.IsDefined(Type, string, bool)
  fullName: ExtEnumBase.IsDefined(System.Type, string, bool)
  nameWithType.vb: ExtEnumBase.IsDefined(Type, String, Boolean)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, String, Boolean)
  name.vb: IsDefined(Type, String, Boolean)
  spec.csharp:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  name: IsDefined(Type, int)
  nameWithType: ExtEnumBase.IsDefined(Type, int)
  fullName: ExtEnumBase.IsDefined(System.Type, int)
  nameWithType.vb: ExtEnumBase.IsDefined(Type, Integer)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, Integer)
  name.vb: IsDefined(Type, Integer)
  spec.csharp:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ExtEnum`1
  commentId: T:Global.ExtEnum`1
  isExternal: true
  href: ExtEnum-1.html
  name: ExtEnum<T>
  nameWithType: ExtEnum<T>
  fullName: ExtEnum<T>
  nameWithType.vb: ExtEnum(Of T)
  fullName.vb: ExtEnum(Of T)
  name.vb: ExtEnum(Of T)
  spec.csharp:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ExtEnum`1.values
  commentId: F:Global.ExtEnum`1.values
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_values
  name: values
  nameWithType: ExtEnum<T>.values
  fullName: ExtEnum<T>.values
  nameWithType.vb: ExtEnum(Of T).values
  fullName.vb: ExtEnum(Of T).values
- uid: Global.ExtEnum`1.Equals(System.Object)
  commentId: M:Global.ExtEnum`1.Equals(System.Object)
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  name: Equals(object)
  nameWithType: ExtEnum<T>.Equals(object)
  fullName: ExtEnum<T>.Equals(object)
  nameWithType.vb: ExtEnum(Of T).Equals(Object)
  fullName.vb: ExtEnum(Of T).Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
  commentId: M:Global.ExtEnum`1.Equals(ExtEnum{`0})
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  name: Equals(ExtEnum<T>)
  nameWithType: ExtEnum<T>.Equals(ExtEnum<T>)
  fullName: ExtEnum<T>.Equals(ExtEnum<T>)
  nameWithType.vb: ExtEnum(Of T).Equals(ExtEnum(Of T))
  fullName.vb: ExtEnum(Of T).Equals(ExtEnum(Of T))
  name.vb: Equals(ExtEnum(Of T))
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Global.ExtEnum`1.Equals(`0)
  commentId: M:Global.ExtEnum`1.Equals(`0)
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  name: Equals(T)
  nameWithType: ExtEnum<T>.Equals(T)
  fullName: ExtEnum<T>.Equals(T)
  nameWithType.vb: ExtEnum(Of T).Equals(T)
  fullName.vb: ExtEnum(Of T).Equals(T)
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(`0)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(`0)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - name: T
  - name: )
- uid: Global.ExtEnum`1.GetHashCode
  commentId: M:Global.ExtEnum`1.GetHashCode
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  name: GetHashCode()
  nameWithType: ExtEnum<T>.GetHashCode()
  fullName: ExtEnum<T>.GetHashCode()
  nameWithType.vb: ExtEnum(Of T).GetHashCode()
  fullName.vb: ExtEnum(Of T).GetHashCode()
  spec.csharp:
  - uid: Global.ExtEnum`1.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
- uid: Global.ExtEnum`1.Unregister
  commentId: M:Global.ExtEnum`1.Unregister
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  name: Unregister()
  nameWithType: ExtEnum<T>.Unregister()
  fullName: ExtEnum<T>.Unregister()
  nameWithType.vb: ExtEnum(Of T).Unregister()
  fullName.vb: ExtEnum(Of T).Unregister()
  spec.csharp:
  - uid: Global.ExtEnum`1.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
- uid: Global.ExtEnum`1.valuesVersion
  commentId: P:Global.ExtEnum`1.valuesVersion
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_valuesVersion
  name: valuesVersion
  nameWithType: ExtEnum<T>.valuesVersion
  fullName: ExtEnum<T>.valuesVersion
  nameWithType.vb: ExtEnum(Of T).valuesVersion
  fullName.vb: ExtEnum(Of T).valuesVersion
- uid: Global.ExtEnum`1.Index
  commentId: P:Global.ExtEnum`1.Index
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Index
  name: Index
  nameWithType: ExtEnum<T>.Index
  fullName: ExtEnum<T>.Index
  nameWithType.vb: ExtEnum(Of T).Index
  fullName.vb: ExtEnum(Of T).Index
- uid: Global.CreatureTemplate.Type
  commentId: T:Global.CreatureTemplate.Type
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate.Type
  nameWithType: CreatureTemplate.Type
  fullName: CreatureTemplate.Type
  spec.csharp:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  spec.vb:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
- uid: Global.CreatureTemplate.Type.#ctor*
  commentId: Overload:Global.CreatureTemplate.Type.#ctor
  isExternal: true
  href: Global.CreatureTemplate.Type.html#CreatureTemplate_Type__ctor_System_String_System_Boolean_
  name: Type
  nameWithType: CreatureTemplate.Type.Type
  fullName: CreatureTemplate.Type.Type
  nameWithType.vb: CreatureTemplate.Type.New
  fullName.vb: CreatureTemplate.Type.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
