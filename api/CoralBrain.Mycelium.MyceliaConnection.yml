### YamlMime:ManagedReference
items:
- uid: CoralBrain.Mycelium.MyceliaConnection
  commentId: T:CoralBrain.Mycelium.MyceliaConnection
  id: Mycelium.MyceliaConnection
  parent: CoralBrain
  children:
  - CoralBrain.Mycelium.MyceliaConnection.#ctor(CoralBrain.Mycelium,CoralBrain.Mycelium)
  - CoralBrain.Mycelium.MyceliaConnection.A
  - CoralBrain.Mycelium.MyceliaConnection.B
  - CoralBrain.Mycelium.MyceliaConnection.Equals(CoralBrain.Mycelium.MyceliaConnection)
  - CoralBrain.Mycelium.MyceliaConnection.Equals(System.Object)
  - CoralBrain.Mycelium.MyceliaConnection.GetHashCode
  - CoralBrain.Mycelium.MyceliaConnection.Other(CoralBrain.Mycelium)
  - CoralBrain.Mycelium.MyceliaConnection.op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  - CoralBrain.Mycelium.MyceliaConnection.op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  langs:
  - csharp
  - vb
  name: Mycelium.MyceliaConnection
  nameWithType: Mycelium.MyceliaConnection
  fullName: CoralBrain.Mycelium.MyceliaConnection
  type: Struct
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:CoralBrain.Mycelium.MyceliaConnection</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public struct Mycelium.MyceliaConnection : IEquatable<Mycelium.MyceliaConnection>'
    content.vb: Public Structure Mycelium.MyceliaConnection Implements IEquatable(Of Mycelium.MyceliaConnection)
  implements:
  - System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: CoralBrain.Mycelium.MyceliaConnection.A
  commentId: F:CoralBrain.Mycelium.MyceliaConnection.A
  id: A
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: A
  nameWithType: Mycelium.MyceliaConnection.A
  fullName: CoralBrain.Mycelium.MyceliaConnection.A
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CoralBrain.Mycelium.MyceliaConnection.A</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Mycelium A
    return:
      type: CoralBrain.Mycelium
    content.vb: Public A As Mycelium
- uid: CoralBrain.Mycelium.MyceliaConnection.B
  commentId: F:CoralBrain.Mycelium.MyceliaConnection.B
  id: B
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: B
  nameWithType: Mycelium.MyceliaConnection.B
  fullName: CoralBrain.Mycelium.MyceliaConnection.B
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:CoralBrain.Mycelium.MyceliaConnection.B</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Mycelium B
    return:
      type: CoralBrain.Mycelium
    content.vb: Public B As Mycelium
- uid: CoralBrain.Mycelium.MyceliaConnection.Equals(CoralBrain.Mycelium.MyceliaConnection)
  commentId: M:CoralBrain.Mycelium.MyceliaConnection.Equals(CoralBrain.Mycelium.MyceliaConnection)
  id: Equals(CoralBrain.Mycelium.MyceliaConnection)
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: Equals(MyceliaConnection)
  nameWithType: Mycelium.MyceliaConnection.Equals(Mycelium.MyceliaConnection)
  fullName: CoralBrain.Mycelium.MyceliaConnection.Equals(CoralBrain.Mycelium.MyceliaConnection)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Equals(CoralBrain.Mycelium.MyceliaConnection)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Equals(Mycelium.MyceliaConnection other)
    parameters:
    - id: other
      type: CoralBrain.Mycelium.MyceliaConnection
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Equals(CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Equals(CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    content.vb: Public Function Equals(other As Mycelium.MyceliaConnection) As Boolean
  overload: CoralBrain.Mycelium.MyceliaConnection.Equals*
  implements:
  - System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}.Equals(CoralBrain.Mycelium.MyceliaConnection)
- uid: CoralBrain.Mycelium.MyceliaConnection.Equals(System.Object)
  commentId: M:CoralBrain.Mycelium.MyceliaConnection.Equals(System.Object)
  id: Equals(System.Object)
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Mycelium.MyceliaConnection.Equals(object)
  fullName: CoralBrain.Mycelium.MyceliaConnection.Equals(object)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Equals(System.Object)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Equals(System.Object)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Equals(System.Object)</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: CoralBrain.Mycelium.MyceliaConnection.Equals*
  nameWithType.vb: Mycelium.MyceliaConnection.Equals(Object)
  fullName.vb: CoralBrain.Mycelium.MyceliaConnection.Equals(Object)
  name.vb: Equals(Object)
- uid: CoralBrain.Mycelium.MyceliaConnection.GetHashCode
  commentId: M:CoralBrain.Mycelium.MyceliaConnection.GetHashCode
  id: GetHashCode
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Mycelium.MyceliaConnection.GetHashCode()
  fullName: CoralBrain.Mycelium.MyceliaConnection.GetHashCode()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:CoralBrain.Mycelium.MyceliaConnection.GetHashCode</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.GetHashCode</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: CoralBrain.Mycelium.MyceliaConnection.GetHashCode*
- uid: CoralBrain.Mycelium.MyceliaConnection.op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  commentId: M:CoralBrain.Mycelium.MyceliaConnection.op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  id: op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: operator ==(MyceliaConnection, MyceliaConnection)
  nameWithType: Mycelium.MyceliaConnection.operator ==(Mycelium.MyceliaConnection, Mycelium.MyceliaConnection)
  fullName: CoralBrain.Mycelium.MyceliaConnection.operator ==(CoralBrain.Mycelium.MyceliaConnection, CoralBrain.Mycelium.MyceliaConnection)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator ==(Mycelium.MyceliaConnection left, Mycelium.MyceliaConnection right)
    parameters:
    - id: left
      type: CoralBrain.Mycelium.MyceliaConnection
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>left</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    - id: right
      type: CoralBrain.Mycelium.MyceliaConnection
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>right</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Equality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator =(left As Mycelium.MyceliaConnection, right As Mycelium.MyceliaConnection) As Boolean
  overload: CoralBrain.Mycelium.MyceliaConnection.op_Equality*
  nameWithType.vb: Mycelium.MyceliaConnection.=(Mycelium.MyceliaConnection, Mycelium.MyceliaConnection)
  fullName.vb: CoralBrain.Mycelium.MyceliaConnection.=(CoralBrain.Mycelium.MyceliaConnection, CoralBrain.Mycelium.MyceliaConnection)
  name.vb: =(MyceliaConnection, MyceliaConnection)
- uid: CoralBrain.Mycelium.MyceliaConnection.op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  commentId: M:CoralBrain.Mycelium.MyceliaConnection.op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  id: op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: operator !=(MyceliaConnection, MyceliaConnection)
  nameWithType: Mycelium.MyceliaConnection.operator !=(Mycelium.MyceliaConnection, Mycelium.MyceliaConnection)
  fullName: CoralBrain.Mycelium.MyceliaConnection.operator !=(CoralBrain.Mycelium.MyceliaConnection, CoralBrain.Mycelium.MyceliaConnection)
  type: Operator
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool operator !=(Mycelium.MyceliaConnection left, Mycelium.MyceliaConnection right)
    parameters:
    - id: left
      type: CoralBrain.Mycelium.MyceliaConnection
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>left</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    - id: right
      type: CoralBrain.Mycelium.MyceliaConnection
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>right</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.op_Inequality(CoralBrain.Mycelium.MyceliaConnection,CoralBrain.Mycelium.MyceliaConnection)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Operator <>(left As Mycelium.MyceliaConnection, right As Mycelium.MyceliaConnection) As Boolean
  overload: CoralBrain.Mycelium.MyceliaConnection.op_Inequality*
  nameWithType.vb: Mycelium.MyceliaConnection.<>(Mycelium.MyceliaConnection, Mycelium.MyceliaConnection)
  fullName.vb: CoralBrain.Mycelium.MyceliaConnection.<>(CoralBrain.Mycelium.MyceliaConnection, CoralBrain.Mycelium.MyceliaConnection)
  name.vb: <>(MyceliaConnection, MyceliaConnection)
- uid: CoralBrain.Mycelium.MyceliaConnection.#ctor(CoralBrain.Mycelium,CoralBrain.Mycelium)
  commentId: M:CoralBrain.Mycelium.MyceliaConnection.#ctor(CoralBrain.Mycelium,CoralBrain.Mycelium)
  id: '#ctor(CoralBrain.Mycelium,CoralBrain.Mycelium)'
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: MyceliaConnection(Mycelium, Mycelium)
  nameWithType: Mycelium.MyceliaConnection.MyceliaConnection(Mycelium, Mycelium)
  fullName: CoralBrain.Mycelium.MyceliaConnection.MyceliaConnection(CoralBrain.Mycelium, CoralBrain.Mycelium)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>CoralBrain.Mycelium.MyceliaConnection</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public MyceliaConnection(Mycelium A, Mycelium B)
    parameters:
    - id: A
      type: CoralBrain.Mycelium
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.#ctor(CoralBrain.Mycelium,CoralBrain.Mycelium)</parameter>
          </include>
        </markup>
    - id: B
      type: CoralBrain.Mycelium
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.#ctor(CoralBrain.Mycelium,CoralBrain.Mycelium)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(A As Mycelium, B As Mycelium)
  overload: CoralBrain.Mycelium.MyceliaConnection.#ctor*
  nameWithType.vb: Mycelium.MyceliaConnection.New(Mycelium, Mycelium)
  fullName.vb: CoralBrain.Mycelium.MyceliaConnection.New(CoralBrain.Mycelium, CoralBrain.Mycelium)
  name.vb: New(Mycelium, Mycelium)
- uid: CoralBrain.Mycelium.MyceliaConnection.Other(CoralBrain.Mycelium)
  commentId: M:CoralBrain.Mycelium.MyceliaConnection.Other(CoralBrain.Mycelium)
  id: Other(CoralBrain.Mycelium)
  parent: CoralBrain.Mycelium.MyceliaConnection
  langs:
  - csharp
  - vb
  name: Other(Mycelium)
  nameWithType: Mycelium.MyceliaConnection.Other(Mycelium)
  fullName: CoralBrain.Mycelium.MyceliaConnection.Other(CoralBrain.Mycelium)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: CoralBrain
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Other(CoralBrain.Mycelium)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Mycelium Other(Mycelium me)
    parameters:
    - id: me
      type: CoralBrain.Mycelium
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>me</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Other(CoralBrain.Mycelium)</parameter>
          </include>
        </markup>
    return:
      type: CoralBrain.Mycelium
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:CoralBrain.Mycelium.MyceliaConnection.Other(CoralBrain.Mycelium)</parameter>
          </include>
        </markup>
    content.vb: Public Function Other([me] As Mycelium) As Mycelium
  overload: CoralBrain.Mycelium.MyceliaConnection.Other*
references:
- uid: CoralBrain
  commentId: N:CoralBrain
  isExternal: true
  href: CoralBrain.html
  name: CoralBrain
  nameWithType: CoralBrain
  fullName: CoralBrain
- uid: System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}
  commentId: T:System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Mycelium.MyceliaConnection>
  nameWithType: IEquatable<Mycelium.MyceliaConnection>
  fullName: System.IEquatable<CoralBrain.Mycelium.MyceliaConnection>
  nameWithType.vb: IEquatable(Of Mycelium.MyceliaConnection)
  fullName.vb: System.IEquatable(Of CoralBrain.Mycelium.MyceliaConnection)
  name.vb: IEquatable(Of Mycelium.MyceliaConnection)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: CoralBrain.Mycelium
    name: Mycelium
    isExternal: true
    href: CoralBrain.Mycelium.html
  - name: .
  - uid: CoralBrain.Mycelium.MyceliaConnection
    name: MyceliaConnection
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CoralBrain.Mycelium
    name: Mycelium
    isExternal: true
    href: CoralBrain.Mycelium.html
  - name: .
  - uid: CoralBrain.Mycelium.MyceliaConnection
    name: MyceliaConnection
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: CoralBrain.Mycelium
  commentId: T:CoralBrain.Mycelium
  parent: CoralBrain
  isExternal: true
  href: CoralBrain.Mycelium.html
  name: Mycelium
  nameWithType: Mycelium
  fullName: CoralBrain.Mycelium
- uid: CoralBrain.Mycelium.MyceliaConnection.Equals*
  commentId: Overload:CoralBrain.Mycelium.MyceliaConnection.Equals
  isExternal: true
  href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection_Equals_CoralBrain_Mycelium_MyceliaConnection_
  name: Equals
  nameWithType: Mycelium.MyceliaConnection.Equals
  fullName: CoralBrain.Mycelium.MyceliaConnection.Equals
- uid: System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}.Equals(CoralBrain.Mycelium.MyceliaConnection)
  commentId: M:System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}.Equals(CoralBrain.Mycelium.MyceliaConnection)
  parent: System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(MyceliaConnection)
  nameWithType: IEquatable<Mycelium.MyceliaConnection>.Equals(Mycelium.MyceliaConnection)
  fullName: System.IEquatable<CoralBrain.Mycelium.MyceliaConnection>.Equals(CoralBrain.Mycelium.MyceliaConnection)
  nameWithType.vb: IEquatable(Of Mycelium.MyceliaConnection).Equals(Mycelium.MyceliaConnection)
  fullName.vb: System.IEquatable(Of CoralBrain.Mycelium.MyceliaConnection).Equals(CoralBrain.Mycelium.MyceliaConnection)
  spec.csharp:
  - uid: System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}.Equals(CoralBrain.Mycelium.MyceliaConnection)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: CoralBrain.Mycelium.MyceliaConnection
    name: MyceliaConnection
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{CoralBrain.Mycelium.MyceliaConnection}.Equals(CoralBrain.Mycelium.MyceliaConnection)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: CoralBrain.Mycelium.MyceliaConnection
    name: MyceliaConnection
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html
  - name: )
- uid: CoralBrain.Mycelium.MyceliaConnection
  commentId: T:CoralBrain.Mycelium.MyceliaConnection
  parent: CoralBrain
  isExternal: true
  href: CoralBrain.Mycelium.html
  name: Mycelium.MyceliaConnection
  nameWithType: Mycelium.MyceliaConnection
  fullName: CoralBrain.Mycelium.MyceliaConnection
  spec.csharp:
  - uid: CoralBrain.Mycelium
    name: Mycelium
    isExternal: true
    href: CoralBrain.Mycelium.html
  - name: .
  - uid: CoralBrain.Mycelium.MyceliaConnection
    name: MyceliaConnection
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html
  spec.vb:
  - uid: CoralBrain.Mycelium
    name: Mycelium
    isExternal: true
    href: CoralBrain.Mycelium.html
  - name: .
  - uid: CoralBrain.Mycelium.MyceliaConnection
    name: MyceliaConnection
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: CoralBrain.Mycelium.MyceliaConnection.GetHashCode*
  commentId: Overload:CoralBrain.Mycelium.MyceliaConnection.GetHashCode
  isExternal: true
  href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection_GetHashCode
  name: GetHashCode
  nameWithType: Mycelium.MyceliaConnection.GetHashCode
  fullName: CoralBrain.Mycelium.MyceliaConnection.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: CoralBrain.Mycelium.MyceliaConnection.op_Equality*
  commentId: Overload:CoralBrain.Mycelium.MyceliaConnection.op_Equality
  isExternal: true
  href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection_op_Equality_CoralBrain_Mycelium_MyceliaConnection_CoralBrain_Mycelium_MyceliaConnection_
  name: operator ==
  nameWithType: Mycelium.MyceliaConnection.operator ==
  fullName: CoralBrain.Mycelium.MyceliaConnection.operator ==
  nameWithType.vb: Mycelium.MyceliaConnection.=
  fullName.vb: CoralBrain.Mycelium.MyceliaConnection.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CoralBrain.Mycelium.MyceliaConnection.op_Equality*
    name: ==
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection_op_Equality_CoralBrain_Mycelium_MyceliaConnection_CoralBrain_Mycelium_MyceliaConnection_
- uid: CoralBrain.Mycelium.MyceliaConnection.op_Inequality*
  commentId: Overload:CoralBrain.Mycelium.MyceliaConnection.op_Inequality
  isExternal: true
  href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection_op_Inequality_CoralBrain_Mycelium_MyceliaConnection_CoralBrain_Mycelium_MyceliaConnection_
  name: operator !=
  nameWithType: Mycelium.MyceliaConnection.operator !=
  fullName: CoralBrain.Mycelium.MyceliaConnection.operator !=
  nameWithType.vb: Mycelium.MyceliaConnection.<>
  fullName.vb: CoralBrain.Mycelium.MyceliaConnection.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CoralBrain.Mycelium.MyceliaConnection.op_Inequality*
    name: '!='
    isExternal: true
    href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection_op_Inequality_CoralBrain_Mycelium_MyceliaConnection_CoralBrain_Mycelium_MyceliaConnection_
- uid: CoralBrain.Mycelium.MyceliaConnection.#ctor*
  commentId: Overload:CoralBrain.Mycelium.MyceliaConnection.#ctor
  isExternal: true
  href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection__ctor_CoralBrain_Mycelium_CoralBrain_Mycelium_
  name: MyceliaConnection
  nameWithType: Mycelium.MyceliaConnection.MyceliaConnection
  fullName: CoralBrain.Mycelium.MyceliaConnection.MyceliaConnection
  nameWithType.vb: Mycelium.MyceliaConnection.New
  fullName.vb: CoralBrain.Mycelium.MyceliaConnection.New
  name.vb: New
- uid: CoralBrain.Mycelium.MyceliaConnection.Other*
  commentId: Overload:CoralBrain.Mycelium.MyceliaConnection.Other
  isExternal: true
  href: CoralBrain.Mycelium.MyceliaConnection.html#CoralBrain_Mycelium_MyceliaConnection_Other_CoralBrain_Mycelium_
  name: Other
  nameWithType: Mycelium.MyceliaConnection.Other
  fullName: CoralBrain.Mycelium.MyceliaConnection.Other
