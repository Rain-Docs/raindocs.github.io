### YamlMime:ManagedReference
items:
- uid: Global.AbstractRoom
  commentId: T:Global.AbstractRoom
  id: AbstractRoom
  parent: Global
  children:
  - Global.AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)
  - Global.AbstractRoom.Abstractize
  - Global.AbstractRoom.AddArenaSandGrubBurrow(UnityEngine.Vector2)
  - Global.AbstractRoom.AddEntity(AbstractWorldEntity)
  - Global.AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  - Global.AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)
  - Global.AbstractRoom.AddTag(System.String)
  - Global.AbstractRoom.AnySideAccess
  - Global.AbstractRoom.AnySkyAccess
  - Global.AbstractRoom.AttractionForCreature(AbstractCreature)
  - Global.AbstractRoom.AttractionForCreature(CreatureTemplate.Type)
  - Global.AbstractRoom.AttractionForCreature(System.String)
  - Global.AbstractRoom.AttractionValueForCreature(AbstractCreature)
  - Global.AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)
  - Global.AbstractRoom.CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)
  - Global.AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)
  - Global.AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)
  - Global.AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)
  - Global.AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)
  - Global.AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)
  - Global.AbstractRoom.CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)
  - Global.AbstractRoom.DisplaySubregionName
  - Global.AbstractRoom.ExitIndex(System.Int32)
  - Global.AbstractRoom.FileName
  - Global.AbstractRoom.FloatToCreatureAttraction(System.Single)
  - Global.AbstractRoom.GetNode(WorldCoordinate)
  - Global.AbstractRoom.InitNodes(AbstractRoomNode[],System.String)
  - Global.AbstractRoom.MoveEntityOutOfDen(AbstractWorldEntity)
  - Global.AbstractRoom.MoveEntityToDen(AbstractWorldEntity)
  - Global.AbstractRoom.NOTRACKERS
  - Global.AbstractRoom.NodesRelevantToCreature(CreatureTemplate)
  - Global.AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)
  - Global.AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)
  - Global.AbstractRoom.RandomNodeInRoom
  - Global.AbstractRoom.RandomRelevantNode(CreatureTemplate)
  - Global.AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)
  - Global.AbstractRoom.RealizeRoom(World,RainWorldGame)
  - Global.AbstractRoom.RemoveEntity(AbstractWorldEntity)
  - Global.AbstractRoom.RemoveEntity(EntityID)
  - Global.AbstractRoom.RemoveEntityFromDen(AbstractWorldEntity)
  - Global.AbstractRoom.RemoveQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  - Global.AbstractRoom.ResolveDefaultAttractionString(System.String)
  - Global.AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)
  - Global.AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)
  - Global.AbstractRoom.TotalNodes
  - Global.AbstractRoom.Update(System.Int32)
  - Global.AbstractRoom.UpdateCreaturesInDens(System.Int32)
  - Global.AbstractRoom.altFileName
  - Global.AbstractRoom.altSubregionName
  - Global.AbstractRoom.arenaSandGrubSpots
  - Global.AbstractRoom.batHives
  - Global.AbstractRoom.battleArenaTriggeredTime
  - Global.AbstractRoom.borderExits
  - Global.AbstractRoom.connections
  - Global.AbstractRoom.creatures
  - Global.AbstractRoom.dens
  - Global.AbstractRoom.entities
  - Global.AbstractRoom.entitiesInDens
  - Global.AbstractRoom.exits
  - Global.AbstractRoom.firstTimeRealized
  - Global.AbstractRoom.garbageHoles
  - Global.AbstractRoom.gate
  - Global.AbstractRoom.gateIndex
  - Global.AbstractRoom.index
  - Global.AbstractRoom.isAncientShelter
  - Global.AbstractRoom.isBattleArena
  - Global.AbstractRoom.layer
  - Global.AbstractRoom.mapPos
  - Global.AbstractRoom.name
  - Global.AbstractRoom.namedRoomAttractions
  - Global.AbstractRoom.nodes
  - Global.AbstractRoom.offScreenDen
  - Global.AbstractRoom.quantifiedCreatures
  - Global.AbstractRoom.realizedRoom
  - Global.AbstractRoom.regionTransportations
  - Global.AbstractRoom.roomAttractions
  - Global.AbstractRoom.scavengerOutpost
  - Global.AbstractRoom.scavengerTrader
  - Global.AbstractRoom.seaExits
  - Global.AbstractRoom.shelter
  - Global.AbstractRoom.shelterIndex
  - Global.AbstractRoom.sideExits
  - Global.AbstractRoom.singleRealizedRoom
  - Global.AbstractRoom.size
  - Global.AbstractRoom.skyExits
  - Global.AbstractRoom.subregionName
  - Global.AbstractRoom.swarmRoom
  - Global.AbstractRoom.swarmRoomIndex
  - Global.AbstractRoom.world
  langs:
  - csharp
  - vb
  name: AbstractRoom
  nameWithType: AbstractRoom
  fullName: AbstractRoom
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:AbstractRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class AbstractRoom
    content.vb: Public Class AbstractRoom
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.AbstractRoom.world
  commentId: F:Global.AbstractRoom.world
  id: world
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: world
  nameWithType: AbstractRoom.world
  fullName: AbstractRoom.world
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.world</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public World world
    return:
      type: Global.World
    content.vb: Public world As World
- uid: Global.AbstractRoom.name
  commentId: F:Global.AbstractRoom.name
  id: name
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: name
  nameWithType: AbstractRoom.name
  fullName: AbstractRoom.name
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.name</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string name
    return:
      type: System.String
    content.vb: Public name As String
- uid: Global.AbstractRoom.connections
  commentId: F:Global.AbstractRoom.connections
  id: connections
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: connections
  nameWithType: AbstractRoom.connections
  fullName: AbstractRoom.connections
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.connections</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int[] connections
    return:
      type: System.Int32[]
    content.vb: Public connections As Integer()
- uid: Global.AbstractRoom.index
  commentId: F:Global.AbstractRoom.index
  id: index
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: index
  nameWithType: AbstractRoom.index
  fullName: AbstractRoom.index
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.index</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int index
    return:
      type: System.Int32
    content.vb: Public index As Integer
- uid: Global.AbstractRoom.nodes
  commentId: F:Global.AbstractRoom.nodes
  id: nodes
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: nodes
  nameWithType: AbstractRoom.nodes
  fullName: AbstractRoom.nodes
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.nodes</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoomNode[] nodes
    return:
      type: Global.AbstractRoomNode[]
    content.vb: Public nodes As AbstractRoomNode()
- uid: Global.AbstractRoom.realizedRoom
  commentId: F:Global.AbstractRoom.realizedRoom
  id: realizedRoom
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: realizedRoom
  nameWithType: AbstractRoom.realizedRoom
  fullName: AbstractRoom.realizedRoom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.realizedRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Room realizedRoom
    return:
      type: Global.Room
    content.vb: Public realizedRoom As Room
- uid: Global.AbstractRoom.creatures
  commentId: F:Global.AbstractRoom.creatures
  id: creatures
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: creatures
  nameWithType: AbstractRoom.creatures
  fullName: AbstractRoom.creatures
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.creatures</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<AbstractCreature> creatures
    return:
      type: System.Collections.Generic.List{AbstractCreature}
    content.vb: Public creatures As List(Of AbstractCreature)
- uid: Global.AbstractRoom.entities
  commentId: F:Global.AbstractRoom.entities
  id: entities
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: entities
  nameWithType: AbstractRoom.entities
  fullName: AbstractRoom.entities
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.entities</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<AbstractWorldEntity> entities
    return:
      type: System.Collections.Generic.List{AbstractWorldEntity}
    content.vb: Public entities As List(Of AbstractWorldEntity)
- uid: Global.AbstractRoom.entitiesInDens
  commentId: F:Global.AbstractRoom.entitiesInDens
  id: entitiesInDens
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: entitiesInDens
  nameWithType: AbstractRoom.entitiesInDens
  fullName: AbstractRoom.entitiesInDens
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.entitiesInDens</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<AbstractWorldEntity> entitiesInDens
    return:
      type: System.Collections.Generic.List{AbstractWorldEntity}
    content.vb: Public entitiesInDens As List(Of AbstractWorldEntity)
- uid: Global.AbstractRoom.quantifiedCreatures
  commentId: F:Global.AbstractRoom.quantifiedCreatures
  id: quantifiedCreatures
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: quantifiedCreatures
  nameWithType: AbstractRoom.quantifiedCreatures
  fullName: AbstractRoom.quantifiedCreatures
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.quantifiedCreatures</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int[,] quantifiedCreatures
    return:
      type: System.Int32[,]
    content.vb: Public quantifiedCreatures As Integer(,)
- uid: Global.AbstractRoom.shelterIndex
  commentId: F:Global.AbstractRoom.shelterIndex
  id: shelterIndex
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: shelterIndex
  nameWithType: AbstractRoom.shelterIndex
  fullName: AbstractRoom.shelterIndex
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.shelterIndex</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int shelterIndex
    return:
      type: System.Int32
    content.vb: Public shelterIndex As Integer
- uid: Global.AbstractRoom.singleRealizedRoom
  commentId: F:Global.AbstractRoom.singleRealizedRoom
  id: singleRealizedRoom
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: singleRealizedRoom
  nameWithType: AbstractRoom.singleRealizedRoom
  fullName: AbstractRoom.singleRealizedRoom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.singleRealizedRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool singleRealizedRoom
    return:
      type: System.Boolean
    content.vb: Public singleRealizedRoom As Boolean
- uid: Global.AbstractRoom.offScreenDen
  commentId: F:Global.AbstractRoom.offScreenDen
  id: offScreenDen
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: offScreenDen
  nameWithType: AbstractRoom.offScreenDen
  fullName: AbstractRoom.offScreenDen
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.offScreenDen</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool offScreenDen
    return:
      type: System.Boolean
    content.vb: Public offScreenDen As Boolean
- uid: Global.AbstractRoom.exits
  commentId: F:Global.AbstractRoom.exits
  id: exits
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: exits
  nameWithType: AbstractRoom.exits
  fullName: AbstractRoom.exits
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.exits</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int exits
    return:
      type: System.Int32
    content.vb: Public exits As Integer
- uid: Global.AbstractRoom.dens
  commentId: F:Global.AbstractRoom.dens
  id: dens
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: dens
  nameWithType: AbstractRoom.dens
  fullName: AbstractRoom.dens
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.dens</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int dens
    return:
      type: System.Int32
    content.vb: Public dens As Integer
- uid: Global.AbstractRoom.regionTransportations
  commentId: F:Global.AbstractRoom.regionTransportations
  id: regionTransportations
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: regionTransportations
  nameWithType: AbstractRoom.regionTransportations
  fullName: AbstractRoom.regionTransportations
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.regionTransportations</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int regionTransportations
    return:
      type: System.Int32
    content.vb: Public regionTransportations As Integer
- uid: Global.AbstractRoom.sideExits
  commentId: F:Global.AbstractRoom.sideExits
  id: sideExits
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: sideExits
  nameWithType: AbstractRoom.sideExits
  fullName: AbstractRoom.sideExits
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.sideExits</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int sideExits
    return:
      type: System.Int32
    content.vb: Public sideExits As Integer
- uid: Global.AbstractRoom.skyExits
  commentId: F:Global.AbstractRoom.skyExits
  id: skyExits
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: skyExits
  nameWithType: AbstractRoom.skyExits
  fullName: AbstractRoom.skyExits
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.skyExits</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int skyExits
    return:
      type: System.Int32
    content.vb: Public skyExits As Integer
- uid: Global.AbstractRoom.seaExits
  commentId: F:Global.AbstractRoom.seaExits
  id: seaExits
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: seaExits
  nameWithType: AbstractRoom.seaExits
  fullName: AbstractRoom.seaExits
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.seaExits</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int seaExits
    return:
      type: System.Int32
    content.vb: Public seaExits As Integer
- uid: Global.AbstractRoom.batHives
  commentId: F:Global.AbstractRoom.batHives
  id: batHives
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: batHives
  nameWithType: AbstractRoom.batHives
  fullName: AbstractRoom.batHives
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.batHives</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int batHives
    return:
      type: System.Int32
    content.vb: Public batHives As Integer
- uid: Global.AbstractRoom.garbageHoles
  commentId: F:Global.AbstractRoom.garbageHoles
  id: garbageHoles
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: garbageHoles
  nameWithType: AbstractRoom.garbageHoles
  fullName: AbstractRoom.garbageHoles
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.garbageHoles</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int garbageHoles
    return:
      type: System.Int32
    content.vb: Public garbageHoles As Integer
- uid: Global.AbstractRoom.gateIndex
  commentId: F:Global.AbstractRoom.gateIndex
  id: gateIndex
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: gateIndex
  nameWithType: AbstractRoom.gateIndex
  fullName: AbstractRoom.gateIndex
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.gateIndex</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int gateIndex
    return:
      type: System.Int32
    content.vb: Public gateIndex As Integer
- uid: Global.AbstractRoom.firstTimeRealized
  commentId: F:Global.AbstractRoom.firstTimeRealized
  id: firstTimeRealized
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: firstTimeRealized
  nameWithType: AbstractRoom.firstTimeRealized
  fullName: AbstractRoom.firstTimeRealized
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.firstTimeRealized</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool firstTimeRealized
    return:
      type: System.Boolean
    content.vb: Public firstTimeRealized As Boolean
- uid: Global.AbstractRoom.mapPos
  commentId: F:Global.AbstractRoom.mapPos
  id: mapPos
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: mapPos
  nameWithType: AbstractRoom.mapPos
  fullName: AbstractRoom.mapPos
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.mapPos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 mapPos
    return:
      type: UnityEngine.Vector2
    content.vb: Public mapPos As Vector2
- uid: Global.AbstractRoom.size
  commentId: F:Global.AbstractRoom.size
  id: size
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: size
  nameWithType: AbstractRoom.size
  fullName: AbstractRoom.size
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.size</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public IntVector2 size
    return:
      type: RWCustom.IntVector2
    content.vb: Public size As IntVector2
- uid: Global.AbstractRoom.layer
  commentId: F:Global.AbstractRoom.layer
  id: layer
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: layer
  nameWithType: AbstractRoom.layer
  fullName: AbstractRoom.layer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.layer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int layer
    return:
      type: System.Int32
    content.vb: Public layer As Integer
- uid: Global.AbstractRoom.subregionName
  commentId: F:Global.AbstractRoom.subregionName
  id: subregionName
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: subregionName
  nameWithType: AbstractRoom.subregionName
  fullName: AbstractRoom.subregionName
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.subregionName</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string subregionName
    return:
      type: System.String
    content.vb: Public subregionName As String
- uid: Global.AbstractRoom.altSubregionName
  commentId: F:Global.AbstractRoom.altSubregionName
  id: altSubregionName
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: altSubregionName
  nameWithType: AbstractRoom.altSubregionName
  fullName: AbstractRoom.altSubregionName
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.altSubregionName</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string altSubregionName
    return:
      type: System.String
    content.vb: Public altSubregionName As String
- uid: Global.AbstractRoom.altFileName
  commentId: F:Global.AbstractRoom.altFileName
  id: altFileName
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: altFileName
  nameWithType: AbstractRoom.altFileName
  fullName: AbstractRoom.altFileName
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.altFileName</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string altFileName
    return:
      type: System.String
    content.vb: Public altFileName As String
- uid: Global.AbstractRoom.NOTRACKERS
  commentId: F:Global.AbstractRoom.NOTRACKERS
  id: NOTRACKERS
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: NOTRACKERS
  nameWithType: AbstractRoom.NOTRACKERS
  fullName: AbstractRoom.NOTRACKERS
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.NOTRACKERS</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool NOTRACKERS
    return:
      type: System.Boolean
    content.vb: Public NOTRACKERS As Boolean
- uid: Global.AbstractRoom.isBattleArena
  commentId: F:Global.AbstractRoom.isBattleArena
  id: isBattleArena
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: isBattleArena
  nameWithType: AbstractRoom.isBattleArena
  fullName: AbstractRoom.isBattleArena
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.isBattleArena</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool isBattleArena
    return:
      type: System.Boolean
    content.vb: Public isBattleArena As Boolean
- uid: Global.AbstractRoom.battleArenaTriggeredTime
  commentId: F:Global.AbstractRoom.battleArenaTriggeredTime
  id: battleArenaTriggeredTime
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: battleArenaTriggeredTime
  nameWithType: AbstractRoom.battleArenaTriggeredTime
  fullName: AbstractRoom.battleArenaTriggeredTime
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.battleArenaTriggeredTime</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int battleArenaTriggeredTime
    return:
      type: System.Int32
    content.vb: Public battleArenaTriggeredTime As Integer
- uid: Global.AbstractRoom.isAncientShelter
  commentId: F:Global.AbstractRoom.isAncientShelter
  id: isAncientShelter
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: isAncientShelter
  nameWithType: AbstractRoom.isAncientShelter
  fullName: AbstractRoom.isAncientShelter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.isAncientShelter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool isAncientShelter
    return:
      type: System.Boolean
    content.vb: Public isAncientShelter As Boolean
- uid: Global.AbstractRoom.arenaSandGrubSpots
  commentId: F:Global.AbstractRoom.arenaSandGrubSpots
  id: arenaSandGrubSpots
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: arenaSandGrubSpots
  nameWithType: AbstractRoom.arenaSandGrubSpots
  fullName: AbstractRoom.arenaSandGrubSpots
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.arenaSandGrubSpots</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<Vector2> arenaSandGrubSpots
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector2}
    content.vb: Public arenaSandGrubSpots As List(Of Vector2)
- uid: Global.AbstractRoom.namedRoomAttractions
  commentId: F:Global.AbstractRoom.namedRoomAttractions
  id: namedRoomAttractions
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: namedRoomAttractions
  nameWithType: AbstractRoom.namedRoomAttractions
  fullName: AbstractRoom.namedRoomAttractions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.namedRoomAttractions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Dictionary<string, AbstractRoom.CreatureRoomAttraction> namedRoomAttractions
    return:
      type: System.Collections.Generic.Dictionary{System.String,AbstractRoom.CreatureRoomAttraction}
    content.vb: Public namedRoomAttractions As Dictionary(Of String, AbstractRoom.CreatureRoomAttraction)
- uid: Global.AbstractRoom.roomAttractions
  commentId: F:Global.AbstractRoom.roomAttractions
  id: roomAttractions
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: roomAttractions
  nameWithType: AbstractRoom.roomAttractions
  fullName: AbstractRoom.roomAttractions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AbstractRoom.roomAttractions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom.CreatureRoomAttraction[] roomAttractions
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction[]
    content.vb: Public roomAttractions As AbstractRoom.CreatureRoomAttraction()
- uid: Global.AbstractRoom.AddTag(System.String)
  commentId: M:Global.AbstractRoom.AddTag(System.String)
  id: AddTag(System.String)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AddTag(string)
  nameWithType: AbstractRoom.AddTag(string)
  fullName: AbstractRoom.AddTag(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AddTag(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddTag(string tg)
    parameters:
    - id: tg
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tg</parameter>
            <parameter>M:AbstractRoom.AddTag(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddTag(tg As String)
  overload: Global.AbstractRoom.AddTag*
  nameWithType.vb: AbstractRoom.AddTag(String)
  fullName.vb: AbstractRoom.AddTag(String)
  name.vb: AddTag(String)
- uid: Global.AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Global.AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AbstractRoom(string, int[], int, int, int, int)
  nameWithType: AbstractRoom.AbstractRoom(string, int[], int, int, int, int)
  fullName: AbstractRoom.AbstractRoom(string, int[], int, int, int, int)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>AbstractRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom(string name, int[] connections, int index, int swarmRoomIndex, int shelterIndex, int gateIndex)
    parameters:
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: connections
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>connections</parameter>
            <parameter>M:AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: index
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: swarmRoomIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>swarmRoomIndex</parameter>
            <parameter>M:AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: shelterIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shelterIndex</parameter>
            <parameter>M:AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: gateIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>gateIndex</parameter>
            <parameter>M:AbstractRoom.#ctor(System.String,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(name As String, connections As Integer(), index As Integer, swarmRoomIndex As Integer, shelterIndex As Integer, gateIndex As Integer)
  overload: Global.AbstractRoom.#ctor*
  nameWithType.vb: AbstractRoom.New(String, Integer(), Integer, Integer, Integer, Integer)
  fullName.vb: AbstractRoom.New(String, Integer(), Integer, Integer, Integer, Integer)
  name.vb: New(String, Integer(), Integer, Integer, Integer, Integer)
- uid: Global.AbstractRoom.InitNodes(AbstractRoomNode[],System.String)
  commentId: M:Global.AbstractRoom.InitNodes(AbstractRoomNode[],System.String)
  id: InitNodes(AbstractRoomNode[],System.String)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: InitNodes(AbstractRoomNode[], string)
  nameWithType: AbstractRoom.InitNodes(AbstractRoomNode[], string)
  fullName: AbstractRoom.InitNodes(AbstractRoomNode[], string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.InitNodes(AbstractRoomNode[],System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void InitNodes(AbstractRoomNode[] nodes, string line2)
    parameters:
    - id: nodes
      type: Global.AbstractRoomNode[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>nodes</parameter>
            <parameter>M:AbstractRoom.InitNodes(AbstractRoomNode[],System.String)</parameter>
          </include>
        </markup>
    - id: line2
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line2</parameter>
            <parameter>M:AbstractRoom.InitNodes(AbstractRoomNode[],System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub InitNodes(nodes As AbstractRoomNode(), line2 As String)
  overload: Global.AbstractRoom.InitNodes*
  nameWithType.vb: AbstractRoom.InitNodes(AbstractRoomNode(), String)
  fullName.vb: AbstractRoom.InitNodes(AbstractRoomNode(), String)
  name.vb: InitNodes(AbstractRoomNode(), String)
- uid: Global.AbstractRoom.Update(System.Int32)
  commentId: M:Global.AbstractRoom.Update(System.Int32)
  id: Update(System.Int32)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: Update(int)
  nameWithType: AbstractRoom.Update(int)
  fullName: AbstractRoom.Update(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.Update(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update(int timePassed)
    parameters:
    - id: timePassed
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timePassed</parameter>
            <parameter>M:AbstractRoom.Update(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Update(timePassed As Integer)
  overload: Global.AbstractRoom.Update*
  nameWithType.vb: AbstractRoom.Update(Integer)
  fullName.vb: AbstractRoom.Update(Integer)
  name.vb: Update(Integer)
- uid: Global.AbstractRoom.UpdateCreaturesInDens(System.Int32)
  commentId: M:Global.AbstractRoom.UpdateCreaturesInDens(System.Int32)
  id: UpdateCreaturesInDens(System.Int32)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: UpdateCreaturesInDens(int)
  nameWithType: AbstractRoom.UpdateCreaturesInDens(int)
  fullName: AbstractRoom.UpdateCreaturesInDens(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.UpdateCreaturesInDens(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void UpdateCreaturesInDens(int timePassed)
    parameters:
    - id: timePassed
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timePassed</parameter>
            <parameter>M:AbstractRoom.UpdateCreaturesInDens(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub UpdateCreaturesInDens(timePassed As Integer)
  overload: Global.AbstractRoom.UpdateCreaturesInDens*
  nameWithType.vb: AbstractRoom.UpdateCreaturesInDens(Integer)
  fullName.vb: AbstractRoom.UpdateCreaturesInDens(Integer)
  name.vb: UpdateCreaturesInDens(Integer)
- uid: Global.AbstractRoom.RealizeRoom(World,RainWorldGame)
  commentId: M:Global.AbstractRoom.RealizeRoom(World,RainWorldGame)
  id: RealizeRoom(World,RainWorldGame)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RealizeRoom(World, RainWorldGame)
  nameWithType: AbstractRoom.RealizeRoom(World, RainWorldGame)
  fullName: AbstractRoom.RealizeRoom(World, RainWorldGame)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RealizeRoom(World,RainWorldGame)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RealizeRoom(World world, RainWorldGame game)
    parameters:
    - id: world
      type: Global.World
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>world</parameter>
            <parameter>M:AbstractRoom.RealizeRoom(World,RainWorldGame)</parameter>
          </include>
        </markup>
    - id: game
      type: Global.RainWorldGame
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>game</parameter>
            <parameter>M:AbstractRoom.RealizeRoom(World,RainWorldGame)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RealizeRoom(world As World, game As RainWorldGame)
  overload: Global.AbstractRoom.RealizeRoom*
- uid: Global.AbstractRoom.Abstractize
  commentId: M:Global.AbstractRoom.Abstractize
  id: Abstractize
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: Abstractize()
  nameWithType: AbstractRoom.Abstractize()
  fullName: AbstractRoom.Abstractize()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.Abstractize</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Abstractize()
    content.vb: Public Sub Abstractize()
  overload: Global.AbstractRoom.Abstractize*
- uid: Global.AbstractRoom.MoveEntityToDen(AbstractWorldEntity)
  commentId: M:Global.AbstractRoom.MoveEntityToDen(AbstractWorldEntity)
  id: MoveEntityToDen(AbstractWorldEntity)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: MoveEntityToDen(AbstractWorldEntity)
  nameWithType: AbstractRoom.MoveEntityToDen(AbstractWorldEntity)
  fullName: AbstractRoom.MoveEntityToDen(AbstractWorldEntity)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.MoveEntityToDen(AbstractWorldEntity)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveEntityToDen(AbstractWorldEntity ent)
    parameters:
    - id: ent
      type: Global.AbstractWorldEntity
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ent</parameter>
            <parameter>M:AbstractRoom.MoveEntityToDen(AbstractWorldEntity)</parameter>
          </include>
        </markup>
    content.vb: Public Sub MoveEntityToDen(ent As AbstractWorldEntity)
  overload: Global.AbstractRoom.MoveEntityToDen*
- uid: Global.AbstractRoom.MoveEntityOutOfDen(AbstractWorldEntity)
  commentId: M:Global.AbstractRoom.MoveEntityOutOfDen(AbstractWorldEntity)
  id: MoveEntityOutOfDen(AbstractWorldEntity)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: MoveEntityOutOfDen(AbstractWorldEntity)
  nameWithType: AbstractRoom.MoveEntityOutOfDen(AbstractWorldEntity)
  fullName: AbstractRoom.MoveEntityOutOfDen(AbstractWorldEntity)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.MoveEntityOutOfDen(AbstractWorldEntity)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveEntityOutOfDen(AbstractWorldEntity ent)
    parameters:
    - id: ent
      type: Global.AbstractWorldEntity
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ent</parameter>
            <parameter>M:AbstractRoom.MoveEntityOutOfDen(AbstractWorldEntity)</parameter>
          </include>
        </markup>
    content.vb: Public Sub MoveEntityOutOfDen(ent As AbstractWorldEntity)
  overload: Global.AbstractRoom.MoveEntityOutOfDen*
- uid: Global.AbstractRoom.RemoveEntityFromDen(AbstractWorldEntity)
  commentId: M:Global.AbstractRoom.RemoveEntityFromDen(AbstractWorldEntity)
  id: RemoveEntityFromDen(AbstractWorldEntity)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RemoveEntityFromDen(AbstractWorldEntity)
  nameWithType: AbstractRoom.RemoveEntityFromDen(AbstractWorldEntity)
  fullName: AbstractRoom.RemoveEntityFromDen(AbstractWorldEntity)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RemoveEntityFromDen(AbstractWorldEntity)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveEntityFromDen(AbstractWorldEntity ent)
    parameters:
    - id: ent
      type: Global.AbstractWorldEntity
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ent</parameter>
            <parameter>M:AbstractRoom.RemoveEntityFromDen(AbstractWorldEntity)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RemoveEntityFromDen(ent As AbstractWorldEntity)
  overload: Global.AbstractRoom.RemoveEntityFromDen*
- uid: Global.AbstractRoom.AddEntity(AbstractWorldEntity)
  commentId: M:Global.AbstractRoom.AddEntity(AbstractWorldEntity)
  id: AddEntity(AbstractWorldEntity)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AddEntity(AbstractWorldEntity)
  nameWithType: AbstractRoom.AddEntity(AbstractWorldEntity)
  fullName: AbstractRoom.AddEntity(AbstractWorldEntity)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AddEntity(AbstractWorldEntity)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddEntity(AbstractWorldEntity ent)
    parameters:
    - id: ent
      type: Global.AbstractWorldEntity
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ent</parameter>
            <parameter>M:AbstractRoom.AddEntity(AbstractWorldEntity)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddEntity(ent As AbstractWorldEntity)
  overload: Global.AbstractRoom.AddEntity*
- uid: Global.AbstractRoom.RemoveEntity(EntityID)
  commentId: M:Global.AbstractRoom.RemoveEntity(EntityID)
  id: RemoveEntity(EntityID)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RemoveEntity(EntityID)
  nameWithType: AbstractRoom.RemoveEntity(EntityID)
  fullName: AbstractRoom.RemoveEntity(EntityID)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RemoveEntity(EntityID)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveEntity(EntityID ID)
    parameters:
    - id: ID
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ID</parameter>
            <parameter>M:AbstractRoom.RemoveEntity(EntityID)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RemoveEntity(ID As EntityID)
  overload: Global.AbstractRoom.RemoveEntity*
- uid: Global.AbstractRoom.RemoveEntity(AbstractWorldEntity)
  commentId: M:Global.AbstractRoom.RemoveEntity(AbstractWorldEntity)
  id: RemoveEntity(AbstractWorldEntity)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RemoveEntity(AbstractWorldEntity)
  nameWithType: AbstractRoom.RemoveEntity(AbstractWorldEntity)
  fullName: AbstractRoom.RemoveEntity(AbstractWorldEntity)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RemoveEntity(AbstractWorldEntity)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveEntity(AbstractWorldEntity ent)
    parameters:
    - id: ent
      type: Global.AbstractWorldEntity
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ent</parameter>
            <parameter>M:AbstractRoom.RemoveEntity(AbstractWorldEntity)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RemoveEntity(ent As AbstractWorldEntity)
  overload: Global.AbstractRoom.RemoveEntity*
- uid: Global.AbstractRoom.ExitIndex(System.Int32)
  commentId: M:Global.AbstractRoom.ExitIndex(System.Int32)
  id: ExitIndex(System.Int32)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: ExitIndex(int)
  nameWithType: AbstractRoom.ExitIndex(int)
  fullName: AbstractRoom.ExitIndex(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.ExitIndex(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int ExitIndex(int targetRoom)
    parameters:
    - id: targetRoom
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetRoom</parameter>
            <parameter>M:AbstractRoom.ExitIndex(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.ExitIndex(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function ExitIndex(targetRoom As Integer) As Integer
  overload: Global.AbstractRoom.ExitIndex*
  nameWithType.vb: AbstractRoom.ExitIndex(Integer)
  fullName.vb: AbstractRoom.ExitIndex(Integer)
  name.vb: ExitIndex(Integer)
- uid: Global.AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)
  commentId: M:Global.AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)
  id: ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: ConnectionAndBackPossible(int, int, CreatureTemplate)
  nameWithType: AbstractRoom.ConnectionAndBackPossible(int, int, CreatureTemplate)
  fullName: AbstractRoom.ConnectionAndBackPossible(int, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool ConnectionAndBackPossible(int startNode, int destNode, CreatureTemplate creatureType)
    parameters:
    - id: startNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startNode</parameter>
            <parameter>M:AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: destNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>destNode</parameter>
            <parameter>M:AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureType
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureType</parameter>
            <parameter>M:AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.ConnectionAndBackPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ConnectionAndBackPossible(startNode As Integer, destNode As Integer, creatureType As CreatureTemplate) As Boolean
  overload: Global.AbstractRoom.ConnectionAndBackPossible*
  nameWithType.vb: AbstractRoom.ConnectionAndBackPossible(Integer, Integer, CreatureTemplate)
  fullName.vb: AbstractRoom.ConnectionAndBackPossible(Integer, Integer, CreatureTemplate)
  name.vb: ConnectionAndBackPossible(Integer, Integer, CreatureTemplate)
- uid: Global.AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)
  commentId: M:Global.AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)
  id: ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: ConnectionPossible(int, int, CreatureTemplate)
  nameWithType: AbstractRoom.ConnectionPossible(int, int, CreatureTemplate)
  fullName: AbstractRoom.ConnectionPossible(int, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool ConnectionPossible(int startNode, int destNode, CreatureTemplate creatureType)
    parameters:
    - id: startNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startNode</parameter>
            <parameter>M:AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: destNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>destNode</parameter>
            <parameter>M:AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureType
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureType</parameter>
            <parameter>M:AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.ConnectionPossible(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ConnectionPossible(startNode As Integer, destNode As Integer, creatureType As CreatureTemplate) As Boolean
  overload: Global.AbstractRoom.ConnectionPossible*
  nameWithType.vb: AbstractRoom.ConnectionPossible(Integer, Integer, CreatureTemplate)
  fullName.vb: AbstractRoom.ConnectionPossible(Integer, Integer, CreatureTemplate)
  name.vb: ConnectionPossible(Integer, Integer, CreatureTemplate)
- uid: Global.AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)
  commentId: M:Global.AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)
  id: ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: ConnectivityCost(int, int, CreatureTemplate)
  nameWithType: AbstractRoom.ConnectivityCost(int, int, CreatureTemplate)
  fullName: AbstractRoom.ConnectivityCost(int, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int ConnectivityCost(int startNode, int destNode, CreatureTemplate creatureType)
    parameters:
    - id: startNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startNode</parameter>
            <parameter>M:AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: destNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>destNode</parameter>
            <parameter>M:AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureType
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureType</parameter>
            <parameter>M:AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.ConnectivityCost(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ConnectivityCost(startNode As Integer, destNode As Integer, creatureType As CreatureTemplate) As Integer
  overload: Global.AbstractRoom.ConnectivityCost*
  nameWithType.vb: AbstractRoom.ConnectivityCost(Integer, Integer, CreatureTemplate)
  fullName.vb: AbstractRoom.ConnectivityCost(Integer, Integer, CreatureTemplate)
  name.vb: ConnectivityCost(Integer, Integer, CreatureTemplate)
- uid: Global.AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)
  commentId: M:Global.AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)
  id: ConnectionLength(System.Int32,System.Int32,CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: ConnectionLength(int, int, CreatureTemplate)
  nameWithType: AbstractRoom.ConnectionLength(int, int, CreatureTemplate)
  fullName: AbstractRoom.ConnectionLength(int, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int ConnectionLength(int startNode, int destNode, CreatureTemplate creatureType)
    parameters:
    - id: startNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startNode</parameter>
            <parameter>M:AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: destNode
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>destNode</parameter>
            <parameter>M:AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureType
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureType</parameter>
            <parameter>M:AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.ConnectionLength(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ConnectionLength(startNode As Integer, destNode As Integer, creatureType As CreatureTemplate) As Integer
  overload: Global.AbstractRoom.ConnectionLength*
  nameWithType.vb: AbstractRoom.ConnectionLength(Integer, Integer, CreatureTemplate)
  fullName.vb: AbstractRoom.ConnectionLength(Integer, Integer, CreatureTemplate)
  name.vb: ConnectionLength(Integer, Integer, CreatureTemplate)
- uid: Global.AbstractRoom.RandomNodeInRoom
  commentId: M:Global.AbstractRoom.RandomNodeInRoom
  id: RandomNodeInRoom
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RandomNodeInRoom()
  nameWithType: AbstractRoom.RandomNodeInRoom()
  fullName: AbstractRoom.RandomNodeInRoom()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RandomNodeInRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public WorldCoordinate RandomNodeInRoom()
    return:
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.RandomNodeInRoom</parameter>
          </include>
        </markup>
    content.vb: Public Function RandomNodeInRoom() As WorldCoordinate
  overload: Global.AbstractRoom.RandomNodeInRoom*
- uid: Global.AbstractRoom.GetNode(WorldCoordinate)
  commentId: M:Global.AbstractRoom.GetNode(WorldCoordinate)
  id: GetNode(WorldCoordinate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: GetNode(WorldCoordinate)
  nameWithType: AbstractRoom.GetNode(WorldCoordinate)
  fullName: AbstractRoom.GetNode(WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.GetNode(WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoomNode GetNode(WorldCoordinate c)
    parameters:
    - id: c
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>c</parameter>
            <parameter>M:AbstractRoom.GetNode(WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoomNode
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.GetNode(WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetNode(c As WorldCoordinate) As AbstractRoomNode
  overload: Global.AbstractRoom.GetNode*
- uid: Global.AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)
  commentId: M:Global.AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)
  id: NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: NumberOfQuantifiedCreatureInRoom(Type)
  nameWithType: AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)
  fullName: AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type crit)
    parameters:
    - id: crit
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.NumberOfQuantifiedCreatureInRoom(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Function NumberOfQuantifiedCreatureInRoom(crit As CreatureTemplate.Type) As Integer
  overload: Global.AbstractRoom.NumberOfQuantifiedCreatureInRoom*
- uid: Global.AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)
  commentId: M:Global.AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)
  id: NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: NumberOfQuantifiedCreatureInNode(Type, int)
  nameWithType: AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type, int)
  fullName: AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type crit, int node)
    parameters:
    - id: crit
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)</parameter>
          </include>
        </markup>
    - id: node
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>node</parameter>
            <parameter>M:AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function NumberOfQuantifiedCreatureInNode(crit As CreatureTemplate.Type, node As Integer) As Integer
  overload: Global.AbstractRoom.NumberOfQuantifiedCreatureInNode*
  nameWithType.vb: AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type, Integer)
  fullName.vb: AbstractRoom.NumberOfQuantifiedCreatureInNode(CreatureTemplate.Type, Integer)
  name.vb: NumberOfQuantifiedCreatureInNode(Type, Integer)
- uid: Global.AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)
  commentId: M:Global.AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)
  id: AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AddQuantifiedCreature(int, Type, int)
  nameWithType: AbstractRoom.AddQuantifiedCreature(int, CreatureTemplate.Type, int)
  fullName: AbstractRoom.AddQuantifiedCreature(int, CreatureTemplate.Type, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddQuantifiedCreature(int node, CreatureTemplate.Type crit, int amount)
    parameters:
    - id: node
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>node</parameter>
            <parameter>M:AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)</parameter>
          </include>
        </markup>
    - id: amount
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>amount</parameter>
            <parameter>M:AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddQuantifiedCreature(node As Integer, crit As CreatureTemplate.Type, amount As Integer)
  overload: Global.AbstractRoom.AddQuantifiedCreature*
  nameWithType.vb: AbstractRoom.AddQuantifiedCreature(Integer, CreatureTemplate.Type, Integer)
  fullName.vb: AbstractRoom.AddQuantifiedCreature(Integer, CreatureTemplate.Type, Integer)
  name.vb: AddQuantifiedCreature(Integer, Type, Integer)
- uid: Global.AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  commentId: M:Global.AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  id: AddQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AddQuantifiedCreature(int, Type)
  nameWithType: AbstractRoom.AddQuantifiedCreature(int, CreatureTemplate.Type)
  fullName: AbstractRoom.AddQuantifiedCreature(int, CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddQuantifiedCreature(int node, CreatureTemplate.Type crit)
    parameters:
    - id: node
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>node</parameter>
            <parameter>M:AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.AddQuantifiedCreature(System.Int32,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddQuantifiedCreature(node As Integer, crit As CreatureTemplate.Type)
  overload: Global.AbstractRoom.AddQuantifiedCreature*
  nameWithType.vb: AbstractRoom.AddQuantifiedCreature(Integer, CreatureTemplate.Type)
  fullName.vb: AbstractRoom.AddQuantifiedCreature(Integer, CreatureTemplate.Type)
  name.vb: AddQuantifiedCreature(Integer, Type)
- uid: Global.AbstractRoom.RemoveQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  commentId: M:Global.AbstractRoom.RemoveQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  id: RemoveQuantifiedCreature(System.Int32,CreatureTemplate.Type)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RemoveQuantifiedCreature(int, Type)
  nameWithType: AbstractRoom.RemoveQuantifiedCreature(int, CreatureTemplate.Type)
  fullName: AbstractRoom.RemoveQuantifiedCreature(int, CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RemoveQuantifiedCreature(System.Int32,CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveQuantifiedCreature(int node, CreatureTemplate.Type crit)
    parameters:
    - id: node
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>node</parameter>
            <parameter>M:AbstractRoom.RemoveQuantifiedCreature(System.Int32,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.RemoveQuantifiedCreature(System.Int32,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RemoveQuantifiedCreature(node As Integer, crit As CreatureTemplate.Type)
  overload: Global.AbstractRoom.RemoveQuantifiedCreature*
  nameWithType.vb: AbstractRoom.RemoveQuantifiedCreature(Integer, CreatureTemplate.Type)
  fullName.vb: AbstractRoom.RemoveQuantifiedCreature(Integer, CreatureTemplate.Type)
  name.vb: RemoveQuantifiedCreature(Integer, Type)
- uid: Global.AbstractRoom.NodesRelevantToCreature(CreatureTemplate)
  commentId: M:Global.AbstractRoom.NodesRelevantToCreature(CreatureTemplate)
  id: NodesRelevantToCreature(CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: NodesRelevantToCreature(CreatureTemplate)
  nameWithType: AbstractRoom.NodesRelevantToCreature(CreatureTemplate)
  fullName: AbstractRoom.NodesRelevantToCreature(CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.NodesRelevantToCreature(CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int NodesRelevantToCreature(CreatureTemplate crit)
    parameters:
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.NodesRelevantToCreature(CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.NodesRelevantToCreature(CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function NodesRelevantToCreature(crit As CreatureTemplate) As Integer
  overload: Global.AbstractRoom.NodesRelevantToCreature*
- uid: Global.AbstractRoom.RandomRelevantNode(CreatureTemplate)
  commentId: M:Global.AbstractRoom.RandomRelevantNode(CreatureTemplate)
  id: RandomRelevantNode(CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RandomRelevantNode(CreatureTemplate)
  nameWithType: AbstractRoom.RandomRelevantNode(CreatureTemplate)
  fullName: AbstractRoom.RandomRelevantNode(CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RandomRelevantNode(CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int RandomRelevantNode(CreatureTemplate crit)
    parameters:
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.RandomRelevantNode(CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.RandomRelevantNode(CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function RandomRelevantNode(crit As CreatureTemplate) As Integer
  overload: Global.AbstractRoom.RandomRelevantNode*
- uid: Global.AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)
  commentId: M:Global.AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)
  id: RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate, int)
  nameWithType: AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate, int)
  fullName: AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate crit, int minimumEntranceWidth)
    parameters:
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)</parameter>
          </include>
        </markup>
    - id: minimumEntranceWidth
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>minimumEntranceWidth</parameter>
            <parameter>M:AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function RandomRelevantNodeAccountingForEntranceWidth(crit As CreatureTemplate, minimumEntranceWidth As Integer) As Integer
  overload: Global.AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth*
  nameWithType.vb: AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate, Integer)
  fullName.vb: AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate, Integer)
  name.vb: RandomRelevantNodeAccountingForEntranceWidth(CreatureTemplate, Integer)
- uid: Global.AbstractRoom.CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)
  commentId: M:Global.AbstractRoom.CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)
  id: CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: CreatureSpecificToCommonNodeIndex(int, CreatureTemplate)
  nameWithType: AbstractRoom.CreatureSpecificToCommonNodeIndex(int, CreatureTemplate)
  fullName: AbstractRoom.CreatureSpecificToCommonNodeIndex(int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int CreatureSpecificToCommonNodeIndex(int specific, CreatureTemplate crit)
    parameters:
    - id: specific
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>specific</parameter>
            <parameter>M:AbstractRoom.CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.CreatureSpecificToCommonNodeIndex(System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function CreatureSpecificToCommonNodeIndex(specific As Integer, crit As CreatureTemplate) As Integer
  overload: Global.AbstractRoom.CreatureSpecificToCommonNodeIndex*
  nameWithType.vb: AbstractRoom.CreatureSpecificToCommonNodeIndex(Integer, CreatureTemplate)
  fullName.vb: AbstractRoom.CreatureSpecificToCommonNodeIndex(Integer, CreatureTemplate)
  name.vb: CreatureSpecificToCommonNodeIndex(Integer, CreatureTemplate)
- uid: Global.AbstractRoom.CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)
  commentId: M:Global.AbstractRoom.CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)
  id: CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: CommonToCreatureSpecificNodeIndex(int, CreatureTemplate)
  nameWithType: AbstractRoom.CommonToCreatureSpecificNodeIndex(int, CreatureTemplate)
  fullName: AbstractRoom.CommonToCreatureSpecificNodeIndex(int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int CommonToCreatureSpecificNodeIndex(int common, CreatureTemplate crit)
    parameters:
    - id: common
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>common</parameter>
            <parameter>M:AbstractRoom.CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AbstractRoom.CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.CommonToCreatureSpecificNodeIndex(System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function CommonToCreatureSpecificNodeIndex(common As Integer, crit As CreatureTemplate) As Integer
  overload: Global.AbstractRoom.CommonToCreatureSpecificNodeIndex*
  nameWithType.vb: AbstractRoom.CommonToCreatureSpecificNodeIndex(Integer, CreatureTemplate)
  fullName.vb: AbstractRoom.CommonToCreatureSpecificNodeIndex(Integer, CreatureTemplate)
  name.vb: CommonToCreatureSpecificNodeIndex(Integer, CreatureTemplate)
- uid: Global.AbstractRoom.AddArenaSandGrubBurrow(UnityEngine.Vector2)
  commentId: M:Global.AbstractRoom.AddArenaSandGrubBurrow(UnityEngine.Vector2)
  id: AddArenaSandGrubBurrow(UnityEngine.Vector2)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AddArenaSandGrubBurrow(Vector2)
  nameWithType: AbstractRoom.AddArenaSandGrubBurrow(Vector2)
  fullName: AbstractRoom.AddArenaSandGrubBurrow(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AddArenaSandGrubBurrow(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddArenaSandGrubBurrow(Vector2 pos)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AbstractRoom.AddArenaSandGrubBurrow(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddArenaSandGrubBurrow(pos As Vector2)
  overload: Global.AbstractRoom.AddArenaSandGrubBurrow*
- uid: Global.AbstractRoom.AttractionForCreature(AbstractCreature)
  commentId: M:Global.AbstractRoom.AttractionForCreature(AbstractCreature)
  id: AttractionForCreature(AbstractCreature)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AttractionForCreature(AbstractCreature)
  nameWithType: AbstractRoom.AttractionForCreature(AbstractCreature)
  fullName: AbstractRoom.AttractionForCreature(AbstractCreature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AttractionForCreature(AbstractCreature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom.CreatureRoomAttraction AttractionForCreature(AbstractCreature creature)
    parameters:
    - id: creature
      type: Global.AbstractCreature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creature</parameter>
            <parameter>M:AbstractRoom.AttractionForCreature(AbstractCreature)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.AttractionForCreature(AbstractCreature)</parameter>
          </include>
        </markup>
    content.vb: Public Function AttractionForCreature(creature As AbstractCreature) As AbstractRoom.CreatureRoomAttraction
  overload: Global.AbstractRoom.AttractionForCreature*
- uid: Global.AbstractRoom.AttractionForCreature(System.String)
  commentId: M:Global.AbstractRoom.AttractionForCreature(System.String)
  id: AttractionForCreature(System.String)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AttractionForCreature(string)
  nameWithType: AbstractRoom.AttractionForCreature(string)
  fullName: AbstractRoom.AttractionForCreature(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AttractionForCreature(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom.CreatureRoomAttraction AttractionForCreature(string namedAttraction)
    parameters:
    - id: namedAttraction
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>namedAttraction</parameter>
            <parameter>M:AbstractRoom.AttractionForCreature(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.AttractionForCreature(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function AttractionForCreature(namedAttraction As String) As AbstractRoom.CreatureRoomAttraction
  overload: Global.AbstractRoom.AttractionForCreature*
  nameWithType.vb: AbstractRoom.AttractionForCreature(String)
  fullName.vb: AbstractRoom.AttractionForCreature(String)
  name.vb: AttractionForCreature(String)
- uid: Global.AbstractRoom.AttractionValueForCreature(AbstractCreature)
  commentId: M:Global.AbstractRoom.AttractionValueForCreature(AbstractCreature)
  id: AttractionValueForCreature(AbstractCreature)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AttractionValueForCreature(AbstractCreature)
  nameWithType: AbstractRoom.AttractionValueForCreature(AbstractCreature)
  fullName: AbstractRoom.AttractionValueForCreature(AbstractCreature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AttractionValueForCreature(AbstractCreature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float AttractionValueForCreature(AbstractCreature creature)
    parameters:
    - id: creature
      type: Global.AbstractCreature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creature</parameter>
            <parameter>M:AbstractRoom.AttractionValueForCreature(AbstractCreature)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.AttractionValueForCreature(AbstractCreature)</parameter>
          </include>
        </markup>
    content.vb: Public Function AttractionValueForCreature(creature As AbstractCreature) As Single
  overload: Global.AbstractRoom.AttractionValueForCreature*
- uid: Global.AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)
  commentId: M:Global.AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)
  id: SizeDependentAttractionValueForCreature(AbstractCreature)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: SizeDependentAttractionValueForCreature(AbstractCreature)
  nameWithType: AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)
  fullName: AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float SizeDependentAttractionValueForCreature(AbstractCreature creature)
    parameters:
    - id: creature
      type: Global.AbstractCreature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creature</parameter>
            <parameter>M:AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.SizeDependentAttractionValueForCreature(AbstractCreature)</parameter>
          </include>
        </markup>
    content.vb: Public Function SizeDependentAttractionValueForCreature(creature As AbstractCreature) As Single
  overload: Global.AbstractRoom.SizeDependentAttractionValueForCreature*
- uid: Global.AbstractRoom.AttractionForCreature(CreatureTemplate.Type)
  commentId: M:Global.AbstractRoom.AttractionForCreature(CreatureTemplate.Type)
  id: AttractionForCreature(CreatureTemplate.Type)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AttractionForCreature(Type)
  nameWithType: AbstractRoom.AttractionForCreature(CreatureTemplate.Type)
  fullName: AbstractRoom.AttractionForCreature(CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AttractionForCreature(CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom.CreatureRoomAttraction AttractionForCreature(CreatureTemplate.Type tp)
    parameters:
    - id: tp
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tp</parameter>
            <parameter>M:AbstractRoom.AttractionForCreature(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.AttractionForCreature(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Function AttractionForCreature(tp As CreatureTemplate.Type) As AbstractRoom.CreatureRoomAttraction
  overload: Global.AbstractRoom.AttractionForCreature*
- uid: Global.AbstractRoom.ResolveDefaultAttractionString(System.String)
  commentId: M:Global.AbstractRoom.ResolveDefaultAttractionString(System.String)
  id: ResolveDefaultAttractionString(System.String)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: ResolveDefaultAttractionString(string)
  nameWithType: AbstractRoom.ResolveDefaultAttractionString(string)
  fullName: AbstractRoom.ResolveDefaultAttractionString(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.ResolveDefaultAttractionString(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom.CreatureRoomAttraction ResolveDefaultAttractionString(string defAttr)
    parameters:
    - id: defAttr
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defAttr</parameter>
            <parameter>M:AbstractRoom.ResolveDefaultAttractionString(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.ResolveDefaultAttractionString(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function ResolveDefaultAttractionString(defAttr As String) As AbstractRoom.CreatureRoomAttraction
  overload: Global.AbstractRoom.ResolveDefaultAttractionString*
  nameWithType.vb: AbstractRoom.ResolveDefaultAttractionString(String)
  fullName.vb: AbstractRoom.ResolveDefaultAttractionString(String)
  name.vb: ResolveDefaultAttractionString(String)
- uid: Global.AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)
  commentId: M:Global.AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)
  id: AttractionValueForCreature(CreatureTemplate.Type)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AttractionValueForCreature(Type)
  nameWithType: AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)
  fullName: AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float AttractionValueForCreature(CreatureTemplate.Type tp)
    parameters:
    - id: tp
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tp</parameter>
            <parameter>M:AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.AttractionValueForCreature(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Function AttractionValueForCreature(tp As CreatureTemplate.Type) As Single
  overload: Global.AbstractRoom.AttractionValueForCreature*
- uid: Global.AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)
  commentId: M:Global.AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)
  id: SizeDependentAttractionValueForCreature(CreatureTemplate.Type)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: SizeDependentAttractionValueForCreature(Type)
  nameWithType: AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)
  fullName: AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float SizeDependentAttractionValueForCreature(CreatureTemplate.Type tp)
    parameters:
    - id: tp
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tp</parameter>
            <parameter>M:AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.SizeDependentAttractionValueForCreature(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Function SizeDependentAttractionValueForCreature(tp As CreatureTemplate.Type) As Single
  overload: Global.AbstractRoom.SizeDependentAttractionValueForCreature*
- uid: Global.AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)
  commentId: M:Global.AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)
  id: CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: CreatureAttractionToFloat(CreatureRoomAttraction)
  nameWithType: AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)
  fullName: AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction cra)
    parameters:
    - id: cra
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cra</parameter>
            <parameter>M:AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.CreatureAttractionToFloat(AbstractRoom.CreatureRoomAttraction)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function CreatureAttractionToFloat(cra As AbstractRoom.CreatureRoomAttraction) As Single
  overload: Global.AbstractRoom.CreatureAttractionToFloat*
- uid: Global.AbstractRoom.FloatToCreatureAttraction(System.Single)
  commentId: M:Global.AbstractRoom.FloatToCreatureAttraction(System.Single)
  id: FloatToCreatureAttraction(System.Single)
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: FloatToCreatureAttraction(float)
  nameWithType: AbstractRoom.FloatToCreatureAttraction(float)
  fullName: AbstractRoom.FloatToCreatureAttraction(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AbstractRoom.FloatToCreatureAttraction(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractRoom.CreatureRoomAttraction FloatToCreatureAttraction(float f)
    parameters:
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:AbstractRoom.FloatToCreatureAttraction(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AbstractRoom.FloatToCreatureAttraction(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function FloatToCreatureAttraction(f As Single) As AbstractRoom.CreatureRoomAttraction
  overload: Global.AbstractRoom.FloatToCreatureAttraction*
  nameWithType.vb: AbstractRoom.FloatToCreatureAttraction(Single)
  fullName.vb: AbstractRoom.FloatToCreatureAttraction(Single)
  name.vb: FloatToCreatureAttraction(Single)
- uid: Global.AbstractRoom.swarmRoomIndex
  commentId: P:Global.AbstractRoom.swarmRoomIndex
  id: swarmRoomIndex
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: swarmRoomIndex
  nameWithType: AbstractRoom.swarmRoomIndex
  fullName: AbstractRoom.swarmRoomIndex
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.swarmRoomIndex</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int swarmRoomIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property swarmRoomIndex As Integer
  overload: Global.AbstractRoom.swarmRoomIndex*
- uid: Global.AbstractRoom.swarmRoom
  commentId: P:Global.AbstractRoom.swarmRoom
  id: swarmRoom
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: swarmRoom
  nameWithType: AbstractRoom.swarmRoom
  fullName: AbstractRoom.swarmRoom
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.swarmRoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool swarmRoom { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property swarmRoom As Boolean
  overload: Global.AbstractRoom.swarmRoom*
- uid: Global.AbstractRoom.shelter
  commentId: P:Global.AbstractRoom.shelter
  id: shelter
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: shelter
  nameWithType: AbstractRoom.shelter
  fullName: AbstractRoom.shelter
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.shelter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool shelter { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property shelter As Boolean
  overload: Global.AbstractRoom.shelter*
- uid: Global.AbstractRoom.DisplaySubregionName
  commentId: P:Global.AbstractRoom.DisplaySubregionName
  id: DisplaySubregionName
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: DisplaySubregionName
  nameWithType: AbstractRoom.DisplaySubregionName
  fullName: AbstractRoom.DisplaySubregionName
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.DisplaySubregionName</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string DisplaySubregionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplaySubregionName As String
  overload: Global.AbstractRoom.DisplaySubregionName*
- uid: Global.AbstractRoom.scavengerOutpost
  commentId: P:Global.AbstractRoom.scavengerOutpost
  id: scavengerOutpost
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: scavengerOutpost
  nameWithType: AbstractRoom.scavengerOutpost
  fullName: AbstractRoom.scavengerOutpost
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.scavengerOutpost</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool scavengerOutpost { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property scavengerOutpost As Boolean
  overload: Global.AbstractRoom.scavengerOutpost*
- uid: Global.AbstractRoom.scavengerTrader
  commentId: P:Global.AbstractRoom.scavengerTrader
  id: scavengerTrader
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: scavengerTrader
  nameWithType: AbstractRoom.scavengerTrader
  fullName: AbstractRoom.scavengerTrader
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.scavengerTrader</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool scavengerTrader { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property scavengerTrader As Boolean
  overload: Global.AbstractRoom.scavengerTrader*
- uid: Global.AbstractRoom.borderExits
  commentId: P:Global.AbstractRoom.borderExits
  id: borderExits
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: borderExits
  nameWithType: AbstractRoom.borderExits
  fullName: AbstractRoom.borderExits
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.borderExits</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int borderExits { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property borderExits As Integer
  overload: Global.AbstractRoom.borderExits*
- uid: Global.AbstractRoom.TotalNodes
  commentId: P:Global.AbstractRoom.TotalNodes
  id: TotalNodes
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: TotalNodes
  nameWithType: AbstractRoom.TotalNodes
  fullName: AbstractRoom.TotalNodes
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.TotalNodes</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int TotalNodes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TotalNodes As Integer
  overload: Global.AbstractRoom.TotalNodes*
- uid: Global.AbstractRoom.AnySkyAccess
  commentId: P:Global.AbstractRoom.AnySkyAccess
  id: AnySkyAccess
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AnySkyAccess
  nameWithType: AbstractRoom.AnySkyAccess
  fullName: AbstractRoom.AnySkyAccess
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.AnySkyAccess</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool AnySkyAccess { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AnySkyAccess As Boolean
  overload: Global.AbstractRoom.AnySkyAccess*
- uid: Global.AbstractRoom.gate
  commentId: P:Global.AbstractRoom.gate
  id: gate
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: gate
  nameWithType: AbstractRoom.gate
  fullName: AbstractRoom.gate
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.gate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool gate { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property gate As Boolean
  overload: Global.AbstractRoom.gate*
- uid: Global.AbstractRoom.FileName
  commentId: P:Global.AbstractRoom.FileName
  id: FileName
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: FileName
  nameWithType: AbstractRoom.FileName
  fullName: AbstractRoom.FileName
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.FileName</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string FileName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FileName As String
  overload: Global.AbstractRoom.FileName*
- uid: Global.AbstractRoom.AnySideAccess
  commentId: P:Global.AbstractRoom.AnySideAccess
  id: AnySideAccess
  parent: Global.AbstractRoom
  langs:
  - csharp
  - vb
  name: AnySideAccess
  nameWithType: AbstractRoom.AnySideAccess
  fullName: AbstractRoom.AnySideAccess
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:AbstractRoom.AnySideAccess</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool AnySideAccess { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AnySideAccess As Boolean
  overload: Global.AbstractRoom.AnySideAccess*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.World
  commentId: T:Global.World
  isExternal: true
  href: World.html
  name: World
  nameWithType: World
  fullName: World
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.AbstractRoomNode[]
  isExternal: true
  href: AbstractRoomNode.html
  name: AbstractRoomNode[]
  nameWithType: AbstractRoomNode[]
  fullName: AbstractRoomNode[]
  nameWithType.vb: AbstractRoomNode()
  fullName.vb: AbstractRoomNode()
  name.vb: AbstractRoomNode()
  spec.csharp:
  - uid: Global.AbstractRoomNode
    name: AbstractRoomNode
    isExternal: true
    href: AbstractRoomNode.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.AbstractRoomNode
    name: AbstractRoomNode
    isExternal: true
    href: AbstractRoomNode.html
  - name: (
  - name: )
- uid: Global.Room
  commentId: T:Global.Room
  isExternal: true
  href: Room.html
  name: Room
  nameWithType: Room
  fullName: Room
- uid: System.Collections.Generic.List{AbstractCreature}
  commentId: T:System.Collections.Generic.List{AbstractCreature}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<AbstractCreature>
  nameWithType: List<AbstractCreature>
  fullName: System.Collections.Generic.List<AbstractCreature>
  nameWithType.vb: List(Of AbstractCreature)
  fullName.vb: System.Collections.Generic.List(Of AbstractCreature)
  name.vb: List(Of AbstractCreature)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.AbstractCreature
    name: AbstractCreature
    isExternal: true
    href: AbstractCreature.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AbstractCreature
    name: AbstractCreature
    isExternal: true
    href: AbstractCreature.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.List{AbstractWorldEntity}
  commentId: T:System.Collections.Generic.List{AbstractWorldEntity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<AbstractWorldEntity>
  nameWithType: List<AbstractWorldEntity>
  fullName: System.Collections.Generic.List<AbstractWorldEntity>
  nameWithType.vb: List(Of AbstractWorldEntity)
  fullName.vb: System.Collections.Generic.List(Of AbstractWorldEntity)
  name.vb: List(Of AbstractWorldEntity)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.AbstractWorldEntity
    name: AbstractWorldEntity
    isExternal: true
    href: AbstractWorldEntity.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AbstractWorldEntity
    name: AbstractWorldEntity
    isExternal: true
    href: AbstractWorldEntity.html
  - name: )
- uid: System.Int32[,]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[,]
  nameWithType: int[,]
  fullName: int[,]
  nameWithType.vb: Integer(,)
  fullName.vb: Integer(,)
  name.vb: Integer(,)
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: ','
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: RWCustom.IntVector2
  commentId: T:RWCustom.IntVector2
  parent: RWCustom
  isExternal: true
  href: RWCustom.IntVector2.html
  name: IntVector2
  nameWithType: IntVector2
  fullName: RWCustom.IntVector2
- uid: RWCustom
  commentId: N:RWCustom
  isExternal: true
  href: RWCustom.html
  name: RWCustom
  nameWithType: RWCustom
  fullName: RWCustom
- uid: System.Collections.Generic.List{UnityEngine.Vector2}
  commentId: T:System.Collections.Generic.List{UnityEngine.Vector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Vector2>
  nameWithType: List<Vector2>
  fullName: System.Collections.Generic.List<UnityEngine.Vector2>
  nameWithType.vb: List(Of Vector2)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Vector2)
  name.vb: List(Of Vector2)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: System.Collections.Generic.Dictionary{System.String,AbstractRoom.CreatureRoomAttraction}
  commentId: T:System.Collections.Generic.Dictionary{System.String,AbstractRoom.CreatureRoomAttraction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, AbstractRoom.CreatureRoomAttraction>
  nameWithType: Dictionary<string, AbstractRoom.CreatureRoomAttraction>
  fullName: System.Collections.Generic.Dictionary<string, AbstractRoom.CreatureRoomAttraction>
  nameWithType.vb: Dictionary(Of String, AbstractRoom.CreatureRoomAttraction)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, AbstractRoom.CreatureRoomAttraction)
  name.vb: Dictionary(Of String, AbstractRoom.CreatureRoomAttraction)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: .
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: .
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Global.AbstractRoom.CreatureRoomAttraction[]
  isExternal: true
  href: AbstractRoom.CreatureRoomAttraction.html
  name: CreatureRoomAttraction[]
  nameWithType: AbstractRoom.CreatureRoomAttraction[]
  fullName: AbstractRoom.CreatureRoomAttraction[]
  nameWithType.vb: AbstractRoom.CreatureRoomAttraction()
  fullName.vb: AbstractRoom.CreatureRoomAttraction()
  name.vb: CreatureRoomAttraction()
  spec.csharp:
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
  - name: (
  - name: )
- uid: Global.AbstractRoom.AddTag*
  commentId: Overload:Global.AbstractRoom.AddTag
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AddTag_System_String_
  name: AddTag
  nameWithType: AbstractRoom.AddTag
  fullName: AbstractRoom.AddTag
- uid: Global.AbstractRoom.#ctor*
  commentId: Overload:Global.AbstractRoom.#ctor
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom__ctor_System_String_System_Int32___System_Int32_System_Int32_System_Int32_System_Int32_
  name: AbstractRoom
  nameWithType: AbstractRoom.AbstractRoom
  fullName: AbstractRoom.AbstractRoom
  nameWithType.vb: AbstractRoom.New
  fullName.vb: AbstractRoom.New
  name.vb: New
- uid: Global.AbstractRoom.InitNodes*
  commentId: Overload:Global.AbstractRoom.InitNodes
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_InitNodes_AbstractRoomNode___System_String_
  name: InitNodes
  nameWithType: AbstractRoom.InitNodes
  fullName: AbstractRoom.InitNodes
- uid: Global.AbstractRoom.Update*
  commentId: Overload:Global.AbstractRoom.Update
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_Update_System_Int32_
  name: Update
  nameWithType: AbstractRoom.Update
  fullName: AbstractRoom.Update
- uid: Global.AbstractRoom.UpdateCreaturesInDens*
  commentId: Overload:Global.AbstractRoom.UpdateCreaturesInDens
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_UpdateCreaturesInDens_System_Int32_
  name: UpdateCreaturesInDens
  nameWithType: AbstractRoom.UpdateCreaturesInDens
  fullName: AbstractRoom.UpdateCreaturesInDens
- uid: Global.AbstractRoom.RealizeRoom*
  commentId: Overload:Global.AbstractRoom.RealizeRoom
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_RealizeRoom_World_RainWorldGame_
  name: RealizeRoom
  nameWithType: AbstractRoom.RealizeRoom
  fullName: AbstractRoom.RealizeRoom
- uid: Global.RainWorldGame
  commentId: T:Global.RainWorldGame
  isExternal: true
  href: RainWorldGame.html
  name: RainWorldGame
  nameWithType: RainWorldGame
  fullName: RainWorldGame
- uid: Global.AbstractRoom.Abstractize*
  commentId: Overload:Global.AbstractRoom.Abstractize
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_Abstractize
  name: Abstractize
  nameWithType: AbstractRoom.Abstractize
  fullName: AbstractRoom.Abstractize
- uid: Global.AbstractRoom.MoveEntityToDen*
  commentId: Overload:Global.AbstractRoom.MoveEntityToDen
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_MoveEntityToDen_AbstractWorldEntity_
  name: MoveEntityToDen
  nameWithType: AbstractRoom.MoveEntityToDen
  fullName: AbstractRoom.MoveEntityToDen
- uid: Global.AbstractWorldEntity
  commentId: T:Global.AbstractWorldEntity
  isExternal: true
  href: AbstractWorldEntity.html
  name: AbstractWorldEntity
  nameWithType: AbstractWorldEntity
  fullName: AbstractWorldEntity
- uid: Global.AbstractRoom.MoveEntityOutOfDen*
  commentId: Overload:Global.AbstractRoom.MoveEntityOutOfDen
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_MoveEntityOutOfDen_AbstractWorldEntity_
  name: MoveEntityOutOfDen
  nameWithType: AbstractRoom.MoveEntityOutOfDen
  fullName: AbstractRoom.MoveEntityOutOfDen
- uid: Global.AbstractRoom.RemoveEntityFromDen*
  commentId: Overload:Global.AbstractRoom.RemoveEntityFromDen
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_RemoveEntityFromDen_AbstractWorldEntity_
  name: RemoveEntityFromDen
  nameWithType: AbstractRoom.RemoveEntityFromDen
  fullName: AbstractRoom.RemoveEntityFromDen
- uid: Global.AbstractRoom.AddEntity*
  commentId: Overload:Global.AbstractRoom.AddEntity
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AddEntity_AbstractWorldEntity_
  name: AddEntity
  nameWithType: AbstractRoom.AddEntity
  fullName: AbstractRoom.AddEntity
- uid: Global.AbstractRoom.RemoveEntity*
  commentId: Overload:Global.AbstractRoom.RemoveEntity
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_RemoveEntity_EntityID_
  name: RemoveEntity
  nameWithType: AbstractRoom.RemoveEntity
  fullName: AbstractRoom.RemoveEntity
- uid: Global.EntityID
  commentId: T:Global.EntityID
  isExternal: true
  href: EntityID.html
  name: EntityID
  nameWithType: EntityID
  fullName: EntityID
- uid: Global.AbstractRoom.ExitIndex*
  commentId: Overload:Global.AbstractRoom.ExitIndex
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_ExitIndex_System_Int32_
  name: ExitIndex
  nameWithType: AbstractRoom.ExitIndex
  fullName: AbstractRoom.ExitIndex
- uid: Global.AbstractRoom.ConnectionAndBackPossible*
  commentId: Overload:Global.AbstractRoom.ConnectionAndBackPossible
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_ConnectionAndBackPossible_System_Int32_System_Int32_CreatureTemplate_
  name: ConnectionAndBackPossible
  nameWithType: AbstractRoom.ConnectionAndBackPossible
  fullName: AbstractRoom.ConnectionAndBackPossible
- uid: Global.CreatureTemplate
  commentId: T:Global.CreatureTemplate
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate
  nameWithType: CreatureTemplate
  fullName: CreatureTemplate
- uid: Global.AbstractRoom.ConnectionPossible*
  commentId: Overload:Global.AbstractRoom.ConnectionPossible
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_ConnectionPossible_System_Int32_System_Int32_CreatureTemplate_
  name: ConnectionPossible
  nameWithType: AbstractRoom.ConnectionPossible
  fullName: AbstractRoom.ConnectionPossible
- uid: Global.AbstractRoom.ConnectivityCost*
  commentId: Overload:Global.AbstractRoom.ConnectivityCost
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_ConnectivityCost_System_Int32_System_Int32_CreatureTemplate_
  name: ConnectivityCost
  nameWithType: AbstractRoom.ConnectivityCost
  fullName: AbstractRoom.ConnectivityCost
- uid: Global.AbstractRoom.ConnectionLength*
  commentId: Overload:Global.AbstractRoom.ConnectionLength
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_ConnectionLength_System_Int32_System_Int32_CreatureTemplate_
  name: ConnectionLength
  nameWithType: AbstractRoom.ConnectionLength
  fullName: AbstractRoom.ConnectionLength
- uid: Global.AbstractRoom.RandomNodeInRoom*
  commentId: Overload:Global.AbstractRoom.RandomNodeInRoom
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_RandomNodeInRoom
  name: RandomNodeInRoom
  nameWithType: AbstractRoom.RandomNodeInRoom
  fullName: AbstractRoom.RandomNodeInRoom
- uid: Global.WorldCoordinate
  commentId: T:Global.WorldCoordinate
  isExternal: true
  href: WorldCoordinate.html
  name: WorldCoordinate
  nameWithType: WorldCoordinate
  fullName: WorldCoordinate
- uid: Global.AbstractRoom.GetNode*
  commentId: Overload:Global.AbstractRoom.GetNode
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_GetNode_WorldCoordinate_
  name: GetNode
  nameWithType: AbstractRoom.GetNode
  fullName: AbstractRoom.GetNode
- uid: Global.AbstractRoomNode
  commentId: T:Global.AbstractRoomNode
  isExternal: true
  href: AbstractRoomNode.html
  name: AbstractRoomNode
  nameWithType: AbstractRoomNode
  fullName: AbstractRoomNode
- uid: Global.AbstractRoom.NumberOfQuantifiedCreatureInRoom*
  commentId: Overload:Global.AbstractRoom.NumberOfQuantifiedCreatureInRoom
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_NumberOfQuantifiedCreatureInRoom_CreatureTemplate_Type_
  name: NumberOfQuantifiedCreatureInRoom
  nameWithType: AbstractRoom.NumberOfQuantifiedCreatureInRoom
  fullName: AbstractRoom.NumberOfQuantifiedCreatureInRoom
- uid: Global.CreatureTemplate.Type
  commentId: T:Global.CreatureTemplate.Type
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate.Type
  nameWithType: CreatureTemplate.Type
  fullName: CreatureTemplate.Type
  spec.csharp:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  spec.vb:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
- uid: Global.AbstractRoom.NumberOfQuantifiedCreatureInNode*
  commentId: Overload:Global.AbstractRoom.NumberOfQuantifiedCreatureInNode
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_NumberOfQuantifiedCreatureInNode_CreatureTemplate_Type_System_Int32_
  name: NumberOfQuantifiedCreatureInNode
  nameWithType: AbstractRoom.NumberOfQuantifiedCreatureInNode
  fullName: AbstractRoom.NumberOfQuantifiedCreatureInNode
- uid: Global.AbstractRoom.AddQuantifiedCreature*
  commentId: Overload:Global.AbstractRoom.AddQuantifiedCreature
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AddQuantifiedCreature_System_Int32_CreatureTemplate_Type_System_Int32_
  name: AddQuantifiedCreature
  nameWithType: AbstractRoom.AddQuantifiedCreature
  fullName: AbstractRoom.AddQuantifiedCreature
- uid: Global.AbstractRoom.RemoveQuantifiedCreature*
  commentId: Overload:Global.AbstractRoom.RemoveQuantifiedCreature
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_RemoveQuantifiedCreature_System_Int32_CreatureTemplate_Type_
  name: RemoveQuantifiedCreature
  nameWithType: AbstractRoom.RemoveQuantifiedCreature
  fullName: AbstractRoom.RemoveQuantifiedCreature
- uid: Global.AbstractRoom.NodesRelevantToCreature*
  commentId: Overload:Global.AbstractRoom.NodesRelevantToCreature
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_NodesRelevantToCreature_CreatureTemplate_
  name: NodesRelevantToCreature
  nameWithType: AbstractRoom.NodesRelevantToCreature
  fullName: AbstractRoom.NodesRelevantToCreature
- uid: Global.AbstractRoom.RandomRelevantNode*
  commentId: Overload:Global.AbstractRoom.RandomRelevantNode
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_RandomRelevantNode_CreatureTemplate_
  name: RandomRelevantNode
  nameWithType: AbstractRoom.RandomRelevantNode
  fullName: AbstractRoom.RandomRelevantNode
- uid: Global.AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth*
  commentId: Overload:Global.AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_RandomRelevantNodeAccountingForEntranceWidth_CreatureTemplate_System_Int32_
  name: RandomRelevantNodeAccountingForEntranceWidth
  nameWithType: AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth
  fullName: AbstractRoom.RandomRelevantNodeAccountingForEntranceWidth
- uid: Global.AbstractRoom.CreatureSpecificToCommonNodeIndex*
  commentId: Overload:Global.AbstractRoom.CreatureSpecificToCommonNodeIndex
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_CreatureSpecificToCommonNodeIndex_System_Int32_CreatureTemplate_
  name: CreatureSpecificToCommonNodeIndex
  nameWithType: AbstractRoom.CreatureSpecificToCommonNodeIndex
  fullName: AbstractRoom.CreatureSpecificToCommonNodeIndex
- uid: Global.AbstractRoom.CommonToCreatureSpecificNodeIndex*
  commentId: Overload:Global.AbstractRoom.CommonToCreatureSpecificNodeIndex
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_CommonToCreatureSpecificNodeIndex_System_Int32_CreatureTemplate_
  name: CommonToCreatureSpecificNodeIndex
  nameWithType: AbstractRoom.CommonToCreatureSpecificNodeIndex
  fullName: AbstractRoom.CommonToCreatureSpecificNodeIndex
- uid: Global.AbstractRoom.AddArenaSandGrubBurrow*
  commentId: Overload:Global.AbstractRoom.AddArenaSandGrubBurrow
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AddArenaSandGrubBurrow_UnityEngine_Vector2_
  name: AddArenaSandGrubBurrow
  nameWithType: AbstractRoom.AddArenaSandGrubBurrow
  fullName: AbstractRoom.AddArenaSandGrubBurrow
- uid: Global.AbstractRoom.AttractionForCreature*
  commentId: Overload:Global.AbstractRoom.AttractionForCreature
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AttractionForCreature_AbstractCreature_
  name: AttractionForCreature
  nameWithType: AbstractRoom.AttractionForCreature
  fullName: AbstractRoom.AttractionForCreature
- uid: Global.AbstractCreature
  commentId: T:Global.AbstractCreature
  isExternal: true
  href: AbstractCreature.html
  name: AbstractCreature
  nameWithType: AbstractCreature
  fullName: AbstractCreature
- uid: Global.AbstractRoom.CreatureRoomAttraction
  commentId: T:Global.AbstractRoom.CreatureRoomAttraction
  isExternal: true
  href: AbstractRoom.html
  name: AbstractRoom.CreatureRoomAttraction
  nameWithType: AbstractRoom.CreatureRoomAttraction
  fullName: AbstractRoom.CreatureRoomAttraction
  spec.csharp:
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: .
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
  spec.vb:
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: .
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
- uid: Global.AbstractRoom.AttractionValueForCreature*
  commentId: Overload:Global.AbstractRoom.AttractionValueForCreature
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AttractionValueForCreature_AbstractCreature_
  name: AttractionValueForCreature
  nameWithType: AbstractRoom.AttractionValueForCreature
  fullName: AbstractRoom.AttractionValueForCreature
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.AbstractRoom.SizeDependentAttractionValueForCreature*
  commentId: Overload:Global.AbstractRoom.SizeDependentAttractionValueForCreature
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_SizeDependentAttractionValueForCreature_AbstractCreature_
  name: SizeDependentAttractionValueForCreature
  nameWithType: AbstractRoom.SizeDependentAttractionValueForCreature
  fullName: AbstractRoom.SizeDependentAttractionValueForCreature
- uid: Global.AbstractRoom.ResolveDefaultAttractionString*
  commentId: Overload:Global.AbstractRoom.ResolveDefaultAttractionString
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_ResolveDefaultAttractionString_System_String_
  name: ResolveDefaultAttractionString
  nameWithType: AbstractRoom.ResolveDefaultAttractionString
  fullName: AbstractRoom.ResolveDefaultAttractionString
- uid: Global.AbstractRoom.CreatureAttractionToFloat*
  commentId: Overload:Global.AbstractRoom.CreatureAttractionToFloat
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_CreatureAttractionToFloat_AbstractRoom_CreatureRoomAttraction_
  name: CreatureAttractionToFloat
  nameWithType: AbstractRoom.CreatureAttractionToFloat
  fullName: AbstractRoom.CreatureAttractionToFloat
- uid: Global.AbstractRoom.FloatToCreatureAttraction*
  commentId: Overload:Global.AbstractRoom.FloatToCreatureAttraction
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_FloatToCreatureAttraction_System_Single_
  name: FloatToCreatureAttraction
  nameWithType: AbstractRoom.FloatToCreatureAttraction
  fullName: AbstractRoom.FloatToCreatureAttraction
- uid: Global.AbstractRoom.swarmRoomIndex*
  commentId: Overload:Global.AbstractRoom.swarmRoomIndex
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_swarmRoomIndex
  name: swarmRoomIndex
  nameWithType: AbstractRoom.swarmRoomIndex
  fullName: AbstractRoom.swarmRoomIndex
- uid: Global.AbstractRoom.swarmRoom*
  commentId: Overload:Global.AbstractRoom.swarmRoom
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_swarmRoom
  name: swarmRoom
  nameWithType: AbstractRoom.swarmRoom
  fullName: AbstractRoom.swarmRoom
- uid: Global.AbstractRoom.shelter*
  commentId: Overload:Global.AbstractRoom.shelter
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_shelter
  name: shelter
  nameWithType: AbstractRoom.shelter
  fullName: AbstractRoom.shelter
- uid: Global.AbstractRoom.DisplaySubregionName*
  commentId: Overload:Global.AbstractRoom.DisplaySubregionName
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_DisplaySubregionName
  name: DisplaySubregionName
  nameWithType: AbstractRoom.DisplaySubregionName
  fullName: AbstractRoom.DisplaySubregionName
- uid: Global.AbstractRoom.scavengerOutpost*
  commentId: Overload:Global.AbstractRoom.scavengerOutpost
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_scavengerOutpost
  name: scavengerOutpost
  nameWithType: AbstractRoom.scavengerOutpost
  fullName: AbstractRoom.scavengerOutpost
- uid: Global.AbstractRoom.scavengerTrader*
  commentId: Overload:Global.AbstractRoom.scavengerTrader
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_scavengerTrader
  name: scavengerTrader
  nameWithType: AbstractRoom.scavengerTrader
  fullName: AbstractRoom.scavengerTrader
- uid: Global.AbstractRoom.borderExits*
  commentId: Overload:Global.AbstractRoom.borderExits
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_borderExits
  name: borderExits
  nameWithType: AbstractRoom.borderExits
  fullName: AbstractRoom.borderExits
- uid: Global.AbstractRoom.TotalNodes*
  commentId: Overload:Global.AbstractRoom.TotalNodes
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_TotalNodes
  name: TotalNodes
  nameWithType: AbstractRoom.TotalNodes
  fullName: AbstractRoom.TotalNodes
- uid: Global.AbstractRoom.AnySkyAccess*
  commentId: Overload:Global.AbstractRoom.AnySkyAccess
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AnySkyAccess
  name: AnySkyAccess
  nameWithType: AbstractRoom.AnySkyAccess
  fullName: AbstractRoom.AnySkyAccess
- uid: Global.AbstractRoom.gate*
  commentId: Overload:Global.AbstractRoom.gate
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_gate
  name: gate
  nameWithType: AbstractRoom.gate
  fullName: AbstractRoom.gate
- uid: Global.AbstractRoom.FileName*
  commentId: Overload:Global.AbstractRoom.FileName
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_FileName
  name: FileName
  nameWithType: AbstractRoom.FileName
  fullName: AbstractRoom.FileName
- uid: Global.AbstractRoom.AnySideAccess*
  commentId: Overload:Global.AbstractRoom.AnySideAccess
  isExternal: true
  href: Global.AbstractRoom.html#AbstractRoom_AnySideAccess
  name: AnySideAccess
  nameWithType: AbstractRoom.AnySideAccess
  fullName: AbstractRoom.AnySideAccess
