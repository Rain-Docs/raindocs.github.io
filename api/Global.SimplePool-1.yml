### YamlMime:ManagedReference
items:
- uid: Global.SimplePool`1
  commentId: T:Global.SimplePool`1
  id: SimplePool`1
  parent: Global
  children:
  - Global.SimplePool`1.#ctor
  - Global.SimplePool`1.AddInstanceToPool(System.Int32)
  - Global.SimplePool`1.BeforePop(`0)
  - Global.SimplePool`1.BeforePush(`0)
  - Global.SimplePool`1.CreateInstance(System.Int32)
  - Global.SimplePool`1.Instance
  - Global.SimplePool`1.Pop
  - Global.SimplePool`1.Push(`0)
  langs:
  - csharp
  - vb
  name: SimplePool<T>
  nameWithType: SimplePool<T>
  fullName: SimplePool<T>
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:SimplePool`1</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public abstract class SimplePool<T> : MonoBehaviour'
    typeParameters:
    - id: T
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>T:SimplePool`1</parameter>
          </include>
        </markup>
    content.vb: Public MustInherit Class SimplePool(Of T) Inherits MonoBehaviour
  inheritance:
  - System.Object
  derivedClasses:
  - Global.AudioSourcePool
  nameWithType.vb: SimplePool(Of T)
  fullName.vb: SimplePool(Of T)
  name.vb: SimplePool(Of T)
- uid: Global.SimplePool`1.Instance
  commentId: F:Global.SimplePool`1.Instance
  id: Instance
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: SimplePool<T>.Instance
  fullName: SimplePool<T>.Instance
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:SimplePool`1.Instance</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static SimplePool<T> Instance
    return:
      type: Global.SimplePool`1
    content.vb: Public Shared Instance As SimplePool(Of T)
  nameWithType.vb: SimplePool(Of T).Instance
  fullName.vb: SimplePool(Of T).Instance
- uid: Global.SimplePool`1.CreateInstance(System.Int32)
  commentId: M:Global.SimplePool`1.CreateInstance(System.Int32)
  id: CreateInstance(System.Int32)
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: CreateInstance(int)
  nameWithType: SimplePool<T>.CreateInstance(int)
  fullName: SimplePool<T>.CreateInstance(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SimplePool`1.CreateInstance(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected abstract T CreateInstance(int i)
    parameters:
    - id: i
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:SimplePool`1.CreateInstance(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:SimplePool`1.CreateInstance(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Protected MustOverride Function CreateInstance(i As Integer) As T
  overload: Global.SimplePool`1.CreateInstance*
  nameWithType.vb: SimplePool(Of T).CreateInstance(Integer)
  fullName.vb: SimplePool(Of T).CreateInstance(Integer)
  name.vb: CreateInstance(Integer)
- uid: Global.SimplePool`1.AddInstanceToPool(System.Int32)
  commentId: M:Global.SimplePool`1.AddInstanceToPool(System.Int32)
  id: AddInstanceToPool(System.Int32)
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: AddInstanceToPool(int)
  nameWithType: SimplePool<T>.AddInstanceToPool(int)
  fullName: SimplePool<T>.AddInstanceToPool(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SimplePool`1.AddInstanceToPool(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected void AddInstanceToPool(int instanceNumber)
    parameters:
    - id: instanceNumber
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>instanceNumber</parameter>
            <parameter>M:SimplePool`1.AddInstanceToPool(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Protected Sub AddInstanceToPool(instanceNumber As Integer)
  overload: Global.SimplePool`1.AddInstanceToPool*
  nameWithType.vb: SimplePool(Of T).AddInstanceToPool(Integer)
  fullName.vb: SimplePool(Of T).AddInstanceToPool(Integer)
  name.vb: AddInstanceToPool(Integer)
- uid: Global.SimplePool`1.Pop
  commentId: M:Global.SimplePool`1.Pop
  id: Pop
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: Pop()
  nameWithType: SimplePool<T>.Pop()
  fullName: SimplePool<T>.Pop()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SimplePool`1.Pop</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public T Pop()
    return:
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:SimplePool`1.Pop</parameter>
          </include>
        </markup>
    content.vb: Public Function Pop() As T
  overload: Global.SimplePool`1.Pop*
  nameWithType.vb: SimplePool(Of T).Pop()
  fullName.vb: SimplePool(Of T).Pop()
- uid: Global.SimplePool`1.Push(`0)
  commentId: M:Global.SimplePool`1.Push(`0)
  id: Push(`0)
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: Push(T)
  nameWithType: SimplePool<T>.Push(T)
  fullName: SimplePool<T>.Push(T)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SimplePool`1.Push(`0)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Push(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:SimplePool`1.Push(`0)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Push(obj As T)
  overload: Global.SimplePool`1.Push*
  nameWithType.vb: SimplePool(Of T).Push(T)
  fullName.vb: SimplePool(Of T).Push(T)
- uid: Global.SimplePool`1.BeforePop(`0)
  commentId: M:Global.SimplePool`1.BeforePop(`0)
  id: BeforePop(`0)
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: BeforePop(T)
  nameWithType: SimplePool<T>.BeforePop(T)
  fullName: SimplePool<T>.BeforePop(T)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SimplePool`1.BeforePop(`0)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected abstract void BeforePop(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:SimplePool`1.BeforePop(`0)</parameter>
          </include>
        </markup>
    content.vb: Protected MustOverride Sub BeforePop(obj As T)
  overload: Global.SimplePool`1.BeforePop*
  nameWithType.vb: SimplePool(Of T).BeforePop(T)
  fullName.vb: SimplePool(Of T).BeforePop(T)
- uid: Global.SimplePool`1.BeforePush(`0)
  commentId: M:Global.SimplePool`1.BeforePush(`0)
  id: BeforePush(`0)
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: BeforePush(T)
  nameWithType: SimplePool<T>.BeforePush(T)
  fullName: SimplePool<T>.BeforePush(T)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SimplePool`1.BeforePush(`0)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected abstract void BeforePush(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:SimplePool`1.BeforePush(`0)</parameter>
          </include>
        </markup>
    content.vb: Protected MustOverride Sub BeforePush(obj As T)
  overload: Global.SimplePool`1.BeforePush*
  nameWithType.vb: SimplePool(Of T).BeforePush(T)
  fullName.vb: SimplePool(Of T).BeforePush(T)
- uid: Global.SimplePool`1.#ctor
  commentId: M:Global.SimplePool`1.#ctor
  id: '#ctor'
  parent: Global.SimplePool`1
  langs:
  - csharp
  - vb
  name: SimplePool()
  nameWithType: SimplePool<T>.SimplePool()
  fullName: SimplePool<T>.SimplePool()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>SimplePool`1</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected SimplePool()
    content.vb: Protected Sub New()
  overload: Global.SimplePool`1.#ctor*
  nameWithType.vb: SimplePool(Of T).New()
  fullName.vb: SimplePool(Of T).New()
  name.vb: New()
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.SimplePool`1
  commentId: T:Global.SimplePool`1
  isExternal: true
  href: SimplePool-1.html
  name: SimplePool<T>
  nameWithType: SimplePool<T>
  fullName: SimplePool<T>
  nameWithType.vb: SimplePool(Of T)
  fullName.vb: SimplePool(Of T)
  name.vb: SimplePool(Of T)
  spec.csharp:
  - uid: Global.SimplePool`1
    name: SimplePool
    isExternal: true
    href: SimplePool-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.SimplePool`1
    name: SimplePool
    isExternal: true
    href: SimplePool-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.SimplePool`1.CreateInstance*
  commentId: Overload:Global.SimplePool`1.CreateInstance
  isExternal: true
  href: Global.SimplePool-1.html#SimplePool_1_CreateInstance_System_Int32_
  name: CreateInstance
  nameWithType: SimplePool<T>.CreateInstance
  fullName: SimplePool<T>.CreateInstance
  nameWithType.vb: SimplePool(Of T).CreateInstance
  fullName.vb: SimplePool(Of T).CreateInstance
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Global.SimplePool`1.AddInstanceToPool*
  commentId: Overload:Global.SimplePool`1.AddInstanceToPool
  isExternal: true
  href: Global.SimplePool-1.html#SimplePool_1_AddInstanceToPool_System_Int32_
  name: AddInstanceToPool
  nameWithType: SimplePool<T>.AddInstanceToPool
  fullName: SimplePool<T>.AddInstanceToPool
  nameWithType.vb: SimplePool(Of T).AddInstanceToPool
  fullName.vb: SimplePool(Of T).AddInstanceToPool
- uid: Global.SimplePool`1.Pop*
  commentId: Overload:Global.SimplePool`1.Pop
  isExternal: true
  href: Global.SimplePool-1.html#SimplePool_1_Pop
  name: Pop
  nameWithType: SimplePool<T>.Pop
  fullName: SimplePool<T>.Pop
  nameWithType.vb: SimplePool(Of T).Pop
  fullName.vb: SimplePool(Of T).Pop
- uid: Global.SimplePool`1.Push*
  commentId: Overload:Global.SimplePool`1.Push
  isExternal: true
  href: Global.SimplePool-1.html#SimplePool_1_Push__0_
  name: Push
  nameWithType: SimplePool<T>.Push
  fullName: SimplePool<T>.Push
  nameWithType.vb: SimplePool(Of T).Push
  fullName.vb: SimplePool(Of T).Push
- uid: Global.SimplePool`1.BeforePop*
  commentId: Overload:Global.SimplePool`1.BeforePop
  isExternal: true
  href: Global.SimplePool-1.html#SimplePool_1_BeforePop__0_
  name: BeforePop
  nameWithType: SimplePool<T>.BeforePop
  fullName: SimplePool<T>.BeforePop
  nameWithType.vb: SimplePool(Of T).BeforePop
  fullName.vb: SimplePool(Of T).BeforePop
- uid: Global.SimplePool`1.BeforePush*
  commentId: Overload:Global.SimplePool`1.BeforePush
  isExternal: true
  href: Global.SimplePool-1.html#SimplePool_1_BeforePush__0_
  name: BeforePush
  nameWithType: SimplePool<T>.BeforePush
  fullName: SimplePool<T>.BeforePush
  nameWithType.vb: SimplePool(Of T).BeforePush
  fullName.vb: SimplePool(Of T).BeforePush
- uid: Global.SimplePool`1.#ctor*
  commentId: Overload:Global.SimplePool`1.#ctor
  isExternal: true
  href: Global.SimplePool-1.html#SimplePool_1__ctor
  name: SimplePool
  nameWithType: SimplePool<T>.SimplePool
  fullName: SimplePool<T>.SimplePool
  nameWithType.vb: SimplePool(Of T).New
  fullName.vb: SimplePool(Of T).New
  name.vb: New
