### YamlMime:ManagedReference
items:
- uid: RWCustom.Custom
  commentId: T:RWCustom.Custom
  id: Custom
  parent: RWCustom
  children:
  - RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.Angle(UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  - RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  - RWCustom.Custom.BackwardsSCurve(System.Single,System.Single)
  - RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)
  - RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)
  - RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.ColorToVec3(UnityEngine.Color)
  - RWCustom.Custom.Decimal(System.Single)
  - RWCustom.Custom.DegToFloat2(System.Single)
  - RWCustom.Custom.DegToVec(System.Single)
  - RWCustom.Custom.Desaturate(UnityEngine.Color,System.Single)
  - RWCustom.Custom.DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)
  - RWCustom.Custom.DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)
  - RWCustom.Custom.DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)
  - RWCustom.Custom.DirVec(UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.Dist(UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)
  - RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)
  - RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.DistanceBetweenZeroToOneFloats(System.Single,System.Single)
  - RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)
  - RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.EncodeFloatRG(System.Single)
  - RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.Factorial(System.Int32)
  - RWCustom.Custom.FadableVectorCircleColors
  - RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)
  - RWCustom.Custom.Float2ToDeg(Unity.Mathematics.float2)
  - RWCustom.Custom.GetBaseFileNameWithoutPrefix(System.String,System.String)
  - RWCustom.Custom.GetDisplayFont
  - RWCustom.Custom.GetFont
  - RWCustom.Custom.GetIGTFormat(System.TimeSpan,System.Boolean)
  - RWCustom.Custom.GetScreenOffsets
  - RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)
  - RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.InRange(System.Single,System.Single,System.Single)
  - RWCustom.Custom.InitializeRootFolderDirectory
  - RWCustom.Custom.InsideRect(RWCustom.IntVector2,RWCustom.IntRect)
  - RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)
  - RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)
  - RWCustom.Custom.IntVector2ToVector2(RWCustom.IntVector2)
  - RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)
  - RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)
  - RWCustom.Custom.IsDigitString(System.String)
  - RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.LegacyRootFolderDirectory
  - RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)
  - RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.Log(System.String[])
  - RWCustom.Custom.LogImportant(System.String[])
  - RWCustom.Custom.LogWarning(System.String[])
  - RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)
  - RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)
  - RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)
  - RWCustom.Custom.ManhattanDistance(WorldCoordinate,WorldCoordinate)
  - RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)
  - RWCustom.Custom.Md5Sum(System.String)
  - RWCustom.Custom.MinusOneToOneRangeFloatInfluence(System.Single,System.Single)
  - RWCustom.Custom.Mod(System.Single,System.Single)
  - RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.Multiply(UnityEngine.Color,UnityEngine.Color)
  - RWCustom.Custom.NewLine
  - RWCustom.Custom.ParseEnum``1(System.String)
  - RWCustom.Custom.PerpIntVec(RWCustom.IntVector2)
  - RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2)
  - RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)
  - RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2)
  - RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  - RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.PushFromHalf(System.Single,System.Single)
  - RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - RWCustom.Custom.QuickSaturation(UnityEngine.Color)
  - RWCustom.Custom.RGB2HSL(UnityEngine.Color)
  - RWCustom.Custom.RGB2RGBA(UnityEngine.Color,System.Single)
  - RWCustom.Custom.RGBA2RGB(UnityEngine.Color)
  - RWCustom.Custom.RNV
  - RWCustom.Custom.RNVf2
  - RWCustom.Custom.RandomPointInRect(FloatRect)
  - RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  - RWCustom.Custom.RectZone(UnityEngine.Vector2,FloatRect)
  - RWCustom.Custom.ReplaceLineDelimeters(System.String)
  - RWCustom.Custom.ReplaceWordWrapLineDelimeters(System.String)
  - RWCustom.Custom.RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)
  - RWCustom.Custom.RestrictInRect(UnityEngine.Vector2,FloatRect)
  - RWCustom.Custom.RootFolderDirectory
  - RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2,System.Single)
  - RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.SCurve(System.Single,System.Single)
  - RWCustom.Custom.Saturate(UnityEngine.Color,System.Single)
  - RWCustom.Custom.Screen(System.Single,System.Single)
  - RWCustom.Custom.Screen(UnityEngine.Color,UnityEngine.Color)
  - RWCustom.Custom.SecondsToMinutesAndSecondsString(System.Int32)
  - RWCustom.Custom.SignZero(System.Single)
  - RWCustom.Custom.ToLiteral(System.String)
  - RWCustom.Custom.ToTitleCase(System.String)
  - RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.TruncateString(System.String,System.Int32)
  - RWCustom.Custom.ValidateSpacedDelimiter(System.String,System.String)
  - RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.Vec3ToColor(UnityEngine.Vector3)
  - RWCustom.Custom.VecToDeg(UnityEngine.Vector2)
  - RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2,FloatRect)
  - RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)
  - RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)
  - RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)
  - RWCustom.Custom.colorToHex(UnityEngine.Color)
  - RWCustom.Custom.diagonals
  - RWCustom.Custom.eightDirections
  - RWCustom.Custom.eightDirectionsAndZero
  - RWCustom.Custom.eightDirectionsDiagonalsLast
  - RWCustom.Custom.fourDirections
  - RWCustom.Custom.fourDirectionsAndZero
  - RWCustom.Custom.fourDirectionsInt2
  - RWCustom.Custom.hexToColor(System.String)
  - RWCustom.Custom.leftRightUpDown
  - RWCustom.Custom.rainWorld
  - RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2,System.Single)
  - RWCustom.Custom.xorEncrypt(System.String,System.Int32)
  - RWCustom.Custom.zeroAndEightDirectionsDiagonalsLast
  langs:
  - csharp
  - vb
  name: Custom
  nameWithType: Custom
  fullName: RWCustom.Custom
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:RWCustom.Custom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static class Custom
    content.vb: Public Module Custom
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: RWCustom.Custom.NewLine
  commentId: F:RWCustom.Custom.NewLine
  id: NewLine
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: NewLine
  nameWithType: Custom.NewLine
  fullName: RWCustom.Custom.NewLine
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.NewLine</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const string NewLine = "\r\n"
    return:
      type: System.String
    content.vb: Public Const NewLine As String = vbCrLf
- uid: RWCustom.Custom.rainWorld
  commentId: F:RWCustom.Custom.rainWorld
  id: rainWorld
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: rainWorld
  nameWithType: Custom.rainWorld
  fullName: RWCustom.Custom.rainWorld
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.rainWorld</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static RainWorld rainWorld
    return:
      type: Global.RainWorld
    content.vb: Public Shared rainWorld As RainWorld
- uid: RWCustom.Custom.eightDirections
  commentId: F:RWCustom.Custom.eightDirections
  id: eightDirections
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: eightDirections
  nameWithType: Custom.eightDirections
  fullName: RWCustom.Custom.eightDirections
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.eightDirections</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] eightDirections
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared eightDirections As IntVector2()
- uid: RWCustom.Custom.eightDirectionsDiagonalsLast
  commentId: F:RWCustom.Custom.eightDirectionsDiagonalsLast
  id: eightDirectionsDiagonalsLast
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: eightDirectionsDiagonalsLast
  nameWithType: Custom.eightDirectionsDiagonalsLast
  fullName: RWCustom.Custom.eightDirectionsDiagonalsLast
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.eightDirectionsDiagonalsLast</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] eightDirectionsDiagonalsLast
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared eightDirectionsDiagonalsLast As IntVector2()
- uid: RWCustom.Custom.zeroAndEightDirectionsDiagonalsLast
  commentId: F:RWCustom.Custom.zeroAndEightDirectionsDiagonalsLast
  id: zeroAndEightDirectionsDiagonalsLast
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: zeroAndEightDirectionsDiagonalsLast
  nameWithType: Custom.zeroAndEightDirectionsDiagonalsLast
  fullName: RWCustom.Custom.zeroAndEightDirectionsDiagonalsLast
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.zeroAndEightDirectionsDiagonalsLast</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] zeroAndEightDirectionsDiagonalsLast
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared zeroAndEightDirectionsDiagonalsLast As IntVector2()
- uid: RWCustom.Custom.eightDirectionsAndZero
  commentId: F:RWCustom.Custom.eightDirectionsAndZero
  id: eightDirectionsAndZero
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: eightDirectionsAndZero
  nameWithType: Custom.eightDirectionsAndZero
  fullName: RWCustom.Custom.eightDirectionsAndZero
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.eightDirectionsAndZero</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] eightDirectionsAndZero
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared eightDirectionsAndZero As IntVector2()
- uid: RWCustom.Custom.fourDirections
  commentId: F:RWCustom.Custom.fourDirections
  id: fourDirections
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: fourDirections
  nameWithType: Custom.fourDirections
  fullName: RWCustom.Custom.fourDirections
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.fourDirections</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] fourDirections
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared fourDirections As IntVector2()
- uid: RWCustom.Custom.fourDirectionsInt2
  commentId: F:RWCustom.Custom.fourDirectionsInt2
  id: fourDirectionsInt2
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: fourDirectionsInt2
  nameWithType: Custom.fourDirectionsInt2
  fullName: RWCustom.Custom.fourDirectionsInt2
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.fourDirectionsInt2</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int2[] fourDirectionsInt2
    return:
      type: Unity.Mathematics.int2[]
    content.vb: Public Shared fourDirectionsInt2 As int2()
- uid: RWCustom.Custom.fourDirectionsAndZero
  commentId: F:RWCustom.Custom.fourDirectionsAndZero
  id: fourDirectionsAndZero
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: fourDirectionsAndZero
  nameWithType: Custom.fourDirectionsAndZero
  fullName: RWCustom.Custom.fourDirectionsAndZero
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.fourDirectionsAndZero</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] fourDirectionsAndZero
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared fourDirectionsAndZero As IntVector2()
- uid: RWCustom.Custom.diagonals
  commentId: F:RWCustom.Custom.diagonals
  id: diagonals
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: diagonals
  nameWithType: Custom.diagonals
  fullName: RWCustom.Custom.diagonals
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.diagonals</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] diagonals
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared diagonals As IntVector2()
- uid: RWCustom.Custom.leftRightUpDown
  commentId: F:RWCustom.Custom.leftRightUpDown
  id: leftRightUpDown
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: leftRightUpDown
  nameWithType: Custom.leftRightUpDown
  fullName: RWCustom.Custom.leftRightUpDown
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.leftRightUpDown</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2[] leftRightUpDown
    return:
      type: RWCustom.IntVector2[]
    content.vb: Public Shared leftRightUpDown As IntVector2()
- uid: RWCustom.Custom.FadableVectorCircleColors
  commentId: F:RWCustom.Custom.FadableVectorCircleColors
  id: FadableVectorCircleColors
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: FadableVectorCircleColors
  nameWithType: Custom.FadableVectorCircleColors
  fullName: RWCustom.Custom.FadableVectorCircleColors
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.Custom.FadableVectorCircleColors</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color[] FadableVectorCircleColors
    return:
      type: UnityEngine.Color[]
    content.vb: Public Shared FadableVectorCircleColors As Color()
- uid: RWCustom.Custom.ParseEnum``1(System.String)
  commentId: M:RWCustom.Custom.ParseEnum``1(System.String)
  id: ParseEnum``1(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ParseEnum<T>(string)
  nameWithType: Custom.ParseEnum<T>(string)
  fullName: RWCustom.Custom.ParseEnum<T>(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ParseEnum``1(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static T ParseEnum<T>(string value)
    parameters:
    - id: value
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:RWCustom.Custom.ParseEnum``1(System.String)</parameter>
          </include>
        </markup>
    typeParameters:
    - id: T
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:RWCustom.Custom.ParseEnum``1(System.String)</parameter>
          </include>
        </markup>
    return:
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ParseEnum``1(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ParseEnum(Of T)(value As String) As T
  overload: RWCustom.Custom.ParseEnum*
  nameWithType.vb: Custom.ParseEnum(Of T)(String)
  fullName.vb: RWCustom.Custom.ParseEnum(Of T)(String)
  name.vb: ParseEnum(Of T)(String)
- uid: RWCustom.Custom.IsDigitString(System.String)
  commentId: M:RWCustom.Custom.IsDigitString(System.String)
  id: IsDigitString(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: IsDigitString(string)
  nameWithType: Custom.IsDigitString(string)
  fullName: RWCustom.Custom.IsDigitString(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.IsDigitString(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool IsDigitString(string str)
    parameters:
    - id: str
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>str</parameter>
            <parameter>M:RWCustom.Custom.IsDigitString(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.IsDigitString(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function IsDigitString(str As String) As Boolean
  overload: RWCustom.Custom.IsDigitString*
  nameWithType.vb: Custom.IsDigitString(String)
  fullName.vb: RWCustom.Custom.IsDigitString(String)
  name.vb: IsDigitString(String)
- uid: RWCustom.Custom.ReplaceLineDelimeters(System.String)
  commentId: M:RWCustom.Custom.ReplaceLineDelimeters(System.String)
  id: ReplaceLineDelimeters(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ReplaceLineDelimeters(string)
  nameWithType: Custom.ReplaceLineDelimeters(string)
  fullName: RWCustom.Custom.ReplaceLineDelimeters(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ReplaceLineDelimeters(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string ReplaceLineDelimeters(string s)
    parameters:
    - id: s
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>s</parameter>
            <parameter>M:RWCustom.Custom.ReplaceLineDelimeters(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ReplaceLineDelimeters(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ReplaceLineDelimeters(s As String) As String
  overload: RWCustom.Custom.ReplaceLineDelimeters*
  nameWithType.vb: Custom.ReplaceLineDelimeters(String)
  fullName.vb: RWCustom.Custom.ReplaceLineDelimeters(String)
  name.vb: ReplaceLineDelimeters(String)
- uid: RWCustom.Custom.ReplaceWordWrapLineDelimeters(System.String)
  commentId: M:RWCustom.Custom.ReplaceWordWrapLineDelimeters(System.String)
  id: ReplaceWordWrapLineDelimeters(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ReplaceWordWrapLineDelimeters(string)
  nameWithType: Custom.ReplaceWordWrapLineDelimeters(string)
  fullName: RWCustom.Custom.ReplaceWordWrapLineDelimeters(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ReplaceWordWrapLineDelimeters(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string ReplaceWordWrapLineDelimeters(string s)
    parameters:
    - id: s
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>s</parameter>
            <parameter>M:RWCustom.Custom.ReplaceWordWrapLineDelimeters(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ReplaceWordWrapLineDelimeters(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ReplaceWordWrapLineDelimeters(s As String) As String
  overload: RWCustom.Custom.ReplaceWordWrapLineDelimeters*
  nameWithType.vb: Custom.ReplaceWordWrapLineDelimeters(String)
  fullName.vb: RWCustom.Custom.ReplaceWordWrapLineDelimeters(String)
  name.vb: ReplaceWordWrapLineDelimeters(String)
- uid: RWCustom.Custom.TruncateString(System.String,System.Int32)
  commentId: M:RWCustom.Custom.TruncateString(System.String,System.Int32)
  id: TruncateString(System.String,System.Int32)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: TruncateString(string, int)
  nameWithType: Custom.TruncateString(string, int)
  fullName: RWCustom.Custom.TruncateString(string, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.TruncateString(System.String,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string TruncateString(string s, int maxLength)
    parameters:
    - id: s
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>s</parameter>
            <parameter>M:RWCustom.Custom.TruncateString(System.String,System.Int32)</parameter>
          </include>
        </markup>
    - id: maxLength
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maxLength</parameter>
            <parameter>M:RWCustom.Custom.TruncateString(System.String,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.TruncateString(System.String,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function TruncateString(s As String, maxLength As Integer) As String
  overload: RWCustom.Custom.TruncateString*
  nameWithType.vb: Custom.TruncateString(String, Integer)
  fullName.vb: RWCustom.Custom.TruncateString(String, Integer)
  name.vb: TruncateString(String, Integer)
- uid: RWCustom.Custom.Log(System.String[])
  commentId: M:RWCustom.Custom.Log(System.String[])
  id: Log(System.String[])
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Log(params string[])
  nameWithType: Custom.Log(params string[])
  fullName: RWCustom.Custom.Log(params string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Log(System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void Log(params string[] values)
    parameters:
    - id: values
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>values</parameter>
            <parameter>M:RWCustom.Custom.Log(System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub Log(ParamArray values As String())
  overload: RWCustom.Custom.Log*
  nameWithType.vb: Custom.Log(ParamArray String())
  fullName.vb: RWCustom.Custom.Log(ParamArray String())
  name.vb: Log(ParamArray String())
- uid: RWCustom.Custom.LogImportant(System.String[])
  commentId: M:RWCustom.Custom.LogImportant(System.String[])
  id: LogImportant(System.String[])
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LogImportant(params string[])
  nameWithType: Custom.LogImportant(params string[])
  fullName: RWCustom.Custom.LogImportant(params string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LogImportant(System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void LogImportant(params string[] values)
    parameters:
    - id: values
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>values</parameter>
            <parameter>M:RWCustom.Custom.LogImportant(System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub LogImportant(ParamArray values As String())
  overload: RWCustom.Custom.LogImportant*
  nameWithType.vb: Custom.LogImportant(ParamArray String())
  fullName.vb: RWCustom.Custom.LogImportant(ParamArray String())
  name.vb: LogImportant(ParamArray String())
- uid: RWCustom.Custom.LogWarning(System.String[])
  commentId: M:RWCustom.Custom.LogWarning(System.String[])
  id: LogWarning(System.String[])
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LogWarning(params string[])
  nameWithType: Custom.LogWarning(params string[])
  fullName: RWCustom.Custom.LogWarning(params string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LogWarning(System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void LogWarning(params string[] values)
    parameters:
    - id: values
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>values</parameter>
            <parameter>M:RWCustom.Custom.LogWarning(System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub LogWarning(ParamArray values As String())
  overload: RWCustom.Custom.LogWarning*
  nameWithType.vb: Custom.LogWarning(ParamArray String())
  fullName.vb: RWCustom.Custom.LogWarning(ParamArray String())
  name.vb: LogWarning(ParamArray String())
- uid: RWCustom.Custom.Dist(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.Dist(UnityEngine.Vector2,UnityEngine.Vector2)
  id: Dist(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Dist(Vector2, Vector2)
  nameWithType: Custom.Dist(Vector2, Vector2)
  fullName: RWCustom.Custom.Dist(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Dist(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Dist(Vector2 p1, Vector2 p2)
    parameters:
    - id: p1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.Dist(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: p2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.Dist(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Dist(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Dist(p1 As Vector2, p2 As Vector2) As Single
  overload: RWCustom.Custom.Dist*
- uid: RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)
  id: DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DistNoSqrt(Vector2, Vector2)
  nameWithType: Custom.DistNoSqrt(Vector2, Vector2)
  fullName: RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float DistNoSqrt(Vector2 p1, Vector2 p2)
    parameters:
    - id: p1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: p2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DistNoSqrt(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DistNoSqrt(p1 As Vector2, p2 As Vector2) As Single
  overload: RWCustom.Custom.DistNoSqrt*
- uid: RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DistLess(Vector2, Vector2, float)
  nameWithType: Custom.DistLess(Vector2, Vector2, float)
  fullName: RWCustom.Custom.DistLess(UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool DistLess(Vector2 p1, Vector2 p2, float dst)
    parameters:
    - id: p1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: p2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: dst
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dst</parameter>
            <parameter>M:RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DistLess(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DistLess(p1 As Vector2, p2 As Vector2, dst As Single) As Boolean
  overload: RWCustom.Custom.DistLess*
  nameWithType.vb: Custom.DistLess(Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.DistLess(UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: DistLess(Vector2, Vector2, Single)
- uid: RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)
  commentId: M:RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)
  id: DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DistLess(IntVector2, IntVector2, float)
  nameWithType: Custom.DistLess(IntVector2, IntVector2, float)
  fullName: RWCustom.Custom.DistLess(RWCustom.IntVector2, RWCustom.IntVector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool DistLess(IntVector2 p1, IntVector2 p2, float dst)
    parameters:
    - id: p1
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)</parameter>
          </include>
        </markup>
    - id: p2
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)</parameter>
          </include>
        </markup>
    - id: dst
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dst</parameter>
            <parameter>M:RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DistLess(RWCustom.IntVector2,RWCustom.IntVector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DistLess(p1 As IntVector2, p2 As IntVector2, dst As Single) As Boolean
  overload: RWCustom.Custom.DistLess*
  nameWithType.vb: Custom.DistLess(IntVector2, IntVector2, Single)
  fullName.vb: RWCustom.Custom.DistLess(RWCustom.IntVector2, RWCustom.IntVector2, Single)
  name.vb: DistLess(IntVector2, IntVector2, Single)
- uid: RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)
  commentId: M:RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)
  id: DistLess(WorldCoordinate,WorldCoordinate,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DistLess(WorldCoordinate, WorldCoordinate, float)
  nameWithType: Custom.DistLess(WorldCoordinate, WorldCoordinate, float)
  fullName: RWCustom.Custom.DistLess(WorldCoordinate, WorldCoordinate, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool DistLess(WorldCoordinate a, WorldCoordinate b, float dst)
    parameters:
    - id: a
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)</parameter>
          </include>
        </markup>
    - id: dst
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dst</parameter>
            <parameter>M:RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DistLess(WorldCoordinate,WorldCoordinate,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DistLess(a As WorldCoordinate, b As WorldCoordinate, dst As Single) As Boolean
  overload: RWCustom.Custom.DistLess*
  nameWithType.vb: Custom.DistLess(WorldCoordinate, WorldCoordinate, Single)
  fullName.vb: RWCustom.Custom.DistLess(WorldCoordinate, WorldCoordinate, Single)
  name.vb: DistLess(WorldCoordinate, WorldCoordinate, Single)
- uid: RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: VectorIsCloser(Vector2, Vector2, Vector2)
  nameWithType: Custom.VectorIsCloser(Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool VectorIsCloser(Vector2 A, Vector2 B, Vector2 comparePoint)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: comparePoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>comparePoint</parameter>
            <parameter>M:RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.VectorIsCloser(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function VectorIsCloser(A As Vector2, B As Vector2, comparePoint As Vector2) As Boolean
  overload: RWCustom.Custom.VectorIsCloser*
- uid: RWCustom.Custom.DirVec(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.DirVec(UnityEngine.Vector2,UnityEngine.Vector2)
  id: DirVec(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DirVec(Vector2, Vector2)
  nameWithType: Custom.DirVec(Vector2, Vector2)
  fullName: RWCustom.Custom.DirVec(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 DirVec(Vector2 p1, Vector2 p2)
    parameters:
    - id: p1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: p2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DirVec(p1 As Vector2, p2 As Vector2) As Vector2
  overload: RWCustom.Custom.DirVec*
- uid: RWCustom.Custom.DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)
  id: DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DirVec(float2, Vector2)
  nameWithType: Custom.DirVec(float2, Vector2)
  fullName: RWCustom.Custom.DirVec(Unity.Mathematics.float2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 DirVec(float2 p1, Vector2 p2)
    parameters:
    - id: p1
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: p2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DirVec(p1 As float2, p2 As Vector2) As Vector2
  overload: RWCustom.Custom.DirVec*
- uid: RWCustom.Custom.DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)
  commentId: M:RWCustom.Custom.DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)
  id: DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DirVec(Vector2, float2)
  nameWithType: Custom.DirVec(Vector2, float2)
  fullName: RWCustom.Custom.DirVec(UnityEngine.Vector2, Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 DirVec(Vector2 p1, float2 p2)
    parameters:
    - id: p1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    - id: p2
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DirVec(UnityEngine.Vector2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DirVec(p1 As Vector2, p2 As float2) As Vector2
  overload: RWCustom.Custom.DirVec*
- uid: RWCustom.Custom.DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)
  commentId: M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)
  id: DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DirVec(float2, float2)
  nameWithType: Custom.DirVec(float2, float2)
  fullName: RWCustom.Custom.DirVec(Unity.Mathematics.float2, Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float2 DirVec(float2 p1, float2 p2)
    parameters:
    - id: p1
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    - id: p2
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DirVec(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DirVec(p1 As float2, p2 As float2) As float2
  overload: RWCustom.Custom.DirVec*
- uid: RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: MapRange(float, float, float, float, float)
  nameWithType: Custom.MapRange(float, float, float, float, float)
  fullName: RWCustom.Custom.MapRange(float, float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float MapRange(float n, float oldMin, float oldMax, float newMin, float newMax)
    parameters:
    - id: n
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>n</parameter>
            <parameter>M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: oldMin
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>oldMin</parameter>
            <parameter>M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: oldMax
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>oldMax</parameter>
            <parameter>M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: newMin
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newMin</parameter>
            <parameter>M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: newMax
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newMax</parameter>
            <parameter>M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MapRange(n As Single, oldMin As Single, oldMax As Single, newMin As Single, newMax As Single) As Single
  overload: RWCustom.Custom.MapRange*
  nameWithType.vb: Custom.MapRange(Single, Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.MapRange(Single, Single, Single, Single, Single)
  name.vb: MapRange(Single, Single, Single, Single, Single)
- uid: RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: MapRangeClamped(float, float, float, float, float)
  nameWithType: Custom.MapRangeClamped(float, float, float, float, float)
  fullName: RWCustom.Custom.MapRangeClamped(float, float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float MapRangeClamped(float n, float oldMin, float oldMax, float newMin, float newMax)
    parameters:
    - id: n
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>n</parameter>
            <parameter>M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: oldMin
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>oldMin</parameter>
            <parameter>M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: oldMax
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>oldMax</parameter>
            <parameter>M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: newMin
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newMin</parameter>
            <parameter>M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: newMax
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newMax</parameter>
            <parameter>M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MapRangeClamped(n As Single, oldMin As Single, oldMax As Single, newMin As Single, newMax As Single) As Single
  overload: RWCustom.Custom.MapRangeClamped*
  nameWithType.vb: Custom.MapRangeClamped(Single, Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.MapRangeClamped(Single, Single, Single, Single, Single)
  name.vb: MapRangeClamped(Single, Single, Single, Single, Single)
- uid: RWCustom.Custom.Factorial(System.Int32)
  commentId: M:RWCustom.Custom.Factorial(System.Int32)
  id: Factorial(System.Int32)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Factorial(int)
  nameWithType: Custom.Factorial(int)
  fullName: RWCustom.Custom.Factorial(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Factorial(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int Factorial(int n)
    parameters:
    - id: n
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>n</parameter>
            <parameter>M:RWCustom.Custom.Factorial(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Factorial(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Factorial(n As Integer) As Integer
  overload: RWCustom.Custom.Factorial*
  nameWithType.vb: Custom.Factorial(Integer)
  fullName.vb: RWCustom.Custom.Factorial(Integer)
  name.vb: Factorial(Integer)
- uid: RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: CirclesCollisionTime(float, float, float, float, float, float, float, float)
  nameWithType: Custom.CirclesCollisionTime(float, float, float, float, float, float, float, float)
  fullName: RWCustom.Custom.CirclesCollisionTime(float, float, float, float, float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float CirclesCollisionTime(float x1, float y1, float x2, float y2, float vx1, float vy1, float r1, float r2)
    parameters:
    - id: x1
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x1</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: y1
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y1</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: x2
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x2</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: y2
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y2</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: vx1
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vx1</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: vy1
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vy1</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: r1
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>r1</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: r2
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>r2</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.CirclesCollisionTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function CirclesCollisionTime(x1 As Single, y1 As Single, x2 As Single, y2 As Single, vx1 As Single, vy1 As Single, r1 As Single, r2 As Single) As Single
  overload: RWCustom.Custom.CirclesCollisionTime*
  nameWithType.vb: Custom.CirclesCollisionTime(Single, Single, Single, Single, Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.CirclesCollisionTime(Single, Single, Single, Single, Single, Single, Single, Single)
  name.vb: CirclesCollisionTime(Single, Single, Single, Single, Single, Single, Single, Single)
- uid: RWCustom.Custom.DegToVec(System.Single)
  commentId: M:RWCustom.Custom.DegToVec(System.Single)
  id: DegToVec(System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DegToVec(float)
  nameWithType: Custom.DegToVec(float)
  fullName: RWCustom.Custom.DegToVec(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DegToVec(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 DegToVec(float ang)
    parameters:
    - id: ang
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ang</parameter>
            <parameter>M:RWCustom.Custom.DegToVec(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DegToVec(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DegToVec(ang As Single) As Vector2
  overload: RWCustom.Custom.DegToVec*
  nameWithType.vb: Custom.DegToVec(Single)
  fullName.vb: RWCustom.Custom.DegToVec(Single)
  name.vb: DegToVec(Single)
- uid: RWCustom.Custom.DegToFloat2(System.Single)
  commentId: M:RWCustom.Custom.DegToFloat2(System.Single)
  id: DegToFloat2(System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DegToFloat2(float)
  nameWithType: Custom.DegToFloat2(float)
  fullName: RWCustom.Custom.DegToFloat2(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DegToFloat2(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float2 DegToFloat2(float ang)
    parameters:
    - id: ang
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ang</parameter>
            <parameter>M:RWCustom.Custom.DegToFloat2(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DegToFloat2(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DegToFloat2(ang As Single) As float2
  overload: RWCustom.Custom.DegToFloat2*
  nameWithType.vb: Custom.DegToFloat2(Single)
  fullName.vb: RWCustom.Custom.DegToFloat2(Single)
  name.vb: DegToFloat2(Single)
- uid: RWCustom.Custom.IntVector2ToVector2(RWCustom.IntVector2)
  commentId: M:RWCustom.Custom.IntVector2ToVector2(RWCustom.IntVector2)
  id: IntVector2ToVector2(RWCustom.IntVector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: IntVector2ToVector2(IntVector2)
  nameWithType: Custom.IntVector2ToVector2(IntVector2)
  fullName: RWCustom.Custom.IntVector2ToVector2(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.IntVector2ToVector2(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 IntVector2ToVector2(IntVector2 ivect2)
    parameters:
    - id: ivect2
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ivect2</parameter>
            <parameter>M:RWCustom.Custom.IntVector2ToVector2(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.IntVector2ToVector2(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function IntVector2ToVector2(ivect2 As IntVector2) As Vector2
  overload: RWCustom.Custom.IntVector2ToVector2*
- uid: RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)
  id: AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: AimFromOneVectorToAnother(Vector2, Vector2)
  nameWithType: Custom.AimFromOneVectorToAnother(Vector2, Vector2)
  fullName: RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float AimFromOneVectorToAnother(Vector2 p1, Vector2 p2)
    parameters:
    - id: p1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: p2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.AimFromOneVectorToAnother(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function AimFromOneVectorToAnother(p1 As Vector2, p2 As Vector2) As Single
  overload: RWCustom.Custom.AimFromOneVectorToAnother*
- uid: RWCustom.Custom.VecToDeg(UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.VecToDeg(UnityEngine.Vector2)
  id: VecToDeg(UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: VecToDeg(Vector2)
  nameWithType: Custom.VecToDeg(Vector2)
  fullName: RWCustom.Custom.VecToDeg(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.VecToDeg(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float VecToDeg(Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v</parameter>
            <parameter>M:RWCustom.Custom.VecToDeg(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.VecToDeg(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function VecToDeg(v As Vector2) As Single
  overload: RWCustom.Custom.VecToDeg*
- uid: RWCustom.Custom.Float2ToDeg(Unity.Mathematics.float2)
  commentId: M:RWCustom.Custom.Float2ToDeg(Unity.Mathematics.float2)
  id: Float2ToDeg(Unity.Mathematics.float2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Float2ToDeg(float2)
  nameWithType: Custom.Float2ToDeg(float2)
  fullName: RWCustom.Custom.Float2ToDeg(Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Float2ToDeg(Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Float2ToDeg(float2 v)
    parameters:
    - id: v
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v</parameter>
            <parameter>M:RWCustom.Custom.Float2ToDeg(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Float2ToDeg(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Float2ToDeg(v As float2) As Single
  overload: RWCustom.Custom.Float2ToDeg*
- uid: RWCustom.Custom.Angle(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.Angle(UnityEngine.Vector2,UnityEngine.Vector2)
  id: Angle(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Angle(Vector2, Vector2)
  nameWithType: Custom.Angle(Vector2, Vector2)
  fullName: RWCustom.Custom.Angle(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Angle(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Angle(Vector2 A, Vector2 B)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.Angle(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.Angle(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Angle(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Angle(A As Vector2, B As Vector2) As Single
  overload: RWCustom.Custom.Angle*
- uid: RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2)
  id: PerpendicularVector(UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PerpendicularVector(Vector2)
  nameWithType: Custom.PerpendicularVector(Vector2)
  fullName: RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 PerpendicularVector(Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PerpendicularVector(v As Vector2) As Vector2
  overload: RWCustom.Custom.PerpendicularVector*
- uid: RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2)
  commentId: M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2)
  id: PerpendicularVector(Unity.Mathematics.float2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PerpendicularVector(float2)
  nameWithType: Custom.PerpendicularVector(float2)
  fullName: RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float2 PerpendicularVector(float2 v)
    parameters:
    - id: v
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PerpendicularVector(v As float2) As float2
  overload: RWCustom.Custom.PerpendicularVector*
- uid: RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)
  id: PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PerpendicularVector(Vector2, Vector2)
  nameWithType: Custom.PerpendicularVector(Vector2, Vector2)
  fullName: RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 PerpendicularVector(Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v1</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: v2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v2</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PerpendicularVector(v1 As Vector2, v2 As Vector2) As Vector2
  overload: RWCustom.Custom.PerpendicularVector*
- uid: RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)
  commentId: M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)
  id: PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PerpendicularVector(float2, float2)
  nameWithType: Custom.PerpendicularVector(float2, float2)
  fullName: RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2, Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float2 PerpendicularVector(float2 v1, float2 v2)
    parameters:
    - id: v1
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v1</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    - id: v2
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v2</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PerpendicularVector(Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PerpendicularVector(v1 As float2, v2 As float2) As float2
  overload: RWCustom.Custom.PerpendicularVector*
- uid: RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RotateAroundVector(Vector2, Vector2, float)
  nameWithType: Custom.RotateAroundVector(Vector2, Vector2, float)
  fullName: RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 RotateAroundVector(Vector2 vec, Vector2 pivot, float degAng)
    parameters:
    - id: vec
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: pivot
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pivot</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: degAng
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>degAng</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RotateAroundVector(vec As Vector2, pivot As Vector2, degAng As Single) As Vector2
  overload: RWCustom.Custom.RotateAroundVector*
  nameWithType.vb: Custom.RotateAroundVector(Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.RotateAroundVector(UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: RotateAroundVector(Vector2, Vector2, Single)
- uid: RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2,System.Single)
  id: RotateAroundOrigo(UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RotateAroundOrigo(Vector2, float)
  nameWithType: Custom.RotateAroundOrigo(Vector2, float)
  fullName: RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 RotateAroundOrigo(Vector2 vec, float degAng)
    parameters:
    - id: vec
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: degAng
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>degAng</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RotateAroundOrigo(vec As Vector2, degAng As Single) As Vector2
  overload: RWCustom.Custom.RotateAroundOrigo*
  nameWithType.vb: Custom.RotateAroundOrigo(Vector2, Single)
  fullName.vb: RWCustom.Custom.RotateAroundOrigo(UnityEngine.Vector2, Single)
  name.vb: RotateAroundOrigo(Vector2, Single)
- uid: RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2,System.Single)
  commentId: M:RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2,System.Single)
  id: RotateAroundOrigo(Unity.Mathematics.float2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RotateAroundOrigo(float2, float)
  nameWithType: Custom.RotateAroundOrigo(float2, float)
  fullName: RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float2 RotateAroundOrigo(float2 vec, float degAng)
    parameters:
    - id: vec
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2,System.Single)</parameter>
          </include>
        </markup>
    - id: degAng
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>degAng</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RotateAroundOrigo(vec As float2, degAng As Single) As float2
  overload: RWCustom.Custom.RotateAroundOrigo*
  nameWithType.vb: Custom.RotateAroundOrigo(float2, Single)
  fullName.vb: RWCustom.Custom.RotateAroundOrigo(Unity.Mathematics.float2, Single)
  name.vb: RotateAroundOrigo(float2, Single)
- uid: RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)
  id: FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: FlattenVectorAlongAxis(Vector2, float, float)
  nameWithType: Custom.FlattenVectorAlongAxis(Vector2, float, float)
  fullName: RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 FlattenVectorAlongAxis(Vector2 vec, float axis, float fac)
    parameters:
    - id: vec
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: axis
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axis</parameter>
            <parameter>M:RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: fac
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fac</parameter>
            <parameter>M:RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function FlattenVectorAlongAxis(vec As Vector2, axis As Single, fac As Single) As Vector2
  overload: RWCustom.Custom.FlattenVectorAlongAxis*
  nameWithType.vb: Custom.FlattenVectorAlongAxis(Vector2, Single, Single)
  fullName.vb: RWCustom.Custom.FlattenVectorAlongAxis(UnityEngine.Vector2, Single, Single)
  name.vb: FlattenVectorAlongAxis(Vector2, Single, Single)
- uid: RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)
  id: LerpAndTick(System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpAndTick(float, float, float, float)
  nameWithType: Custom.LerpAndTick(float, float, float, float)
  fullName: RWCustom.Custom.LerpAndTick(float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpAndTick(float from, float to, float lerp, float tick)
    parameters:
    - id: from
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>from</parameter>
            <parameter>M:RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: to
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>to</parameter>
            <parameter>M:RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: lerp
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lerp</parameter>
            <parameter>M:RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: tick
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tick</parameter>
            <parameter>M:RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpAndTick(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpAndTick(from As Single, [to] As Single, lerp As Single, tick As Single) As Single
  overload: RWCustom.Custom.LerpAndTick*
  nameWithType.vb: Custom.LerpAndTick(Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpAndTick(Single, Single, Single, Single)
  name.vb: LerpAndTick(Single, Single, Single, Single)
- uid: RWCustom.Custom.InitializeRootFolderDirectory
  commentId: M:RWCustom.Custom.InitializeRootFolderDirectory
  id: InitializeRootFolderDirectory
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: InitializeRootFolderDirectory()
  nameWithType: Custom.InitializeRootFolderDirectory()
  fullName: RWCustom.Custom.InitializeRootFolderDirectory()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.InitializeRootFolderDirectory</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitializeRootFolderDirectory()
    content.vb: Public Shared Sub InitializeRootFolderDirectory()
  overload: RWCustom.Custom.InitializeRootFolderDirectory*
- uid: RWCustom.Custom.RootFolderDirectory
  commentId: M:RWCustom.Custom.RootFolderDirectory
  id: RootFolderDirectory
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RootFolderDirectory()
  nameWithType: Custom.RootFolderDirectory()
  fullName: RWCustom.Custom.RootFolderDirectory()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RootFolderDirectory</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string RootFolderDirectory()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RootFolderDirectory</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RootFolderDirectory() As String
  overload: RWCustom.Custom.RootFolderDirectory*
- uid: RWCustom.Custom.LegacyRootFolderDirectory
  commentId: M:RWCustom.Custom.LegacyRootFolderDirectory
  id: LegacyRootFolderDirectory
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LegacyRootFolderDirectory()
  nameWithType: Custom.LegacyRootFolderDirectory()
  fullName: RWCustom.Custom.LegacyRootFolderDirectory()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LegacyRootFolderDirectory</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string LegacyRootFolderDirectory()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LegacyRootFolderDirectory</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LegacyRootFolderDirectory() As String
  overload: RWCustom.Custom.LegacyRootFolderDirectory*
- uid: RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)
  commentId: M:RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)
  id: IntClamp(System.Int32,System.Int32,System.Int32)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: IntClamp(int, int, int)
  nameWithType: Custom.IntClamp(int, int, int)
  fullName: RWCustom.Custom.IntClamp(int, int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int IntClamp(int val, int inclMin, int inclMax)
    parameters:
    - id: val
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>val</parameter>
            <parameter>M:RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: inclMin
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inclMin</parameter>
            <parameter>M:RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: inclMax
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inclMax</parameter>
            <parameter>M:RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.IntClamp(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function IntClamp(val As Integer, inclMin As Integer, inclMax As Integer) As Integer
  overload: RWCustom.Custom.IntClamp*
  nameWithType.vb: Custom.IntClamp(Integer, Integer, Integer)
  fullName.vb: RWCustom.Custom.IntClamp(Integer, Integer, Integer)
  name.vb: IntClamp(Integer, Integer, Integer)
- uid: RWCustom.Custom.Multiply(UnityEngine.Color,UnityEngine.Color)
  commentId: M:RWCustom.Custom.Multiply(UnityEngine.Color,UnityEngine.Color)
  id: Multiply(UnityEngine.Color,UnityEngine.Color)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Multiply(Color, Color)
  nameWithType: Custom.Multiply(Color, Color)
  fullName: RWCustom.Custom.Multiply(UnityEngine.Color, UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Multiply(UnityEngine.Color,UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color Multiply(Color A, Color B)
    parameters:
    - id: A
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.Multiply(UnityEngine.Color,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.Multiply(UnityEngine.Color,UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Multiply(UnityEngine.Color,UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Multiply(A As Color, B As Color) As Color
  overload: RWCustom.Custom.Multiply*
- uid: RWCustom.Custom.Screen(UnityEngine.Color,UnityEngine.Color)
  commentId: M:RWCustom.Custom.Screen(UnityEngine.Color,UnityEngine.Color)
  id: Screen(UnityEngine.Color,UnityEngine.Color)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Screen(Color, Color)
  nameWithType: Custom.Screen(Color, Color)
  fullName: RWCustom.Custom.Screen(UnityEngine.Color, UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Screen(UnityEngine.Color,UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color Screen(Color A, Color B)
    parameters:
    - id: A
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.Screen(UnityEngine.Color,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.Screen(UnityEngine.Color,UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Screen(UnityEngine.Color,UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Screen(A As Color, B As Color) As Color
  overload: RWCustom.Custom.Screen*
- uid: RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ApplyDepthOnVector(Vector2, Vector2, float)
  nameWithType: Custom.ApplyDepthOnVector(Vector2, Vector2, float)
  fullName: RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 ApplyDepthOnVector(Vector2 v, Vector2 depthPoint, float d)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: depthPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>depthPoint</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: d
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ApplyDepthOnVector(v As Vector2, depthPoint As Vector2, d As Single) As Vector2
  overload: RWCustom.Custom.ApplyDepthOnVector*
  nameWithType.vb: Custom.ApplyDepthOnVector(Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.ApplyDepthOnVector(UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: ApplyDepthOnVector(Vector2, Vector2, Single)
- uid: RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)
  id: ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ApplyDepthOnRect(Rect, Vector2, float)
  nameWithType: Custom.ApplyDepthOnRect(Rect, Vector2, float)
  fullName: RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Rect ApplyDepthOnRect(Rect rect, Vector2 depthPoint, float d)
    parameters:
    - id: rect
      type: UnityEngine.Rect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: depthPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>depthPoint</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: d
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Rect
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ApplyDepthOnRect(rect As Rect, depthPoint As Vector2, d As Single) As Rect
  overload: RWCustom.Custom.ApplyDepthOnRect*
  nameWithType.vb: Custom.ApplyDepthOnRect(Rect, Vector2, Single)
  fullName.vb: RWCustom.Custom.ApplyDepthOnRect(UnityEngine.Rect, UnityEngine.Vector2, Single)
  name.vb: ApplyDepthOnRect(Rect, Vector2, Single)
- uid: RWCustom.Custom.Decimal(System.Single)
  commentId: M:RWCustom.Custom.Decimal(System.Single)
  id: Decimal(System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Decimal(float)
  nameWithType: Custom.Decimal(float)
  fullName: RWCustom.Custom.Decimal(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Decimal(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Decimal(float f)
    parameters:
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:RWCustom.Custom.Decimal(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Decimal(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function [Decimal](f As Single) As Single
  overload: RWCustom.Custom.Decimal*
  nameWithType.vb: Custom.Decimal(Single)
  fullName.vb: RWCustom.Custom.Decimal(Single)
  name.vb: Decimal(Single)
- uid: RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Bezier(Vector2, Vector2, Vector2, Vector2, float)
  nameWithType: Custom.Bezier(Vector2, Vector2, Vector2, Vector2, float)
  fullName: RWCustom.Custom.Bezier(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 Bezier(Vector2 A, Vector2 cA, Vector2 B, Vector2 cB, float f)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: cA
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cA</parameter>
            <parameter>M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: cB
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cB</parameter>
            <parameter>M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Bezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Bezier(A As Vector2, cA As Vector2, B As Vector2, cB As Vector2, f As Single) As Vector2
  overload: RWCustom.Custom.Bezier*
  nameWithType.vb: Custom.Bezier(Vector2, Vector2, Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.Bezier(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: Bezier(Vector2, Vector2, Vector2, Vector2, Single)
- uid: RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: BezierDerivative(Vector2, Vector2, Vector2, Vector2, float)
  nameWithType: Custom.BezierDerivative(Vector2, Vector2, Vector2, Vector2, float)
  fullName: RWCustom.Custom.BezierDerivative(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 BezierDerivative(Vector2 A, Vector2 cA, Vector2 B, Vector2 cB, float f)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: cA
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cA</parameter>
            <parameter>M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: cB
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cB</parameter>
            <parameter>M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.BezierDerivative(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BezierDerivative(A As Vector2, cA As Vector2, B As Vector2, cB As Vector2, f As Single) As Vector2
  overload: RWCustom.Custom.BezierDerivative*
  nameWithType.vb: Custom.BezierDerivative(Vector2, Vector2, Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.BezierDerivative(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: BezierDerivative(Vector2, Vector2, Vector2, Vector2, Single)
- uid: RWCustom.Custom.RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)
  commentId: M:RWCustom.Custom.RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)
  id: RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RestrictInRect(IntVector2, IntRect)
  nameWithType: Custom.RestrictInRect(IntVector2, IntRect)
  fullName: RWCustom.Custom.RestrictInRect(RWCustom.IntVector2, RWCustom.IntRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2 RestrictInRect(IntVector2 vec, IntRect rect)
    parameters:
    - id: vec
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: RWCustom.IntRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    return:
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RestrictInRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RestrictInRect(vec As IntVector2, rect As IntRect) As IntVector2
  overload: RWCustom.Custom.RestrictInRect*
- uid: RWCustom.Custom.RestrictInRect(UnityEngine.Vector2,FloatRect)
  commentId: M:RWCustom.Custom.RestrictInRect(UnityEngine.Vector2,FloatRect)
  id: RestrictInRect(UnityEngine.Vector2,FloatRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RestrictInRect(Vector2, FloatRect)
  nameWithType: Custom.RestrictInRect(Vector2, FloatRect)
  fullName: RWCustom.Custom.RestrictInRect(UnityEngine.Vector2, FloatRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RestrictInRect(UnityEngine.Vector2,FloatRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 RestrictInRect(Vector2 vec, FloatRect rect)
    parameters:
    - id: vec
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.RestrictInRect(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.RestrictInRect(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RestrictInRect(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RestrictInRect(vec As Vector2, rect As FloatRect) As Vector2
  overload: RWCustom.Custom.RestrictInRect*
- uid: RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: MoveTowards(Vector2, Vector2, float)
  nameWithType: Custom.MoveTowards(Vector2, Vector2, float)
  fullName: RWCustom.Custom.MoveTowards(UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 MoveTowards(Vector2 A, Vector2 B, float speed)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: speed
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>speed</parameter>
            <parameter>M:RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MoveTowards(A As Vector2, B As Vector2, speed As Single) As Vector2
  overload: RWCustom.Custom.MoveTowards*
  nameWithType.vb: Custom.MoveTowards(Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.MoveTowards(UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: MoveTowards(Vector2, Vector2, Single)
- uid: RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)
  commentId: M:RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)
  id: IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: IntVectorsOpposite(IntVector2, IntVector2)
  nameWithType: Custom.IntVectorsOpposite(IntVector2, IntVector2)
  fullName: RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2, RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool IntVectorsOpposite(IntVector2 a, IntVector2 b)
    parameters:
    - id: a
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    - id: b
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.IntVectorsOpposite(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function IntVectorsOpposite(a As IntVector2, b As IntVector2) As Boolean
  overload: RWCustom.Custom.IntVectorsOpposite*
- uid: RWCustom.Custom.InsideRect(RWCustom.IntVector2,RWCustom.IntRect)
  commentId: M:RWCustom.Custom.InsideRect(RWCustom.IntVector2,RWCustom.IntRect)
  id: InsideRect(RWCustom.IntVector2,RWCustom.IntRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: InsideRect(IntVector2, IntRect)
  nameWithType: Custom.InsideRect(IntVector2, IntRect)
  fullName: RWCustom.Custom.InsideRect(RWCustom.IntVector2, RWCustom.IntRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.InsideRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool InsideRect(IntVector2 vec, IntRect rect)
    parameters:
    - id: vec
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.InsideRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: RWCustom.IntRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.InsideRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.InsideRect(RWCustom.IntVector2,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function InsideRect(vec As IntVector2, rect As IntRect) As Boolean
  overload: RWCustom.Custom.InsideRect*
- uid: RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2,FloatRect)
  commentId: M:RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2,FloatRect)
  id: VectorRectDistance(UnityEngine.Vector2,FloatRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: VectorRectDistance(Vector2, FloatRect)
  nameWithType: Custom.VectorRectDistance(Vector2, FloatRect)
  fullName: RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2, FloatRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2,FloatRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float VectorRectDistance(Vector2 vec, FloatRect rect)
    parameters:
    - id: vec
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.VectorRectDistance(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function VectorRectDistance(vec As Vector2, rect As FloatRect) As Single
  overload: RWCustom.Custom.VectorRectDistance*
- uid: RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)
  commentId: M:RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)
  id: InsideRect(System.Int32,System.Int32,RWCustom.IntRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: InsideRect(int, int, IntRect)
  nameWithType: Custom.InsideRect(int, int, IntRect)
  fullName: RWCustom.Custom.InsideRect(int, int, RWCustom.IntRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool InsideRect(int x, int y, IntRect rect)
    parameters:
    - id: x
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: RWCustom.IntRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.InsideRect(System.Int32,System.Int32,RWCustom.IntRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function InsideRect(x As Integer, y As Integer, rect As IntRect) As Boolean
  overload: RWCustom.Custom.InsideRect*
  nameWithType.vb: Custom.InsideRect(Integer, Integer, IntRect)
  fullName.vb: RWCustom.Custom.InsideRect(Integer, Integer, RWCustom.IntRect)
  name.vb: InsideRect(Integer, Integer, IntRect)
- uid: RWCustom.Custom.InRange(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.InRange(System.Single,System.Single,System.Single)
  id: InRange(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: InRange(float, float, float)
  nameWithType: Custom.InRange(float, float, float)
  fullName: RWCustom.Custom.InRange(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.InRange(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool InRange(float f, float xA, float xB)
    parameters:
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:RWCustom.Custom.InRange(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: xA
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>xA</parameter>
            <parameter>M:RWCustom.Custom.InRange(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: xB
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>xB</parameter>
            <parameter>M:RWCustom.Custom.InRange(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.InRange(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function InRange(f As Single, xA As Single, xB As Single) As Boolean
  overload: RWCustom.Custom.InRange*
  nameWithType.vb: Custom.InRange(Single, Single, Single)
  fullName.vb: RWCustom.Custom.InRange(Single, Single, Single)
  name.vb: InRange(Single, Single, Single)
- uid: RWCustom.Custom.RectZone(UnityEngine.Vector2,FloatRect)
  commentId: M:RWCustom.Custom.RectZone(UnityEngine.Vector2,FloatRect)
  id: RectZone(UnityEngine.Vector2,FloatRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RectZone(Vector2, FloatRect)
  nameWithType: Custom.RectZone(Vector2, FloatRect)
  fullName: RWCustom.Custom.RectZone(UnityEngine.Vector2, FloatRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RectZone(UnityEngine.Vector2,FloatRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2 RectZone(Vector2 pos, FloatRect rect)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:RWCustom.Custom.RectZone(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.RectZone(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    return:
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RectZone(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RectZone(pos As Vector2, rect As FloatRect) As IntVector2
  overload: RWCustom.Custom.RectZone*
- uid: RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)
  commentId: M:RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)
  id: VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: VisibleCornersOnRect(Vector2, FloatRect)
  nameWithType: Custom.VisibleCornersOnRect(Vector2, FloatRect)
  fullName: RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2, FloatRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FloatRect.CornerLabel[] VisibleCornersOnRect(Vector2 viewPos, FloatRect rect)
    parameters:
    - id: viewPos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>viewPos</parameter>
            <parameter>M:RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    return:
      type: Global.FloatRect.CornerLabel[]
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.VisibleCornersOnRect(UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function VisibleCornersOnRect(viewPos As Vector2, rect As FloatRect) As FloatRect.CornerLabel()
  overload: RWCustom.Custom.VisibleCornersOnRect*
- uid: RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PushOutOfInvisibleArea(Vector2, Vector2, Vector2, FloatRect, bool, bool, bool, bool)
  nameWithType: Custom.PushOutOfInvisibleArea(Vector2, Vector2, Vector2, FloatRect, bool, bool, bool, bool)
  fullName: RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, FloatRect, bool, bool, bool, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 PushOutOfInvisibleArea(Vector2 viewPoint, Vector2 point, Vector2 lastPoint, FloatRect rct, bool useAcorner, bool useBcorner, bool useCcorner, bool useDcorner)
    parameters:
    - id: viewPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>viewPoint</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: point
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>point</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: lastPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lastPoint</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: rct
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rct</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: useAcorner
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>useAcorner</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: useBcorner
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>useBcorner</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: useCcorner
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>useCcorner</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: useDcorner
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>useDcorner</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,FloatRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PushOutOfInvisibleArea(viewPoint As Vector2, point As Vector2, lastPoint As Vector2, rct As FloatRect, useAcorner As Boolean, useBcorner As Boolean, useCcorner As Boolean, useDcorner As Boolean) As Vector2
  overload: RWCustom.Custom.PushOutOfInvisibleArea*
  nameWithType.vb: Custom.PushOutOfInvisibleArea(Vector2, Vector2, Vector2, FloatRect, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: RWCustom.Custom.PushOutOfInvisibleArea(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, FloatRect, Boolean, Boolean, Boolean, Boolean)
  name.vb: PushOutOfInvisibleArea(Vector2, Vector2, Vector2, FloatRect, Boolean, Boolean, Boolean, Boolean)
- uid: RWCustom.Custom.RandomPointInRect(FloatRect)
  commentId: M:RWCustom.Custom.RandomPointInRect(FloatRect)
  id: RandomPointInRect(FloatRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RandomPointInRect(FloatRect)
  nameWithType: Custom.RandomPointInRect(FloatRect)
  fullName: RWCustom.Custom.RandomPointInRect(FloatRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RandomPointInRect(FloatRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 RandomPointInRect(FloatRect rct)
    parameters:
    - id: rct
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rct</parameter>
            <parameter>M:RWCustom.Custom.RandomPointInRect(FloatRect)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RandomPointInRect(FloatRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RandomPointInRect(rct As FloatRect) As Vector2
  overload: RWCustom.Custom.RandomPointInRect*
- uid: RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  commentId: M:RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  id: RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RectCollision(Vector2, Vector2, FloatRect)
  nameWithType: Custom.RectCollision(Vector2, Vector2, FloatRect)
  fullName: RWCustom.Custom.RectCollision(UnityEngine.Vector2, UnityEngine.Vector2, FloatRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FloatRect RectCollision(Vector2 pos, Vector2 lastPos, FloatRect rct)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: lastPos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lastPos</parameter>
            <parameter>M:RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: rct
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rct</parameter>
            <parameter>M:RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    return:
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RectCollision(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RectCollision(pos As Vector2, lastPos As Vector2, rct As FloatRect) As FloatRect
  overload: RWCustom.Custom.RectCollision*
- uid: RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  commentId: M:RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  id: AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: AreIntVectorsNeighbors(IntVector2, IntVector2)
  nameWithType: Custom.AreIntVectorsNeighbors(IntVector2, IntVector2)
  fullName: RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2, RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool AreIntVectorsNeighbors(IntVector2 A, IntVector2 B)
    parameters:
    - id: A
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    - id: B
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.AreIntVectorsNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function AreIntVectorsNeighbors(A As IntVector2, B As IntVector2) As Boolean
  overload: RWCustom.Custom.AreIntVectorsNeighbors*
- uid: RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  commentId: M:RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  id: AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: AreIntVectorsDiagonalNeighbors(IntVector2, IntVector2)
  nameWithType: Custom.AreIntVectorsDiagonalNeighbors(IntVector2, IntVector2)
  fullName: RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2, RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool AreIntVectorsDiagonalNeighbors(IntVector2 A, IntVector2 B)
    parameters:
    - id: A
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    - id: B
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.AreIntVectorsDiagonalNeighbors(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function AreIntVectorsDiagonalNeighbors(A As IntVector2, B As IntVector2) As Boolean
  overload: RWCustom.Custom.AreIntVectorsDiagonalNeighbors*
- uid: RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: IsPointBetweenPoints(Vector2, Vector2, Vector2)
  nameWithType: Custom.IsPointBetweenPoints(Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool IsPointBetweenPoints(Vector2 A, Vector2 B, Vector2 v2)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: v2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v2</parameter>
            <parameter>M:RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.IsPointBetweenPoints(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function IsPointBetweenPoints(A As Vector2, B As Vector2, v2 As Vector2) As Boolean
  overload: RWCustom.Custom.IsPointBetweenPoints*
- uid: RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: VerticalCrossPoint(Vector2, Vector2, float)
  nameWithType: Custom.VerticalCrossPoint(Vector2, Vector2, float)
  fullName: RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 VerticalCrossPoint(Vector2 A, Vector2 B, float X)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: X
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>X</parameter>
            <parameter>M:RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function VerticalCrossPoint(A As Vector2, B As Vector2, X As Single) As Vector2
  overload: RWCustom.Custom.VerticalCrossPoint*
  nameWithType.vb: Custom.VerticalCrossPoint(Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.VerticalCrossPoint(UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: VerticalCrossPoint(Vector2, Vector2, Single)
- uid: RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: HorizontalCrossPoint(Vector2, Vector2, float)
  nameWithType: Custom.HorizontalCrossPoint(Vector2, Vector2, float)
  fullName: RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 HorizontalCrossPoint(Vector2 A, Vector2 B, float Y)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: Y
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Y</parameter>
            <parameter>M:RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function HorizontalCrossPoint(A As Vector2, B As Vector2, Y As Single) As Vector2
  overload: RWCustom.Custom.HorizontalCrossPoint*
  nameWithType.vb: Custom.HorizontalCrossPoint(Vector2, Vector2, Single)
  fullName.vb: RWCustom.Custom.HorizontalCrossPoint(UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: HorizontalCrossPoint(Vector2, Vector2, Single)
- uid: RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LineIntersection(Vector2, Vector2, Vector2, Vector2)
  nameWithType: Custom.LineIntersection(Vector2, Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.LineIntersection(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 LineIntersection(Vector2 A1, Vector2 B1, Vector2 A2, Vector2 B2)
    parameters:
    - id: A1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A1</parameter>
            <parameter>M:RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B1</parameter>
            <parameter>M:RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: A2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A2</parameter>
            <parameter>M:RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B2</parameter>
            <parameter>M:RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LineIntersection(A1 As Vector2, B1 As Vector2, A2 As Vector2, B2 As Vector2) As Vector2
  overload: RWCustom.Custom.LineIntersection*
- uid: RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  commentId: M:RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  id: PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PointBehindRect(Vector2, Vector2, FloatRect)
  nameWithType: Custom.PointBehindRect(Vector2, Vector2, FloatRect)
  fullName: RWCustom.Custom.PointBehindRect(UnityEngine.Vector2, UnityEngine.Vector2, FloatRect)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool PointBehindRect(Vector2 lookingPoint, Vector2 lookedAtPoint, FloatRect rect)
    parameters:
    - id: lookingPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lookingPoint</parameter>
            <parameter>M:RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: lookedAtPoint
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lookedAtPoint</parameter>
            <parameter>M:RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    - id: rect
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rect</parameter>
            <parameter>M:RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PointBehindRect(UnityEngine.Vector2,UnityEngine.Vector2,FloatRect)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PointBehindRect(lookingPoint As Vector2, lookedAtPoint As Vector2, rect As FloatRect) As Boolean
  overload: RWCustom.Custom.PointBehindRect*
- uid: RWCustom.Custom.PerpIntVec(RWCustom.IntVector2)
  commentId: M:RWCustom.Custom.PerpIntVec(RWCustom.IntVector2)
  id: PerpIntVec(RWCustom.IntVector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PerpIntVec(IntVector2)
  nameWithType: Custom.PerpIntVec(IntVector2)
  fullName: RWCustom.Custom.PerpIntVec(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PerpIntVec(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntVector2 PerpIntVec(IntVector2 intVec)
    parameters:
    - id: intVec
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>intVec</parameter>
            <parameter>M:RWCustom.Custom.PerpIntVec(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PerpIntVec(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PerpIntVec(intVec As IntVector2) As IntVector2
  overload: RWCustom.Custom.PerpIntVec*
- uid: RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ClosestPointOnLine(Vector2, Vector2, Vector2)
  nameWithType: Custom.ClosestPointOnLine(Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 ClosestPointOnLine(Vector2 A, Vector2 B, Vector2 P)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: P
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>P</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ClosestPointOnLine(A As Vector2, B As Vector2, P As Vector2) As Vector2
  overload: RWCustom.Custom.ClosestPointOnLine*
- uid: RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)
  commentId: M:RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)
  id: ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ManhattanDistance(IntVector2, IntVector2)
  nameWithType: Custom.ManhattanDistance(IntVector2, IntVector2)
  fullName: RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2, RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int ManhattanDistance(IntVector2 a, IntVector2 b)
    parameters:
    - id: a
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    - id: b
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ManhattanDistance(RWCustom.IntVector2,RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ManhattanDistance(a As IntVector2, b As IntVector2) As Integer
  overload: RWCustom.Custom.ManhattanDistance*
- uid: RWCustom.Custom.ManhattanDistance(WorldCoordinate,WorldCoordinate)
  commentId: M:RWCustom.Custom.ManhattanDistance(WorldCoordinate,WorldCoordinate)
  id: ManhattanDistance(WorldCoordinate,WorldCoordinate)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ManhattanDistance(WorldCoordinate, WorldCoordinate)
  nameWithType: Custom.ManhattanDistance(WorldCoordinate, WorldCoordinate)
  fullName: RWCustom.Custom.ManhattanDistance(WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ManhattanDistance(WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int ManhattanDistance(WorldCoordinate a, WorldCoordinate b)
    parameters:
    - id: a
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.ManhattanDistance(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:RWCustom.Custom.ManhattanDistance(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ManhattanDistance(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ManhattanDistance(a As WorldCoordinate, b As WorldCoordinate) As Integer
  overload: RWCustom.Custom.ManhattanDistance*
- uid: RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)
  commentId: M:RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)
  id: WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: WorldCoordFloatDist(WorldCoordinate, WorldCoordinate)
  nameWithType: Custom.WorldCoordFloatDist(WorldCoordinate, WorldCoordinate)
  fullName: RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float WorldCoordFloatDist(WorldCoordinate a, WorldCoordinate b)
    parameters:
    - id: a
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.WorldCoordFloatDist(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function WorldCoordFloatDist(a As WorldCoordinate, b As WorldCoordinate) As Single
  overload: RWCustom.Custom.WorldCoordFloatDist*
- uid: RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)
  commentId: M:RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)
  id: BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: BetweenRoomsDistance(World, WorldCoordinate, WorldCoordinate)
  nameWithType: Custom.BetweenRoomsDistance(World, WorldCoordinate, WorldCoordinate)
  fullName: RWCustom.Custom.BetweenRoomsDistance(World, WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BetweenRoomsDistance(World world, WorldCoordinate a, WorldCoordinate b)
    parameters:
    - id: world
      type: Global.World
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>world</parameter>
            <parameter>M:RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: a
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.BetweenRoomsDistance(World,WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BetweenRoomsDistance(world As World, a As WorldCoordinate, b As WorldCoordinate) As Single
  overload: RWCustom.Custom.BetweenRoomsDistance*
- uid: RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DistanceToLine(Vector2, Vector2, Vector2)
  nameWithType: Custom.DistanceToLine(Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.DistanceToLine(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float DistanceToLine(Vector2 V, Vector2 l2, Vector2 l1)
    parameters:
    - id: V
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>V</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: l2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l2</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: l1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l1</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DistanceToLine(V As Vector2, l2 As Vector2, l1 As Vector2) As Single
  overload: RWCustom.Custom.DistanceToLine*
- uid: RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)
  commentId: M:RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)
  id: DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DistanceToLine(float2, float2, float2)
  nameWithType: Custom.DistanceToLine(float2, float2, float2)
  fullName: RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2, Unity.Mathematics.float2, Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float DistanceToLine(float2 V, float2 l2, float2 l1)
    parameters:
    - id: V
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>V</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    - id: l2
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l2</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    - id: l1
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l1</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DistanceToLine(Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DistanceToLine(V As float2, l2 As float2, l1 As float2) As Single
  overload: RWCustom.Custom.DistanceToLine*
- uid: RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: BetweenLines(Vector2, Vector2, Vector2, Vector2, Vector2)
  nameWithType: Custom.BetweenLines(Vector2, Vector2, Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.BetweenLines(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool BetweenLines(Vector2 V, Vector2 lA1, Vector2 lA2, Vector2 lB1, Vector2 lB2)
    parameters:
    - id: V
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>V</parameter>
            <parameter>M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: lA1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lA1</parameter>
            <parameter>M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: lA2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lA2</parameter>
            <parameter>M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: lB1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lB1</parameter>
            <parameter>M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: lB2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lB2</parameter>
            <parameter>M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.BetweenLines(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BetweenLines(V As Vector2, lA1 As Vector2, lA2 As Vector2, lB1 As Vector2, lB2 As Vector2) As Boolean
  overload: RWCustom.Custom.BetweenLines*
- uid: RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PointInTriangle(Vector2, Vector2, Vector2, Vector2)
  nameWithType: Custom.PointInTriangle(Vector2, Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.PointInTriangle(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool PointInTriangle(Vector2 pt, Vector2 v1, Vector2 v2, Vector2 v3)
    parameters:
    - id: pt
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pt</parameter>
            <parameter>M:RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: v1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v1</parameter>
            <parameter>M:RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: v2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v2</parameter>
            <parameter>M:RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: v3
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v3</parameter>
            <parameter>M:RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PointInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PointInTriangle(pt As Vector2, v1 As Vector2, v2 As Vector2, v3 As Vector2) As Boolean
  overload: RWCustom.Custom.PointInTriangle*
- uid: RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)
  commentId: M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)
  id: MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: MakeWorldCoordinate(IntVector2, int)
  nameWithType: Custom.MakeWorldCoordinate(IntVector2, int)
  fullName: RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static WorldCoordinate MakeWorldCoordinate(IntVector2 pos, int room)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)</parameter>
          </include>
        </markup>
    - id: room
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MakeWorldCoordinate(pos As IntVector2, room As Integer) As WorldCoordinate
  overload: RWCustom.Custom.MakeWorldCoordinate*
  nameWithType.vb: Custom.MakeWorldCoordinate(IntVector2, Integer)
  fullName.vb: RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2, Integer)
  name.vb: MakeWorldCoordinate(IntVector2, Integer)
- uid: RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)
  commentId: M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)
  id: MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: MakeWorldCoordinate(IntVector2, int, int)
  nameWithType: Custom.MakeWorldCoordinate(IntVector2, int, int)
  fullName: RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2, int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static WorldCoordinate MakeWorldCoordinate(IntVector2 pos, int room, int node)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: room
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: node
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>node</parameter>
            <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MakeWorldCoordinate(pos As IntVector2, room As Integer, node As Integer) As WorldCoordinate
  overload: RWCustom.Custom.MakeWorldCoordinate*
  nameWithType.vb: Custom.MakeWorldCoordinate(IntVector2, Integer, Integer)
  fullName.vb: RWCustom.Custom.MakeWorldCoordinate(RWCustom.IntVector2, Integer, Integer)
  name.vb: MakeWorldCoordinate(IntVector2, Integer, Integer)
- uid: RWCustom.Custom.MinusOneToOneRangeFloatInfluence(System.Single,System.Single)
  commentId: M:RWCustom.Custom.MinusOneToOneRangeFloatInfluence(System.Single,System.Single)
  id: MinusOneToOneRangeFloatInfluence(System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: MinusOneToOneRangeFloatInfluence(float, float)
  nameWithType: Custom.MinusOneToOneRangeFloatInfluence(float, float)
  fullName: RWCustom.Custom.MinusOneToOneRangeFloatInfluence(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.MinusOneToOneRangeFloatInfluence(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float MinusOneToOneRangeFloatInfluence(float f, float infl)
    parameters:
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:RWCustom.Custom.MinusOneToOneRangeFloatInfluence(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: infl
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>infl</parameter>
            <parameter>M:RWCustom.Custom.MinusOneToOneRangeFloatInfluence(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.MinusOneToOneRangeFloatInfluence(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MinusOneToOneRangeFloatInfluence(f As Single, infl As Single) As Single
  overload: RWCustom.Custom.MinusOneToOneRangeFloatInfluence*
  nameWithType.vb: Custom.MinusOneToOneRangeFloatInfluence(Single, Single)
  fullName.vb: RWCustom.Custom.MinusOneToOneRangeFloatInfluence(Single, Single)
  name.vb: MinusOneToOneRangeFloatInfluence(Single, Single)
- uid: RWCustom.Custom.SCurve(System.Single,System.Single)
  commentId: M:RWCustom.Custom.SCurve(System.Single,System.Single)
  id: SCurve(System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: SCurve(float, float)
  nameWithType: Custom.SCurve(float, float)
  fullName: RWCustom.Custom.SCurve(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.SCurve(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float SCurve(float x, float k)
    parameters:
    - id: x
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:RWCustom.Custom.SCurve(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: k
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>k</parameter>
            <parameter>M:RWCustom.Custom.SCurve(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.SCurve(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function SCurve(x As Single, k As Single) As Single
  overload: RWCustom.Custom.SCurve*
  nameWithType.vb: Custom.SCurve(Single, Single)
  fullName.vb: RWCustom.Custom.SCurve(Single, Single)
  name.vb: SCurve(Single, Single)
- uid: RWCustom.Custom.BackwardsSCurve(System.Single,System.Single)
  commentId: M:RWCustom.Custom.BackwardsSCurve(System.Single,System.Single)
  id: BackwardsSCurve(System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: BackwardsSCurve(float, float)
  nameWithType: Custom.BackwardsSCurve(float, float)
  fullName: RWCustom.Custom.BackwardsSCurve(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.BackwardsSCurve(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BackwardsSCurve(float x, float k)
    parameters:
    - id: x
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:RWCustom.Custom.BackwardsSCurve(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: k
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>k</parameter>
            <parameter>M:RWCustom.Custom.BackwardsSCurve(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.BackwardsSCurve(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BackwardsSCurve(x As Single, k As Single) As Single
  overload: RWCustom.Custom.BackwardsSCurve*
  nameWithType.vb: Custom.BackwardsSCurve(Single, Single)
  fullName.vb: RWCustom.Custom.BackwardsSCurve(Single, Single)
  name.vb: BackwardsSCurve(Single, Single)
- uid: RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)
  id: InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: InverseKinematic(Vector2, Vector2, float, float, float)
  nameWithType: Custom.InverseKinematic(Vector2, Vector2, float, float, float)
  fullName: RWCustom.Custom.InverseKinematic(UnityEngine.Vector2, UnityEngine.Vector2, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 InverseKinematic(Vector2 va, Vector2 vc, float A, float B, float flip)
    parameters:
    - id: va
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>va</parameter>
            <parameter>M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: vc
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vc</parameter>
            <parameter>M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: A
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: B
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: flip
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flip</parameter>
            <parameter>M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.InverseKinematic(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function InverseKinematic(va As Vector2, vc As Vector2, A As Single, B As Single, flip As Single) As Vector2
  overload: RWCustom.Custom.InverseKinematic*
  nameWithType.vb: Custom.InverseKinematic(Vector2, Vector2, Single, Single, Single)
  fullName.vb: RWCustom.Custom.InverseKinematic(UnityEngine.Vector2, UnityEngine.Vector2, Single, Single, Single)
  name.vb: InverseKinematic(Vector2, Vector2, Single, Single, Single)
- uid: RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)
  id: ClampedRandomVariation(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ClampedRandomVariation(float, float, float)
  nameWithType: Custom.ClampedRandomVariation(float, float, float)
  fullName: RWCustom.Custom.ClampedRandomVariation(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float ClampedRandomVariation(float baseValue, float maxDeviation, float k)
    parameters:
    - id: baseValue
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>baseValue</parameter>
            <parameter>M:RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: maxDeviation
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maxDeviation</parameter>
            <parameter>M:RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: k
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>k</parameter>
            <parameter>M:RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ClampedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ClampedRandomVariation(baseValue As Single, maxDeviation As Single, k As Single) As Single
  overload: RWCustom.Custom.ClampedRandomVariation*
  nameWithType.vb: Custom.ClampedRandomVariation(Single, Single, Single)
  fullName.vb: RWCustom.Custom.ClampedRandomVariation(Single, Single, Single)
  name.vb: ClampedRandomVariation(Single, Single, Single)
- uid: RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)
  id: WrappedRandomVariation(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: WrappedRandomVariation(float, float, float)
  nameWithType: Custom.WrappedRandomVariation(float, float, float)
  fullName: RWCustom.Custom.WrappedRandomVariation(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float WrappedRandomVariation(float baseValue, float maxDeviation, float k)
    parameters:
    - id: baseValue
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>baseValue</parameter>
            <parameter>M:RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: maxDeviation
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maxDeviation</parameter>
            <parameter>M:RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: k
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>k</parameter>
            <parameter>M:RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.WrappedRandomVariation(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function WrappedRandomVariation(baseValue As Single, maxDeviation As Single, k As Single) As Single
  overload: RWCustom.Custom.WrappedRandomVariation*
  nameWithType.vb: Custom.WrappedRandomVariation(Single, Single, Single)
  fullName.vb: RWCustom.Custom.WrappedRandomVariation(Single, Single, Single)
  name.vb: WrappedRandomVariation(Single, Single, Single)
- uid: RWCustom.Custom.RNV
  commentId: M:RWCustom.Custom.RNV
  id: RNV
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RNV()
  nameWithType: Custom.RNV()
  fullName: RWCustom.Custom.RNV()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RNV</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 RNV()
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RNV</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RNV() As Vector2
  overload: RWCustom.Custom.RNV*
- uid: RWCustom.Custom.RNVf2
  commentId: M:RWCustom.Custom.RNVf2
  id: RNVf2
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RNVf2()
  nameWithType: Custom.RNVf2()
  fullName: RWCustom.Custom.RNVf2()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RNVf2</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float2 RNVf2()
    return:
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RNVf2</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RNVf2() As float2
  overload: RWCustom.Custom.RNVf2*
- uid: RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpMap(float, float, float, float, float)
  nameWithType: Custom.LerpMap(float, float, float, float, float)
  fullName: RWCustom.Custom.LerpMap(float, float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpMap(float val, float fromA, float toA, float fromB, float toB)
    parameters:
    - id: val
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>val</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: fromA
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromA</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: toA
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toA</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: fromB
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromB</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: toB
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toB</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpMap(val As Single, fromA As Single, toA As Single, fromB As Single, toB As Single) As Single
  overload: RWCustom.Custom.LerpMap*
  nameWithType.vb: Custom.LerpMap(Single, Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpMap(Single, Single, Single, Single, Single)
  name.vb: LerpMap(Single, Single, Single, Single, Single)
- uid: RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpMap(float, float, float, float, float, float)
  nameWithType: Custom.LerpMap(float, float, float, float, float, float)
  fullName: RWCustom.Custom.LerpMap(float, float, float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpMap(float val, float fromA, float toA, float fromB, float toB, float exponent)
    parameters:
    - id: val
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>val</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: fromA
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromA</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: toA
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toA</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: fromB
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromB</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: toB
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toB</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: exponent
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exponent</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpMap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpMap(val As Single, fromA As Single, toA As Single, fromB As Single, toB As Single, exponent As Single) As Single
  overload: RWCustom.Custom.LerpMap*
  nameWithType.vb: Custom.LerpMap(Single, Single, Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpMap(Single, Single, Single, Single, Single, Single)
  name.vb: LerpMap(Single, Single, Single, Single, Single, Single)
- uid: RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)
  id: ExponentMap(System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ExponentMap(float, float, float, float)
  nameWithType: Custom.ExponentMap(float, float, float, float)
  fullName: RWCustom.Custom.ExponentMap(float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float ExponentMap(float val, float rangeLower, float rangeHigher, float exponent)
    parameters:
    - id: val
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>val</parameter>
            <parameter>M:RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: rangeLower
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rangeLower</parameter>
            <parameter>M:RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: rangeHigher
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rangeHigher</parameter>
            <parameter>M:RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: exponent
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exponent</parameter>
            <parameter>M:RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ExponentMap(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ExponentMap(val As Single, rangeLower As Single, rangeHigher As Single, exponent As Single) As Single
  overload: RWCustom.Custom.ExponentMap*
  nameWithType.vb: Custom.ExponentMap(Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.ExponentMap(Single, Single, Single, Single)
  name.vb: ExponentMap(Single, Single, Single, Single)
- uid: RWCustom.Custom.Screen(System.Single,System.Single)
  commentId: M:RWCustom.Custom.Screen(System.Single,System.Single)
  id: Screen(System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Screen(float, float)
  nameWithType: Custom.Screen(float, float)
  fullName: RWCustom.Custom.Screen(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Screen(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Screen(float A, float B)
    parameters:
    - id: A
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.Screen(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: B
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.Screen(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Screen(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Screen(A As Single, B As Single) As Single
  overload: RWCustom.Custom.Screen*
  nameWithType.vb: Custom.Screen(Single, Single)
  fullName.vb: RWCustom.Custom.Screen(Single, Single)
  name.vb: Screen(Single, Single)
- uid: RWCustom.Custom.PushFromHalf(System.Single,System.Single)
  commentId: M:RWCustom.Custom.PushFromHalf(System.Single,System.Single)
  id: PushFromHalf(System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PushFromHalf(float, float)
  nameWithType: Custom.PushFromHalf(float, float)
  fullName: RWCustom.Custom.PushFromHalf(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PushFromHalf(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float PushFromHalf(float val, float pushExponent)
    parameters:
    - id: val
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>val</parameter>
            <parameter>M:RWCustom.Custom.PushFromHalf(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: pushExponent
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pushExponent</parameter>
            <parameter>M:RWCustom.Custom.PushFromHalf(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PushFromHalf(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PushFromHalf(val As Single, pushExponent As Single) As Single
  overload: RWCustom.Custom.PushFromHalf*
  nameWithType.vb: Custom.PushFromHalf(Single, Single)
  fullName.vb: RWCustom.Custom.PushFromHalf(Single, Single)
  name.vb: PushFromHalf(Single, Single)
- uid: RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)
  id: HSL2RGB(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: HSL2RGB(float, float, float)
  nameWithType: Custom.HSL2RGB(float, float, float)
  fullName: RWCustom.Custom.HSL2RGB(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color HSL2RGB(float h, float sl, float l)
    parameters:
    - id: h
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>h</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: sl
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sl</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: l
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function HSL2RGB(h As Single, sl As Single, l As Single) As Color
  overload: RWCustom.Custom.HSL2RGB*
  nameWithType.vb: Custom.HSL2RGB(Single, Single, Single)
  fullName.vb: RWCustom.Custom.HSL2RGB(Single, Single, Single)
  name.vb: HSL2RGB(Single, Single, Single)
- uid: RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)
  id: HSL2RGB(System.Single,System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: HSL2RGB(float, float, float, float)
  nameWithType: Custom.HSL2RGB(float, float, float, float)
  fullName: RWCustom.Custom.HSL2RGB(float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color HSL2RGB(float h, float sl, float l, float a)
    parameters:
    - id: h
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>h</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: sl
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sl</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: l
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: a
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.HSL2RGB(System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function HSL2RGB(h As Single, sl As Single, l As Single, a As Single) As Color
  overload: RWCustom.Custom.HSL2RGB*
  nameWithType.vb: Custom.HSL2RGB(Single, Single, Single, Single)
  fullName.vb: RWCustom.Custom.HSL2RGB(Single, Single, Single, Single)
  name.vb: HSL2RGB(Single, Single, Single, Single)
- uid: RWCustom.Custom.RGB2RGBA(UnityEngine.Color,System.Single)
  commentId: M:RWCustom.Custom.RGB2RGBA(UnityEngine.Color,System.Single)
  id: RGB2RGBA(UnityEngine.Color,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RGB2RGBA(Color, float)
  nameWithType: Custom.RGB2RGBA(Color, float)
  fullName: RWCustom.Custom.RGB2RGBA(UnityEngine.Color, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RGB2RGBA(UnityEngine.Color,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color RGB2RGBA(Color col, float alpha)
    parameters:
    - id: col
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>col</parameter>
            <parameter>M:RWCustom.Custom.RGB2RGBA(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    - id: alpha
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>alpha</parameter>
            <parameter>M:RWCustom.Custom.RGB2RGBA(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RGB2RGBA(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RGB2RGBA(col As Color, alpha As Single) As Color
  overload: RWCustom.Custom.RGB2RGBA*
  nameWithType.vb: Custom.RGB2RGBA(Color, Single)
  fullName.vb: RWCustom.Custom.RGB2RGBA(UnityEngine.Color, Single)
  name.vb: RGB2RGBA(Color, Single)
- uid: RWCustom.Custom.RGBA2RGB(UnityEngine.Color)
  commentId: M:RWCustom.Custom.RGBA2RGB(UnityEngine.Color)
  id: RGBA2RGB(UnityEngine.Color)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RGBA2RGB(Color)
  nameWithType: Custom.RGBA2RGB(Color)
  fullName: RWCustom.Custom.RGBA2RGB(UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RGBA2RGB(UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color RGBA2RGB(Color col)
    parameters:
    - id: col
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>col</parameter>
            <parameter>M:RWCustom.Custom.RGBA2RGB(UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RGBA2RGB(UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RGBA2RGB(col As Color) As Color
  overload: RWCustom.Custom.RGBA2RGB*
- uid: RWCustom.Custom.ColorToVec3(UnityEngine.Color)
  commentId: M:RWCustom.Custom.ColorToVec3(UnityEngine.Color)
  id: ColorToVec3(UnityEngine.Color)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ColorToVec3(Color)
  nameWithType: Custom.ColorToVec3(Color)
  fullName: RWCustom.Custom.ColorToVec3(UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ColorToVec3(UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector3 ColorToVec3(Color col)
    parameters:
    - id: col
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>col</parameter>
            <parameter>M:RWCustom.Custom.ColorToVec3(UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector3
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ColorToVec3(UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ColorToVec3(col As Color) As Vector3
  overload: RWCustom.Custom.ColorToVec3*
- uid: RWCustom.Custom.Vec3ToColor(UnityEngine.Vector3)
  commentId: M:RWCustom.Custom.Vec3ToColor(UnityEngine.Vector3)
  id: Vec3ToColor(UnityEngine.Vector3)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Vec3ToColor(Vector3)
  nameWithType: Custom.Vec3ToColor(Vector3)
  fullName: RWCustom.Custom.Vec3ToColor(UnityEngine.Vector3)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Vec3ToColor(UnityEngine.Vector3)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color Vec3ToColor(Vector3 vec)
    parameters:
    - id: vec
      type: UnityEngine.Vector3
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.Vec3ToColor(UnityEngine.Vector3)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Vec3ToColor(UnityEngine.Vector3)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Vec3ToColor(vec As Vector3) As Color
  overload: RWCustom.Custom.Vec3ToColor*
- uid: RWCustom.Custom.Desaturate(UnityEngine.Color,System.Single)
  commentId: M:RWCustom.Custom.Desaturate(UnityEngine.Color,System.Single)
  id: Desaturate(UnityEngine.Color,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Desaturate(Color, float)
  nameWithType: Custom.Desaturate(Color, float)
  fullName: RWCustom.Custom.Desaturate(UnityEngine.Color, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Desaturate(UnityEngine.Color,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color Desaturate(Color col, float desaturate)
    parameters:
    - id: col
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>col</parameter>
            <parameter>M:RWCustom.Custom.Desaturate(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    - id: desaturate
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>desaturate</parameter>
            <parameter>M:RWCustom.Custom.Desaturate(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Desaturate(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Desaturate(col As Color, desaturate As Single) As Color
  overload: RWCustom.Custom.Desaturate*
  nameWithType.vb: Custom.Desaturate(Color, Single)
  fullName.vb: RWCustom.Custom.Desaturate(UnityEngine.Color, Single)
  name.vb: Desaturate(Color, Single)
- uid: RWCustom.Custom.Saturate(UnityEngine.Color,System.Single)
  commentId: M:RWCustom.Custom.Saturate(UnityEngine.Color,System.Single)
  id: Saturate(UnityEngine.Color,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Saturate(Color, float)
  nameWithType: Custom.Saturate(Color, float)
  fullName: RWCustom.Custom.Saturate(UnityEngine.Color, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Saturate(UnityEngine.Color,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color Saturate(Color col, float saturate)
    parameters:
    - id: col
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>col</parameter>
            <parameter>M:RWCustom.Custom.Saturate(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    - id: saturate
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>saturate</parameter>
            <parameter>M:RWCustom.Custom.Saturate(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Saturate(UnityEngine.Color,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Saturate(col As Color, saturate As Single) As Color
  overload: RWCustom.Custom.Saturate*
  nameWithType.vb: Custom.Saturate(Color, Single)
  fullName.vb: RWCustom.Custom.Saturate(UnityEngine.Color, Single)
  name.vb: Saturate(Color, Single)
- uid: RWCustom.Custom.QuickSaturation(UnityEngine.Color)
  commentId: M:RWCustom.Custom.QuickSaturation(UnityEngine.Color)
  id: QuickSaturation(UnityEngine.Color)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: QuickSaturation(Color)
  nameWithType: Custom.QuickSaturation(Color)
  fullName: RWCustom.Custom.QuickSaturation(UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.QuickSaturation(UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float QuickSaturation(Color col)
    parameters:
    - id: col
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>col</parameter>
            <parameter>M:RWCustom.Custom.QuickSaturation(UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.QuickSaturation(UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function QuickSaturation(col As Color) As Single
  overload: RWCustom.Custom.QuickSaturation*
- uid: RWCustom.Custom.DistanceBetweenZeroToOneFloats(System.Single,System.Single)
  commentId: M:RWCustom.Custom.DistanceBetweenZeroToOneFloats(System.Single,System.Single)
  id: DistanceBetweenZeroToOneFloats(System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: DistanceBetweenZeroToOneFloats(float, float)
  nameWithType: Custom.DistanceBetweenZeroToOneFloats(float, float)
  fullName: RWCustom.Custom.DistanceBetweenZeroToOneFloats(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.DistanceBetweenZeroToOneFloats(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float DistanceBetweenZeroToOneFloats(float a, float b)
    parameters:
    - id: a
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:RWCustom.Custom.DistanceBetweenZeroToOneFloats(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: b
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:RWCustom.Custom.DistanceBetweenZeroToOneFloats(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.DistanceBetweenZeroToOneFloats(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function DistanceBetweenZeroToOneFloats(a As Single, b As Single) As Single
  overload: RWCustom.Custom.DistanceBetweenZeroToOneFloats*
  nameWithType.vb: Custom.DistanceBetweenZeroToOneFloats(Single, Single)
  fullName.vb: RWCustom.Custom.DistanceBetweenZeroToOneFloats(Single, Single)
  name.vb: DistanceBetweenZeroToOneFloats(Single, Single)
- uid: RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ClosestPointOnLineSegment(Vector2, Vector2, Vector2)
  nameWithType: Custom.ClosestPointOnLineSegment(Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 ClosestPointOnLineSegment(Vector2 A, Vector2 B, Vector2 testPos)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: testPos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>testPos</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ClosestPointOnLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ClosestPointOnLineSegment(A As Vector2, B As Vector2, testPos As Vector2) As Vector2
  overload: RWCustom.Custom.ClosestPointOnLineSegment*
- uid: RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2,System.Single)
  id: Vec3FromVec2(UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Vec3FromVec2(Vector2, float)
  nameWithType: Custom.Vec3FromVec2(Vector2, float)
  fullName: RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector3 Vec3FromVec2(Vector2 v, float f)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v</parameter>
            <parameter>M:RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector3
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Vec3FromVec2(v As Vector2, f As Single) As Vector3
  overload: RWCustom.Custom.Vec3FromVec2*
  nameWithType.vb: Custom.Vec3FromVec2(Vector2, Single)
  fullName.vb: RWCustom.Custom.Vec3FromVec2(UnityEngine.Vector2, Single)
  name.vb: Vec3FromVec2(Vector2, Single)
- uid: RWCustom.Custom.xorEncrypt(System.String,System.Int32)
  commentId: M:RWCustom.Custom.xorEncrypt(System.String,System.Int32)
  id: xorEncrypt(System.String,System.Int32)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: xorEncrypt(string, int)
  nameWithType: Custom.xorEncrypt(string, int)
  fullName: RWCustom.Custom.xorEncrypt(string, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.xorEncrypt(System.String,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string xorEncrypt(string sA, int displace)
    parameters:
    - id: sA
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sA</parameter>
            <parameter>M:RWCustom.Custom.xorEncrypt(System.String,System.Int32)</parameter>
          </include>
        </markup>
    - id: displace
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>displace</parameter>
            <parameter>M:RWCustom.Custom.xorEncrypt(System.String,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.xorEncrypt(System.String,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function xorEncrypt(sA As String, displace As Integer) As String
  overload: RWCustom.Custom.xorEncrypt*
  nameWithType.vb: Custom.xorEncrypt(String, Integer)
  fullName.vb: RWCustom.Custom.xorEncrypt(String, Integer)
  name.vb: xorEncrypt(String, Integer)
- uid: RWCustom.Custom.Md5Sum(System.String)
  commentId: M:RWCustom.Custom.Md5Sum(System.String)
  id: Md5Sum(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Md5Sum(string)
  nameWithType: Custom.Md5Sum(string)
  fullName: RWCustom.Custom.Md5Sum(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Md5Sum(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string Md5Sum(string strToEncrypt)
    parameters:
    - id: strToEncrypt
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>strToEncrypt</parameter>
            <parameter>M:RWCustom.Custom.Md5Sum(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Md5Sum(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Md5Sum(strToEncrypt As String) As String
  overload: RWCustom.Custom.Md5Sum*
  nameWithType.vb: Custom.Md5Sum(String)
  fullName.vb: RWCustom.Custom.Md5Sum(String)
  name.vb: Md5Sum(String)
- uid: RWCustom.Custom.ToLiteral(System.String)
  commentId: M:RWCustom.Custom.ToLiteral(System.String)
  id: ToLiteral(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ToLiteral(string)
  nameWithType: Custom.ToLiteral(string)
  fullName: RWCustom.Custom.ToLiteral(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ToLiteral(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string ToLiteral(string input)
    parameters:
    - id: input
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RWCustom.Custom.ToLiteral(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ToLiteral(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ToLiteral(input As String) As String
  overload: RWCustom.Custom.ToLiteral*
  nameWithType.vb: Custom.ToLiteral(String)
  fullName.vb: RWCustom.Custom.ToLiteral(String)
  name.vb: ToLiteral(String)
- uid: RWCustom.Custom.GetFont
  commentId: M:RWCustom.Custom.GetFont
  id: GetFont
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: GetFont()
  nameWithType: Custom.GetFont()
  fullName: RWCustom.Custom.GetFont()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.GetFont</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string GetFont()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.GetFont</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetFont() As String
  overload: RWCustom.Custom.GetFont*
- uid: RWCustom.Custom.GetDisplayFont
  commentId: M:RWCustom.Custom.GetDisplayFont
  id: GetDisplayFont
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: GetDisplayFont()
  nameWithType: Custom.GetDisplayFont()
  fullName: RWCustom.Custom.GetDisplayFont()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.GetDisplayFont</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string GetDisplayFont()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.GetDisplayFont</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetDisplayFont() As String
  overload: RWCustom.Custom.GetDisplayFont*
- uid: RWCustom.Custom.SignZero(System.Single)
  commentId: M:RWCustom.Custom.SignZero(System.Single)
  id: SignZero(System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: SignZero(float)
  nameWithType: Custom.SignZero(float)
  fullName: RWCustom.Custom.SignZero(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.SignZero(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float SignZero(float val)
    parameters:
    - id: val
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>val</parameter>
            <parameter>M:RWCustom.Custom.SignZero(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.SignZero(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function SignZero(val As Single) As Single
  overload: RWCustom.Custom.SignZero*
  nameWithType.vb: Custom.SignZero(Single)
  fullName.vb: RWCustom.Custom.SignZero(Single)
  name.vb: SignZero(Single)
- uid: RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2,System.Single)
  commentId: M:RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2,System.Single)
  id: rotateVectorDeg(UnityEngine.Vector2,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: rotateVectorDeg(Vector2, float)
  nameWithType: Custom.rotateVectorDeg(Vector2, float)
  fullName: RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 rotateVectorDeg(Vector2 vec, float degAng)
    parameters:
    - id: vec
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vec</parameter>
            <parameter>M:RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: degAng
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>degAng</parameter>
            <parameter>M:RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function rotateVectorDeg(vec As Vector2, degAng As Single) As Vector2
  overload: RWCustom.Custom.rotateVectorDeg*
  nameWithType.vb: Custom.rotateVectorDeg(Vector2, Single)
  fullName.vb: RWCustom.Custom.rotateVectorDeg(UnityEngine.Vector2, Single)
  name.vb: rotateVectorDeg(Vector2, Single)
- uid: RWCustom.Custom.hexToColor(System.String)
  commentId: M:RWCustom.Custom.hexToColor(System.String)
  id: hexToColor(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: hexToColor(string)
  nameWithType: Custom.hexToColor(string)
  fullName: RWCustom.Custom.hexToColor(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.hexToColor(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Color hexToColor(string hex)
    parameters:
    - id: hex
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hex</parameter>
            <parameter>M:RWCustom.Custom.hexToColor(System.String)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.hexToColor(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function hexToColor(hex As String) As Color
  overload: RWCustom.Custom.hexToColor*
  nameWithType.vb: Custom.hexToColor(String)
  fullName.vb: RWCustom.Custom.hexToColor(String)
  name.vb: hexToColor(String)
- uid: RWCustom.Custom.colorToHex(UnityEngine.Color)
  commentId: M:RWCustom.Custom.colorToHex(UnityEngine.Color)
  id: colorToHex(UnityEngine.Color)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: colorToHex(Color)
  nameWithType: Custom.colorToHex(Color)
  fullName: RWCustom.Custom.colorToHex(UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.colorToHex(UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string colorToHex(Color col)
    parameters:
    - id: col
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>col</parameter>
            <parameter>M:RWCustom.Custom.colorToHex(UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.colorToHex(UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function colorToHex(col As Color) As String
  overload: RWCustom.Custom.colorToHex*
- uid: RWCustom.Custom.RGB2HSL(UnityEngine.Color)
  commentId: M:RWCustom.Custom.RGB2HSL(UnityEngine.Color)
  id: RGB2HSL(UnityEngine.Color)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: RGB2HSL(Color)
  nameWithType: Custom.RGB2HSL(Color)
  fullName: RWCustom.Custom.RGB2HSL(UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.RGB2HSL(UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector3 RGB2HSL(Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>color</parameter>
            <parameter>M:RWCustom.Custom.RGB2HSL(UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector3
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.RGB2HSL(UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RGB2HSL(color As Color) As Vector3
  overload: RWCustom.Custom.RGB2HSL*
- uid: RWCustom.Custom.EncodeFloatRG(System.Single)
  commentId: M:RWCustom.Custom.EncodeFloatRG(System.Single)
  id: EncodeFloatRG(System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: EncodeFloatRG(float)
  nameWithType: Custom.EncodeFloatRG(float)
  fullName: RWCustom.Custom.EncodeFloatRG(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.EncodeFloatRG(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 EncodeFloatRG(float v)
    parameters:
    - id: v
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>v</parameter>
            <parameter>M:RWCustom.Custom.EncodeFloatRG(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.EncodeFloatRG(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function EncodeFloatRG(v As Single) As Vector2
  overload: RWCustom.Custom.EncodeFloatRG*
  nameWithType.vb: Custom.EncodeFloatRG(Single)
  fullName.vb: RWCustom.Custom.EncodeFloatRG(Single)
  name.vb: EncodeFloatRG(Single)
- uid: RWCustom.Custom.Mod(System.Single,System.Single)
  commentId: M:RWCustom.Custom.Mod(System.Single,System.Single)
  id: Mod(System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: Mod(float, float)
  nameWithType: Custom.Mod(float, float)
  fullName: RWCustom.Custom.Mod(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.Mod(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Mod(float f, float d)
    parameters:
    - id: f
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:RWCustom.Custom.Mod(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: d
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:RWCustom.Custom.Mod(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.Mod(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function [Mod](f As Single, d As Single) As Single
  overload: RWCustom.Custom.Mod*
  nameWithType.vb: Custom.Mod(Single, Single)
  fullName.vb: RWCustom.Custom.Mod(Single, Single)
  name.vb: Mod(Single, Single)
- uid: RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: PointInPoly4(Vector2, Vector2, Vector2, Vector2, Vector2)
  nameWithType: Custom.PointInPoly4(Vector2, Vector2, Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.PointInPoly4(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool PointInPoly4(Vector2 p, Vector2 r1, Vector2 r2, Vector2 r3, Vector2 r4)
    parameters:
    - id: p
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: r1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>r1</parameter>
            <parameter>M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: r2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>r2</parameter>
            <parameter>M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: r3
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>r3</parameter>
            <parameter>M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: r4
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>r4</parameter>
            <parameter>M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.PointInPoly4(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PointInPoly4(p As Vector2, r1 As Vector2, r2 As Vector2, r3 As Vector2, r4 As Vector2) As Boolean
  overload: RWCustom.Custom.PointInPoly4*
- uid: RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: TriArea(Vector2, Vector2, Vector2)
  nameWithType: Custom.TriArea(Vector2, Vector2, Vector2)
  fullName: RWCustom.Custom.TriArea(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float TriArea(Vector2 p1, Vector2 p2, Vector2 p3)
    parameters:
    - id: p1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p1</parameter>
            <parameter>M:RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: p2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p2</parameter>
            <parameter>M:RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: p3
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p3</parameter>
            <parameter>M:RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.TriArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function TriArea(p1 As Vector2, p2 As Vector2, p3 As Vector2) As Single
  overload: RWCustom.Custom.TriArea*
- uid: RWCustom.Custom.ToTitleCase(System.String)
  commentId: M:RWCustom.Custom.ToTitleCase(System.String)
  id: ToTitleCase(System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ToTitleCase(string)
  nameWithType: Custom.ToTitleCase(string)
  fullName: RWCustom.Custom.ToTitleCase(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ToTitleCase(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string ToTitleCase(string str)
    parameters:
    - id: str
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>str</parameter>
            <parameter>M:RWCustom.Custom.ToTitleCase(System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ToTitleCase(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ToTitleCase(str As String) As String
  overload: RWCustom.Custom.ToTitleCase*
  nameWithType.vb: Custom.ToTitleCase(String)
  fullName.vb: RWCustom.Custom.ToTitleCase(String)
  name.vb: ToTitleCase(String)
- uid: RWCustom.Custom.GetBaseFileNameWithoutPrefix(System.String,System.String)
  commentId: M:RWCustom.Custom.GetBaseFileNameWithoutPrefix(System.String,System.String)
  id: GetBaseFileNameWithoutPrefix(System.String,System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: GetBaseFileNameWithoutPrefix(string, string)
  nameWithType: Custom.GetBaseFileNameWithoutPrefix(string, string)
  fullName: RWCustom.Custom.GetBaseFileNameWithoutPrefix(string, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.GetBaseFileNameWithoutPrefix(System.String,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string GetBaseFileNameWithoutPrefix(string path, string prefix)
    parameters:
    - id: path
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:RWCustom.Custom.GetBaseFileNameWithoutPrefix(System.String,System.String)</parameter>
          </include>
        </markup>
    - id: prefix
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>prefix</parameter>
            <parameter>M:RWCustom.Custom.GetBaseFileNameWithoutPrefix(System.String,System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.GetBaseFileNameWithoutPrefix(System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetBaseFileNameWithoutPrefix(path As String, prefix As String) As String
  overload: RWCustom.Custom.GetBaseFileNameWithoutPrefix*
  nameWithType.vb: Custom.GetBaseFileNameWithoutPrefix(String, String)
  fullName.vb: RWCustom.Custom.GetBaseFileNameWithoutPrefix(String, String)
  name.vb: GetBaseFileNameWithoutPrefix(String, String)
- uid: RWCustom.Custom.ValidateSpacedDelimiter(System.String,System.String)
  commentId: M:RWCustom.Custom.ValidateSpacedDelimiter(System.String,System.String)
  id: ValidateSpacedDelimiter(System.String,System.String)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: ValidateSpacedDelimiter(string, string)
  nameWithType: Custom.ValidateSpacedDelimiter(string, string)
  fullName: RWCustom.Custom.ValidateSpacedDelimiter(string, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.ValidateSpacedDelimiter(System.String,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string ValidateSpacedDelimiter(string s, string delimiter)
    parameters:
    - id: s
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>s</parameter>
            <parameter>M:RWCustom.Custom.ValidateSpacedDelimiter(System.String,System.String)</parameter>
          </include>
        </markup>
    - id: delimiter
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>delimiter</parameter>
            <parameter>M:RWCustom.Custom.ValidateSpacedDelimiter(System.String,System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.ValidateSpacedDelimiter(System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ValidateSpacedDelimiter(s As String, delimiter As String) As String
  overload: RWCustom.Custom.ValidateSpacedDelimiter*
  nameWithType.vb: Custom.ValidateSpacedDelimiter(String, String)
  fullName.vb: RWCustom.Custom.ValidateSpacedDelimiter(String, String)
  name.vb: ValidateSpacedDelimiter(String, String)
- uid: RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)
  id: LerpQuadEaseIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpQuadEaseIn(float, float, float)
  nameWithType: Custom.LerpQuadEaseIn(float, float, float)
  fullName: RWCustom.Custom.LerpQuadEaseIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpQuadEaseIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpQuadEaseIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpQuadEaseIn*
  nameWithType.vb: Custom.LerpQuadEaseIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpQuadEaseIn(Single, Single, Single)
  name.vb: LerpQuadEaseIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)
  id: LerpQuadEaseOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpQuadEaseOut(float, float, float)
  nameWithType: Custom.LerpQuadEaseOut(float, float, float)
  fullName: RWCustom.Custom.LerpQuadEaseOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpQuadEaseOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpQuadEaseOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpQuadEaseOut*
  nameWithType.vb: Custom.LerpQuadEaseOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpQuadEaseOut(Single, Single, Single)
  name.vb: LerpQuadEaseOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)
  id: LerpSinEaseInOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpSinEaseInOut(float, float, float)
  nameWithType: Custom.LerpSinEaseInOut(float, float, float)
  fullName: RWCustom.Custom.LerpSinEaseInOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpSinEaseInOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpSinEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpSinEaseInOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpSinEaseInOut*
  nameWithType.vb: Custom.LerpSinEaseInOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpSinEaseInOut(Single, Single, Single)
  name.vb: LerpSinEaseInOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)
  id: LerpExpEaseIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpExpEaseIn(float, float, float)
  nameWithType: Custom.LerpExpEaseIn(float, float, float)
  fullName: RWCustom.Custom.LerpExpEaseIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpExpEaseIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpExpEaseIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpExpEaseIn*
  nameWithType.vb: Custom.LerpExpEaseIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpExpEaseIn(Single, Single, Single)
  name.vb: LerpExpEaseIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)
  id: LerpExpEaseOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpExpEaseOut(float, float, float)
  nameWithType: Custom.LerpExpEaseOut(float, float, float)
  fullName: RWCustom.Custom.LerpExpEaseOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpExpEaseOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpExpEaseOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpExpEaseOut*
  nameWithType.vb: Custom.LerpExpEaseOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpExpEaseOut(Single, Single, Single)
  name.vb: LerpExpEaseOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)
  id: LerpQuadEaseInOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpQuadEaseInOut(float, float, float)
  nameWithType: Custom.LerpQuadEaseInOut(float, float, float)
  fullName: RWCustom.Custom.LerpQuadEaseInOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpQuadEaseInOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpQuadEaseInOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpQuadEaseInOut*
  nameWithType.vb: Custom.LerpQuadEaseInOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpQuadEaseInOut(Single, Single, Single)
  name.vb: LerpQuadEaseInOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)
  id: LerpQuadEaseOutIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpQuadEaseOutIn(float, float, float)
  nameWithType: Custom.LerpQuadEaseOutIn(float, float, float)
  fullName: RWCustom.Custom.LerpQuadEaseOutIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpQuadEaseOutIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpQuadEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpQuadEaseOutIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpQuadEaseOutIn*
  nameWithType.vb: Custom.LerpQuadEaseOutIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpQuadEaseOutIn(Single, Single, Single)
  name.vb: LerpQuadEaseOutIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)
  id: LerpCircEaseIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpCircEaseIn(float, float, float)
  nameWithType: Custom.LerpCircEaseIn(float, float, float)
  fullName: RWCustom.Custom.LerpCircEaseIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpCircEaseIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpCircEaseIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpCircEaseIn*
  nameWithType.vb: Custom.LerpCircEaseIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpCircEaseIn(Single, Single, Single)
  name.vb: LerpCircEaseIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)
  id: LerpCircEaseOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpCircEaseOut(float, float, float)
  nameWithType: Custom.LerpCircEaseOut(float, float, float)
  fullName: RWCustom.Custom.LerpCircEaseOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpCircEaseOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpCircEaseOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpCircEaseOut*
  nameWithType.vb: Custom.LerpCircEaseOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpCircEaseOut(Single, Single, Single)
  name.vb: LerpCircEaseOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)
  id: LerpCircEaseInOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpCircEaseInOut(float, float, float)
  nameWithType: Custom.LerpCircEaseInOut(float, float, float)
  fullName: RWCustom.Custom.LerpCircEaseInOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpCircEaseInOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpCircEaseInOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpCircEaseInOut*
  nameWithType.vb: Custom.LerpCircEaseInOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpCircEaseInOut(Single, Single, Single)
  name.vb: LerpCircEaseInOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)
  id: LerpCircEaseOutIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpCircEaseOutIn(float, float, float)
  nameWithType: Custom.LerpCircEaseOutIn(float, float, float)
  fullName: RWCustom.Custom.LerpCircEaseOutIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpCircEaseOutIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpCircEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpCircEaseOutIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpCircEaseOutIn*
  nameWithType.vb: Custom.LerpCircEaseOutIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpCircEaseOutIn(Single, Single, Single)
  name.vb: LerpCircEaseOutIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)
  id: LerpExpEaseInOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpExpEaseInOut(float, float, float)
  nameWithType: Custom.LerpExpEaseInOut(float, float, float)
  fullName: RWCustom.Custom.LerpExpEaseInOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpExpEaseInOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpExpEaseInOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpExpEaseInOut*
  nameWithType.vb: Custom.LerpExpEaseInOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpExpEaseInOut(Single, Single, Single)
  name.vb: LerpExpEaseInOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)
  id: LerpExpEaseOutIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpExpEaseOutIn(float, float, float)
  nameWithType: Custom.LerpExpEaseOutIn(float, float, float)
  fullName: RWCustom.Custom.LerpExpEaseOutIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpExpEaseOutIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpExpEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpExpEaseOutIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpExpEaseOutIn*
  nameWithType.vb: Custom.LerpExpEaseOutIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpExpEaseOutIn(Single, Single, Single)
  name.vb: LerpExpEaseOutIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)
  id: LerpBackEaseIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpBackEaseIn(float, float, float)
  nameWithType: Custom.LerpBackEaseIn(float, float, float)
  fullName: RWCustom.Custom.LerpBackEaseIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpBackEaseIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpBackEaseIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpBackEaseIn*
  nameWithType.vb: Custom.LerpBackEaseIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpBackEaseIn(Single, Single, Single)
  name.vb: LerpBackEaseIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)
  id: LerpBackEaseOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpBackEaseOut(float, float, float)
  nameWithType: Custom.LerpBackEaseOut(float, float, float)
  fullName: RWCustom.Custom.LerpBackEaseOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpBackEaseOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpBackEaseOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpBackEaseOut*
  nameWithType.vb: Custom.LerpBackEaseOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpBackEaseOut(Single, Single, Single)
  name.vb: LerpBackEaseOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)
  id: LerpBackEaseInOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpBackEaseInOut(float, float, float)
  nameWithType: Custom.LerpBackEaseInOut(float, float, float)
  fullName: RWCustom.Custom.LerpBackEaseInOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpBackEaseInOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpBackEaseInOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpBackEaseInOut*
  nameWithType.vb: Custom.LerpBackEaseInOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpBackEaseInOut(Single, Single, Single)
  name.vb: LerpBackEaseInOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)
  id: LerpBackEaseOutIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpBackEaseOutIn(float, float, float)
  nameWithType: Custom.LerpBackEaseOutIn(float, float, float)
  fullName: RWCustom.Custom.LerpBackEaseOutIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpBackEaseOutIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpBackEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpBackEaseOutIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpBackEaseOutIn*
  nameWithType.vb: Custom.LerpBackEaseOutIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpBackEaseOutIn(Single, Single, Single)
  name.vb: LerpBackEaseOutIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)
  id: LerpElasticEaseIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpElasticEaseIn(float, float, float)
  nameWithType: Custom.LerpElasticEaseIn(float, float, float)
  fullName: RWCustom.Custom.LerpElasticEaseIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpElasticEaseIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpElasticEaseIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpElasticEaseIn*
  nameWithType.vb: Custom.LerpElasticEaseIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpElasticEaseIn(Single, Single, Single)
  name.vb: LerpElasticEaseIn(Single, Single, Single)
- uid: RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)
  id: LerpElasticEaseOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpElasticEaseOut(float, float, float)
  nameWithType: Custom.LerpElasticEaseOut(float, float, float)
  fullName: RWCustom.Custom.LerpElasticEaseOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpElasticEaseOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpElasticEaseOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpElasticEaseOut*
  nameWithType.vb: Custom.LerpElasticEaseOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpElasticEaseOut(Single, Single, Single)
  name.vb: LerpElasticEaseOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)
  id: LerpElasticEaseInOut(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpElasticEaseInOut(float, float, float)
  nameWithType: Custom.LerpElasticEaseInOut(float, float, float)
  fullName: RWCustom.Custom.LerpElasticEaseInOut(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpElasticEaseInOut(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseInOut(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpElasticEaseInOut(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpElasticEaseInOut*
  nameWithType.vb: Custom.LerpElasticEaseInOut(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpElasticEaseInOut(Single, Single, Single)
  name.vb: LerpElasticEaseInOut(Single, Single, Single)
- uid: RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)
  commentId: M:RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)
  id: LerpElasticEaseOutIn(System.Single,System.Single,System.Single)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: LerpElasticEaseOutIn(float, float, float)
  nameWithType: Custom.LerpElasticEaseOutIn(float, float, float)
  fullName: RWCustom.Custom.LerpElasticEaseOutIn(float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float LerpElasticEaseOutIn(float start, float end, float perc)
    parameters:
    - id: start
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>start</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: end
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>end</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: perc
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>perc</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.LerpElasticEaseOutIn(System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function LerpElasticEaseOutIn(start As Single, [end] As Single, perc As Single) As Single
  overload: RWCustom.Custom.LerpElasticEaseOutIn*
  nameWithType.vb: Custom.LerpElasticEaseOutIn(Single, Single, Single)
  fullName.vb: RWCustom.Custom.LerpElasticEaseOutIn(Single, Single, Single)
  name.vb: LerpElasticEaseOutIn(Single, Single, Single)
- uid: RWCustom.Custom.GetScreenOffsets
  commentId: M:RWCustom.Custom.GetScreenOffsets
  id: GetScreenOffsets
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: GetScreenOffsets()
  nameWithType: Custom.GetScreenOffsets()
  fullName: RWCustom.Custom.GetScreenOffsets()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.GetScreenOffsets</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float[] GetScreenOffsets()
    return:
      type: System.Single[]
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.GetScreenOffsets</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetScreenOffsets() As Single()
  overload: RWCustom.Custom.GetScreenOffsets*
- uid: RWCustom.Custom.SecondsToMinutesAndSecondsString(System.Int32)
  commentId: M:RWCustom.Custom.SecondsToMinutesAndSecondsString(System.Int32)
  id: SecondsToMinutesAndSecondsString(System.Int32)
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: SecondsToMinutesAndSecondsString(int)
  nameWithType: Custom.SecondsToMinutesAndSecondsString(int)
  fullName: RWCustom.Custom.SecondsToMinutesAndSecondsString(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.SecondsToMinutesAndSecondsString(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string SecondsToMinutesAndSecondsString(int seconds)
    parameters:
    - id: seconds
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>seconds</parameter>
            <parameter>M:RWCustom.Custom.SecondsToMinutesAndSecondsString(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.SecondsToMinutesAndSecondsString(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function SecondsToMinutesAndSecondsString(seconds As Integer) As String
  overload: RWCustom.Custom.SecondsToMinutesAndSecondsString*
  nameWithType.vb: Custom.SecondsToMinutesAndSecondsString(Integer)
  fullName.vb: RWCustom.Custom.SecondsToMinutesAndSecondsString(Integer)
  name.vb: SecondsToMinutesAndSecondsString(Integer)
- uid: RWCustom.Custom.GetIGTFormat(System.TimeSpan,System.Boolean)
  commentId: M:RWCustom.Custom.GetIGTFormat(System.TimeSpan,System.Boolean)
  id: GetIGTFormat(System.TimeSpan,System.Boolean)
  isExtensionMethod: true
  parent: RWCustom.Custom
  langs:
  - csharp
  - vb
  name: GetIGTFormat(TimeSpan, bool)
  nameWithType: Custom.GetIGTFormat(TimeSpan, bool)
  fullName: RWCustom.Custom.GetIGTFormat(System.TimeSpan, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.Custom.GetIGTFormat(System.TimeSpan,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string GetIGTFormat(this TimeSpan timeSpan, bool includeMilliseconds)
    parameters:
    - id: timeSpan
      type: System.TimeSpan
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timeSpan</parameter>
            <parameter>M:RWCustom.Custom.GetIGTFormat(System.TimeSpan,System.Boolean)</parameter>
          </include>
        </markup>
    - id: includeMilliseconds
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>includeMilliseconds</parameter>
            <parameter>M:RWCustom.Custom.GetIGTFormat(System.TimeSpan,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.Custom.GetIGTFormat(System.TimeSpan,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetIGTFormat(timeSpan As TimeSpan, includeMilliseconds As Boolean) As String
  overload: RWCustom.Custom.GetIGTFormat*
  nameWithType.vb: Custom.GetIGTFormat(TimeSpan, Boolean)
  fullName.vb: RWCustom.Custom.GetIGTFormat(System.TimeSpan, Boolean)
  name.vb: GetIGTFormat(TimeSpan, Boolean)
references:
- uid: RWCustom
  commentId: N:RWCustom
  isExternal: true
  href: RWCustom.html
  name: RWCustom
  nameWithType: RWCustom
  fullName: RWCustom
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.RainWorld
  commentId: T:Global.RainWorld
  isExternal: true
  href: RainWorld.html
  name: RainWorld
  nameWithType: RainWorld
  fullName: RainWorld
- uid: RWCustom.IntVector2[]
  isExternal: true
  href: RWCustom.IntVector2.html
  name: IntVector2[]
  nameWithType: IntVector2[]
  fullName: RWCustom.IntVector2[]
  nameWithType.vb: IntVector2()
  fullName.vb: RWCustom.IntVector2()
  name.vb: IntVector2()
  spec.csharp:
  - uid: RWCustom.IntVector2
    name: IntVector2
    isExternal: true
    href: RWCustom.IntVector2.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: RWCustom.IntVector2
    name: IntVector2
    isExternal: true
    href: RWCustom.IntVector2.html
  - name: (
  - name: )
- uid: Unity.Mathematics.int2[]
  isExternal: true
  name: int2[]
  nameWithType: int2[]
  fullName: Unity.Mathematics.int2[]
  nameWithType.vb: int2()
  fullName.vb: Unity.Mathematics.int2()
  name.vb: int2()
  spec.csharp:
  - uid: Unity.Mathematics.int2
    name: int2
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Unity.Mathematics.int2
    name: int2
    isExternal: true
  - name: (
  - name: )
- uid: UnityEngine.Color[]
  isExternal: true
  name: Color[]
  nameWithType: Color[]
  fullName: UnityEngine.Color[]
  nameWithType.vb: Color()
  fullName.vb: UnityEngine.Color()
  name.vb: Color()
  spec.csharp:
  - uid: UnityEngine.Color
    name: Color
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: UnityEngine.Color
    name: Color
    isExternal: true
  - name: (
  - name: )
- uid: RWCustom.Custom.ParseEnum*
  commentId: Overload:RWCustom.Custom.ParseEnum
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ParseEnum__1_System_String_
  name: ParseEnum
  nameWithType: Custom.ParseEnum
  fullName: RWCustom.Custom.ParseEnum
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: RWCustom.Custom.IsDigitString*
  commentId: Overload:RWCustom.Custom.IsDigitString
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_IsDigitString_System_String_
  name: IsDigitString
  nameWithType: Custom.IsDigitString
  fullName: RWCustom.Custom.IsDigitString
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: RWCustom.Custom.ReplaceLineDelimeters*
  commentId: Overload:RWCustom.Custom.ReplaceLineDelimeters
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ReplaceLineDelimeters_System_String_
  name: ReplaceLineDelimeters
  nameWithType: Custom.ReplaceLineDelimeters
  fullName: RWCustom.Custom.ReplaceLineDelimeters
- uid: RWCustom.Custom.ReplaceWordWrapLineDelimeters*
  commentId: Overload:RWCustom.Custom.ReplaceWordWrapLineDelimeters
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ReplaceWordWrapLineDelimeters_System_String_
  name: ReplaceWordWrapLineDelimeters
  nameWithType: Custom.ReplaceWordWrapLineDelimeters
  fullName: RWCustom.Custom.ReplaceWordWrapLineDelimeters
- uid: RWCustom.Custom.TruncateString*
  commentId: Overload:RWCustom.Custom.TruncateString
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_TruncateString_System_String_System_Int32_
  name: TruncateString
  nameWithType: Custom.TruncateString
  fullName: RWCustom.Custom.TruncateString
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: RWCustom.Custom.Log*
  commentId: Overload:RWCustom.Custom.Log
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Log_System_String___
  name: Log
  nameWithType: Custom.Log
  fullName: RWCustom.Custom.Log
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: RWCustom.Custom.LogImportant*
  commentId: Overload:RWCustom.Custom.LogImportant
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LogImportant_System_String___
  name: LogImportant
  nameWithType: Custom.LogImportant
  fullName: RWCustom.Custom.LogImportant
- uid: RWCustom.Custom.LogWarning*
  commentId: Overload:RWCustom.Custom.LogWarning
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LogWarning_System_String___
  name: LogWarning
  nameWithType: Custom.LogWarning
  fullName: RWCustom.Custom.LogWarning
- uid: RWCustom.Custom.Dist*
  commentId: Overload:RWCustom.Custom.Dist
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Dist_UnityEngine_Vector2_UnityEngine_Vector2_
  name: Dist
  nameWithType: Custom.Dist
  fullName: RWCustom.Custom.Dist
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: RWCustom.Custom.DistNoSqrt*
  commentId: Overload:RWCustom.Custom.DistNoSqrt
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_DistNoSqrt_UnityEngine_Vector2_UnityEngine_Vector2_
  name: DistNoSqrt
  nameWithType: Custom.DistNoSqrt
  fullName: RWCustom.Custom.DistNoSqrt
- uid: RWCustom.Custom.DistLess*
  commentId: Overload:RWCustom.Custom.DistLess
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_DistLess_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: DistLess
  nameWithType: Custom.DistLess
  fullName: RWCustom.Custom.DistLess
- uid: RWCustom.IntVector2
  commentId: T:RWCustom.IntVector2
  parent: RWCustom
  isExternal: true
  href: RWCustom.IntVector2.html
  name: IntVector2
  nameWithType: IntVector2
  fullName: RWCustom.IntVector2
- uid: Global.WorldCoordinate
  commentId: T:Global.WorldCoordinate
  isExternal: true
  href: WorldCoordinate.html
  name: WorldCoordinate
  nameWithType: WorldCoordinate
  fullName: WorldCoordinate
- uid: RWCustom.Custom.VectorIsCloser*
  commentId: Overload:RWCustom.Custom.VectorIsCloser
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_VectorIsCloser_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: VectorIsCloser
  nameWithType: Custom.VectorIsCloser
  fullName: RWCustom.Custom.VectorIsCloser
- uid: RWCustom.Custom.DirVec*
  commentId: Overload:RWCustom.Custom.DirVec
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_DirVec_UnityEngine_Vector2_UnityEngine_Vector2_
  name: DirVec
  nameWithType: Custom.DirVec
  fullName: RWCustom.Custom.DirVec
- uid: Unity.Mathematics.float2
  isExternal: true
  name: float2
  nameWithType: float2
  fullName: Unity.Mathematics.float2
- uid: RWCustom.Custom.MapRange*
  commentId: Overload:RWCustom.Custom.MapRange
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_MapRange_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: MapRange
  nameWithType: Custom.MapRange
  fullName: RWCustom.Custom.MapRange
- uid: RWCustom.Custom.MapRangeClamped*
  commentId: Overload:RWCustom.Custom.MapRangeClamped
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_MapRangeClamped_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: MapRangeClamped
  nameWithType: Custom.MapRangeClamped
  fullName: RWCustom.Custom.MapRangeClamped
- uid: RWCustom.Custom.Factorial*
  commentId: Overload:RWCustom.Custom.Factorial
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Factorial_System_Int32_
  name: Factorial
  nameWithType: Custom.Factorial
  fullName: RWCustom.Custom.Factorial
- uid: RWCustom.Custom.CirclesCollisionTime*
  commentId: Overload:RWCustom.Custom.CirclesCollisionTime
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_CirclesCollisionTime_System_Single_System_Single_System_Single_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: CirclesCollisionTime
  nameWithType: Custom.CirclesCollisionTime
  fullName: RWCustom.Custom.CirclesCollisionTime
- uid: RWCustom.Custom.DegToVec*
  commentId: Overload:RWCustom.Custom.DegToVec
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_DegToVec_System_Single_
  name: DegToVec
  nameWithType: Custom.DegToVec
  fullName: RWCustom.Custom.DegToVec
- uid: RWCustom.Custom.DegToFloat2*
  commentId: Overload:RWCustom.Custom.DegToFloat2
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_DegToFloat2_System_Single_
  name: DegToFloat2
  nameWithType: Custom.DegToFloat2
  fullName: RWCustom.Custom.DegToFloat2
- uid: RWCustom.Custom.IntVector2ToVector2*
  commentId: Overload:RWCustom.Custom.IntVector2ToVector2
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_IntVector2ToVector2_RWCustom_IntVector2_
  name: IntVector2ToVector2
  nameWithType: Custom.IntVector2ToVector2
  fullName: RWCustom.Custom.IntVector2ToVector2
- uid: RWCustom.Custom.AimFromOneVectorToAnother*
  commentId: Overload:RWCustom.Custom.AimFromOneVectorToAnother
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_AimFromOneVectorToAnother_UnityEngine_Vector2_UnityEngine_Vector2_
  name: AimFromOneVectorToAnother
  nameWithType: Custom.AimFromOneVectorToAnother
  fullName: RWCustom.Custom.AimFromOneVectorToAnother
- uid: RWCustom.Custom.VecToDeg*
  commentId: Overload:RWCustom.Custom.VecToDeg
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_VecToDeg_UnityEngine_Vector2_
  name: VecToDeg
  nameWithType: Custom.VecToDeg
  fullName: RWCustom.Custom.VecToDeg
- uid: RWCustom.Custom.Float2ToDeg*
  commentId: Overload:RWCustom.Custom.Float2ToDeg
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Float2ToDeg_Unity_Mathematics_float2_
  name: Float2ToDeg
  nameWithType: Custom.Float2ToDeg
  fullName: RWCustom.Custom.Float2ToDeg
- uid: RWCustom.Custom.Angle*
  commentId: Overload:RWCustom.Custom.Angle
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Angle_UnityEngine_Vector2_UnityEngine_Vector2_
  name: Angle
  nameWithType: Custom.Angle
  fullName: RWCustom.Custom.Angle
- uid: RWCustom.Custom.PerpendicularVector*
  commentId: Overload:RWCustom.Custom.PerpendicularVector
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_PerpendicularVector_UnityEngine_Vector2_
  name: PerpendicularVector
  nameWithType: Custom.PerpendicularVector
  fullName: RWCustom.Custom.PerpendicularVector
- uid: RWCustom.Custom.RotateAroundVector*
  commentId: Overload:RWCustom.Custom.RotateAroundVector
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RotateAroundVector_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: RotateAroundVector
  nameWithType: Custom.RotateAroundVector
  fullName: RWCustom.Custom.RotateAroundVector
- uid: RWCustom.Custom.RotateAroundOrigo*
  commentId: Overload:RWCustom.Custom.RotateAroundOrigo
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RotateAroundOrigo_UnityEngine_Vector2_System_Single_
  name: RotateAroundOrigo
  nameWithType: Custom.RotateAroundOrigo
  fullName: RWCustom.Custom.RotateAroundOrigo
- uid: RWCustom.Custom.FlattenVectorAlongAxis*
  commentId: Overload:RWCustom.Custom.FlattenVectorAlongAxis
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_FlattenVectorAlongAxis_UnityEngine_Vector2_System_Single_System_Single_
  name: FlattenVectorAlongAxis
  nameWithType: Custom.FlattenVectorAlongAxis
  fullName: RWCustom.Custom.FlattenVectorAlongAxis
- uid: RWCustom.Custom.LerpAndTick*
  commentId: Overload:RWCustom.Custom.LerpAndTick
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpAndTick_System_Single_System_Single_System_Single_System_Single_
  name: LerpAndTick
  nameWithType: Custom.LerpAndTick
  fullName: RWCustom.Custom.LerpAndTick
- uid: RWCustom.Custom.InitializeRootFolderDirectory*
  commentId: Overload:RWCustom.Custom.InitializeRootFolderDirectory
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_InitializeRootFolderDirectory
  name: InitializeRootFolderDirectory
  nameWithType: Custom.InitializeRootFolderDirectory
  fullName: RWCustom.Custom.InitializeRootFolderDirectory
- uid: RWCustom.Custom.RootFolderDirectory*
  commentId: Overload:RWCustom.Custom.RootFolderDirectory
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RootFolderDirectory
  name: RootFolderDirectory
  nameWithType: Custom.RootFolderDirectory
  fullName: RWCustom.Custom.RootFolderDirectory
- uid: RWCustom.Custom.LegacyRootFolderDirectory*
  commentId: Overload:RWCustom.Custom.LegacyRootFolderDirectory
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LegacyRootFolderDirectory
  name: LegacyRootFolderDirectory
  nameWithType: Custom.LegacyRootFolderDirectory
  fullName: RWCustom.Custom.LegacyRootFolderDirectory
- uid: RWCustom.Custom.IntClamp*
  commentId: Overload:RWCustom.Custom.IntClamp
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_IntClamp_System_Int32_System_Int32_System_Int32_
  name: IntClamp
  nameWithType: Custom.IntClamp
  fullName: RWCustom.Custom.IntClamp
- uid: RWCustom.Custom.Multiply*
  commentId: Overload:RWCustom.Custom.Multiply
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Multiply_UnityEngine_Color_UnityEngine_Color_
  name: Multiply
  nameWithType: Custom.Multiply
  fullName: RWCustom.Custom.Multiply
- uid: UnityEngine.Color
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: RWCustom.Custom.Screen*
  commentId: Overload:RWCustom.Custom.Screen
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Screen_UnityEngine_Color_UnityEngine_Color_
  name: Screen
  nameWithType: Custom.Screen
  fullName: RWCustom.Custom.Screen
- uid: RWCustom.Custom.ApplyDepthOnVector*
  commentId: Overload:RWCustom.Custom.ApplyDepthOnVector
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ApplyDepthOnVector_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: ApplyDepthOnVector
  nameWithType: Custom.ApplyDepthOnVector
  fullName: RWCustom.Custom.ApplyDepthOnVector
- uid: RWCustom.Custom.ApplyDepthOnRect*
  commentId: Overload:RWCustom.Custom.ApplyDepthOnRect
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ApplyDepthOnRect_UnityEngine_Rect_UnityEngine_Vector2_System_Single_
  name: ApplyDepthOnRect
  nameWithType: Custom.ApplyDepthOnRect
  fullName: RWCustom.Custom.ApplyDepthOnRect
- uid: UnityEngine.Rect
  isExternal: true
  name: Rect
  nameWithType: Rect
  fullName: UnityEngine.Rect
- uid: RWCustom.Custom.Decimal*
  commentId: Overload:RWCustom.Custom.Decimal
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Decimal_System_Single_
  name: Decimal
  nameWithType: Custom.Decimal
  fullName: RWCustom.Custom.Decimal
- uid: RWCustom.Custom.Bezier*
  commentId: Overload:RWCustom.Custom.Bezier
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Bezier_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: Bezier
  nameWithType: Custom.Bezier
  fullName: RWCustom.Custom.Bezier
- uid: RWCustom.Custom.BezierDerivative*
  commentId: Overload:RWCustom.Custom.BezierDerivative
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_BezierDerivative_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: BezierDerivative
  nameWithType: Custom.BezierDerivative
  fullName: RWCustom.Custom.BezierDerivative
- uid: RWCustom.Custom.RestrictInRect*
  commentId: Overload:RWCustom.Custom.RestrictInRect
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RestrictInRect_RWCustom_IntVector2_RWCustom_IntRect_
  name: RestrictInRect
  nameWithType: Custom.RestrictInRect
  fullName: RWCustom.Custom.RestrictInRect
- uid: RWCustom.IntRect
  commentId: T:RWCustom.IntRect
  parent: RWCustom
  isExternal: true
  href: RWCustom.IntRect.html
  name: IntRect
  nameWithType: IntRect
  fullName: RWCustom.IntRect
- uid: Global.FloatRect
  commentId: T:Global.FloatRect
  isExternal: true
  href: FloatRect.html
  name: FloatRect
  nameWithType: FloatRect
  fullName: FloatRect
- uid: RWCustom.Custom.MoveTowards*
  commentId: Overload:RWCustom.Custom.MoveTowards
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_MoveTowards_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: MoveTowards
  nameWithType: Custom.MoveTowards
  fullName: RWCustom.Custom.MoveTowards
- uid: RWCustom.Custom.IntVectorsOpposite*
  commentId: Overload:RWCustom.Custom.IntVectorsOpposite
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_IntVectorsOpposite_RWCustom_IntVector2_RWCustom_IntVector2_
  name: IntVectorsOpposite
  nameWithType: Custom.IntVectorsOpposite
  fullName: RWCustom.Custom.IntVectorsOpposite
- uid: RWCustom.Custom.InsideRect*
  commentId: Overload:RWCustom.Custom.InsideRect
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_InsideRect_RWCustom_IntVector2_RWCustom_IntRect_
  name: InsideRect
  nameWithType: Custom.InsideRect
  fullName: RWCustom.Custom.InsideRect
- uid: RWCustom.Custom.VectorRectDistance*
  commentId: Overload:RWCustom.Custom.VectorRectDistance
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_VectorRectDistance_UnityEngine_Vector2_FloatRect_
  name: VectorRectDistance
  nameWithType: Custom.VectorRectDistance
  fullName: RWCustom.Custom.VectorRectDistance
- uid: RWCustom.Custom.InRange*
  commentId: Overload:RWCustom.Custom.InRange
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_InRange_System_Single_System_Single_System_Single_
  name: InRange
  nameWithType: Custom.InRange
  fullName: RWCustom.Custom.InRange
- uid: RWCustom.Custom.RectZone*
  commentId: Overload:RWCustom.Custom.RectZone
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RectZone_UnityEngine_Vector2_FloatRect_
  name: RectZone
  nameWithType: Custom.RectZone
  fullName: RWCustom.Custom.RectZone
- uid: RWCustom.Custom.VisibleCornersOnRect*
  commentId: Overload:RWCustom.Custom.VisibleCornersOnRect
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_VisibleCornersOnRect_UnityEngine_Vector2_FloatRect_
  name: VisibleCornersOnRect
  nameWithType: Custom.VisibleCornersOnRect
  fullName: RWCustom.Custom.VisibleCornersOnRect
- uid: Global.FloatRect.CornerLabel[]
  isExternal: true
  href: FloatRect.CornerLabel.html
  name: CornerLabel[]
  nameWithType: FloatRect.CornerLabel[]
  fullName: FloatRect.CornerLabel[]
  nameWithType.vb: FloatRect.CornerLabel()
  fullName.vb: FloatRect.CornerLabel()
  name.vb: CornerLabel()
  spec.csharp:
  - uid: Global.FloatRect.CornerLabel
    name: CornerLabel
    isExternal: true
    href: FloatRect.CornerLabel.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.FloatRect.CornerLabel
    name: CornerLabel
    isExternal: true
    href: FloatRect.CornerLabel.html
  - name: (
  - name: )
- uid: RWCustom.Custom.PushOutOfInvisibleArea*
  commentId: Overload:RWCustom.Custom.PushOutOfInvisibleArea
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_PushOutOfInvisibleArea_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_FloatRect_System_Boolean_System_Boolean_System_Boolean_System_Boolean_
  name: PushOutOfInvisibleArea
  nameWithType: Custom.PushOutOfInvisibleArea
  fullName: RWCustom.Custom.PushOutOfInvisibleArea
- uid: RWCustom.Custom.RandomPointInRect*
  commentId: Overload:RWCustom.Custom.RandomPointInRect
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RandomPointInRect_FloatRect_
  name: RandomPointInRect
  nameWithType: Custom.RandomPointInRect
  fullName: RWCustom.Custom.RandomPointInRect
- uid: RWCustom.Custom.RectCollision*
  commentId: Overload:RWCustom.Custom.RectCollision
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RectCollision_UnityEngine_Vector2_UnityEngine_Vector2_FloatRect_
  name: RectCollision
  nameWithType: Custom.RectCollision
  fullName: RWCustom.Custom.RectCollision
- uid: RWCustom.Custom.AreIntVectorsNeighbors*
  commentId: Overload:RWCustom.Custom.AreIntVectorsNeighbors
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_AreIntVectorsNeighbors_RWCustom_IntVector2_RWCustom_IntVector2_
  name: AreIntVectorsNeighbors
  nameWithType: Custom.AreIntVectorsNeighbors
  fullName: RWCustom.Custom.AreIntVectorsNeighbors
- uid: RWCustom.Custom.AreIntVectorsDiagonalNeighbors*
  commentId: Overload:RWCustom.Custom.AreIntVectorsDiagonalNeighbors
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_AreIntVectorsDiagonalNeighbors_RWCustom_IntVector2_RWCustom_IntVector2_
  name: AreIntVectorsDiagonalNeighbors
  nameWithType: Custom.AreIntVectorsDiagonalNeighbors
  fullName: RWCustom.Custom.AreIntVectorsDiagonalNeighbors
- uid: RWCustom.Custom.IsPointBetweenPoints*
  commentId: Overload:RWCustom.Custom.IsPointBetweenPoints
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_IsPointBetweenPoints_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: IsPointBetweenPoints
  nameWithType: Custom.IsPointBetweenPoints
  fullName: RWCustom.Custom.IsPointBetweenPoints
- uid: RWCustom.Custom.VerticalCrossPoint*
  commentId: Overload:RWCustom.Custom.VerticalCrossPoint
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_VerticalCrossPoint_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: VerticalCrossPoint
  nameWithType: Custom.VerticalCrossPoint
  fullName: RWCustom.Custom.VerticalCrossPoint
- uid: RWCustom.Custom.HorizontalCrossPoint*
  commentId: Overload:RWCustom.Custom.HorizontalCrossPoint
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_HorizontalCrossPoint_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: HorizontalCrossPoint
  nameWithType: Custom.HorizontalCrossPoint
  fullName: RWCustom.Custom.HorizontalCrossPoint
- uid: RWCustom.Custom.LineIntersection*
  commentId: Overload:RWCustom.Custom.LineIntersection
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LineIntersection_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: LineIntersection
  nameWithType: Custom.LineIntersection
  fullName: RWCustom.Custom.LineIntersection
- uid: RWCustom.Custom.PointBehindRect*
  commentId: Overload:RWCustom.Custom.PointBehindRect
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_PointBehindRect_UnityEngine_Vector2_UnityEngine_Vector2_FloatRect_
  name: PointBehindRect
  nameWithType: Custom.PointBehindRect
  fullName: RWCustom.Custom.PointBehindRect
- uid: RWCustom.Custom.PerpIntVec*
  commentId: Overload:RWCustom.Custom.PerpIntVec
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_PerpIntVec_RWCustom_IntVector2_
  name: PerpIntVec
  nameWithType: Custom.PerpIntVec
  fullName: RWCustom.Custom.PerpIntVec
- uid: RWCustom.Custom.ClosestPointOnLine*
  commentId: Overload:RWCustom.Custom.ClosestPointOnLine
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ClosestPointOnLine_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: ClosestPointOnLine
  nameWithType: Custom.ClosestPointOnLine
  fullName: RWCustom.Custom.ClosestPointOnLine
- uid: RWCustom.Custom.ManhattanDistance*
  commentId: Overload:RWCustom.Custom.ManhattanDistance
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ManhattanDistance_RWCustom_IntVector2_RWCustom_IntVector2_
  name: ManhattanDistance
  nameWithType: Custom.ManhattanDistance
  fullName: RWCustom.Custom.ManhattanDistance
- uid: RWCustom.Custom.WorldCoordFloatDist*
  commentId: Overload:RWCustom.Custom.WorldCoordFloatDist
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_WorldCoordFloatDist_WorldCoordinate_WorldCoordinate_
  name: WorldCoordFloatDist
  nameWithType: Custom.WorldCoordFloatDist
  fullName: RWCustom.Custom.WorldCoordFloatDist
- uid: RWCustom.Custom.BetweenRoomsDistance*
  commentId: Overload:RWCustom.Custom.BetweenRoomsDistance
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_BetweenRoomsDistance_World_WorldCoordinate_WorldCoordinate_
  name: BetweenRoomsDistance
  nameWithType: Custom.BetweenRoomsDistance
  fullName: RWCustom.Custom.BetweenRoomsDistance
- uid: Global.World
  commentId: T:Global.World
  isExternal: true
  href: World.html
  name: World
  nameWithType: World
  fullName: World
- uid: RWCustom.Custom.DistanceToLine*
  commentId: Overload:RWCustom.Custom.DistanceToLine
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_DistanceToLine_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: DistanceToLine
  nameWithType: Custom.DistanceToLine
  fullName: RWCustom.Custom.DistanceToLine
- uid: RWCustom.Custom.BetweenLines*
  commentId: Overload:RWCustom.Custom.BetweenLines
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_BetweenLines_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: BetweenLines
  nameWithType: Custom.BetweenLines
  fullName: RWCustom.Custom.BetweenLines
- uid: RWCustom.Custom.PointInTriangle*
  commentId: Overload:RWCustom.Custom.PointInTriangle
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_PointInTriangle_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: PointInTriangle
  nameWithType: Custom.PointInTriangle
  fullName: RWCustom.Custom.PointInTriangle
- uid: RWCustom.Custom.MakeWorldCoordinate*
  commentId: Overload:RWCustom.Custom.MakeWorldCoordinate
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_MakeWorldCoordinate_RWCustom_IntVector2_System_Int32_
  name: MakeWorldCoordinate
  nameWithType: Custom.MakeWorldCoordinate
  fullName: RWCustom.Custom.MakeWorldCoordinate
- uid: RWCustom.Custom.MinusOneToOneRangeFloatInfluence*
  commentId: Overload:RWCustom.Custom.MinusOneToOneRangeFloatInfluence
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_MinusOneToOneRangeFloatInfluence_System_Single_System_Single_
  name: MinusOneToOneRangeFloatInfluence
  nameWithType: Custom.MinusOneToOneRangeFloatInfluence
  fullName: RWCustom.Custom.MinusOneToOneRangeFloatInfluence
- uid: RWCustom.Custom.SCurve*
  commentId: Overload:RWCustom.Custom.SCurve
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_SCurve_System_Single_System_Single_
  name: SCurve
  nameWithType: Custom.SCurve
  fullName: RWCustom.Custom.SCurve
- uid: RWCustom.Custom.BackwardsSCurve*
  commentId: Overload:RWCustom.Custom.BackwardsSCurve
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_BackwardsSCurve_System_Single_System_Single_
  name: BackwardsSCurve
  nameWithType: Custom.BackwardsSCurve
  fullName: RWCustom.Custom.BackwardsSCurve
- uid: RWCustom.Custom.InverseKinematic*
  commentId: Overload:RWCustom.Custom.InverseKinematic
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_InverseKinematic_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_System_Single_System_Single_
  name: InverseKinematic
  nameWithType: Custom.InverseKinematic
  fullName: RWCustom.Custom.InverseKinematic
- uid: RWCustom.Custom.ClampedRandomVariation*
  commentId: Overload:RWCustom.Custom.ClampedRandomVariation
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ClampedRandomVariation_System_Single_System_Single_System_Single_
  name: ClampedRandomVariation
  nameWithType: Custom.ClampedRandomVariation
  fullName: RWCustom.Custom.ClampedRandomVariation
- uid: RWCustom.Custom.WrappedRandomVariation*
  commentId: Overload:RWCustom.Custom.WrappedRandomVariation
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_WrappedRandomVariation_System_Single_System_Single_System_Single_
  name: WrappedRandomVariation
  nameWithType: Custom.WrappedRandomVariation
  fullName: RWCustom.Custom.WrappedRandomVariation
- uid: RWCustom.Custom.RNV*
  commentId: Overload:RWCustom.Custom.RNV
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RNV
  name: RNV
  nameWithType: Custom.RNV
  fullName: RWCustom.Custom.RNV
- uid: RWCustom.Custom.RNVf2*
  commentId: Overload:RWCustom.Custom.RNVf2
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RNVf2
  name: RNVf2
  nameWithType: Custom.RNVf2
  fullName: RWCustom.Custom.RNVf2
- uid: RWCustom.Custom.LerpMap*
  commentId: Overload:RWCustom.Custom.LerpMap
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpMap_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: LerpMap
  nameWithType: Custom.LerpMap
  fullName: RWCustom.Custom.LerpMap
- uid: RWCustom.Custom.ExponentMap*
  commentId: Overload:RWCustom.Custom.ExponentMap
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ExponentMap_System_Single_System_Single_System_Single_System_Single_
  name: ExponentMap
  nameWithType: Custom.ExponentMap
  fullName: RWCustom.Custom.ExponentMap
- uid: RWCustom.Custom.PushFromHalf*
  commentId: Overload:RWCustom.Custom.PushFromHalf
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_PushFromHalf_System_Single_System_Single_
  name: PushFromHalf
  nameWithType: Custom.PushFromHalf
  fullName: RWCustom.Custom.PushFromHalf
- uid: RWCustom.Custom.HSL2RGB*
  commentId: Overload:RWCustom.Custom.HSL2RGB
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_HSL2RGB_System_Single_System_Single_System_Single_
  name: HSL2RGB
  nameWithType: Custom.HSL2RGB
  fullName: RWCustom.Custom.HSL2RGB
- uid: RWCustom.Custom.RGB2RGBA*
  commentId: Overload:RWCustom.Custom.RGB2RGBA
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RGB2RGBA_UnityEngine_Color_System_Single_
  name: RGB2RGBA
  nameWithType: Custom.RGB2RGBA
  fullName: RWCustom.Custom.RGB2RGBA
- uid: RWCustom.Custom.RGBA2RGB*
  commentId: Overload:RWCustom.Custom.RGBA2RGB
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RGBA2RGB_UnityEngine_Color_
  name: RGBA2RGB
  nameWithType: Custom.RGBA2RGB
  fullName: RWCustom.Custom.RGBA2RGB
- uid: RWCustom.Custom.ColorToVec3*
  commentId: Overload:RWCustom.Custom.ColorToVec3
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ColorToVec3_UnityEngine_Color_
  name: ColorToVec3
  nameWithType: Custom.ColorToVec3
  fullName: RWCustom.Custom.ColorToVec3
- uid: UnityEngine.Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: RWCustom.Custom.Vec3ToColor*
  commentId: Overload:RWCustom.Custom.Vec3ToColor
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Vec3ToColor_UnityEngine_Vector3_
  name: Vec3ToColor
  nameWithType: Custom.Vec3ToColor
  fullName: RWCustom.Custom.Vec3ToColor
- uid: RWCustom.Custom.Desaturate*
  commentId: Overload:RWCustom.Custom.Desaturate
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Desaturate_UnityEngine_Color_System_Single_
  name: Desaturate
  nameWithType: Custom.Desaturate
  fullName: RWCustom.Custom.Desaturate
- uid: RWCustom.Custom.Saturate*
  commentId: Overload:RWCustom.Custom.Saturate
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Saturate_UnityEngine_Color_System_Single_
  name: Saturate
  nameWithType: Custom.Saturate
  fullName: RWCustom.Custom.Saturate
- uid: RWCustom.Custom.QuickSaturation*
  commentId: Overload:RWCustom.Custom.QuickSaturation
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_QuickSaturation_UnityEngine_Color_
  name: QuickSaturation
  nameWithType: Custom.QuickSaturation
  fullName: RWCustom.Custom.QuickSaturation
- uid: RWCustom.Custom.DistanceBetweenZeroToOneFloats*
  commentId: Overload:RWCustom.Custom.DistanceBetweenZeroToOneFloats
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_DistanceBetweenZeroToOneFloats_System_Single_System_Single_
  name: DistanceBetweenZeroToOneFloats
  nameWithType: Custom.DistanceBetweenZeroToOneFloats
  fullName: RWCustom.Custom.DistanceBetweenZeroToOneFloats
- uid: RWCustom.Custom.ClosestPointOnLineSegment*
  commentId: Overload:RWCustom.Custom.ClosestPointOnLineSegment
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ClosestPointOnLineSegment_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: ClosestPointOnLineSegment
  nameWithType: Custom.ClosestPointOnLineSegment
  fullName: RWCustom.Custom.ClosestPointOnLineSegment
- uid: RWCustom.Custom.Vec3FromVec2*
  commentId: Overload:RWCustom.Custom.Vec3FromVec2
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Vec3FromVec2_UnityEngine_Vector2_System_Single_
  name: Vec3FromVec2
  nameWithType: Custom.Vec3FromVec2
  fullName: RWCustom.Custom.Vec3FromVec2
- uid: RWCustom.Custom.xorEncrypt*
  commentId: Overload:RWCustom.Custom.xorEncrypt
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_xorEncrypt_System_String_System_Int32_
  name: xorEncrypt
  nameWithType: Custom.xorEncrypt
  fullName: RWCustom.Custom.xorEncrypt
- uid: RWCustom.Custom.Md5Sum*
  commentId: Overload:RWCustom.Custom.Md5Sum
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Md5Sum_System_String_
  name: Md5Sum
  nameWithType: Custom.Md5Sum
  fullName: RWCustom.Custom.Md5Sum
- uid: RWCustom.Custom.ToLiteral*
  commentId: Overload:RWCustom.Custom.ToLiteral
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ToLiteral_System_String_
  name: ToLiteral
  nameWithType: Custom.ToLiteral
  fullName: RWCustom.Custom.ToLiteral
- uid: RWCustom.Custom.GetFont*
  commentId: Overload:RWCustom.Custom.GetFont
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_GetFont
  name: GetFont
  nameWithType: Custom.GetFont
  fullName: RWCustom.Custom.GetFont
- uid: RWCustom.Custom.GetDisplayFont*
  commentId: Overload:RWCustom.Custom.GetDisplayFont
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_GetDisplayFont
  name: GetDisplayFont
  nameWithType: Custom.GetDisplayFont
  fullName: RWCustom.Custom.GetDisplayFont
- uid: RWCustom.Custom.SignZero*
  commentId: Overload:RWCustom.Custom.SignZero
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_SignZero_System_Single_
  name: SignZero
  nameWithType: Custom.SignZero
  fullName: RWCustom.Custom.SignZero
- uid: RWCustom.Custom.rotateVectorDeg*
  commentId: Overload:RWCustom.Custom.rotateVectorDeg
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_rotateVectorDeg_UnityEngine_Vector2_System_Single_
  name: rotateVectorDeg
  nameWithType: Custom.rotateVectorDeg
  fullName: RWCustom.Custom.rotateVectorDeg
- uid: RWCustom.Custom.hexToColor*
  commentId: Overload:RWCustom.Custom.hexToColor
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_hexToColor_System_String_
  name: hexToColor
  nameWithType: Custom.hexToColor
  fullName: RWCustom.Custom.hexToColor
- uid: RWCustom.Custom.colorToHex*
  commentId: Overload:RWCustom.Custom.colorToHex
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_colorToHex_UnityEngine_Color_
  name: colorToHex
  nameWithType: Custom.colorToHex
  fullName: RWCustom.Custom.colorToHex
- uid: RWCustom.Custom.RGB2HSL*
  commentId: Overload:RWCustom.Custom.RGB2HSL
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_RGB2HSL_UnityEngine_Color_
  name: RGB2HSL
  nameWithType: Custom.RGB2HSL
  fullName: RWCustom.Custom.RGB2HSL
- uid: RWCustom.Custom.EncodeFloatRG*
  commentId: Overload:RWCustom.Custom.EncodeFloatRG
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_EncodeFloatRG_System_Single_
  name: EncodeFloatRG
  nameWithType: Custom.EncodeFloatRG
  fullName: RWCustom.Custom.EncodeFloatRG
- uid: RWCustom.Custom.Mod*
  commentId: Overload:RWCustom.Custom.Mod
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_Mod_System_Single_System_Single_
  name: Mod
  nameWithType: Custom.Mod
  fullName: RWCustom.Custom.Mod
- uid: RWCustom.Custom.PointInPoly4*
  commentId: Overload:RWCustom.Custom.PointInPoly4
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_PointInPoly4_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: PointInPoly4
  nameWithType: Custom.PointInPoly4
  fullName: RWCustom.Custom.PointInPoly4
- uid: RWCustom.Custom.TriArea*
  commentId: Overload:RWCustom.Custom.TriArea
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_TriArea_UnityEngine_Vector2_UnityEngine_Vector2_UnityEngine_Vector2_
  name: TriArea
  nameWithType: Custom.TriArea
  fullName: RWCustom.Custom.TriArea
- uid: RWCustom.Custom.ToTitleCase*
  commentId: Overload:RWCustom.Custom.ToTitleCase
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ToTitleCase_System_String_
  name: ToTitleCase
  nameWithType: Custom.ToTitleCase
  fullName: RWCustom.Custom.ToTitleCase
- uid: RWCustom.Custom.GetBaseFileNameWithoutPrefix*
  commentId: Overload:RWCustom.Custom.GetBaseFileNameWithoutPrefix
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_GetBaseFileNameWithoutPrefix_System_String_System_String_
  name: GetBaseFileNameWithoutPrefix
  nameWithType: Custom.GetBaseFileNameWithoutPrefix
  fullName: RWCustom.Custom.GetBaseFileNameWithoutPrefix
- uid: RWCustom.Custom.ValidateSpacedDelimiter*
  commentId: Overload:RWCustom.Custom.ValidateSpacedDelimiter
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_ValidateSpacedDelimiter_System_String_System_String_
  name: ValidateSpacedDelimiter
  nameWithType: Custom.ValidateSpacedDelimiter
  fullName: RWCustom.Custom.ValidateSpacedDelimiter
- uid: RWCustom.Custom.LerpQuadEaseIn*
  commentId: Overload:RWCustom.Custom.LerpQuadEaseIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpQuadEaseIn_System_Single_System_Single_System_Single_
  name: LerpQuadEaseIn
  nameWithType: Custom.LerpQuadEaseIn
  fullName: RWCustom.Custom.LerpQuadEaseIn
- uid: RWCustom.Custom.LerpQuadEaseOut*
  commentId: Overload:RWCustom.Custom.LerpQuadEaseOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpQuadEaseOut_System_Single_System_Single_System_Single_
  name: LerpQuadEaseOut
  nameWithType: Custom.LerpQuadEaseOut
  fullName: RWCustom.Custom.LerpQuadEaseOut
- uid: RWCustom.Custom.LerpSinEaseInOut*
  commentId: Overload:RWCustom.Custom.LerpSinEaseInOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpSinEaseInOut_System_Single_System_Single_System_Single_
  name: LerpSinEaseInOut
  nameWithType: Custom.LerpSinEaseInOut
  fullName: RWCustom.Custom.LerpSinEaseInOut
- uid: RWCustom.Custom.LerpExpEaseIn*
  commentId: Overload:RWCustom.Custom.LerpExpEaseIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpExpEaseIn_System_Single_System_Single_System_Single_
  name: LerpExpEaseIn
  nameWithType: Custom.LerpExpEaseIn
  fullName: RWCustom.Custom.LerpExpEaseIn
- uid: RWCustom.Custom.LerpExpEaseOut*
  commentId: Overload:RWCustom.Custom.LerpExpEaseOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpExpEaseOut_System_Single_System_Single_System_Single_
  name: LerpExpEaseOut
  nameWithType: Custom.LerpExpEaseOut
  fullName: RWCustom.Custom.LerpExpEaseOut
- uid: RWCustom.Custom.LerpQuadEaseInOut*
  commentId: Overload:RWCustom.Custom.LerpQuadEaseInOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpQuadEaseInOut_System_Single_System_Single_System_Single_
  name: LerpQuadEaseInOut
  nameWithType: Custom.LerpQuadEaseInOut
  fullName: RWCustom.Custom.LerpQuadEaseInOut
- uid: RWCustom.Custom.LerpQuadEaseOutIn*
  commentId: Overload:RWCustom.Custom.LerpQuadEaseOutIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpQuadEaseOutIn_System_Single_System_Single_System_Single_
  name: LerpQuadEaseOutIn
  nameWithType: Custom.LerpQuadEaseOutIn
  fullName: RWCustom.Custom.LerpQuadEaseOutIn
- uid: RWCustom.Custom.LerpCircEaseIn*
  commentId: Overload:RWCustom.Custom.LerpCircEaseIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpCircEaseIn_System_Single_System_Single_System_Single_
  name: LerpCircEaseIn
  nameWithType: Custom.LerpCircEaseIn
  fullName: RWCustom.Custom.LerpCircEaseIn
- uid: RWCustom.Custom.LerpCircEaseOut*
  commentId: Overload:RWCustom.Custom.LerpCircEaseOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpCircEaseOut_System_Single_System_Single_System_Single_
  name: LerpCircEaseOut
  nameWithType: Custom.LerpCircEaseOut
  fullName: RWCustom.Custom.LerpCircEaseOut
- uid: RWCustom.Custom.LerpCircEaseInOut*
  commentId: Overload:RWCustom.Custom.LerpCircEaseInOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpCircEaseInOut_System_Single_System_Single_System_Single_
  name: LerpCircEaseInOut
  nameWithType: Custom.LerpCircEaseInOut
  fullName: RWCustom.Custom.LerpCircEaseInOut
- uid: RWCustom.Custom.LerpCircEaseOutIn*
  commentId: Overload:RWCustom.Custom.LerpCircEaseOutIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpCircEaseOutIn_System_Single_System_Single_System_Single_
  name: LerpCircEaseOutIn
  nameWithType: Custom.LerpCircEaseOutIn
  fullName: RWCustom.Custom.LerpCircEaseOutIn
- uid: RWCustom.Custom.LerpExpEaseInOut*
  commentId: Overload:RWCustom.Custom.LerpExpEaseInOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpExpEaseInOut_System_Single_System_Single_System_Single_
  name: LerpExpEaseInOut
  nameWithType: Custom.LerpExpEaseInOut
  fullName: RWCustom.Custom.LerpExpEaseInOut
- uid: RWCustom.Custom.LerpExpEaseOutIn*
  commentId: Overload:RWCustom.Custom.LerpExpEaseOutIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpExpEaseOutIn_System_Single_System_Single_System_Single_
  name: LerpExpEaseOutIn
  nameWithType: Custom.LerpExpEaseOutIn
  fullName: RWCustom.Custom.LerpExpEaseOutIn
- uid: RWCustom.Custom.LerpBackEaseIn*
  commentId: Overload:RWCustom.Custom.LerpBackEaseIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpBackEaseIn_System_Single_System_Single_System_Single_
  name: LerpBackEaseIn
  nameWithType: Custom.LerpBackEaseIn
  fullName: RWCustom.Custom.LerpBackEaseIn
- uid: RWCustom.Custom.LerpBackEaseOut*
  commentId: Overload:RWCustom.Custom.LerpBackEaseOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpBackEaseOut_System_Single_System_Single_System_Single_
  name: LerpBackEaseOut
  nameWithType: Custom.LerpBackEaseOut
  fullName: RWCustom.Custom.LerpBackEaseOut
- uid: RWCustom.Custom.LerpBackEaseInOut*
  commentId: Overload:RWCustom.Custom.LerpBackEaseInOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpBackEaseInOut_System_Single_System_Single_System_Single_
  name: LerpBackEaseInOut
  nameWithType: Custom.LerpBackEaseInOut
  fullName: RWCustom.Custom.LerpBackEaseInOut
- uid: RWCustom.Custom.LerpBackEaseOutIn*
  commentId: Overload:RWCustom.Custom.LerpBackEaseOutIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpBackEaseOutIn_System_Single_System_Single_System_Single_
  name: LerpBackEaseOutIn
  nameWithType: Custom.LerpBackEaseOutIn
  fullName: RWCustom.Custom.LerpBackEaseOutIn
- uid: RWCustom.Custom.LerpElasticEaseIn*
  commentId: Overload:RWCustom.Custom.LerpElasticEaseIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpElasticEaseIn_System_Single_System_Single_System_Single_
  name: LerpElasticEaseIn
  nameWithType: Custom.LerpElasticEaseIn
  fullName: RWCustom.Custom.LerpElasticEaseIn
- uid: RWCustom.Custom.LerpElasticEaseOut*
  commentId: Overload:RWCustom.Custom.LerpElasticEaseOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpElasticEaseOut_System_Single_System_Single_System_Single_
  name: LerpElasticEaseOut
  nameWithType: Custom.LerpElasticEaseOut
  fullName: RWCustom.Custom.LerpElasticEaseOut
- uid: RWCustom.Custom.LerpElasticEaseInOut*
  commentId: Overload:RWCustom.Custom.LerpElasticEaseInOut
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpElasticEaseInOut_System_Single_System_Single_System_Single_
  name: LerpElasticEaseInOut
  nameWithType: Custom.LerpElasticEaseInOut
  fullName: RWCustom.Custom.LerpElasticEaseInOut
- uid: RWCustom.Custom.LerpElasticEaseOutIn*
  commentId: Overload:RWCustom.Custom.LerpElasticEaseOutIn
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_LerpElasticEaseOutIn_System_Single_System_Single_System_Single_
  name: LerpElasticEaseOutIn
  nameWithType: Custom.LerpElasticEaseOutIn
  fullName: RWCustom.Custom.LerpElasticEaseOutIn
- uid: RWCustom.Custom.GetScreenOffsets*
  commentId: Overload:RWCustom.Custom.GetScreenOffsets
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_GetScreenOffsets
  name: GetScreenOffsets
  nameWithType: Custom.GetScreenOffsets
  fullName: RWCustom.Custom.GetScreenOffsets
- uid: System.Single[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float[]
  nameWithType: float[]
  fullName: float[]
  nameWithType.vb: Single()
  fullName.vb: Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: (
  - name: )
- uid: RWCustom.Custom.SecondsToMinutesAndSecondsString*
  commentId: Overload:RWCustom.Custom.SecondsToMinutesAndSecondsString
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_SecondsToMinutesAndSecondsString_System_Int32_
  name: SecondsToMinutesAndSecondsString
  nameWithType: Custom.SecondsToMinutesAndSecondsString
  fullName: RWCustom.Custom.SecondsToMinutesAndSecondsString
- uid: RWCustom.Custom.GetIGTFormat*
  commentId: Overload:RWCustom.Custom.GetIGTFormat
  isExternal: true
  href: RWCustom.Custom.html#RWCustom_Custom_GetIGTFormat_System_TimeSpan_System_Boolean_
  name: GetIGTFormat
  nameWithType: Custom.GetIGTFormat
  fullName: RWCustom.Custom.GetIGTFormat
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
