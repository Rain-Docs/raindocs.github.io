### YamlMime:ManagedReference
items:
- uid: Global.PhysicalObject.Appendage
  commentId: T:Global.PhysicalObject.Appendage
  id: PhysicalObject.Appendage
  parent: Global
  children:
  - Global.PhysicalObject.Appendage.#ctor(PhysicalObject,System.Int32,System.Int32)
  - Global.PhysicalObject.Appendage.LineCross(UnityEngine.Vector2,UnityEngine.Vector2)
  - Global.PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)
  - Global.PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)
  - Global.PhysicalObject.Appendage.Update
  - Global.PhysicalObject.Appendage.appIndex
  - Global.PhysicalObject.Appendage.canBeHit
  - Global.PhysicalObject.Appendage.owner
  - Global.PhysicalObject.Appendage.ownerApps
  - Global.PhysicalObject.Appendage.segments
  - Global.PhysicalObject.Appendage.totalLength
  langs:
  - csharp
  - vb
  name: PhysicalObject.Appendage
  nameWithType: PhysicalObject.Appendage
  fullName: PhysicalObject.Appendage
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:PhysicalObject.Appendage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class PhysicalObject.Appendage
    content.vb: Public Class PhysicalObject.Appendage
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.PhysicalObject.Appendage.owner
  commentId: F:Global.PhysicalObject.Appendage.owner
  id: owner
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: owner
  nameWithType: PhysicalObject.Appendage.owner
  fullName: PhysicalObject.Appendage.owner
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PhysicalObject.Appendage.owner</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PhysicalObject owner
    return:
      type: Global.PhysicalObject
    content.vb: Public owner As PhysicalObject
- uid: Global.PhysicalObject.Appendage.ownerApps
  commentId: F:Global.PhysicalObject.Appendage.ownerApps
  id: ownerApps
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: ownerApps
  nameWithType: PhysicalObject.Appendage.ownerApps
  fullName: PhysicalObject.Appendage.ownerApps
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PhysicalObject.Appendage.ownerApps</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PhysicalObject.IHaveAppendages ownerApps
    return:
      type: Global.PhysicalObject.IHaveAppendages
    content.vb: Public ownerApps As PhysicalObject.IHaveAppendages
- uid: Global.PhysicalObject.Appendage.segments
  commentId: F:Global.PhysicalObject.Appendage.segments
  id: segments
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: segments
  nameWithType: PhysicalObject.Appendage.segments
  fullName: PhysicalObject.Appendage.segments
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PhysicalObject.Appendage.segments</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2[] segments
    return:
      type: UnityEngine.Vector2[]
    content.vb: Public segments As Vector2()
- uid: Global.PhysicalObject.Appendage.appIndex
  commentId: F:Global.PhysicalObject.Appendage.appIndex
  id: appIndex
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: appIndex
  nameWithType: PhysicalObject.Appendage.appIndex
  fullName: PhysicalObject.Appendage.appIndex
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PhysicalObject.Appendage.appIndex</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int appIndex
    return:
      type: System.Int32
    content.vb: Public appIndex As Integer
- uid: Global.PhysicalObject.Appendage.totalLength
  commentId: F:Global.PhysicalObject.Appendage.totalLength
  id: totalLength
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: totalLength
  nameWithType: PhysicalObject.Appendage.totalLength
  fullName: PhysicalObject.Appendage.totalLength
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PhysicalObject.Appendage.totalLength</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float totalLength
    return:
      type: System.Single
    content.vb: Public totalLength As Single
- uid: Global.PhysicalObject.Appendage.canBeHit
  commentId: F:Global.PhysicalObject.Appendage.canBeHit
  id: canBeHit
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: canBeHit
  nameWithType: PhysicalObject.Appendage.canBeHit
  fullName: PhysicalObject.Appendage.canBeHit
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PhysicalObject.Appendage.canBeHit</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool canBeHit
    return:
      type: System.Boolean
    content.vb: Public canBeHit As Boolean
- uid: Global.PhysicalObject.Appendage.#ctor(PhysicalObject,System.Int32,System.Int32)
  commentId: M:Global.PhysicalObject.Appendage.#ctor(PhysicalObject,System.Int32,System.Int32)
  id: '#ctor(PhysicalObject,System.Int32,System.Int32)'
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: Appendage(PhysicalObject, int, int)
  nameWithType: PhysicalObject.Appendage.Appendage(PhysicalObject, int, int)
  fullName: PhysicalObject.Appendage.Appendage(PhysicalObject, int, int)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>PhysicalObject.Appendage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Appendage(PhysicalObject owner, int appIndex, int totSegs)
    parameters:
    - id: owner
      type: Global.PhysicalObject
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>owner</parameter>
            <parameter>M:PhysicalObject.Appendage.#ctor(PhysicalObject,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: appIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>appIndex</parameter>
            <parameter>M:PhysicalObject.Appendage.#ctor(PhysicalObject,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: totSegs
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>totSegs</parameter>
            <parameter>M:PhysicalObject.Appendage.#ctor(PhysicalObject,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(owner As PhysicalObject, appIndex As Integer, totSegs As Integer)
  overload: Global.PhysicalObject.Appendage.#ctor*
  nameWithType.vb: PhysicalObject.Appendage.New(PhysicalObject, Integer, Integer)
  fullName.vb: PhysicalObject.Appendage.New(PhysicalObject, Integer, Integer)
  name.vb: New(PhysicalObject, Integer, Integer)
- uid: Global.PhysicalObject.Appendage.Update
  commentId: M:Global.PhysicalObject.Appendage.Update
  id: Update
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: PhysicalObject.Appendage.Update()
  fullName: PhysicalObject.Appendage.Update()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PhysicalObject.Appendage.Update</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update()
  overload: Global.PhysicalObject.Appendage.Update*
- uid: Global.PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)
  commentId: M:Global.PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)
  id: OnAppendagePosition(PhysicalObject.Appendage.Pos)
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: OnAppendagePosition(Pos)
  nameWithType: PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)
  fullName: PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 OnAppendagePosition(PhysicalObject.Appendage.Pos pos)
    parameters:
    - id: pos
      type: Global.PhysicalObject.Appendage.Pos
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PhysicalObject.Appendage.OnAppendagePosition(PhysicalObject.Appendage.Pos)</parameter>
          </include>
        </markup>
    content.vb: Public Function OnAppendagePosition(pos As PhysicalObject.Appendage.Pos) As Vector2
  overload: Global.PhysicalObject.Appendage.OnAppendagePosition*
- uid: Global.PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)
  commentId: M:Global.PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)
  id: OnAppendageDirection(PhysicalObject.Appendage.Pos)
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: OnAppendageDirection(Pos)
  nameWithType: PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)
  fullName: PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 OnAppendageDirection(PhysicalObject.Appendage.Pos pos)
    parameters:
    - id: pos
      type: Global.PhysicalObject.Appendage.Pos
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PhysicalObject.Appendage.OnAppendageDirection(PhysicalObject.Appendage.Pos)</parameter>
          </include>
        </markup>
    content.vb: Public Function OnAppendageDirection(pos As PhysicalObject.Appendage.Pos) As Vector2
  overload: Global.PhysicalObject.Appendage.OnAppendageDirection*
- uid: Global.PhysicalObject.Appendage.LineCross(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Global.PhysicalObject.Appendage.LineCross(UnityEngine.Vector2,UnityEngine.Vector2)
  id: LineCross(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: Global.PhysicalObject.Appendage
  langs:
  - csharp
  - vb
  name: LineCross(Vector2, Vector2)
  nameWithType: PhysicalObject.Appendage.LineCross(Vector2, Vector2)
  fullName: PhysicalObject.Appendage.LineCross(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:PhysicalObject.Appendage.LineCross(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool LineCross(Vector2 A, Vector2 B)
    parameters:
    - id: A
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:PhysicalObject.Appendage.LineCross(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: B
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:PhysicalObject.Appendage.LineCross(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PhysicalObject.Appendage.LineCross(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function LineCross(A As Vector2, B As Vector2) As Boolean
  overload: Global.PhysicalObject.Appendage.LineCross*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.PhysicalObject
  commentId: T:Global.PhysicalObject
  isExternal: true
  href: PhysicalObject.html
  name: PhysicalObject
  nameWithType: PhysicalObject
  fullName: PhysicalObject
- uid: Global.PhysicalObject.IHaveAppendages
  commentId: T:Global.PhysicalObject.IHaveAppendages
  isExternal: true
  href: PhysicalObject.html
  name: PhysicalObject.IHaveAppendages
  nameWithType: PhysicalObject.IHaveAppendages
  fullName: PhysicalObject.IHaveAppendages
  spec.csharp:
  - uid: Global.PhysicalObject
    name: PhysicalObject
    isExternal: true
    href: PhysicalObject.html
  - name: .
  - uid: Global.PhysicalObject.IHaveAppendages
    name: IHaveAppendages
    isExternal: true
    href: PhysicalObject.IHaveAppendages.html
  spec.vb:
  - uid: Global.PhysicalObject
    name: PhysicalObject
    isExternal: true
    href: PhysicalObject.html
  - name: .
  - uid: Global.PhysicalObject.IHaveAppendages
    name: IHaveAppendages
    isExternal: true
    href: PhysicalObject.IHaveAppendages.html
- uid: UnityEngine.Vector2[]
  isExternal: true
  name: Vector2[]
  nameWithType: Vector2[]
  fullName: UnityEngine.Vector2[]
  nameWithType.vb: Vector2()
  fullName.vb: UnityEngine.Vector2()
  name.vb: Vector2()
  spec.csharp:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.PhysicalObject.Appendage.#ctor*
  commentId: Overload:Global.PhysicalObject.Appendage.#ctor
  isExternal: true
  href: Global.PhysicalObject.Appendage.html#PhysicalObject_Appendage__ctor_PhysicalObject_System_Int32_System_Int32_
  name: Appendage
  nameWithType: PhysicalObject.Appendage.Appendage
  fullName: PhysicalObject.Appendage.Appendage
  nameWithType.vb: PhysicalObject.Appendage.New
  fullName.vb: PhysicalObject.Appendage.New
  name.vb: New
- uid: Global.PhysicalObject.Appendage.Update*
  commentId: Overload:Global.PhysicalObject.Appendage.Update
  isExternal: true
  href: Global.PhysicalObject.Appendage.html#PhysicalObject_Appendage_Update
  name: Update
  nameWithType: PhysicalObject.Appendage.Update
  fullName: PhysicalObject.Appendage.Update
- uid: Global.PhysicalObject.Appendage.OnAppendagePosition*
  commentId: Overload:Global.PhysicalObject.Appendage.OnAppendagePosition
  isExternal: true
  href: Global.PhysicalObject.Appendage.html#PhysicalObject_Appendage_OnAppendagePosition_PhysicalObject_Appendage_Pos_
  name: OnAppendagePosition
  nameWithType: PhysicalObject.Appendage.OnAppendagePosition
  fullName: PhysicalObject.Appendage.OnAppendagePosition
- uid: Global.PhysicalObject.Appendage.Pos
  commentId: T:Global.PhysicalObject.Appendage.Pos
  isExternal: true
  href: PhysicalObject.html
  name: PhysicalObject.Appendage.Pos
  nameWithType: PhysicalObject.Appendage.Pos
  fullName: PhysicalObject.Appendage.Pos
  spec.csharp:
  - uid: Global.PhysicalObject
    name: PhysicalObject
    isExternal: true
    href: PhysicalObject.html
  - name: .
  - uid: Global.PhysicalObject.Appendage
    name: Appendage
    isExternal: true
    href: PhysicalObject.Appendage.html
  - name: .
  - uid: Global.PhysicalObject.Appendage.Pos
    name: Pos
    isExternal: true
    href: PhysicalObject.Appendage.Pos.html
  spec.vb:
  - uid: Global.PhysicalObject
    name: PhysicalObject
    isExternal: true
    href: PhysicalObject.html
  - name: .
  - uid: Global.PhysicalObject.Appendage
    name: Appendage
    isExternal: true
    href: PhysicalObject.Appendage.html
  - name: .
  - uid: Global.PhysicalObject.Appendage.Pos
    name: Pos
    isExternal: true
    href: PhysicalObject.Appendage.Pos.html
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.PhysicalObject.Appendage.OnAppendageDirection*
  commentId: Overload:Global.PhysicalObject.Appendage.OnAppendageDirection
  isExternal: true
  href: Global.PhysicalObject.Appendage.html#PhysicalObject_Appendage_OnAppendageDirection_PhysicalObject_Appendage_Pos_
  name: OnAppendageDirection
  nameWithType: PhysicalObject.Appendage.OnAppendageDirection
  fullName: PhysicalObject.Appendage.OnAppendageDirection
- uid: Global.PhysicalObject.Appendage.LineCross*
  commentId: Overload:Global.PhysicalObject.Appendage.LineCross
  isExternal: true
  href: Global.PhysicalObject.Appendage.html#PhysicalObject_Appendage_LineCross_UnityEngine_Vector2_UnityEngine_Vector2_
  name: LineCross
  nameWithType: PhysicalObject.Appendage.LineCross
  fullName: PhysicalObject.Appendage.LineCross
