### YamlMime:ManagedReference
items:
- uid: Global.ExtEnumBase
  commentId: T:Global.ExtEnumBase
  id: ExtEnumBase
  parent: Global
  children:
  - Global.ExtEnumBase.CompareTo(System.Object)
  - Global.ExtEnumBase.GetExtEnumType(System.Type)
  - Global.ExtEnumBase.GetNames(System.Type)
  - Global.ExtEnumBase.Index
  - Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  - Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.ToString
  - Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  - Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  - Global.ExtEnumBase.enumType
  - Global.ExtEnumBase.index
  - Global.ExtEnumBase.localVersion
  - Global.ExtEnumBase.value
  - Global.ExtEnumBase.valueDictionary
  - Global.ExtEnumBase.valueHash
  langs:
  - csharp
  - vb
  name: ExtEnumBase
  nameWithType: ExtEnumBase
  fullName: ExtEnumBase
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:ExtEnumBase</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public abstract class ExtEnumBase : IComparable'
    content.vb: Public MustInherit Class ExtEnumBase Implements IComparable
  inheritance:
  - System.Object
  derivedClasses:
  - Global.ExtEnum`1
  implements:
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.ExtEnumBase.value
  commentId: F:Global.ExtEnumBase.value
  id: value
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: value
  nameWithType: ExtEnumBase.value
  fullName: ExtEnumBase.value
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ExtEnumBase.value</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string value
    return:
      type: System.String
    content.vb: Public value As String
- uid: Global.ExtEnumBase.valueHash
  commentId: F:Global.ExtEnumBase.valueHash
  id: valueHash
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: valueHash
  nameWithType: ExtEnumBase.valueHash
  fullName: ExtEnumBase.valueHash
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ExtEnumBase.valueHash</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected int valueHash
    return:
      type: System.Int32
    content.vb: Protected valueHash As Integer
- uid: Global.ExtEnumBase.index
  commentId: F:Global.ExtEnumBase.index
  id: index
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: index
  nameWithType: ExtEnumBase.index
  fullName: ExtEnumBase.index
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ExtEnumBase.index</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected int index
    return:
      type: System.Int32
    content.vb: Protected index As Integer
- uid: Global.ExtEnumBase.localVersion
  commentId: F:Global.ExtEnumBase.localVersion
  id: localVersion
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: localVersion
  nameWithType: ExtEnumBase.localVersion
  fullName: ExtEnumBase.localVersion
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ExtEnumBase.localVersion</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int localVersion
    return:
      type: System.Int32
    content.vb: Public localVersion As Integer
- uid: Global.ExtEnumBase.enumType
  commentId: F:Global.ExtEnumBase.enumType
  id: enumType
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: enumType
  nameWithType: ExtEnumBase.enumType
  fullName: ExtEnumBase.enumType
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ExtEnumBase.enumType</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected Type enumType
    return:
      type: System.Type
    content.vb: Protected enumType As Type
- uid: Global.ExtEnumBase.valueDictionary
  commentId: F:Global.ExtEnumBase.valueDictionary
  id: valueDictionary
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: valueDictionary
  nameWithType: ExtEnumBase.valueDictionary
  fullName: ExtEnumBase.valueDictionary
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ExtEnumBase.valueDictionary</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected static Dictionary<Type, ExtEnumType> valueDictionary
    return:
      type: System.Collections.Generic.Dictionary{System.Type,ExtEnumType}
    content.vb: Protected Shared valueDictionary As Dictionary(Of Type, ExtEnumType)
- uid: Global.ExtEnumBase.ToString
  commentId: M:Global.ExtEnumBase.ToString
  id: ToString
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ExtEnumBase.ToString()
  fullName: ExtEnumBase.ToString()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.ToString</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.ToString</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Global.ExtEnumBase.ToString*
- uid: Global.ExtEnumBase.CompareTo(System.Object)
  commentId: M:Global.ExtEnumBase.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: CompareTo(object)
  nameWithType: ExtEnumBase.CompareTo(object)
  fullName: ExtEnumBase.CompareTo(object)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.CompareTo(System.Object)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:ExtEnumBase.CompareTo(System.Object)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.CompareTo(System.Object)</parameter>
          </include>
        </markup>
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: Global.ExtEnumBase.CompareTo*
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: ExtEnumBase.CompareTo(Object)
  fullName.vb: ExtEnumBase.CompareTo(Object)
  name.vb: CompareTo(Object)
- uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  id: Parse(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: Parse(Type, string, bool)
  nameWithType: ExtEnumBase.Parse(Type, string, bool)
  fullName: ExtEnumBase.Parse(System.Type, string, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.Parse(System.Type,System.String,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static object Parse(Type enumType, string value, bool ignoreCase)
    parameters:
    - id: enumType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enumType</parameter>
            <parameter>M:ExtEnumBase.Parse(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: value
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:ExtEnumBase.Parse(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: ignoreCase
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ignoreCase</parameter>
            <parameter>M:ExtEnumBase.Parse(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: System.Object
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.Parse(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Parse(enumType As Type, value As String, ignoreCase As Boolean) As Object
  overload: Global.ExtEnumBase.Parse*
  nameWithType.vb: ExtEnumBase.Parse(Type, String, Boolean)
  fullName.vb: ExtEnumBase.Parse(System.Type, String, Boolean)
  name.vb: Parse(Type, String, Boolean)
- uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  commentId: M:Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  id: TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: TryParse(Type, string, bool, out ExtEnumBase)
  nameWithType: ExtEnumBase.TryParse(Type, string, bool, out ExtEnumBase)
  fullName: ExtEnumBase.TryParse(System.Type, string, bool, out ExtEnumBase)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool TryParse(Type enumType, string value, bool ignoreCase, out ExtEnumBase result)
    parameters:
    - id: enumType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enumType</parameter>
            <parameter>M:ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)</parameter>
          </include>
        </markup>
    - id: value
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)</parameter>
          </include>
        </markup>
    - id: ignoreCase
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ignoreCase</parameter>
            <parameter>M:ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)</parameter>
          </include>
        </markup>
    - id: result
      type: Global.ExtEnumBase
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>result</parameter>
            <parameter>M:ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function TryParse(enumType As Type, value As String, ignoreCase As Boolean, result As ExtEnumBase) As Boolean
  overload: Global.ExtEnumBase.TryParse*
  nameWithType.vb: ExtEnumBase.TryParse(Type, String, Boolean, ExtEnumBase)
  fullName.vb: ExtEnumBase.TryParse(System.Type, String, Boolean, ExtEnumBase)
  name.vb: TryParse(Type, String, Boolean, ExtEnumBase)
- uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
  commentId: M:Global.ExtEnumBase.GetExtEnumType(System.Type)
  id: GetExtEnumType(System.Type)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: GetExtEnumType(Type)
  nameWithType: ExtEnumBase.GetExtEnumType(Type)
  fullName: ExtEnumBase.GetExtEnumType(System.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.GetExtEnumType(System.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static ExtEnumType GetExtEnumType(Type enumType)
    parameters:
    - id: enumType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enumType</parameter>
            <parameter>M:ExtEnumBase.GetExtEnumType(System.Type)</parameter>
          </include>
        </markup>
    return:
      type: Global.ExtEnumType
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.GetExtEnumType(System.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetExtEnumType(enumType As Type) As ExtEnumType
  overload: Global.ExtEnumBase.GetExtEnumType*
- uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  commentId: M:Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  id: TryGetExtEnumType(System.Type,ExtEnumType@)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: TryGetExtEnumType(Type, out ExtEnumType)
  nameWithType: ExtEnumBase.TryGetExtEnumType(Type, out ExtEnumType)
  fullName: ExtEnumBase.TryGetExtEnumType(System.Type, out ExtEnumType)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool TryGetExtEnumType(Type enumType, out ExtEnumType type)
    parameters:
    - id: enumType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enumType</parameter>
            <parameter>M:ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)</parameter>
          </include>
        </markup>
    - id: type
      type: Global.ExtEnumType
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function TryGetExtEnumType(enumType As Type, type As ExtEnumType) As Boolean
  overload: Global.ExtEnumBase.TryGetExtEnumType*
  nameWithType.vb: ExtEnumBase.TryGetExtEnumType(Type, ExtEnumType)
  fullName.vb: ExtEnumBase.TryGetExtEnumType(System.Type, ExtEnumType)
  name.vb: TryGetExtEnumType(Type, ExtEnumType)
- uid: Global.ExtEnumBase.GetNames(System.Type)
  commentId: M:Global.ExtEnumBase.GetNames(System.Type)
  id: GetNames(System.Type)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: GetNames(Type)
  nameWithType: ExtEnumBase.GetNames(Type)
  fullName: ExtEnumBase.GetNames(System.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.GetNames(System.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string[] GetNames(Type enumType)
    parameters:
    - id: enumType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enumType</parameter>
            <parameter>M:ExtEnumBase.GetNames(System.Type)</parameter>
          </include>
        </markup>
    return:
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.GetNames(System.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetNames(enumType As Type) As String()
  overload: Global.ExtEnumBase.GetNames*
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  id: IsDefined(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: IsDefined(Type, string, bool)
  nameWithType: ExtEnumBase.IsDefined(Type, string, bool)
  fullName: ExtEnumBase.IsDefined(System.Type, string, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsDefined(Type enumType, string value, bool ignoreCase)
    parameters:
    - id: enumType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enumType</parameter>
            <parameter>M:ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: value
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: ignoreCase
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ignoreCase</parameter>
            <parameter>M:ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Function IsDefined(enumType As Type, value As String, ignoreCase As Boolean) As Boolean
  overload: Global.ExtEnumBase.IsDefined*
  nameWithType.vb: ExtEnumBase.IsDefined(Type, String, Boolean)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, String, Boolean)
  name.vb: IsDefined(Type, String, Boolean)
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  id: IsDefined(System.Type,System.Int32)
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: IsDefined(Type, int)
  nameWithType: ExtEnumBase.IsDefined(Type, int)
  fullName: ExtEnumBase.IsDefined(System.Type, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ExtEnumBase.IsDefined(System.Type,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsDefined(Type enumType, int index)
    parameters:
    - id: enumType
      type: System.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enumType</parameter>
            <parameter>M:ExtEnumBase.IsDefined(System.Type,System.Int32)</parameter>
          </include>
        </markup>
    - id: index
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:ExtEnumBase.IsDefined(System.Type,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ExtEnumBase.IsDefined(System.Type,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function IsDefined(enumType As Type, index As Integer) As Boolean
  overload: Global.ExtEnumBase.IsDefined*
  nameWithType.vb: ExtEnumBase.IsDefined(Type, Integer)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, Integer)
  name.vb: IsDefined(Type, Integer)
- uid: Global.ExtEnumBase.Index
  commentId: P:Global.ExtEnumBase.Index
  id: Index
  parent: Global.ExtEnumBase
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: ExtEnumBase.Index
  fullName: ExtEnumBase.Index
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:ExtEnumBase.Index</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public abstract int Index { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public MustOverride ReadOnly Property Index As Integer
  overload: Global.ExtEnumBase.Index*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.Dictionary{System.Type,ExtEnumType}
  commentId: T:System.Collections.Generic.Dictionary{System.Type,ExtEnumType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<Type, ExtEnumType>
  nameWithType: Dictionary<Type, ExtEnumType>
  fullName: System.Collections.Generic.Dictionary<System.Type, ExtEnumType>
  nameWithType.vb: Dictionary(Of Type, ExtEnumType)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Type, ExtEnumType)
  name.vb: Dictionary(Of Type, ExtEnumType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Global.ExtEnumBase.ToString*
  commentId: Overload:Global.ExtEnumBase.ToString
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  name: ToString
  nameWithType: ExtEnumBase.ToString
  fullName: ExtEnumBase.ToString
- uid: Global.ExtEnumBase.CompareTo*
  commentId: Overload:Global.ExtEnumBase.CompareTo
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  name: CompareTo
  nameWithType: ExtEnumBase.CompareTo
  fullName: ExtEnumBase.CompareTo
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  name: CompareTo(object)
  nameWithType: IComparable.CompareTo(object)
  fullName: System.IComparable.CompareTo(object)
  nameWithType.vb: IComparable.CompareTo(Object)
  fullName.vb: System.IComparable.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnumBase.Parse*
  commentId: Overload:Global.ExtEnumBase.Parse
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  name: Parse
  nameWithType: ExtEnumBase.Parse
  fullName: ExtEnumBase.Parse
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.ExtEnumBase.TryParse*
  commentId: Overload:Global.ExtEnumBase.TryParse
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  name: TryParse
  nameWithType: ExtEnumBase.TryParse
  fullName: ExtEnumBase.TryParse
- uid: Global.ExtEnumBase
  commentId: T:Global.ExtEnumBase
  isExternal: true
  href: ExtEnumBase.html
  name: ExtEnumBase
  nameWithType: ExtEnumBase
  fullName: ExtEnumBase
- uid: Global.ExtEnumBase.GetExtEnumType*
  commentId: Overload:Global.ExtEnumBase.GetExtEnumType
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  name: GetExtEnumType
  nameWithType: ExtEnumBase.GetExtEnumType
  fullName: ExtEnumBase.GetExtEnumType
- uid: Global.ExtEnumType
  commentId: T:Global.ExtEnumType
  isExternal: true
  href: ExtEnumType.html
  name: ExtEnumType
  nameWithType: ExtEnumType
  fullName: ExtEnumType
- uid: Global.ExtEnumBase.TryGetExtEnumType*
  commentId: Overload:Global.ExtEnumBase.TryGetExtEnumType
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  name: TryGetExtEnumType
  nameWithType: ExtEnumBase.TryGetExtEnumType
  fullName: ExtEnumBase.TryGetExtEnumType
- uid: Global.ExtEnumBase.GetNames*
  commentId: Overload:Global.ExtEnumBase.GetNames
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  name: GetNames
  nameWithType: ExtEnumBase.GetNames
  fullName: ExtEnumBase.GetNames
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Global.ExtEnumBase.IsDefined*
  commentId: Overload:Global.ExtEnumBase.IsDefined
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  name: IsDefined
  nameWithType: ExtEnumBase.IsDefined
  fullName: ExtEnumBase.IsDefined
- uid: Global.ExtEnumBase.Index*
  commentId: Overload:Global.ExtEnumBase.Index
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_Index
  name: Index
  nameWithType: ExtEnumBase.Index
  fullName: ExtEnumBase.Index
