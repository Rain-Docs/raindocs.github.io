### YamlMime:ManagedReference
items:
- uid: Global.PlacedObject.Type
  commentId: T:Global.PlacedObject.Type
  id: PlacedObject.Type
  parent: Global
  children:
  - Global.PlacedObject.Type.#ctor(System.String,System.Boolean)
  - Global.PlacedObject.Type.ARKillRect
  - Global.PlacedObject.Type.AdjustableFan
  - Global.PlacedObject.Type.AirPocket
  - Global.PlacedObject.Type.BlackSpot
  - Global.PlacedObject.Type.BlinkingFlower
  - Global.PlacedObject.Type.BlueToken
  - Global.PlacedObject.Type.BrainMold
  - Global.PlacedObject.Type.BrokenShelterWaterLevel
  - Global.PlacedObject.Type.BubbleGrass
  - Global.PlacedObject.Type.CellDistortion
  - Global.PlacedObject.Type.CentipedeAttractor
  - Global.PlacedObject.Type.CoralCircuit
  - Global.PlacedObject.Type.CoralNeuron
  - Global.PlacedObject.Type.CoralStem
  - Global.PlacedObject.Type.CoralStemWithNeurons
  - Global.PlacedObject.Type.Corruption
  - Global.PlacedObject.Type.CorruptionDarkness
  - Global.PlacedObject.Type.CorruptionTube
  - Global.PlacedObject.Type.CosmeticRipple
  - Global.PlacedObject.Type.CosmeticSlimeMold
  - Global.PlacedObject.Type.CosmeticSlimeMold2
  - Global.PlacedObject.Type.CustomDecal
  - Global.PlacedObject.Type.DandelionPatch
  - Global.PlacedObject.Type.DangleFruit
  - Global.PlacedObject.Type.DataPearl
  - Global.PlacedObject.Type.DayNightSettings
  - Global.PlacedObject.Type.DeadHazer
  - Global.PlacedObject.Type.DeadSeedCob
  - Global.PlacedObject.Type.DeadTokenStalk
  - Global.PlacedObject.Type.DeadVultureGrub
  - Global.PlacedObject.Type.DeathFallFocus
  - Global.PlacedObject.Type.DeepProcessing
  - Global.PlacedObject.Type.DynamicWarpTarget
  - Global.PlacedObject.Type.EnergySwirl
  - Global.PlacedObject.Type.ExitSymbolAncientShelter
  - Global.PlacedObject.Type.ExitSymbolHidden
  - Global.PlacedObject.Type.ExitSymbolShelter
  - Global.PlacedObject.Type.FairyParticleSettings
  - Global.PlacedObject.Type.Filter
  - Global.PlacedObject.Type.FirecrackerPlant
  - Global.PlacedObject.Type.FlameJet
  - Global.PlacedObject.Type.FlareBomb
  - Global.PlacedObject.Type.FloatingDebris
  - Global.PlacedObject.Type.FluxDrain
  - Global.PlacedObject.Type.FluxWaterfall
  - Global.PlacedObject.Type.FlyLure
  - Global.PlacedObject.Type.Geyser
  - Global.PlacedObject.Type.GhostSpot
  - Global.PlacedObject.Type.GoldToken
  - Global.PlacedObject.Type.GooDrips
  - Global.PlacedObject.Type.GravityDisruptor
  - Global.PlacedObject.Type.GreenToken
  - Global.PlacedObject.Type.HangingPearls
  - Global.PlacedObject.Type.HarmfulSteam
  - Global.PlacedObject.Type.Hazer
  - Global.PlacedObject.Type.HugeTurbine
  - Global.PlacedObject.Type.InsectGroup
  - Global.PlacedObject.Type.JellyFish
  - Global.PlacedObject.Type.KarmaFlower
  - Global.PlacedObject.Type.Lantern
  - Global.PlacedObject.Type.LanternOnStick
  - Global.PlacedObject.Type.LightBeam
  - Global.PlacedObject.Type.LightFixture
  - Global.PlacedObject.Type.LightSource
  - Global.PlacedObject.Type.LightningMachine
  - Global.PlacedObject.Type.LobeTree
  - Global.PlacedObject.Type.LocalBlizzard
  - Global.PlacedObject.Type.LocustCloud
  - Global.PlacedObject.Type.MudPit
  - Global.PlacedObject.Type.MultiplayerItem
  - Global.PlacedObject.Type.Mushroom
  - Global.PlacedObject.Type.NeedleEgg
  - Global.PlacedObject.Type.NeuronSpawner
  - Global.PlacedObject.Type.NoCurrentZone
  - Global.PlacedObject.Type.NoLeviathanStrandingZone
  - Global.PlacedObject.Type.NoSpearStickZone
  - Global.PlacedObject.Type.None
  - Global.PlacedObject.Type.PassiveCorruption
  - Global.PlacedObject.Type.PlateTree
  - Global.PlacedObject.Type.PlayerPushback
  - Global.PlacedObject.Type.Pomegranate
  - Global.PlacedObject.Type.PomegranateVine
  - Global.PlacedObject.Type.PrinceFilter
  - Global.PlacedObject.Type.ProjectedImagePosition
  - Global.PlacedObject.Type.ProjectedStars
  - Global.PlacedObject.Type.PuffBall
  - Global.PlacedObject.Type.Rainbow
  - Global.PlacedObject.Type.RainbowNoFade
  - Global.PlacedObject.Type.Rattler
  - Global.PlacedObject.Type.ReliableIggyDirection
  - Global.PlacedObject.Type.ReliableSpear
  - Global.PlacedObject.Type.RippleLevelFilter
  - Global.PlacedObject.Type.RotPlateTree
  - Global.PlacedObject.Type.SSLightRod
  - Global.PlacedObject.Type.SandGrubHole
  - Global.PlacedObject.Type.SandGrubNetwork
  - Global.PlacedObject.Type.ScavTradeInstruction
  - Global.PlacedObject.Type.ScavengerOutpost
  - Global.PlacedObject.Type.ScavengerTreasury
  - Global.PlacedObject.Type.SeedCob
  - Global.PlacedObject.Type.ShelterSpawnPoint
  - Global.PlacedObject.Type.SkyWhalePathfinding
  - Global.PlacedObject.Type.SlimeMold
  - Global.PlacedObject.Type.SnowSource
  - Global.PlacedObject.Type.SporePlant
  - Global.PlacedObject.Type.SpotLight
  - Global.PlacedObject.Type.SteamPipe
  - Global.PlacedObject.Type.StuckDaddy
  - Global.PlacedObject.Type.SuperJumpInstruction
  - Global.PlacedObject.Type.SuperStructureFuses
  - Global.PlacedObject.Type.TempleGuard
  - Global.PlacedObject.Type.TerrainHandle
  - Global.PlacedObject.Type.TerrainRubble
  - Global.PlacedObject.Type.TerrainSunOffset
  - Global.PlacedObject.Type.TradeOutpost
  - Global.PlacedObject.Type.UniqueDataPearl
  - Global.PlacedObject.Type.Vine
  - Global.PlacedObject.Type.VoidSpawnEgg
  - Global.PlacedObject.Type.VultureGrub
  - Global.PlacedObject.Type.VultureMask
  - Global.PlacedObject.Type.WallMycelia
  - Global.PlacedObject.Type.WallSteamer
  - Global.PlacedObject.Type.WarpFilter
  - Global.PlacedObject.Type.WarpPoint
  - Global.PlacedObject.Type.WaterCurrent
  - Global.PlacedObject.Type.WaterCutoff
  - Global.PlacedObject.Type.WaterCycleBottom
  - Global.PlacedObject.Type.WaterCycleTop
  - Global.PlacedObject.Type.WaterNut
  - Global.PlacedObject.Type.WindDirection
  - Global.PlacedObject.Type.WindRect
  - Global.PlacedObject.Type.ZapCoil
  langs:
  - csharp
  - vb
  name: PlacedObject.Type
  nameWithType: PlacedObject.Type
  fullName: PlacedObject.Type
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:PlacedObject.Type</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public class PlacedObject.Type : ExtEnum<PlacedObject.Type>, IComparable, IEquatable<PlacedObject.Type>'
    content.vb: Public Class PlacedObject.Type Inherits ExtEnum(Of PlacedObject.Type) Implements IComparable, IEquatable(Of PlacedObject.Type)
  inheritance:
  - System.Object
  - Global.ExtEnumBase
  - Global.ExtEnum{PlacedObject.Type}
  implements:
  - System.IComparable
  - System.IEquatable{PlacedObject.Type}
  inheritedMembers:
  - Global.ExtEnum{PlacedObject.Type}.values
  - Global.ExtEnum{PlacedObject.Type}.Equals(System.Object)
  - Global.ExtEnum{PlacedObject.Type}.Equals(ExtEnum{PlacedObject.Type})
  - Global.ExtEnum{PlacedObject.Type}.Equals(PlacedObject.Type)
  - Global.ExtEnum{PlacedObject.Type}.GetHashCode
  - Global.ExtEnum{PlacedObject.Type}.Unregister
  - Global.ExtEnum{PlacedObject.Type}.valuesVersion
  - Global.ExtEnum{PlacedObject.Type}.Index
  - Global.ExtEnumBase.value
  - Global.ExtEnumBase.valueHash
  - Global.ExtEnumBase.index
  - Global.ExtEnumBase.localVersion
  - Global.ExtEnumBase.enumType
  - Global.ExtEnumBase.valueDictionary
  - Global.ExtEnumBase.ToString
  - Global.ExtEnumBase.CompareTo(System.Object)
  - Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  - Global.ExtEnumBase.GetExtEnumType(System.Type)
  - Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  - Global.ExtEnumBase.GetNames(System.Type)
  - Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.PlacedObject.Type.None
  commentId: F:Global.PlacedObject.Type.None
  id: None
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: None
  nameWithType: PlacedObject.Type.None
  fullName: PlacedObject.Type.None
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.None</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type None
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly None As PlacedObject.Type
- uid: Global.PlacedObject.Type.LightSource
  commentId: F:Global.PlacedObject.Type.LightSource
  id: LightSource
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LightSource
  nameWithType: PlacedObject.Type.LightSource
  fullName: PlacedObject.Type.LightSource
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LightSource</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LightSource
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LightSource As PlacedObject.Type
- uid: Global.PlacedObject.Type.FlareBomb
  commentId: F:Global.PlacedObject.Type.FlareBomb
  id: FlareBomb
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FlareBomb
  nameWithType: PlacedObject.Type.FlareBomb
  fullName: PlacedObject.Type.FlareBomb
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FlareBomb</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FlareBomb
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FlareBomb As PlacedObject.Type
- uid: Global.PlacedObject.Type.PuffBall
  commentId: F:Global.PlacedObject.Type.PuffBall
  id: PuffBall
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: PuffBall
  nameWithType: PlacedObject.Type.PuffBall
  fullName: PlacedObject.Type.PuffBall
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.PuffBall</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type PuffBall
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly PuffBall As PlacedObject.Type
- uid: Global.PlacedObject.Type.TempleGuard
  commentId: F:Global.PlacedObject.Type.TempleGuard
  id: TempleGuard
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: TempleGuard
  nameWithType: PlacedObject.Type.TempleGuard
  fullName: PlacedObject.Type.TempleGuard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.TempleGuard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type TempleGuard
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly TempleGuard As PlacedObject.Type
- uid: Global.PlacedObject.Type.LightFixture
  commentId: F:Global.PlacedObject.Type.LightFixture
  id: LightFixture
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LightFixture
  nameWithType: PlacedObject.Type.LightFixture
  fullName: PlacedObject.Type.LightFixture
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LightFixture</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LightFixture
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LightFixture As PlacedObject.Type
- uid: Global.PlacedObject.Type.DangleFruit
  commentId: F:Global.PlacedObject.Type.DangleFruit
  id: DangleFruit
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DangleFruit
  nameWithType: PlacedObject.Type.DangleFruit
  fullName: PlacedObject.Type.DangleFruit
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DangleFruit</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DangleFruit
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DangleFruit As PlacedObject.Type
- uid: Global.PlacedObject.Type.CoralStem
  commentId: F:Global.PlacedObject.Type.CoralStem
  id: CoralStem
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CoralStem
  nameWithType: PlacedObject.Type.CoralStem
  fullName: PlacedObject.Type.CoralStem
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CoralStem</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CoralStem
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CoralStem As PlacedObject.Type
- uid: Global.PlacedObject.Type.CoralStemWithNeurons
  commentId: F:Global.PlacedObject.Type.CoralStemWithNeurons
  id: CoralStemWithNeurons
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CoralStemWithNeurons
  nameWithType: PlacedObject.Type.CoralStemWithNeurons
  fullName: PlacedObject.Type.CoralStemWithNeurons
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CoralStemWithNeurons</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CoralStemWithNeurons
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CoralStemWithNeurons As PlacedObject.Type
- uid: Global.PlacedObject.Type.CoralNeuron
  commentId: F:Global.PlacedObject.Type.CoralNeuron
  id: CoralNeuron
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CoralNeuron
  nameWithType: PlacedObject.Type.CoralNeuron
  fullName: PlacedObject.Type.CoralNeuron
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CoralNeuron</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CoralNeuron
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CoralNeuron As PlacedObject.Type
- uid: Global.PlacedObject.Type.CoralCircuit
  commentId: F:Global.PlacedObject.Type.CoralCircuit
  id: CoralCircuit
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CoralCircuit
  nameWithType: PlacedObject.Type.CoralCircuit
  fullName: PlacedObject.Type.CoralCircuit
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CoralCircuit</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CoralCircuit
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CoralCircuit As PlacedObject.Type
- uid: Global.PlacedObject.Type.WallMycelia
  commentId: F:Global.PlacedObject.Type.WallMycelia
  id: WallMycelia
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WallMycelia
  nameWithType: PlacedObject.Type.WallMycelia
  fullName: PlacedObject.Type.WallMycelia
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WallMycelia</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WallMycelia
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WallMycelia As PlacedObject.Type
- uid: Global.PlacedObject.Type.ProjectedStars
  commentId: F:Global.PlacedObject.Type.ProjectedStars
  id: ProjectedStars
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ProjectedStars
  nameWithType: PlacedObject.Type.ProjectedStars
  fullName: PlacedObject.Type.ProjectedStars
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ProjectedStars</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ProjectedStars
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ProjectedStars As PlacedObject.Type
- uid: Global.PlacedObject.Type.ZapCoil
  commentId: F:Global.PlacedObject.Type.ZapCoil
  id: ZapCoil
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ZapCoil
  nameWithType: PlacedObject.Type.ZapCoil
  fullName: PlacedObject.Type.ZapCoil
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ZapCoil</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ZapCoil
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ZapCoil As PlacedObject.Type
- uid: Global.PlacedObject.Type.SuperStructureFuses
  commentId: F:Global.PlacedObject.Type.SuperStructureFuses
  id: SuperStructureFuses
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SuperStructureFuses
  nameWithType: PlacedObject.Type.SuperStructureFuses
  fullName: PlacedObject.Type.SuperStructureFuses
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SuperStructureFuses</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SuperStructureFuses
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SuperStructureFuses As PlacedObject.Type
- uid: Global.PlacedObject.Type.GravityDisruptor
  commentId: F:Global.PlacedObject.Type.GravityDisruptor
  id: GravityDisruptor
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: GravityDisruptor
  nameWithType: PlacedObject.Type.GravityDisruptor
  fullName: PlacedObject.Type.GravityDisruptor
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.GravityDisruptor</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type GravityDisruptor
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly GravityDisruptor As PlacedObject.Type
- uid: Global.PlacedObject.Type.SpotLight
  commentId: F:Global.PlacedObject.Type.SpotLight
  id: SpotLight
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SpotLight
  nameWithType: PlacedObject.Type.SpotLight
  fullName: PlacedObject.Type.SpotLight
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SpotLight</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SpotLight
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SpotLight As PlacedObject.Type
- uid: Global.PlacedObject.Type.DeepProcessing
  commentId: F:Global.PlacedObject.Type.DeepProcessing
  id: DeepProcessing
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DeepProcessing
  nameWithType: PlacedObject.Type.DeepProcessing
  fullName: PlacedObject.Type.DeepProcessing
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DeepProcessing</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DeepProcessing
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DeepProcessing As PlacedObject.Type
- uid: Global.PlacedObject.Type.Corruption
  commentId: F:Global.PlacedObject.Type.Corruption
  id: Corruption
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Corruption
  nameWithType: PlacedObject.Type.Corruption
  fullName: PlacedObject.Type.Corruption
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Corruption</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Corruption
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Corruption As PlacedObject.Type
- uid: Global.PlacedObject.Type.CorruptionTube
  commentId: F:Global.PlacedObject.Type.CorruptionTube
  id: CorruptionTube
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CorruptionTube
  nameWithType: PlacedObject.Type.CorruptionTube
  fullName: PlacedObject.Type.CorruptionTube
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CorruptionTube</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CorruptionTube
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CorruptionTube As PlacedObject.Type
- uid: Global.PlacedObject.Type.CorruptionDarkness
  commentId: F:Global.PlacedObject.Type.CorruptionDarkness
  id: CorruptionDarkness
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CorruptionDarkness
  nameWithType: PlacedObject.Type.CorruptionDarkness
  fullName: PlacedObject.Type.CorruptionDarkness
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CorruptionDarkness</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CorruptionDarkness
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CorruptionDarkness As PlacedObject.Type
- uid: Global.PlacedObject.Type.StuckDaddy
  commentId: F:Global.PlacedObject.Type.StuckDaddy
  id: StuckDaddy
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: StuckDaddy
  nameWithType: PlacedObject.Type.StuckDaddy
  fullName: PlacedObject.Type.StuckDaddy
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.StuckDaddy</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type StuckDaddy
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly StuckDaddy As PlacedObject.Type
- uid: Global.PlacedObject.Type.SSLightRod
  commentId: F:Global.PlacedObject.Type.SSLightRod
  id: SSLightRod
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SSLightRod
  nameWithType: PlacedObject.Type.SSLightRod
  fullName: PlacedObject.Type.SSLightRod
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SSLightRod</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SSLightRod
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SSLightRod As PlacedObject.Type
- uid: Global.PlacedObject.Type.CentipedeAttractor
  commentId: F:Global.PlacedObject.Type.CentipedeAttractor
  id: CentipedeAttractor
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CentipedeAttractor
  nameWithType: PlacedObject.Type.CentipedeAttractor
  fullName: PlacedObject.Type.CentipedeAttractor
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CentipedeAttractor</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CentipedeAttractor
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CentipedeAttractor As PlacedObject.Type
- uid: Global.PlacedObject.Type.DandelionPatch
  commentId: F:Global.PlacedObject.Type.DandelionPatch
  id: DandelionPatch
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DandelionPatch
  nameWithType: PlacedObject.Type.DandelionPatch
  fullName: PlacedObject.Type.DandelionPatch
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DandelionPatch</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DandelionPatch
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DandelionPatch As PlacedObject.Type
- uid: Global.PlacedObject.Type.GhostSpot
  commentId: F:Global.PlacedObject.Type.GhostSpot
  id: GhostSpot
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: GhostSpot
  nameWithType: PlacedObject.Type.GhostSpot
  fullName: PlacedObject.Type.GhostSpot
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.GhostSpot</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type GhostSpot
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly GhostSpot As PlacedObject.Type
- uid: Global.PlacedObject.Type.DataPearl
  commentId: F:Global.PlacedObject.Type.DataPearl
  id: DataPearl
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DataPearl
  nameWithType: PlacedObject.Type.DataPearl
  fullName: PlacedObject.Type.DataPearl
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DataPearl</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DataPearl
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DataPearl As PlacedObject.Type
- uid: Global.PlacedObject.Type.UniqueDataPearl
  commentId: F:Global.PlacedObject.Type.UniqueDataPearl
  id: UniqueDataPearl
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: UniqueDataPearl
  nameWithType: PlacedObject.Type.UniqueDataPearl
  fullName: PlacedObject.Type.UniqueDataPearl
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.UniqueDataPearl</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type UniqueDataPearl
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly UniqueDataPearl As PlacedObject.Type
- uid: Global.PlacedObject.Type.SeedCob
  commentId: F:Global.PlacedObject.Type.SeedCob
  id: SeedCob
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SeedCob
  nameWithType: PlacedObject.Type.SeedCob
  fullName: PlacedObject.Type.SeedCob
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SeedCob</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SeedCob
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SeedCob As PlacedObject.Type
- uid: Global.PlacedObject.Type.DeadSeedCob
  commentId: F:Global.PlacedObject.Type.DeadSeedCob
  id: DeadSeedCob
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DeadSeedCob
  nameWithType: PlacedObject.Type.DeadSeedCob
  fullName: PlacedObject.Type.DeadSeedCob
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DeadSeedCob</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DeadSeedCob
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DeadSeedCob As PlacedObject.Type
- uid: Global.PlacedObject.Type.WaterNut
  commentId: F:Global.PlacedObject.Type.WaterNut
  id: WaterNut
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WaterNut
  nameWithType: PlacedObject.Type.WaterNut
  fullName: PlacedObject.Type.WaterNut
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WaterNut</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WaterNut
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WaterNut As PlacedObject.Type
- uid: Global.PlacedObject.Type.JellyFish
  commentId: F:Global.PlacedObject.Type.JellyFish
  id: JellyFish
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: JellyFish
  nameWithType: PlacedObject.Type.JellyFish
  fullName: PlacedObject.Type.JellyFish
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.JellyFish</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type JellyFish
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly JellyFish As PlacedObject.Type
- uid: Global.PlacedObject.Type.KarmaFlower
  commentId: F:Global.PlacedObject.Type.KarmaFlower
  id: KarmaFlower
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: KarmaFlower
  nameWithType: PlacedObject.Type.KarmaFlower
  fullName: PlacedObject.Type.KarmaFlower
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.KarmaFlower</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type KarmaFlower
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly KarmaFlower As PlacedObject.Type
- uid: Global.PlacedObject.Type.Mushroom
  commentId: F:Global.PlacedObject.Type.Mushroom
  id: Mushroom
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Mushroom
  nameWithType: PlacedObject.Type.Mushroom
  fullName: PlacedObject.Type.Mushroom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Mushroom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Mushroom
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Mushroom As PlacedObject.Type
- uid: Global.PlacedObject.Type.SlimeMold
  commentId: F:Global.PlacedObject.Type.SlimeMold
  id: SlimeMold
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SlimeMold
  nameWithType: PlacedObject.Type.SlimeMold
  fullName: PlacedObject.Type.SlimeMold
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SlimeMold</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SlimeMold
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SlimeMold As PlacedObject.Type
- uid: Global.PlacedObject.Type.FlyLure
  commentId: F:Global.PlacedObject.Type.FlyLure
  id: FlyLure
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FlyLure
  nameWithType: PlacedObject.Type.FlyLure
  fullName: PlacedObject.Type.FlyLure
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FlyLure</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FlyLure
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FlyLure As PlacedObject.Type
- uid: Global.PlacedObject.Type.CosmeticSlimeMold
  commentId: F:Global.PlacedObject.Type.CosmeticSlimeMold
  id: CosmeticSlimeMold
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CosmeticSlimeMold
  nameWithType: PlacedObject.Type.CosmeticSlimeMold
  fullName: PlacedObject.Type.CosmeticSlimeMold
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CosmeticSlimeMold</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CosmeticSlimeMold
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CosmeticSlimeMold As PlacedObject.Type
- uid: Global.PlacedObject.Type.CosmeticSlimeMold2
  commentId: F:Global.PlacedObject.Type.CosmeticSlimeMold2
  id: CosmeticSlimeMold2
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CosmeticSlimeMold2
  nameWithType: PlacedObject.Type.CosmeticSlimeMold2
  fullName: PlacedObject.Type.CosmeticSlimeMold2
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CosmeticSlimeMold2</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CosmeticSlimeMold2
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CosmeticSlimeMold2 As PlacedObject.Type
- uid: Global.PlacedObject.Type.FirecrackerPlant
  commentId: F:Global.PlacedObject.Type.FirecrackerPlant
  id: FirecrackerPlant
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FirecrackerPlant
  nameWithType: PlacedObject.Type.FirecrackerPlant
  fullName: PlacedObject.Type.FirecrackerPlant
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FirecrackerPlant</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FirecrackerPlant
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FirecrackerPlant As PlacedObject.Type
- uid: Global.PlacedObject.Type.VultureGrub
  commentId: F:Global.PlacedObject.Type.VultureGrub
  id: VultureGrub
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: VultureGrub
  nameWithType: PlacedObject.Type.VultureGrub
  fullName: PlacedObject.Type.VultureGrub
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.VultureGrub</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type VultureGrub
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly VultureGrub As PlacedObject.Type
- uid: Global.PlacedObject.Type.DeadVultureGrub
  commentId: F:Global.PlacedObject.Type.DeadVultureGrub
  id: DeadVultureGrub
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DeadVultureGrub
  nameWithType: PlacedObject.Type.DeadVultureGrub
  fullName: PlacedObject.Type.DeadVultureGrub
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DeadVultureGrub</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DeadVultureGrub
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DeadVultureGrub As PlacedObject.Type
- uid: Global.PlacedObject.Type.VoidSpawnEgg
  commentId: F:Global.PlacedObject.Type.VoidSpawnEgg
  id: VoidSpawnEgg
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: VoidSpawnEgg
  nameWithType: PlacedObject.Type.VoidSpawnEgg
  fullName: PlacedObject.Type.VoidSpawnEgg
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.VoidSpawnEgg</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type VoidSpawnEgg
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly VoidSpawnEgg As PlacedObject.Type
- uid: Global.PlacedObject.Type.ReliableSpear
  commentId: F:Global.PlacedObject.Type.ReliableSpear
  id: ReliableSpear
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ReliableSpear
  nameWithType: PlacedObject.Type.ReliableSpear
  fullName: PlacedObject.Type.ReliableSpear
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ReliableSpear</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ReliableSpear
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ReliableSpear As PlacedObject.Type
- uid: Global.PlacedObject.Type.SuperJumpInstruction
  commentId: F:Global.PlacedObject.Type.SuperJumpInstruction
  id: SuperJumpInstruction
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SuperJumpInstruction
  nameWithType: PlacedObject.Type.SuperJumpInstruction
  fullName: PlacedObject.Type.SuperJumpInstruction
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SuperJumpInstruction</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SuperJumpInstruction
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SuperJumpInstruction As PlacedObject.Type
- uid: Global.PlacedObject.Type.ProjectedImagePosition
  commentId: F:Global.PlacedObject.Type.ProjectedImagePosition
  id: ProjectedImagePosition
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ProjectedImagePosition
  nameWithType: PlacedObject.Type.ProjectedImagePosition
  fullName: PlacedObject.Type.ProjectedImagePosition
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ProjectedImagePosition</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ProjectedImagePosition
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ProjectedImagePosition As PlacedObject.Type
- uid: Global.PlacedObject.Type.ExitSymbolShelter
  commentId: F:Global.PlacedObject.Type.ExitSymbolShelter
  id: ExitSymbolShelter
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ExitSymbolShelter
  nameWithType: PlacedObject.Type.ExitSymbolShelter
  fullName: PlacedObject.Type.ExitSymbolShelter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ExitSymbolShelter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ExitSymbolShelter
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ExitSymbolShelter As PlacedObject.Type
- uid: Global.PlacedObject.Type.ExitSymbolHidden
  commentId: F:Global.PlacedObject.Type.ExitSymbolHidden
  id: ExitSymbolHidden
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ExitSymbolHidden
  nameWithType: PlacedObject.Type.ExitSymbolHidden
  fullName: PlacedObject.Type.ExitSymbolHidden
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ExitSymbolHidden</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ExitSymbolHidden
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ExitSymbolHidden As PlacedObject.Type
- uid: Global.PlacedObject.Type.NoSpearStickZone
  commentId: F:Global.PlacedObject.Type.NoSpearStickZone
  id: NoSpearStickZone
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: NoSpearStickZone
  nameWithType: PlacedObject.Type.NoSpearStickZone
  fullName: PlacedObject.Type.NoSpearStickZone
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.NoSpearStickZone</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type NoSpearStickZone
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly NoSpearStickZone As PlacedObject.Type
- uid: Global.PlacedObject.Type.LanternOnStick
  commentId: F:Global.PlacedObject.Type.LanternOnStick
  id: LanternOnStick
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LanternOnStick
  nameWithType: PlacedObject.Type.LanternOnStick
  fullName: PlacedObject.Type.LanternOnStick
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LanternOnStick</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LanternOnStick
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LanternOnStick As PlacedObject.Type
- uid: Global.PlacedObject.Type.ScavengerOutpost
  commentId: F:Global.PlacedObject.Type.ScavengerOutpost
  id: ScavengerOutpost
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ScavengerOutpost
  nameWithType: PlacedObject.Type.ScavengerOutpost
  fullName: PlacedObject.Type.ScavengerOutpost
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ScavengerOutpost</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ScavengerOutpost
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ScavengerOutpost As PlacedObject.Type
- uid: Global.PlacedObject.Type.TradeOutpost
  commentId: F:Global.PlacedObject.Type.TradeOutpost
  id: TradeOutpost
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: TradeOutpost
  nameWithType: PlacedObject.Type.TradeOutpost
  fullName: PlacedObject.Type.TradeOutpost
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.TradeOutpost</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type TradeOutpost
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly TradeOutpost As PlacedObject.Type
- uid: Global.PlacedObject.Type.ScavengerTreasury
  commentId: F:Global.PlacedObject.Type.ScavengerTreasury
  id: ScavengerTreasury
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ScavengerTreasury
  nameWithType: PlacedObject.Type.ScavengerTreasury
  fullName: PlacedObject.Type.ScavengerTreasury
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ScavengerTreasury</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ScavengerTreasury
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ScavengerTreasury As PlacedObject.Type
- uid: Global.PlacedObject.Type.ScavTradeInstruction
  commentId: F:Global.PlacedObject.Type.ScavTradeInstruction
  id: ScavTradeInstruction
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ScavTradeInstruction
  nameWithType: PlacedObject.Type.ScavTradeInstruction
  fullName: PlacedObject.Type.ScavTradeInstruction
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ScavTradeInstruction</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ScavTradeInstruction
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ScavTradeInstruction As PlacedObject.Type
- uid: Global.PlacedObject.Type.CustomDecal
  commentId: F:Global.PlacedObject.Type.CustomDecal
  id: CustomDecal
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CustomDecal
  nameWithType: PlacedObject.Type.CustomDecal
  fullName: PlacedObject.Type.CustomDecal
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CustomDecal</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CustomDecal
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CustomDecal As PlacedObject.Type
- uid: Global.PlacedObject.Type.InsectGroup
  commentId: F:Global.PlacedObject.Type.InsectGroup
  id: InsectGroup
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: InsectGroup
  nameWithType: PlacedObject.Type.InsectGroup
  fullName: PlacedObject.Type.InsectGroup
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.InsectGroup</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type InsectGroup
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly InsectGroup As PlacedObject.Type
- uid: Global.PlacedObject.Type.PlayerPushback
  commentId: F:Global.PlacedObject.Type.PlayerPushback
  id: PlayerPushback
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: PlayerPushback
  nameWithType: PlacedObject.Type.PlayerPushback
  fullName: PlacedObject.Type.PlayerPushback
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.PlayerPushback</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type PlayerPushback
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly PlayerPushback As PlacedObject.Type
- uid: Global.PlacedObject.Type.MultiplayerItem
  commentId: F:Global.PlacedObject.Type.MultiplayerItem
  id: MultiplayerItem
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: MultiplayerItem
  nameWithType: PlacedObject.Type.MultiplayerItem
  fullName: PlacedObject.Type.MultiplayerItem
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.MultiplayerItem</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type MultiplayerItem
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly MultiplayerItem As PlacedObject.Type
- uid: Global.PlacedObject.Type.SporePlant
  commentId: F:Global.PlacedObject.Type.SporePlant
  id: SporePlant
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SporePlant
  nameWithType: PlacedObject.Type.SporePlant
  fullName: PlacedObject.Type.SporePlant
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SporePlant</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SporePlant
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SporePlant As PlacedObject.Type
- uid: Global.PlacedObject.Type.GoldToken
  commentId: F:Global.PlacedObject.Type.GoldToken
  id: GoldToken
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: GoldToken
  nameWithType: PlacedObject.Type.GoldToken
  fullName: PlacedObject.Type.GoldToken
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.GoldToken</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type GoldToken
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly GoldToken As PlacedObject.Type
- uid: Global.PlacedObject.Type.BlueToken
  commentId: F:Global.PlacedObject.Type.BlueToken
  id: BlueToken
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: BlueToken
  nameWithType: PlacedObject.Type.BlueToken
  fullName: PlacedObject.Type.BlueToken
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.BlueToken</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type BlueToken
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly BlueToken As PlacedObject.Type
- uid: Global.PlacedObject.Type.GreenToken
  commentId: F:Global.PlacedObject.Type.GreenToken
  id: GreenToken
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: GreenToken
  nameWithType: PlacedObject.Type.GreenToken
  fullName: PlacedObject.Type.GreenToken
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.GreenToken</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type GreenToken
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly GreenToken As PlacedObject.Type
- uid: Global.PlacedObject.Type.DeadTokenStalk
  commentId: F:Global.PlacedObject.Type.DeadTokenStalk
  id: DeadTokenStalk
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DeadTokenStalk
  nameWithType: PlacedObject.Type.DeadTokenStalk
  fullName: PlacedObject.Type.DeadTokenStalk
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DeadTokenStalk</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DeadTokenStalk
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DeadTokenStalk As PlacedObject.Type
- uid: Global.PlacedObject.Type.NeedleEgg
  commentId: F:Global.PlacedObject.Type.NeedleEgg
  id: NeedleEgg
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: NeedleEgg
  nameWithType: PlacedObject.Type.NeedleEgg
  fullName: PlacedObject.Type.NeedleEgg
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.NeedleEgg</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type NeedleEgg
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly NeedleEgg As PlacedObject.Type
- uid: Global.PlacedObject.Type.BrokenShelterWaterLevel
  commentId: F:Global.PlacedObject.Type.BrokenShelterWaterLevel
  id: BrokenShelterWaterLevel
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: BrokenShelterWaterLevel
  nameWithType: PlacedObject.Type.BrokenShelterWaterLevel
  fullName: PlacedObject.Type.BrokenShelterWaterLevel
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.BrokenShelterWaterLevel</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type BrokenShelterWaterLevel
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly BrokenShelterWaterLevel As PlacedObject.Type
- uid: Global.PlacedObject.Type.BubbleGrass
  commentId: F:Global.PlacedObject.Type.BubbleGrass
  id: BubbleGrass
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: BubbleGrass
  nameWithType: PlacedObject.Type.BubbleGrass
  fullName: PlacedObject.Type.BubbleGrass
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.BubbleGrass</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type BubbleGrass
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly BubbleGrass As PlacedObject.Type
- uid: Global.PlacedObject.Type.Filter
  commentId: F:Global.PlacedObject.Type.Filter
  id: Filter
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: PlacedObject.Type.Filter
  fullName: PlacedObject.Type.Filter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Filter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Filter
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Filter As PlacedObject.Type
- uid: Global.PlacedObject.Type.ReliableIggyDirection
  commentId: F:Global.PlacedObject.Type.ReliableIggyDirection
  id: ReliableIggyDirection
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ReliableIggyDirection
  nameWithType: PlacedObject.Type.ReliableIggyDirection
  fullName: PlacedObject.Type.ReliableIggyDirection
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ReliableIggyDirection</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ReliableIggyDirection
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ReliableIggyDirection As PlacedObject.Type
- uid: Global.PlacedObject.Type.Hazer
  commentId: F:Global.PlacedObject.Type.Hazer
  id: Hazer
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Hazer
  nameWithType: PlacedObject.Type.Hazer
  fullName: PlacedObject.Type.Hazer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Hazer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Hazer
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Hazer As PlacedObject.Type
- uid: Global.PlacedObject.Type.DeadHazer
  commentId: F:Global.PlacedObject.Type.DeadHazer
  id: DeadHazer
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DeadHazer
  nameWithType: PlacedObject.Type.DeadHazer
  fullName: PlacedObject.Type.DeadHazer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DeadHazer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DeadHazer
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DeadHazer As PlacedObject.Type
- uid: Global.PlacedObject.Type.Rainbow
  commentId: F:Global.PlacedObject.Type.Rainbow
  id: Rainbow
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Rainbow
  nameWithType: PlacedObject.Type.Rainbow
  fullName: PlacedObject.Type.Rainbow
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Rainbow</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Rainbow
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Rainbow As PlacedObject.Type
- uid: Global.PlacedObject.Type.LightBeam
  commentId: F:Global.PlacedObject.Type.LightBeam
  id: LightBeam
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LightBeam
  nameWithType: PlacedObject.Type.LightBeam
  fullName: PlacedObject.Type.LightBeam
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LightBeam</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LightBeam
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LightBeam As PlacedObject.Type
- uid: Global.PlacedObject.Type.NoLeviathanStrandingZone
  commentId: F:Global.PlacedObject.Type.NoLeviathanStrandingZone
  id: NoLeviathanStrandingZone
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: NoLeviathanStrandingZone
  nameWithType: PlacedObject.Type.NoLeviathanStrandingZone
  fullName: PlacedObject.Type.NoLeviathanStrandingZone
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.NoLeviathanStrandingZone</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type NoLeviathanStrandingZone
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly NoLeviathanStrandingZone As PlacedObject.Type
- uid: Global.PlacedObject.Type.WindRect
  commentId: F:Global.PlacedObject.Type.WindRect
  id: WindRect
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WindRect
  nameWithType: PlacedObject.Type.WindRect
  fullName: PlacedObject.Type.WindRect
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WindRect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WindRect
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WindRect As PlacedObject.Type
- uid: Global.PlacedObject.Type.TerrainHandle
  commentId: F:Global.PlacedObject.Type.TerrainHandle
  id: TerrainHandle
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: TerrainHandle
  nameWithType: PlacedObject.Type.TerrainHandle
  fullName: PlacedObject.Type.TerrainHandle
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.TerrainHandle</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type TerrainHandle
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly TerrainHandle As PlacedObject.Type
- uid: Global.PlacedObject.Type.ShelterSpawnPoint
  commentId: F:Global.PlacedObject.Type.ShelterSpawnPoint
  id: ShelterSpawnPoint
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ShelterSpawnPoint
  nameWithType: PlacedObject.Type.ShelterSpawnPoint
  fullName: PlacedObject.Type.ShelterSpawnPoint
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ShelterSpawnPoint</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ShelterSpawnPoint
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ShelterSpawnPoint As PlacedObject.Type
- uid: Global.PlacedObject.Type.FluxWaterfall
  commentId: F:Global.PlacedObject.Type.FluxWaterfall
  id: FluxWaterfall
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FluxWaterfall
  nameWithType: PlacedObject.Type.FluxWaterfall
  fullName: PlacedObject.Type.FluxWaterfall
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FluxWaterfall</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FluxWaterfall
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FluxWaterfall As PlacedObject.Type
- uid: Global.PlacedObject.Type.FluxDrain
  commentId: F:Global.PlacedObject.Type.FluxDrain
  id: FluxDrain
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FluxDrain
  nameWithType: PlacedObject.Type.FluxDrain
  fullName: PlacedObject.Type.FluxDrain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FluxDrain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FluxDrain
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FluxDrain As PlacedObject.Type
- uid: Global.PlacedObject.Type.TerrainRubble
  commentId: F:Global.PlacedObject.Type.TerrainRubble
  id: TerrainRubble
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: TerrainRubble
  nameWithType: PlacedObject.Type.TerrainRubble
  fullName: PlacedObject.Type.TerrainRubble
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.TerrainRubble</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type TerrainRubble
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly TerrainRubble As PlacedObject.Type
- uid: Global.PlacedObject.Type.TerrainSunOffset
  commentId: F:Global.PlacedObject.Type.TerrainSunOffset
  id: TerrainSunOffset
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: TerrainSunOffset
  nameWithType: PlacedObject.Type.TerrainSunOffset
  fullName: PlacedObject.Type.TerrainSunOffset
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.TerrainSunOffset</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type TerrainSunOffset
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly TerrainSunOffset As PlacedObject.Type
- uid: Global.PlacedObject.Type.WaterCycleTop
  commentId: F:Global.PlacedObject.Type.WaterCycleTop
  id: WaterCycleTop
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WaterCycleTop
  nameWithType: PlacedObject.Type.WaterCycleTop
  fullName: PlacedObject.Type.WaterCycleTop
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WaterCycleTop</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WaterCycleTop
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WaterCycleTop As PlacedObject.Type
- uid: Global.PlacedObject.Type.WaterCycleBottom
  commentId: F:Global.PlacedObject.Type.WaterCycleBottom
  id: WaterCycleBottom
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WaterCycleBottom
  nameWithType: PlacedObject.Type.WaterCycleBottom
  fullName: PlacedObject.Type.WaterCycleBottom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WaterCycleBottom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WaterCycleBottom
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WaterCycleBottom As PlacedObject.Type
- uid: Global.PlacedObject.Type.Geyser
  commentId: F:Global.PlacedObject.Type.Geyser
  id: Geyser
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Geyser
  nameWithType: PlacedObject.Type.Geyser
  fullName: PlacedObject.Type.Geyser
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Geyser</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Geyser
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Geyser As PlacedObject.Type
- uid: Global.PlacedObject.Type.WaterCutoff
  commentId: F:Global.PlacedObject.Type.WaterCutoff
  id: WaterCutoff
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WaterCutoff
  nameWithType: PlacedObject.Type.WaterCutoff
  fullName: PlacedObject.Type.WaterCutoff
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WaterCutoff</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WaterCutoff
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WaterCutoff As PlacedObject.Type
- uid: Global.PlacedObject.Type.AirPocket
  commentId: F:Global.PlacedObject.Type.AirPocket
  id: AirPocket
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: AirPocket
  nameWithType: PlacedObject.Type.AirPocket
  fullName: PlacedObject.Type.AirPocket
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.AirPocket</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type AirPocket
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly AirPocket As PlacedObject.Type
- uid: Global.PlacedObject.Type.PlateTree
  commentId: F:Global.PlacedObject.Type.PlateTree
  id: PlateTree
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: PlateTree
  nameWithType: PlacedObject.Type.PlateTree
  fullName: PlacedObject.Type.PlateTree
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.PlateTree</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type PlateTree
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly PlateTree As PlacedObject.Type
- uid: Global.PlacedObject.Type.RotPlateTree
  commentId: F:Global.PlacedObject.Type.RotPlateTree
  id: RotPlateTree
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: RotPlateTree
  nameWithType: PlacedObject.Type.RotPlateTree
  fullName: PlacedObject.Type.RotPlateTree
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.RotPlateTree</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type RotPlateTree
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly RotPlateTree As PlacedObject.Type
- uid: Global.PlacedObject.Type.WaterCurrent
  commentId: F:Global.PlacedObject.Type.WaterCurrent
  id: WaterCurrent
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WaterCurrent
  nameWithType: PlacedObject.Type.WaterCurrent
  fullName: PlacedObject.Type.WaterCurrent
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WaterCurrent</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WaterCurrent
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WaterCurrent As PlacedObject.Type
- uid: Global.PlacedObject.Type.NoCurrentZone
  commentId: F:Global.PlacedObject.Type.NoCurrentZone
  id: NoCurrentZone
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: NoCurrentZone
  nameWithType: PlacedObject.Type.NoCurrentZone
  fullName: PlacedObject.Type.NoCurrentZone
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.NoCurrentZone</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type NoCurrentZone
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly NoCurrentZone As PlacedObject.Type
- uid: Global.PlacedObject.Type.BlackSpot
  commentId: F:Global.PlacedObject.Type.BlackSpot
  id: BlackSpot
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: BlackSpot
  nameWithType: PlacedObject.Type.BlackSpot
  fullName: PlacedObject.Type.BlackSpot
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.BlackSpot</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type BlackSpot
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly BlackSpot As PlacedObject.Type
- uid: Global.PlacedObject.Type.MudPit
  commentId: F:Global.PlacedObject.Type.MudPit
  id: MudPit
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: MudPit
  nameWithType: PlacedObject.Type.MudPit
  fullName: PlacedObject.Type.MudPit
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.MudPit</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type MudPit
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly MudPit As PlacedObject.Type
- uid: Global.PlacedObject.Type.FairyParticleSettings
  commentId: F:Global.PlacedObject.Type.FairyParticleSettings
  id: FairyParticleSettings
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FairyParticleSettings
  nameWithType: PlacedObject.Type.FairyParticleSettings
  fullName: PlacedObject.Type.FairyParticleSettings
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FairyParticleSettings</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FairyParticleSettings
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FairyParticleSettings As PlacedObject.Type
- uid: Global.PlacedObject.Type.DayNightSettings
  commentId: F:Global.PlacedObject.Type.DayNightSettings
  id: DayNightSettings
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DayNightSettings
  nameWithType: PlacedObject.Type.DayNightSettings
  fullName: PlacedObject.Type.DayNightSettings
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DayNightSettings</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DayNightSettings
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DayNightSettings As PlacedObject.Type
- uid: Global.PlacedObject.Type.EnergySwirl
  commentId: F:Global.PlacedObject.Type.EnergySwirl
  id: EnergySwirl
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: EnergySwirl
  nameWithType: PlacedObject.Type.EnergySwirl
  fullName: PlacedObject.Type.EnergySwirl
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.EnergySwirl</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type EnergySwirl
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly EnergySwirl As PlacedObject.Type
- uid: Global.PlacedObject.Type.LightningMachine
  commentId: F:Global.PlacedObject.Type.LightningMachine
  id: LightningMachine
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LightningMachine
  nameWithType: PlacedObject.Type.LightningMachine
  fullName: PlacedObject.Type.LightningMachine
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LightningMachine</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LightningMachine
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LightningMachine As PlacedObject.Type
- uid: Global.PlacedObject.Type.SteamPipe
  commentId: F:Global.PlacedObject.Type.SteamPipe
  id: SteamPipe
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SteamPipe
  nameWithType: PlacedObject.Type.SteamPipe
  fullName: PlacedObject.Type.SteamPipe
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SteamPipe</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SteamPipe
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SteamPipe As PlacedObject.Type
- uid: Global.PlacedObject.Type.WallSteamer
  commentId: F:Global.PlacedObject.Type.WallSteamer
  id: WallSteamer
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WallSteamer
  nameWithType: PlacedObject.Type.WallSteamer
  fullName: PlacedObject.Type.WallSteamer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WallSteamer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WallSteamer
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WallSteamer As PlacedObject.Type
- uid: Global.PlacedObject.Type.Vine
  commentId: F:Global.PlacedObject.Type.Vine
  id: Vine
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Vine
  nameWithType: PlacedObject.Type.Vine
  fullName: PlacedObject.Type.Vine
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Vine</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Vine
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Vine As PlacedObject.Type
- uid: Global.PlacedObject.Type.VultureMask
  commentId: F:Global.PlacedObject.Type.VultureMask
  id: VultureMask
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: VultureMask
  nameWithType: PlacedObject.Type.VultureMask
  fullName: PlacedObject.Type.VultureMask
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.VultureMask</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type VultureMask
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly VultureMask As PlacedObject.Type
- uid: Global.PlacedObject.Type.SnowSource
  commentId: F:Global.PlacedObject.Type.SnowSource
  id: SnowSource
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SnowSource
  nameWithType: PlacedObject.Type.SnowSource
  fullName: PlacedObject.Type.SnowSource
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SnowSource</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SnowSource
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SnowSource As PlacedObject.Type
- uid: Global.PlacedObject.Type.DeathFallFocus
  commentId: F:Global.PlacedObject.Type.DeathFallFocus
  id: DeathFallFocus
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DeathFallFocus
  nameWithType: PlacedObject.Type.DeathFallFocus
  fullName: PlacedObject.Type.DeathFallFocus
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DeathFallFocus</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DeathFallFocus
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DeathFallFocus As PlacedObject.Type
- uid: Global.PlacedObject.Type.CellDistortion
  commentId: F:Global.PlacedObject.Type.CellDistortion
  id: CellDistortion
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CellDistortion
  nameWithType: PlacedObject.Type.CellDistortion
  fullName: PlacedObject.Type.CellDistortion
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CellDistortion</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CellDistortion
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CellDistortion As PlacedObject.Type
- uid: Global.PlacedObject.Type.LocalBlizzard
  commentId: F:Global.PlacedObject.Type.LocalBlizzard
  id: LocalBlizzard
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LocalBlizzard
  nameWithType: PlacedObject.Type.LocalBlizzard
  fullName: PlacedObject.Type.LocalBlizzard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LocalBlizzard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LocalBlizzard
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LocalBlizzard As PlacedObject.Type
- uid: Global.PlacedObject.Type.NeuronSpawner
  commentId: F:Global.PlacedObject.Type.NeuronSpawner
  id: NeuronSpawner
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: NeuronSpawner
  nameWithType: PlacedObject.Type.NeuronSpawner
  fullName: PlacedObject.Type.NeuronSpawner
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.NeuronSpawner</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type NeuronSpawner
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly NeuronSpawner As PlacedObject.Type
- uid: Global.PlacedObject.Type.HangingPearls
  commentId: F:Global.PlacedObject.Type.HangingPearls
  id: HangingPearls
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: HangingPearls
  nameWithType: PlacedObject.Type.HangingPearls
  fullName: PlacedObject.Type.HangingPearls
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.HangingPearls</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type HangingPearls
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly HangingPearls As PlacedObject.Type
- uid: Global.PlacedObject.Type.Lantern
  commentId: F:Global.PlacedObject.Type.Lantern
  id: Lantern
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Lantern
  nameWithType: PlacedObject.Type.Lantern
  fullName: PlacedObject.Type.Lantern
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Lantern</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Lantern
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Lantern As PlacedObject.Type
- uid: Global.PlacedObject.Type.ExitSymbolAncientShelter
  commentId: F:Global.PlacedObject.Type.ExitSymbolAncientShelter
  id: ExitSymbolAncientShelter
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ExitSymbolAncientShelter
  nameWithType: PlacedObject.Type.ExitSymbolAncientShelter
  fullName: PlacedObject.Type.ExitSymbolAncientShelter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ExitSymbolAncientShelter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ExitSymbolAncientShelter
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ExitSymbolAncientShelter As PlacedObject.Type
- uid: Global.PlacedObject.Type.BlinkingFlower
  commentId: F:Global.PlacedObject.Type.BlinkingFlower
  id: BlinkingFlower
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: BlinkingFlower
  nameWithType: PlacedObject.Type.BlinkingFlower
  fullName: PlacedObject.Type.BlinkingFlower
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.BlinkingFlower</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type BlinkingFlower
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly BlinkingFlower As PlacedObject.Type
- uid: Global.PlacedObject.Type.AdjustableFan
  commentId: F:Global.PlacedObject.Type.AdjustableFan
  id: AdjustableFan
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: AdjustableFan
  nameWithType: PlacedObject.Type.AdjustableFan
  fullName: PlacedObject.Type.AdjustableFan
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.AdjustableFan</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type AdjustableFan
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly AdjustableFan As PlacedObject.Type
- uid: Global.PlacedObject.Type.HarmfulSteam
  commentId: F:Global.PlacedObject.Type.HarmfulSteam
  id: HarmfulSteam
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: HarmfulSteam
  nameWithType: PlacedObject.Type.HarmfulSteam
  fullName: PlacedObject.Type.HarmfulSteam
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.HarmfulSteam</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type HarmfulSteam
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly HarmfulSteam As PlacedObject.Type
- uid: Global.PlacedObject.Type.ARKillRect
  commentId: F:Global.PlacedObject.Type.ARKillRect
  id: ARKillRect
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: ARKillRect
  nameWithType: PlacedObject.Type.ARKillRect
  fullName: PlacedObject.Type.ARKillRect
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.ARKillRect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type ARKillRect
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly ARKillRect As PlacedObject.Type
- uid: Global.PlacedObject.Type.RainbowNoFade
  commentId: F:Global.PlacedObject.Type.RainbowNoFade
  id: RainbowNoFade
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: RainbowNoFade
  nameWithType: PlacedObject.Type.RainbowNoFade
  fullName: PlacedObject.Type.RainbowNoFade
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.RainbowNoFade</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type RainbowNoFade
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly RainbowNoFade As PlacedObject.Type
- uid: Global.PlacedObject.Type.WarpPoint
  commentId: F:Global.PlacedObject.Type.WarpPoint
  id: WarpPoint
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WarpPoint
  nameWithType: PlacedObject.Type.WarpPoint
  fullName: PlacedObject.Type.WarpPoint
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WarpPoint</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WarpPoint
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WarpPoint As PlacedObject.Type
- uid: Global.PlacedObject.Type.DynamicWarpTarget
  commentId: F:Global.PlacedObject.Type.DynamicWarpTarget
  id: DynamicWarpTarget
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: DynamicWarpTarget
  nameWithType: PlacedObject.Type.DynamicWarpTarget
  fullName: PlacedObject.Type.DynamicWarpTarget
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.DynamicWarpTarget</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type DynamicWarpTarget
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly DynamicWarpTarget As PlacedObject.Type
- uid: Global.PlacedObject.Type.RippleLevelFilter
  commentId: F:Global.PlacedObject.Type.RippleLevelFilter
  id: RippleLevelFilter
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: RippleLevelFilter
  nameWithType: PlacedObject.Type.RippleLevelFilter
  fullName: PlacedObject.Type.RippleLevelFilter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.RippleLevelFilter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type RippleLevelFilter
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly RippleLevelFilter As PlacedObject.Type
- uid: Global.PlacedObject.Type.PrinceFilter
  commentId: F:Global.PlacedObject.Type.PrinceFilter
  id: PrinceFilter
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: PrinceFilter
  nameWithType: PlacedObject.Type.PrinceFilter
  fullName: PlacedObject.Type.PrinceFilter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.PrinceFilter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type PrinceFilter
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly PrinceFilter As PlacedObject.Type
- uid: Global.PlacedObject.Type.WarpFilter
  commentId: F:Global.PlacedObject.Type.WarpFilter
  id: WarpFilter
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WarpFilter
  nameWithType: PlacedObject.Type.WarpFilter
  fullName: PlacedObject.Type.WarpFilter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WarpFilter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WarpFilter
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WarpFilter As PlacedObject.Type
- uid: Global.PlacedObject.Type.CosmeticRipple
  commentId: F:Global.PlacedObject.Type.CosmeticRipple
  id: CosmeticRipple
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: CosmeticRipple
  nameWithType: PlacedObject.Type.CosmeticRipple
  fullName: PlacedObject.Type.CosmeticRipple
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.CosmeticRipple</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type CosmeticRipple
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly CosmeticRipple As PlacedObject.Type
- uid: Global.PlacedObject.Type.Pomegranate
  commentId: F:Global.PlacedObject.Type.Pomegranate
  id: Pomegranate
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Pomegranate
  nameWithType: PlacedObject.Type.Pomegranate
  fullName: PlacedObject.Type.Pomegranate
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Pomegranate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Pomegranate
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Pomegranate As PlacedObject.Type
- uid: Global.PlacedObject.Type.PomegranateVine
  commentId: F:Global.PlacedObject.Type.PomegranateVine
  id: PomegranateVine
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: PomegranateVine
  nameWithType: PlacedObject.Type.PomegranateVine
  fullName: PlacedObject.Type.PomegranateVine
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.PomegranateVine</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type PomegranateVine
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly PomegranateVine As PlacedObject.Type
- uid: Global.PlacedObject.Type.HugeTurbine
  commentId: F:Global.PlacedObject.Type.HugeTurbine
  id: HugeTurbine
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: HugeTurbine
  nameWithType: PlacedObject.Type.HugeTurbine
  fullName: PlacedObject.Type.HugeTurbine
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.HugeTurbine</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type HugeTurbine
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly HugeTurbine As PlacedObject.Type
- uid: Global.PlacedObject.Type.FloatingDebris
  commentId: F:Global.PlacedObject.Type.FloatingDebris
  id: FloatingDebris
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FloatingDebris
  nameWithType: PlacedObject.Type.FloatingDebris
  fullName: PlacedObject.Type.FloatingDebris
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FloatingDebris</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FloatingDebris
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FloatingDebris As PlacedObject.Type
- uid: Global.PlacedObject.Type.SandGrubHole
  commentId: F:Global.PlacedObject.Type.SandGrubHole
  id: SandGrubHole
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SandGrubHole
  nameWithType: PlacedObject.Type.SandGrubHole
  fullName: PlacedObject.Type.SandGrubHole
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SandGrubHole</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SandGrubHole
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SandGrubHole As PlacedObject.Type
- uid: Global.PlacedObject.Type.SandGrubNetwork
  commentId: F:Global.PlacedObject.Type.SandGrubNetwork
  id: SandGrubNetwork
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SandGrubNetwork
  nameWithType: PlacedObject.Type.SandGrubNetwork
  fullName: PlacedObject.Type.SandGrubNetwork
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SandGrubNetwork</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SandGrubNetwork
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SandGrubNetwork As PlacedObject.Type
- uid: Global.PlacedObject.Type.PassiveCorruption
  commentId: F:Global.PlacedObject.Type.PassiveCorruption
  id: PassiveCorruption
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: PassiveCorruption
  nameWithType: PlacedObject.Type.PassiveCorruption
  fullName: PlacedObject.Type.PassiveCorruption
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.PassiveCorruption</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type PassiveCorruption
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly PassiveCorruption As PlacedObject.Type
- uid: Global.PlacedObject.Type.GooDrips
  commentId: F:Global.PlacedObject.Type.GooDrips
  id: GooDrips
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: GooDrips
  nameWithType: PlacedObject.Type.GooDrips
  fullName: PlacedObject.Type.GooDrips
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.GooDrips</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type GooDrips
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly GooDrips As PlacedObject.Type
- uid: Global.PlacedObject.Type.LobeTree
  commentId: F:Global.PlacedObject.Type.LobeTree
  id: LobeTree
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LobeTree
  nameWithType: PlacedObject.Type.LobeTree
  fullName: PlacedObject.Type.LobeTree
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LobeTree</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LobeTree
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LobeTree As PlacedObject.Type
- uid: Global.PlacedObject.Type.BrainMold
  commentId: F:Global.PlacedObject.Type.BrainMold
  id: BrainMold
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: BrainMold
  nameWithType: PlacedObject.Type.BrainMold
  fullName: PlacedObject.Type.BrainMold
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.BrainMold</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type BrainMold
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly BrainMold As PlacedObject.Type
- uid: Global.PlacedObject.Type.Rattler
  commentId: F:Global.PlacedObject.Type.Rattler
  id: Rattler
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Rattler
  nameWithType: PlacedObject.Type.Rattler
  fullName: PlacedObject.Type.Rattler
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.Rattler</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type Rattler
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly Rattler As PlacedObject.Type
- uid: Global.PlacedObject.Type.LocustCloud
  commentId: F:Global.PlacedObject.Type.LocustCloud
  id: LocustCloud
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: LocustCloud
  nameWithType: PlacedObject.Type.LocustCloud
  fullName: PlacedObject.Type.LocustCloud
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.LocustCloud</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type LocustCloud
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly LocustCloud As PlacedObject.Type
- uid: Global.PlacedObject.Type.FlameJet
  commentId: F:Global.PlacedObject.Type.FlameJet
  id: FlameJet
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: FlameJet
  nameWithType: PlacedObject.Type.FlameJet
  fullName: PlacedObject.Type.FlameJet
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.FlameJet</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type FlameJet
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly FlameJet As PlacedObject.Type
- uid: Global.PlacedObject.Type.WindDirection
  commentId: F:Global.PlacedObject.Type.WindDirection
  id: WindDirection
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: WindDirection
  nameWithType: PlacedObject.Type.WindDirection
  fullName: PlacedObject.Type.WindDirection
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.WindDirection</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type WindDirection
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly WindDirection As PlacedObject.Type
- uid: Global.PlacedObject.Type.SkyWhalePathfinding
  commentId: F:Global.PlacedObject.Type.SkyWhalePathfinding
  id: SkyWhalePathfinding
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: SkyWhalePathfinding
  nameWithType: PlacedObject.Type.SkyWhalePathfinding
  fullName: PlacedObject.Type.SkyWhalePathfinding
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:PlacedObject.Type.SkyWhalePathfinding</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly PlacedObject.Type SkyWhalePathfinding
    return:
      type: Global.PlacedObject.Type
    content.vb: Public Shared ReadOnly SkyWhalePathfinding As PlacedObject.Type
- uid: Global.PlacedObject.Type.#ctor(System.String,System.Boolean)
  commentId: M:Global.PlacedObject.Type.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Global.PlacedObject.Type
  langs:
  - csharp
  - vb
  name: Type(string, bool)
  nameWithType: PlacedObject.Type.Type(string, bool)
  fullName: PlacedObject.Type.Type(string, bool)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>PlacedObject.Type</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Type(string value, bool register = false)
    parameters:
    - id: value
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PlacedObject.Type.#ctor(System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: register
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>register</parameter>
            <parameter>M:PlacedObject.Type.#ctor(System.String,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(value As String, register As Boolean = False)
  overload: Global.PlacedObject.Type.#ctor*
  nameWithType.vb: PlacedObject.Type.New(String, Boolean)
  fullName.vb: PlacedObject.Type.New(String, Boolean)
  name.vb: New(String, Boolean)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ExtEnumBase
  commentId: T:Global.ExtEnumBase
  isExternal: true
  href: ExtEnumBase.html
  name: ExtEnumBase
  nameWithType: ExtEnumBase
  fullName: ExtEnumBase
- uid: Global.ExtEnum{PlacedObject.Type}
  commentId: T:Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1
  href: ExtEnum-1.html
  name: ExtEnum<PlacedObject.Type>
  nameWithType: ExtEnum<PlacedObject.Type>
  fullName: ExtEnum<PlacedObject.Type>
  nameWithType.vb: ExtEnum(Of PlacedObject.Type)
  fullName.vb: ExtEnum(Of PlacedObject.Type)
  name.vb: ExtEnum(Of PlacedObject.Type)
  spec.csharp:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - uid: Global.PlacedObject
    name: PlacedObject
    isExternal: true
    href: PlacedObject.html
  - name: .
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: '>'
  spec.vb:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Global.PlacedObject
    name: PlacedObject
    isExternal: true
    href: PlacedObject.html
  - name: .
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IEquatable{PlacedObject.Type}
  commentId: T:System.IEquatable{PlacedObject.Type}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<PlacedObject.Type>
  nameWithType: IEquatable<PlacedObject.Type>
  fullName: System.IEquatable<PlacedObject.Type>
  nameWithType.vb: IEquatable(Of PlacedObject.Type)
  fullName.vb: System.IEquatable(Of PlacedObject.Type)
  name.vb: IEquatable(Of PlacedObject.Type)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Global.PlacedObject
    name: PlacedObject
    isExternal: true
    href: PlacedObject.html
  - name: .
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.PlacedObject
    name: PlacedObject
    isExternal: true
    href: PlacedObject.html
  - name: .
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: )
- uid: Global.ExtEnum{PlacedObject.Type}.values
  commentId: F:Global.ExtEnum{PlacedObject.Type}.values
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.values
  href: Global.ExtEnum-1.html#ExtEnum_1_values
  name: values
  nameWithType: ExtEnum<PlacedObject.Type>.values
  fullName: ExtEnum<PlacedObject.Type>.values
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).values
  fullName.vb: ExtEnum(Of PlacedObject.Type).values
- uid: Global.ExtEnum{PlacedObject.Type}.Equals(System.Object)
  commentId: M:Global.ExtEnum{PlacedObject.Type}.Equals(System.Object)
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.Equals(System.Object)
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  name: Equals(object)
  nameWithType: ExtEnum<PlacedObject.Type>.Equals(object)
  fullName: ExtEnum<PlacedObject.Type>.Equals(object)
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).Equals(Object)
  fullName.vb: ExtEnum(Of PlacedObject.Type).Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: Global.ExtEnum{PlacedObject.Type}.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{PlacedObject.Type}.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnum{PlacedObject.Type}.Equals(ExtEnum{PlacedObject.Type})
  commentId: M:Global.ExtEnum{PlacedObject.Type}.Equals(ExtEnum{PlacedObject.Type})
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.Equals(ExtEnum{`0})
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  name: Equals(ExtEnum<Type>)
  nameWithType: ExtEnum<PlacedObject.Type>.Equals(ExtEnum<PlacedObject.Type>)
  fullName: ExtEnum<PlacedObject.Type>.Equals(ExtEnum<PlacedObject.Type>)
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).Equals(ExtEnum(Of PlacedObject.Type))
  fullName.vb: ExtEnum(Of PlacedObject.Type).Equals(ExtEnum(Of PlacedObject.Type))
  name.vb: Equals(ExtEnum(Of Type))
  spec.csharp:
  - uid: Global.ExtEnum{PlacedObject.Type}.Equals(ExtEnum{PlacedObject.Type})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{PlacedObject.Type}.Equals(ExtEnum{PlacedObject.Type})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: )
  - name: )
- uid: Global.ExtEnum{PlacedObject.Type}.Equals(PlacedObject.Type)
  commentId: M:Global.ExtEnum{PlacedObject.Type}.Equals(PlacedObject.Type)
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.Equals(`0)
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  name: Equals(Type)
  nameWithType: ExtEnum<PlacedObject.Type>.Equals(PlacedObject.Type)
  fullName: ExtEnum<PlacedObject.Type>.Equals(PlacedObject.Type)
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).Equals(PlacedObject.Type)
  fullName.vb: ExtEnum(Of PlacedObject.Type).Equals(PlacedObject.Type)
  spec.csharp:
  - uid: Global.ExtEnum{PlacedObject.Type}.Equals(PlacedObject.Type)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{PlacedObject.Type}.Equals(PlacedObject.Type)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  - name: )
- uid: Global.ExtEnum{PlacedObject.Type}.GetHashCode
  commentId: M:Global.ExtEnum{PlacedObject.Type}.GetHashCode
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.GetHashCode
  href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  name: GetHashCode()
  nameWithType: ExtEnum<PlacedObject.Type>.GetHashCode()
  fullName: ExtEnum<PlacedObject.Type>.GetHashCode()
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).GetHashCode()
  fullName.vb: ExtEnum(Of PlacedObject.Type).GetHashCode()
  spec.csharp:
  - uid: Global.ExtEnum{PlacedObject.Type}.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{PlacedObject.Type}.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
- uid: Global.ExtEnum{PlacedObject.Type}.Unregister
  commentId: M:Global.ExtEnum{PlacedObject.Type}.Unregister
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.Unregister
  href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  name: Unregister()
  nameWithType: ExtEnum<PlacedObject.Type>.Unregister()
  fullName: ExtEnum<PlacedObject.Type>.Unregister()
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).Unregister()
  fullName.vb: ExtEnum(Of PlacedObject.Type).Unregister()
  spec.csharp:
  - uid: Global.ExtEnum{PlacedObject.Type}.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{PlacedObject.Type}.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
- uid: Global.ExtEnum{PlacedObject.Type}.valuesVersion
  commentId: P:Global.ExtEnum{PlacedObject.Type}.valuesVersion
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.valuesVersion
  href: Global.ExtEnum-1.html#ExtEnum_1_valuesVersion
  name: valuesVersion
  nameWithType: ExtEnum<PlacedObject.Type>.valuesVersion
  fullName: ExtEnum<PlacedObject.Type>.valuesVersion
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).valuesVersion
  fullName.vb: ExtEnum(Of PlacedObject.Type).valuesVersion
- uid: Global.ExtEnum{PlacedObject.Type}.Index
  commentId: P:Global.ExtEnum{PlacedObject.Type}.Index
  parent: Global.ExtEnum{PlacedObject.Type}
  definition: Global.ExtEnum`1.Index
  href: Global.ExtEnum-1.html#ExtEnum_1_Index
  name: Index
  nameWithType: ExtEnum<PlacedObject.Type>.Index
  fullName: ExtEnum<PlacedObject.Type>.Index
  nameWithType.vb: ExtEnum(Of PlacedObject.Type).Index
  fullName.vb: ExtEnum(Of PlacedObject.Type).Index
- uid: Global.ExtEnumBase.value
  commentId: F:Global.ExtEnumBase.value
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_value
  name: value
  nameWithType: ExtEnumBase.value
  fullName: ExtEnumBase.value
- uid: Global.ExtEnumBase.valueHash
  commentId: F:Global.ExtEnumBase.valueHash
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_valueHash
  name: valueHash
  nameWithType: ExtEnumBase.valueHash
  fullName: ExtEnumBase.valueHash
- uid: Global.ExtEnumBase.index
  commentId: F:Global.ExtEnumBase.index
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_index
  name: index
  nameWithType: ExtEnumBase.index
  fullName: ExtEnumBase.index
- uid: Global.ExtEnumBase.localVersion
  commentId: F:Global.ExtEnumBase.localVersion
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_localVersion
  name: localVersion
  nameWithType: ExtEnumBase.localVersion
  fullName: ExtEnumBase.localVersion
- uid: Global.ExtEnumBase.enumType
  commentId: F:Global.ExtEnumBase.enumType
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_enumType
  name: enumType
  nameWithType: ExtEnumBase.enumType
  fullName: ExtEnumBase.enumType
- uid: Global.ExtEnumBase.valueDictionary
  commentId: F:Global.ExtEnumBase.valueDictionary
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_valueDictionary
  name: valueDictionary
  nameWithType: ExtEnumBase.valueDictionary
  fullName: ExtEnumBase.valueDictionary
- uid: Global.ExtEnumBase.ToString
  commentId: M:Global.ExtEnumBase.ToString
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  name: ToString()
  nameWithType: ExtEnumBase.ToString()
  fullName: ExtEnumBase.ToString()
  spec.csharp:
  - uid: Global.ExtEnumBase.ToString
    name: ToString
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.ToString
    name: ToString
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  - name: (
  - name: )
- uid: Global.ExtEnumBase.CompareTo(System.Object)
  commentId: M:Global.ExtEnumBase.CompareTo(System.Object)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  name: CompareTo(object)
  nameWithType: ExtEnumBase.CompareTo(object)
  fullName: ExtEnumBase.CompareTo(object)
  nameWithType.vb: ExtEnumBase.CompareTo(Object)
  fullName.vb: ExtEnumBase.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: Global.ExtEnumBase.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  name: Parse(Type, string, bool)
  nameWithType: ExtEnumBase.Parse(Type, string, bool)
  fullName: ExtEnumBase.Parse(System.Type, string, bool)
  nameWithType.vb: ExtEnumBase.Parse(Type, String, Boolean)
  fullName.vb: ExtEnumBase.Parse(System.Type, String, Boolean)
  name.vb: Parse(Type, String, Boolean)
  spec.csharp:
  - uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
    name: Parse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
    name: Parse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  commentId: M:Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  name: TryParse(Type, string, bool, out ExtEnumBase)
  nameWithType: ExtEnumBase.TryParse(Type, string, bool, out ExtEnumBase)
  fullName: ExtEnumBase.TryParse(System.Type, string, bool, out ExtEnumBase)
  nameWithType.vb: ExtEnumBase.TryParse(Type, String, Boolean, ExtEnumBase)
  fullName.vb: ExtEnumBase.TryParse(System.Type, String, Boolean, ExtEnumBase)
  name.vb: TryParse(Type, String, Boolean, ExtEnumBase)
  spec.csharp:
  - uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
    name: TryParse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Global.ExtEnumBase
    name: ExtEnumBase
    isExternal: true
    href: ExtEnumBase.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
    name: TryParse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Global.ExtEnumBase
    name: ExtEnumBase
    isExternal: true
    href: ExtEnumBase.html
  - name: )
- uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
  commentId: M:Global.ExtEnumBase.GetExtEnumType(System.Type)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  name: GetExtEnumType(Type)
  nameWithType: ExtEnumBase.GetExtEnumType(Type)
  fullName: ExtEnumBase.GetExtEnumType(System.Type)
  spec.csharp:
  - uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
    name: GetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
    name: GetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  commentId: M:Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  name: TryGetExtEnumType(Type, out ExtEnumType)
  nameWithType: ExtEnumBase.TryGetExtEnumType(Type, out ExtEnumType)
  fullName: ExtEnumBase.TryGetExtEnumType(System.Type, out ExtEnumType)
  nameWithType.vb: ExtEnumBase.TryGetExtEnumType(Type, ExtEnumType)
  fullName.vb: ExtEnumBase.TryGetExtEnumType(System.Type, ExtEnumType)
  name.vb: TryGetExtEnumType(Type, ExtEnumType)
  spec.csharp:
  - uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
    name: TryGetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
    name: TryGetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: )
- uid: Global.ExtEnumBase.GetNames(System.Type)
  commentId: M:Global.ExtEnumBase.GetNames(System.Type)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  name: GetNames(Type)
  nameWithType: ExtEnumBase.GetNames(Type)
  fullName: ExtEnumBase.GetNames(System.Type)
  spec.csharp:
  - uid: Global.ExtEnumBase.GetNames(System.Type)
    name: GetNames
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.GetNames(System.Type)
    name: GetNames
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  name: IsDefined(Type, string, bool)
  nameWithType: ExtEnumBase.IsDefined(Type, string, bool)
  fullName: ExtEnumBase.IsDefined(System.Type, string, bool)
  nameWithType.vb: ExtEnumBase.IsDefined(Type, String, Boolean)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, String, Boolean)
  name.vb: IsDefined(Type, String, Boolean)
  spec.csharp:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  name: IsDefined(Type, int)
  nameWithType: ExtEnumBase.IsDefined(Type, int)
  fullName: ExtEnumBase.IsDefined(System.Type, int)
  nameWithType.vb: ExtEnumBase.IsDefined(Type, Integer)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, Integer)
  name.vb: IsDefined(Type, Integer)
  spec.csharp:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ExtEnum`1
  commentId: T:Global.ExtEnum`1
  isExternal: true
  href: ExtEnum-1.html
  name: ExtEnum<T>
  nameWithType: ExtEnum<T>
  fullName: ExtEnum<T>
  nameWithType.vb: ExtEnum(Of T)
  fullName.vb: ExtEnum(Of T)
  name.vb: ExtEnum(Of T)
  spec.csharp:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ExtEnum`1.values
  commentId: F:Global.ExtEnum`1.values
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_values
  name: values
  nameWithType: ExtEnum<T>.values
  fullName: ExtEnum<T>.values
  nameWithType.vb: ExtEnum(Of T).values
  fullName.vb: ExtEnum(Of T).values
- uid: Global.ExtEnum`1.Equals(System.Object)
  commentId: M:Global.ExtEnum`1.Equals(System.Object)
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  name: Equals(object)
  nameWithType: ExtEnum<T>.Equals(object)
  fullName: ExtEnum<T>.Equals(object)
  nameWithType.vb: ExtEnum(Of T).Equals(Object)
  fullName.vb: ExtEnum(Of T).Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
  commentId: M:Global.ExtEnum`1.Equals(ExtEnum{`0})
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  name: Equals(ExtEnum<T>)
  nameWithType: ExtEnum<T>.Equals(ExtEnum<T>)
  fullName: ExtEnum<T>.Equals(ExtEnum<T>)
  nameWithType.vb: ExtEnum(Of T).Equals(ExtEnum(Of T))
  fullName.vb: ExtEnum(Of T).Equals(ExtEnum(Of T))
  name.vb: Equals(ExtEnum(Of T))
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Global.ExtEnum`1.Equals(`0)
  commentId: M:Global.ExtEnum`1.Equals(`0)
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  name: Equals(T)
  nameWithType: ExtEnum<T>.Equals(T)
  fullName: ExtEnum<T>.Equals(T)
  nameWithType.vb: ExtEnum(Of T).Equals(T)
  fullName.vb: ExtEnum(Of T).Equals(T)
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(`0)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(`0)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - name: T
  - name: )
- uid: Global.ExtEnum`1.GetHashCode
  commentId: M:Global.ExtEnum`1.GetHashCode
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  name: GetHashCode()
  nameWithType: ExtEnum<T>.GetHashCode()
  fullName: ExtEnum<T>.GetHashCode()
  nameWithType.vb: ExtEnum(Of T).GetHashCode()
  fullName.vb: ExtEnum(Of T).GetHashCode()
  spec.csharp:
  - uid: Global.ExtEnum`1.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
- uid: Global.ExtEnum`1.Unregister
  commentId: M:Global.ExtEnum`1.Unregister
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  name: Unregister()
  nameWithType: ExtEnum<T>.Unregister()
  fullName: ExtEnum<T>.Unregister()
  nameWithType.vb: ExtEnum(Of T).Unregister()
  fullName.vb: ExtEnum(Of T).Unregister()
  spec.csharp:
  - uid: Global.ExtEnum`1.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
- uid: Global.ExtEnum`1.valuesVersion
  commentId: P:Global.ExtEnum`1.valuesVersion
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_valuesVersion
  name: valuesVersion
  nameWithType: ExtEnum<T>.valuesVersion
  fullName: ExtEnum<T>.valuesVersion
  nameWithType.vb: ExtEnum(Of T).valuesVersion
  fullName.vb: ExtEnum(Of T).valuesVersion
- uid: Global.ExtEnum`1.Index
  commentId: P:Global.ExtEnum`1.Index
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Index
  name: Index
  nameWithType: ExtEnum<T>.Index
  fullName: ExtEnum<T>.Index
  nameWithType.vb: ExtEnum(Of T).Index
  fullName.vb: ExtEnum(Of T).Index
- uid: Global.PlacedObject.Type
  commentId: T:Global.PlacedObject.Type
  isExternal: true
  href: PlacedObject.html
  name: PlacedObject.Type
  nameWithType: PlacedObject.Type
  fullName: PlacedObject.Type
  spec.csharp:
  - uid: Global.PlacedObject
    name: PlacedObject
    isExternal: true
    href: PlacedObject.html
  - name: .
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
  spec.vb:
  - uid: Global.PlacedObject
    name: PlacedObject
    isExternal: true
    href: PlacedObject.html
  - name: .
  - uid: Global.PlacedObject.Type
    name: Type
    isExternal: true
    href: PlacedObject.Type.html
- uid: Global.PlacedObject.Type.#ctor*
  commentId: Overload:Global.PlacedObject.Type.#ctor
  isExternal: true
  href: Global.PlacedObject.Type.html#PlacedObject_Type__ctor_System_String_System_Boolean_
  name: Type
  nameWithType: PlacedObject.Type.Type
  fullName: PlacedObject.Type.Type
  nameWithType.vb: PlacedObject.Type.New
  fullName.vb: PlacedObject.Type.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
