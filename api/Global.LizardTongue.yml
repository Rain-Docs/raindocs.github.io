### YamlMime:ManagedReference
items:
- uid: Global.LizardTongue
  commentId: T:Global.LizardTongue
  id: LizardTongue
  parent: Global
  children:
  - Global.LizardTongue.#ctor(Lizard)
  - Global.LizardTongue.ChunkDrag
  - Global.LizardTongue.CombinedStretched
  - Global.LizardTongue.LashOut(UnityEngine.Vector2)
  - Global.LizardTongue.Out
  - Global.LizardTongue.Ready
  - Global.LizardTongue.Retract
  - Global.LizardTongue.Stretched
  - Global.LizardTongue.StuckToSomething
  - Global.LizardTongue.SuperStretched
  - Global.LizardTongue.TerrainDrag
  - Global.LizardTongue.Update
  - Global.LizardTongue.attachTerrainChance
  - Global.LizardTongue.attached
  - Global.LizardTongue.attachesBackgroundWalls
  - Global.LizardTongue.baseDragOnly
  - Global.LizardTongue.chunkDrag
  - Global.LizardTongue.detatchMinDistanceCreature
  - Global.LizardTongue.detatchMinDistanceTerrain
  - Global.LizardTongue.dist
  - Global.LizardTongue.dragElasticity
  - Global.LizardTongue.emptyElasticity
  - Global.LizardTongue.graphPos
  - Global.LizardTongue.involuntaryReleaseChance
  - Global.LizardTongue.lashOutSpeed
  - Global.LizardTongue.lastPos
  - Global.LizardTongue.lizard
  - Global.LizardTongue.pos
  - Global.LizardTongue.pullAtChunkRatio
  - Global.LizardTongue.range
  - Global.LizardTongue.reelIn
  - Global.LizardTongue.reelInSpeed
  - Global.LizardTongue.state
  - Global.LizardTongue.stuckCounter
  - Global.LizardTongue.terrainDrag
  - Global.LizardTongue.totRExtraLimit
  - Global.LizardTongue.vel
  - Global.LizardTongue.voluntaryReleaseChance
  langs:
  - csharp
  - vb
  name: LizardTongue
  nameWithType: LizardTongue
  fullName: LizardTongue
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:LizardTongue</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class LizardTongue
    content.vb: Public Class LizardTongue
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.LizardTongue.lizard
  commentId: F:Global.LizardTongue.lizard
  id: lizard
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: lizard
  nameWithType: LizardTongue.lizard
  fullName: LizardTongue.lizard
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.lizard</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Lizard lizard
    return:
      type: Global.Lizard
    content.vb: Public lizard As Lizard
- uid: Global.LizardTongue.lastPos
  commentId: F:Global.LizardTongue.lastPos
  id: lastPos
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: lastPos
  nameWithType: LizardTongue.lastPos
  fullName: LizardTongue.lastPos
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.lastPos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 lastPos
    return:
      type: UnityEngine.Vector2
    content.vb: Public lastPos As Vector2
- uid: Global.LizardTongue.pos
  commentId: F:Global.LizardTongue.pos
  id: pos
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: pos
  nameWithType: LizardTongue.pos
  fullName: LizardTongue.pos
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.pos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 pos
    return:
      type: UnityEngine.Vector2
    content.vb: Public pos As Vector2
- uid: Global.LizardTongue.vel
  commentId: F:Global.LizardTongue.vel
  id: vel
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: vel
  nameWithType: LizardTongue.vel
  fullName: LizardTongue.vel
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.vel</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 vel
    return:
      type: UnityEngine.Vector2
    content.vb: Public vel As Vector2
- uid: Global.LizardTongue.graphPos
  commentId: F:Global.LizardTongue.graphPos
  id: graphPos
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: graphPos
  nameWithType: LizardTongue.graphPos
  fullName: LizardTongue.graphPos
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.graphPos</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2[] graphPos
    return:
      type: UnityEngine.Vector2[]
    content.vb: Public graphPos As Vector2()
- uid: Global.LizardTongue.range
  commentId: F:Global.LizardTongue.range
  id: range
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: range
  nameWithType: LizardTongue.range
  fullName: LizardTongue.range
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.range</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float range
    return:
      type: System.Single
    content.vb: Public range As Single
- uid: Global.LizardTongue.dist
  commentId: F:Global.LizardTongue.dist
  id: dist
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: dist
  nameWithType: LizardTongue.dist
  fullName: LizardTongue.dist
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.dist</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float dist
    return:
      type: System.Single
    content.vb: Public dist As Single
- uid: Global.LizardTongue.reelIn
  commentId: F:Global.LizardTongue.reelIn
  id: reelIn
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: reelIn
  nameWithType: LizardTongue.reelIn
  fullName: LizardTongue.reelIn
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.reelIn</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float reelIn
    return:
      type: System.Single
    content.vb: Public reelIn As Single
- uid: Global.LizardTongue.reelInSpeed
  commentId: F:Global.LizardTongue.reelInSpeed
  id: reelInSpeed
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: reelInSpeed
  nameWithType: LizardTongue.reelInSpeed
  fullName: LizardTongue.reelInSpeed
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.reelInSpeed</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float reelInSpeed
    return:
      type: System.Single
    content.vb: Public reelInSpeed As Single
- uid: Global.LizardTongue.chunkDrag
  commentId: F:Global.LizardTongue.chunkDrag
  id: chunkDrag
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: chunkDrag
  nameWithType: LizardTongue.chunkDrag
  fullName: LizardTongue.chunkDrag
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.chunkDrag</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float chunkDrag
    return:
      type: System.Single
    content.vb: Public chunkDrag As Single
- uid: Global.LizardTongue.terrainDrag
  commentId: F:Global.LizardTongue.terrainDrag
  id: terrainDrag
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: terrainDrag
  nameWithType: LizardTongue.terrainDrag
  fullName: LizardTongue.terrainDrag
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.terrainDrag</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float terrainDrag
    return:
      type: System.Single
    content.vb: Public terrainDrag As Single
- uid: Global.LizardTongue.lashOutSpeed
  commentId: F:Global.LizardTongue.lashOutSpeed
  id: lashOutSpeed
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: lashOutSpeed
  nameWithType: LizardTongue.lashOutSpeed
  fullName: LizardTongue.lashOutSpeed
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.lashOutSpeed</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float lashOutSpeed
    return:
      type: System.Single
    content.vb: Public lashOutSpeed As Single
- uid: Global.LizardTongue.dragElasticity
  commentId: F:Global.LizardTongue.dragElasticity
  id: dragElasticity
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: dragElasticity
  nameWithType: LizardTongue.dragElasticity
  fullName: LizardTongue.dragElasticity
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.dragElasticity</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float dragElasticity
    return:
      type: System.Single
    content.vb: Public dragElasticity As Single
- uid: Global.LizardTongue.emptyElasticity
  commentId: F:Global.LizardTongue.emptyElasticity
  id: emptyElasticity
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: emptyElasticity
  nameWithType: LizardTongue.emptyElasticity
  fullName: LizardTongue.emptyElasticity
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.emptyElasticity</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float emptyElasticity
    return:
      type: System.Single
    content.vb: Public emptyElasticity As Single
- uid: Global.LizardTongue.involuntaryReleaseChance
  commentId: F:Global.LizardTongue.involuntaryReleaseChance
  id: involuntaryReleaseChance
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: involuntaryReleaseChance
  nameWithType: LizardTongue.involuntaryReleaseChance
  fullName: LizardTongue.involuntaryReleaseChance
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.involuntaryReleaseChance</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float involuntaryReleaseChance
    return:
      type: System.Single
    content.vb: Public involuntaryReleaseChance As Single
- uid: Global.LizardTongue.voluntaryReleaseChance
  commentId: F:Global.LizardTongue.voluntaryReleaseChance
  id: voluntaryReleaseChance
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: voluntaryReleaseChance
  nameWithType: LizardTongue.voluntaryReleaseChance
  fullName: LizardTongue.voluntaryReleaseChance
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.voluntaryReleaseChance</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float voluntaryReleaseChance
    return:
      type: System.Single
    content.vb: Public voluntaryReleaseChance As Single
- uid: Global.LizardTongue.attachTerrainChance
  commentId: F:Global.LizardTongue.attachTerrainChance
  id: attachTerrainChance
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: attachTerrainChance
  nameWithType: LizardTongue.attachTerrainChance
  fullName: LizardTongue.attachTerrainChance
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.attachTerrainChance</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float attachTerrainChance
    return:
      type: System.Single
    content.vb: Public attachTerrainChance As Single
- uid: Global.LizardTongue.baseDragOnly
  commentId: F:Global.LizardTongue.baseDragOnly
  id: baseDragOnly
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: baseDragOnly
  nameWithType: LizardTongue.baseDragOnly
  fullName: LizardTongue.baseDragOnly
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.baseDragOnly</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool baseDragOnly
    return:
      type: System.Boolean
    content.vb: Public baseDragOnly As Boolean
- uid: Global.LizardTongue.attachesBackgroundWalls
  commentId: F:Global.LizardTongue.attachesBackgroundWalls
  id: attachesBackgroundWalls
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: attachesBackgroundWalls
  nameWithType: LizardTongue.attachesBackgroundWalls
  fullName: LizardTongue.attachesBackgroundWalls
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.attachesBackgroundWalls</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool attachesBackgroundWalls
    return:
      type: System.Boolean
    content.vb: Public attachesBackgroundWalls As Boolean
- uid: Global.LizardTongue.pullAtChunkRatio
  commentId: F:Global.LizardTongue.pullAtChunkRatio
  id: pullAtChunkRatio
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: pullAtChunkRatio
  nameWithType: LizardTongue.pullAtChunkRatio
  fullName: LizardTongue.pullAtChunkRatio
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.pullAtChunkRatio</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float pullAtChunkRatio
    return:
      type: System.Single
    content.vb: Public pullAtChunkRatio As Single
- uid: Global.LizardTongue.detatchMinDistanceTerrain
  commentId: F:Global.LizardTongue.detatchMinDistanceTerrain
  id: detatchMinDistanceTerrain
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: detatchMinDistanceTerrain
  nameWithType: LizardTongue.detatchMinDistanceTerrain
  fullName: LizardTongue.detatchMinDistanceTerrain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.detatchMinDistanceTerrain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float detatchMinDistanceTerrain
    return:
      type: System.Single
    content.vb: Public detatchMinDistanceTerrain As Single
- uid: Global.LizardTongue.detatchMinDistanceCreature
  commentId: F:Global.LizardTongue.detatchMinDistanceCreature
  id: detatchMinDistanceCreature
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: detatchMinDistanceCreature
  nameWithType: LizardTongue.detatchMinDistanceCreature
  fullName: LizardTongue.detatchMinDistanceCreature
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.detatchMinDistanceCreature</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float detatchMinDistanceCreature
    return:
      type: System.Single
    content.vb: Public detatchMinDistanceCreature As Single
- uid: Global.LizardTongue.totRExtraLimit
  commentId: F:Global.LizardTongue.totRExtraLimit
  id: totRExtraLimit
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: totRExtraLimit
  nameWithType: LizardTongue.totRExtraLimit
  fullName: LizardTongue.totRExtraLimit
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.totRExtraLimit</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float totRExtraLimit
    return:
      type: System.Single
    content.vb: Public totRExtraLimit As Single
- uid: Global.LizardTongue.attached
  commentId: F:Global.LizardTongue.attached
  id: attached
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: attached
  nameWithType: LizardTongue.attached
  fullName: LizardTongue.attached
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.attached</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public BodyChunk attached
    return:
      type: Global.BodyChunk
    content.vb: Public attached As BodyChunk
- uid: Global.LizardTongue.stuckCounter
  commentId: F:Global.LizardTongue.stuckCounter
  id: stuckCounter
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: stuckCounter
  nameWithType: LizardTongue.stuckCounter
  fullName: LizardTongue.stuckCounter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.stuckCounter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int stuckCounter
    return:
      type: System.Int32
    content.vb: Public stuckCounter As Integer
- uid: Global.LizardTongue.state
  commentId: F:Global.LizardTongue.state
  id: state
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: state
  nameWithType: LizardTongue.state
  fullName: LizardTongue.state
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardTongue.state</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public LizardTongue.State state
    return:
      type: Global.LizardTongue.State
    content.vb: Public state As LizardTongue.State
- uid: Global.LizardTongue.#ctor(Lizard)
  commentId: M:Global.LizardTongue.#ctor(Lizard)
  id: '#ctor(Lizard)'
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: LizardTongue(Lizard)
  nameWithType: LizardTongue.LizardTongue(Lizard)
  fullName: LizardTongue.LizardTongue(Lizard)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>LizardTongue</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public LizardTongue(Lizard lizard)
    parameters:
    - id: lizard
      type: Global.Lizard
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lizard</parameter>
            <parameter>M:LizardTongue.#ctor(Lizard)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(lizard As Lizard)
  overload: Global.LizardTongue.#ctor*
  nameWithType.vb: LizardTongue.New(Lizard)
  fullName.vb: LizardTongue.New(Lizard)
  name.vb: New(Lizard)
- uid: Global.LizardTongue.Update
  commentId: M:Global.LizardTongue.Update
  id: Update
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: LizardTongue.Update()
  fullName: LizardTongue.Update()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardTongue.Update</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update()
  overload: Global.LizardTongue.Update*
- uid: Global.LizardTongue.LashOut(UnityEngine.Vector2)
  commentId: M:Global.LizardTongue.LashOut(UnityEngine.Vector2)
  id: LashOut(UnityEngine.Vector2)
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: LashOut(Vector2)
  nameWithType: LizardTongue.LashOut(Vector2)
  fullName: LizardTongue.LashOut(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardTongue.LashOut(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LashOut(Vector2 target)
    parameters:
    - id: target
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:LizardTongue.LashOut(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub LashOut(target As Vector2)
  overload: Global.LizardTongue.LashOut*
- uid: Global.LizardTongue.Retract
  commentId: M:Global.LizardTongue.Retract
  id: Retract
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: Retract()
  nameWithType: LizardTongue.Retract()
  fullName: LizardTongue.Retract()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardTongue.Retract</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Retract()
    content.vb: Public Sub Retract()
  overload: Global.LizardTongue.Retract*
- uid: Global.LizardTongue.Out
  commentId: P:Global.LizardTongue.Out
  id: Out
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: Out
  nameWithType: LizardTongue.Out
  fullName: LizardTongue.Out
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.Out</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Out { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Out As Boolean
  overload: Global.LizardTongue.Out*
- uid: Global.LizardTongue.Ready
  commentId: P:Global.LizardTongue.Ready
  id: Ready
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: Ready
  nameWithType: LizardTongue.Ready
  fullName: LizardTongue.Ready
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.Ready</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Ready { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Ready As Boolean
  overload: Global.LizardTongue.Ready*
- uid: Global.LizardTongue.ChunkDrag
  commentId: P:Global.LizardTongue.ChunkDrag
  id: ChunkDrag
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: ChunkDrag
  nameWithType: LizardTongue.ChunkDrag
  fullName: LizardTongue.ChunkDrag
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.ChunkDrag</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float ChunkDrag { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property ChunkDrag As Single
  overload: Global.LizardTongue.ChunkDrag*
- uid: Global.LizardTongue.TerrainDrag
  commentId: P:Global.LizardTongue.TerrainDrag
  id: TerrainDrag
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: TerrainDrag
  nameWithType: LizardTongue.TerrainDrag
  fullName: LizardTongue.TerrainDrag
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.TerrainDrag</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float TerrainDrag { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property TerrainDrag As Single
  overload: Global.LizardTongue.TerrainDrag*
- uid: Global.LizardTongue.Stretched
  commentId: P:Global.LizardTongue.Stretched
  id: Stretched
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: Stretched
  nameWithType: LizardTongue.Stretched
  fullName: LizardTongue.Stretched
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.Stretched</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float Stretched { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Stretched As Single
  overload: Global.LizardTongue.Stretched*
- uid: Global.LizardTongue.SuperStretched
  commentId: P:Global.LizardTongue.SuperStretched
  id: SuperStretched
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: SuperStretched
  nameWithType: LizardTongue.SuperStretched
  fullName: LizardTongue.SuperStretched
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.SuperStretched</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float SuperStretched { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property SuperStretched As Single
  overload: Global.LizardTongue.SuperStretched*
- uid: Global.LizardTongue.CombinedStretched
  commentId: P:Global.LizardTongue.CombinedStretched
  id: CombinedStretched
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: CombinedStretched
  nameWithType: LizardTongue.CombinedStretched
  fullName: LizardTongue.CombinedStretched
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.CombinedStretched</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float CombinedStretched { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property CombinedStretched As Single
  overload: Global.LizardTongue.CombinedStretched*
- uid: Global.LizardTongue.StuckToSomething
  commentId: P:Global.LizardTongue.StuckToSomething
  id: StuckToSomething
  parent: Global.LizardTongue
  langs:
  - csharp
  - vb
  name: StuckToSomething
  nameWithType: LizardTongue.StuckToSomething
  fullName: LizardTongue.StuckToSomething
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardTongue.StuckToSomething</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool StuckToSomething { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property StuckToSomething As Boolean
  overload: Global.LizardTongue.StuckToSomething*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Lizard
  commentId: T:Global.Lizard
  isExternal: true
  href: Lizard.html
  name: Lizard
  nameWithType: Lizard
  fullName: Lizard
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: UnityEngine.Vector2[]
  isExternal: true
  name: Vector2[]
  nameWithType: Vector2[]
  fullName: UnityEngine.Vector2[]
  nameWithType.vb: Vector2()
  fullName.vb: UnityEngine.Vector2()
  name.vb: Vector2()
  spec.csharp:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: (
  - name: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.BodyChunk
  commentId: T:Global.BodyChunk
  isExternal: true
  href: BodyChunk.html
  name: BodyChunk
  nameWithType: BodyChunk
  fullName: BodyChunk
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.LizardTongue.State
  commentId: T:Global.LizardTongue.State
  isExternal: true
  href: LizardTongue.html
  name: LizardTongue.State
  nameWithType: LizardTongue.State
  fullName: LizardTongue.State
  spec.csharp:
  - uid: Global.LizardTongue
    name: LizardTongue
    isExternal: true
    href: LizardTongue.html
  - name: .
  - uid: Global.LizardTongue.State
    name: State
    isExternal: true
    href: LizardTongue.State.html
  spec.vb:
  - uid: Global.LizardTongue
    name: LizardTongue
    isExternal: true
    href: LizardTongue.html
  - name: .
  - uid: Global.LizardTongue.State
    name: State
    isExternal: true
    href: LizardTongue.State.html
- uid: Global.LizardTongue.#ctor*
  commentId: Overload:Global.LizardTongue.#ctor
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue__ctor_Lizard_
  name: LizardTongue
  nameWithType: LizardTongue.LizardTongue
  fullName: LizardTongue.LizardTongue
  nameWithType.vb: LizardTongue.New
  fullName.vb: LizardTongue.New
  name.vb: New
- uid: Global.LizardTongue.Update*
  commentId: Overload:Global.LizardTongue.Update
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_Update
  name: Update
  nameWithType: LizardTongue.Update
  fullName: LizardTongue.Update
- uid: Global.LizardTongue.LashOut*
  commentId: Overload:Global.LizardTongue.LashOut
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_LashOut_UnityEngine_Vector2_
  name: LashOut
  nameWithType: LizardTongue.LashOut
  fullName: LizardTongue.LashOut
- uid: Global.LizardTongue.Retract*
  commentId: Overload:Global.LizardTongue.Retract
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_Retract
  name: Retract
  nameWithType: LizardTongue.Retract
  fullName: LizardTongue.Retract
- uid: Global.LizardTongue.Out*
  commentId: Overload:Global.LizardTongue.Out
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_Out
  name: Out
  nameWithType: LizardTongue.Out
  fullName: LizardTongue.Out
- uid: Global.LizardTongue.Ready*
  commentId: Overload:Global.LizardTongue.Ready
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_Ready
  name: Ready
  nameWithType: LizardTongue.Ready
  fullName: LizardTongue.Ready
- uid: Global.LizardTongue.ChunkDrag*
  commentId: Overload:Global.LizardTongue.ChunkDrag
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_ChunkDrag
  name: ChunkDrag
  nameWithType: LizardTongue.ChunkDrag
  fullName: LizardTongue.ChunkDrag
- uid: Global.LizardTongue.TerrainDrag*
  commentId: Overload:Global.LizardTongue.TerrainDrag
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_TerrainDrag
  name: TerrainDrag
  nameWithType: LizardTongue.TerrainDrag
  fullName: LizardTongue.TerrainDrag
- uid: Global.LizardTongue.Stretched*
  commentId: Overload:Global.LizardTongue.Stretched
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_Stretched
  name: Stretched
  nameWithType: LizardTongue.Stretched
  fullName: LizardTongue.Stretched
- uid: Global.LizardTongue.SuperStretched*
  commentId: Overload:Global.LizardTongue.SuperStretched
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_SuperStretched
  name: SuperStretched
  nameWithType: LizardTongue.SuperStretched
  fullName: LizardTongue.SuperStretched
- uid: Global.LizardTongue.CombinedStretched*
  commentId: Overload:Global.LizardTongue.CombinedStretched
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_CombinedStretched
  name: CombinedStretched
  nameWithType: LizardTongue.CombinedStretched
  fullName: LizardTongue.CombinedStretched
- uid: Global.LizardTongue.StuckToSomething*
  commentId: Overload:Global.LizardTongue.StuckToSomething
  isExternal: true
  href: Global.LizardTongue.html#LizardTongue_StuckToSomething
  name: StuckToSomething
  nameWithType: LizardTongue.StuckToSomething
  fullName: LizardTongue.StuckToSomething
