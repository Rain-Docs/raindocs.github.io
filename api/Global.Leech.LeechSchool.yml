### YamlMime:ManagedReference
items:
- uid: Global.Leech.LeechSchool
  commentId: T:Global.Leech.LeechSchool
  id: Leech.LeechSchool
  parent: Global
  children:
  - Global.Leech.LeechSchool.#ctor
  - Global.Leech.LeechSchool.AddLeech(Leech)
  - Global.Leech.LeechSchool.AddPrey(Creature)
  - Global.Leech.LeechSchool.BitDeadPrey(Creature)
  - Global.Leech.LeechSchool.Merge(Leech.LeechSchool)
  - Global.Leech.LeechSchool.RemoveLeech(Leech)
  - Global.Leech.LeechSchool.RemovePrey(Creature)
  - Global.Leech.LeechSchool.col
  - Global.Leech.LeechSchool.leeches
  - Global.Leech.LeechSchool.prey
  langs:
  - csharp
  - vb
  name: Leech.LeechSchool
  nameWithType: Leech.LeechSchool
  fullName: Leech.LeechSchool
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Leech.LeechSchool</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class Leech.LeechSchool
    content.vb: Public Class Leech.LeechSchool
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.Leech.LeechSchool.leeches
  commentId: F:Global.Leech.LeechSchool.leeches
  id: leeches
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: leeches
  nameWithType: Leech.LeechSchool.leeches
  fullName: Leech.LeechSchool.leeches
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Leech.LeechSchool.leeches</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<Leech> leeches
    return:
      type: System.Collections.Generic.List{Leech}
    content.vb: Public leeches As List(Of Leech)
- uid: Global.Leech.LeechSchool.prey
  commentId: F:Global.Leech.LeechSchool.prey
  id: prey
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: prey
  nameWithType: Leech.LeechSchool.prey
  fullName: Leech.LeechSchool.prey
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Leech.LeechSchool.prey</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<Leech.LeechSchool.LeechPrey> prey
    return:
      type: System.Collections.Generic.List{Leech.LeechSchool.LeechPrey}
    content.vb: Public prey As List(Of Leech.LeechSchool.LeechPrey)
- uid: Global.Leech.LeechSchool.col
  commentId: F:Global.Leech.LeechSchool.col
  id: col
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: col
  nameWithType: Leech.LeechSchool.col
  fullName: Leech.LeechSchool.col
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Leech.LeechSchool.col</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Color col
    return:
      type: UnityEngine.Color
    content.vb: Public col As Color
- uid: Global.Leech.LeechSchool.#ctor
  commentId: M:Global.Leech.LeechSchool.#ctor
  id: '#ctor'
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: LeechSchool()
  nameWithType: Leech.LeechSchool.LeechSchool()
  fullName: Leech.LeechSchool.LeechSchool()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Leech.LeechSchool</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public LeechSchool()
    content.vb: Public Sub New()
  overload: Global.Leech.LeechSchool.#ctor*
  nameWithType.vb: Leech.LeechSchool.New()
  fullName.vb: Leech.LeechSchool.New()
  name.vb: New()
- uid: Global.Leech.LeechSchool.AddLeech(Leech)
  commentId: M:Global.Leech.LeechSchool.AddLeech(Leech)
  id: AddLeech(Leech)
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: AddLeech(Leech)
  nameWithType: Leech.LeechSchool.AddLeech(Leech)
  fullName: Leech.LeechSchool.AddLeech(Leech)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Leech.LeechSchool.AddLeech(Leech)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddLeech(Leech leech)
    parameters:
    - id: leech
      type: Global.Leech
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>leech</parameter>
            <parameter>M:Leech.LeechSchool.AddLeech(Leech)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddLeech(leech As Leech)
  overload: Global.Leech.LeechSchool.AddLeech*
- uid: Global.Leech.LeechSchool.AddPrey(Creature)
  commentId: M:Global.Leech.LeechSchool.AddPrey(Creature)
  id: AddPrey(Creature)
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: AddPrey(Creature)
  nameWithType: Leech.LeechSchool.AddPrey(Creature)
  fullName: Leech.LeechSchool.AddPrey(Creature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Leech.LeechSchool.AddPrey(Creature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddPrey(Creature p)
    parameters:
    - id: p
      type: Global.Creature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:Leech.LeechSchool.AddPrey(Creature)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddPrey(p As Creature)
  overload: Global.Leech.LeechSchool.AddPrey*
- uid: Global.Leech.LeechSchool.RemovePrey(Creature)
  commentId: M:Global.Leech.LeechSchool.RemovePrey(Creature)
  id: RemovePrey(Creature)
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: RemovePrey(Creature)
  nameWithType: Leech.LeechSchool.RemovePrey(Creature)
  fullName: Leech.LeechSchool.RemovePrey(Creature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Leech.LeechSchool.RemovePrey(Creature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemovePrey(Creature p)
    parameters:
    - id: p
      type: Global.Creature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:Leech.LeechSchool.RemovePrey(Creature)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RemovePrey(p As Creature)
  overload: Global.Leech.LeechSchool.RemovePrey*
- uid: Global.Leech.LeechSchool.BitDeadPrey(Creature)
  commentId: M:Global.Leech.LeechSchool.BitDeadPrey(Creature)
  id: BitDeadPrey(Creature)
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: BitDeadPrey(Creature)
  nameWithType: Leech.LeechSchool.BitDeadPrey(Creature)
  fullName: Leech.LeechSchool.BitDeadPrey(Creature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Leech.LeechSchool.BitDeadPrey(Creature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void BitDeadPrey(Creature p)
    parameters:
    - id: p
      type: Global.Creature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:Leech.LeechSchool.BitDeadPrey(Creature)</parameter>
          </include>
        </markup>
    content.vb: Public Sub BitDeadPrey(p As Creature)
  overload: Global.Leech.LeechSchool.BitDeadPrey*
- uid: Global.Leech.LeechSchool.Merge(Leech.LeechSchool)
  commentId: M:Global.Leech.LeechSchool.Merge(Leech.LeechSchool)
  id: Merge(Leech.LeechSchool)
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: Merge(LeechSchool)
  nameWithType: Leech.LeechSchool.Merge(Leech.LeechSchool)
  fullName: Leech.LeechSchool.Merge(Leech.LeechSchool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Leech.LeechSchool.Merge(Leech.LeechSchool)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Merge(Leech.LeechSchool school)
    parameters:
    - id: school
      type: Global.Leech.LeechSchool
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>school</parameter>
            <parameter>M:Leech.LeechSchool.Merge(Leech.LeechSchool)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Merge(school As Leech.LeechSchool)
  overload: Global.Leech.LeechSchool.Merge*
- uid: Global.Leech.LeechSchool.RemoveLeech(Leech)
  commentId: M:Global.Leech.LeechSchool.RemoveLeech(Leech)
  id: RemoveLeech(Leech)
  parent: Global.Leech.LeechSchool
  langs:
  - csharp
  - vb
  name: RemoveLeech(Leech)
  nameWithType: Leech.LeechSchool.RemoveLeech(Leech)
  fullName: Leech.LeechSchool.RemoveLeech(Leech)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Leech.LeechSchool.RemoveLeech(Leech)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RemoveLeech(Leech leech)
    parameters:
    - id: leech
      type: Global.Leech
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>leech</parameter>
            <parameter>M:Leech.LeechSchool.RemoveLeech(Leech)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RemoveLeech(leech As Leech)
  overload: Global.Leech.LeechSchool.RemoveLeech*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{Leech}
  commentId: T:System.Collections.Generic.List{Leech}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Leech>
  nameWithType: List<Leech>
  fullName: System.Collections.Generic.List<Leech>
  nameWithType.vb: List(Of Leech)
  fullName.vb: System.Collections.Generic.List(Of Leech)
  name.vb: List(Of Leech)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.Leech
    name: Leech
    isExternal: true
    href: Leech.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Leech
    name: Leech
    isExternal: true
    href: Leech.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.List{Leech.LeechSchool.LeechPrey}
  commentId: T:System.Collections.Generic.List{Leech.LeechSchool.LeechPrey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Leech.LeechSchool.LeechPrey>
  nameWithType: List<Leech.LeechSchool.LeechPrey>
  fullName: System.Collections.Generic.List<Leech.LeechSchool.LeechPrey>
  nameWithType.vb: List(Of Leech.LeechSchool.LeechPrey)
  fullName.vb: System.Collections.Generic.List(Of Leech.LeechSchool.LeechPrey)
  name.vb: List(Of Leech.LeechSchool.LeechPrey)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.Leech
    name: Leech
    isExternal: true
    href: Leech.html
  - name: .
  - uid: Global.Leech.LeechSchool
    name: LeechSchool
    isExternal: true
    href: Leech.LeechSchool.html
  - name: .
  - uid: Global.Leech.LeechSchool.LeechPrey
    name: LeechPrey
    isExternal: true
    href: Leech.LeechSchool.LeechPrey.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Leech
    name: Leech
    isExternal: true
    href: Leech.html
  - name: .
  - uid: Global.Leech.LeechSchool
    name: LeechSchool
    isExternal: true
    href: Leech.LeechSchool.html
  - name: .
  - uid: Global.Leech.LeechSchool.LeechPrey
    name: LeechPrey
    isExternal: true
    href: Leech.LeechSchool.LeechPrey.html
  - name: )
- uid: UnityEngine.Color
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: Global.Leech.LeechSchool.#ctor*
  commentId: Overload:Global.Leech.LeechSchool.#ctor
  isExternal: true
  href: Global.Leech.LeechSchool.html#Leech_LeechSchool__ctor
  name: LeechSchool
  nameWithType: Leech.LeechSchool.LeechSchool
  fullName: Leech.LeechSchool.LeechSchool
  nameWithType.vb: Leech.LeechSchool.New
  fullName.vb: Leech.LeechSchool.New
  name.vb: New
- uid: Global.Leech.LeechSchool.AddLeech*
  commentId: Overload:Global.Leech.LeechSchool.AddLeech
  isExternal: true
  href: Global.Leech.LeechSchool.html#Leech_LeechSchool_AddLeech_Leech_
  name: AddLeech
  nameWithType: Leech.LeechSchool.AddLeech
  fullName: Leech.LeechSchool.AddLeech
- uid: Global.Leech
  commentId: T:Global.Leech
  isExternal: true
  href: Leech.html
  name: Leech
  nameWithType: Leech
  fullName: Leech
- uid: Global.Leech.LeechSchool.AddPrey*
  commentId: Overload:Global.Leech.LeechSchool.AddPrey
  isExternal: true
  href: Global.Leech.LeechSchool.html#Leech_LeechSchool_AddPrey_Creature_
  name: AddPrey
  nameWithType: Leech.LeechSchool.AddPrey
  fullName: Leech.LeechSchool.AddPrey
- uid: Global.Creature
  commentId: T:Global.Creature
  isExternal: true
  href: Creature.html
  name: Creature
  nameWithType: Creature
  fullName: Creature
- uid: Global.Leech.LeechSchool.RemovePrey*
  commentId: Overload:Global.Leech.LeechSchool.RemovePrey
  isExternal: true
  href: Global.Leech.LeechSchool.html#Leech_LeechSchool_RemovePrey_Creature_
  name: RemovePrey
  nameWithType: Leech.LeechSchool.RemovePrey
  fullName: Leech.LeechSchool.RemovePrey
- uid: Global.Leech.LeechSchool.BitDeadPrey*
  commentId: Overload:Global.Leech.LeechSchool.BitDeadPrey
  isExternal: true
  href: Global.Leech.LeechSchool.html#Leech_LeechSchool_BitDeadPrey_Creature_
  name: BitDeadPrey
  nameWithType: Leech.LeechSchool.BitDeadPrey
  fullName: Leech.LeechSchool.BitDeadPrey
- uid: Global.Leech.LeechSchool.Merge*
  commentId: Overload:Global.Leech.LeechSchool.Merge
  isExternal: true
  href: Global.Leech.LeechSchool.html#Leech_LeechSchool_Merge_Leech_LeechSchool_
  name: Merge
  nameWithType: Leech.LeechSchool.Merge
  fullName: Leech.LeechSchool.Merge
- uid: Global.Leech.LeechSchool
  commentId: T:Global.Leech.LeechSchool
  isExternal: true
  href: Leech.html
  name: Leech.LeechSchool
  nameWithType: Leech.LeechSchool
  fullName: Leech.LeechSchool
  spec.csharp:
  - uid: Global.Leech
    name: Leech
    isExternal: true
    href: Leech.html
  - name: .
  - uid: Global.Leech.LeechSchool
    name: LeechSchool
    isExternal: true
    href: Leech.LeechSchool.html
  spec.vb:
  - uid: Global.Leech
    name: Leech
    isExternal: true
    href: Leech.html
  - name: .
  - uid: Global.Leech.LeechSchool
    name: LeechSchool
    isExternal: true
    href: Leech.LeechSchool.html
- uid: Global.Leech.LeechSchool.RemoveLeech*
  commentId: Overload:Global.Leech.LeechSchool.RemoveLeech
  isExternal: true
  href: Global.Leech.LeechSchool.html#Leech_LeechSchool_RemoveLeech_Leech_
  name: RemoveLeech
  nameWithType: Leech.LeechSchool.RemoveLeech
  fullName: Leech.LeechSchool.RemoveLeech
