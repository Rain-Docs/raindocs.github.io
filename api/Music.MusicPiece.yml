### YamlMime:ManagedReference
items:
- uid: Music.MusicPiece
  commentId: T:Music.MusicPiece
  id: MusicPiece
  parent: Music
  children:
  - Music.MusicPiece.#ctor(Music.MusicPlayer,System.String,Music.MusicPlayer.MusicContext)
  - Music.MusicPiece.IsProcedural
  - Music.MusicPiece.Loop
  - Music.MusicPiece.StartPlaying
  - Music.MusicPiece.StopAndDestroy
  - Music.MusicPiece.Update
  - Music.MusicPiece.context
  - Music.MusicPiece.musicPlayer
  - Music.MusicPiece.name
  - Music.MusicPiece.playWhenReady
  - Music.MusicPiece.startedPlaying
  - Music.MusicPiece.subTracks
  - Music.MusicPiece.volume
  langs:
  - csharp
  - vb
  name: MusicPiece
  nameWithType: MusicPiece
  fullName: Music.MusicPiece
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Music.MusicPiece</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public abstract class MusicPiece
    content.vb: Public MustInherit Class MusicPiece
  inheritance:
  - System.Object
  derivedClasses:
  - Music.ProceduralMusic
  - Music.Song
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Music.MusicPiece.musicPlayer
  commentId: F:Music.MusicPiece.musicPlayer
  id: musicPlayer
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: musicPlayer
  nameWithType: MusicPiece.musicPlayer
  fullName: Music.MusicPiece.musicPlayer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Music.MusicPiece.musicPlayer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public MusicPlayer musicPlayer
    return:
      type: Music.MusicPlayer
    content.vb: Public musicPlayer As MusicPlayer
- uid: Music.MusicPiece.subTracks
  commentId: F:Music.MusicPiece.subTracks
  id: subTracks
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: subTracks
  nameWithType: MusicPiece.subTracks
  fullName: Music.MusicPiece.subTracks
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Music.MusicPiece.subTracks</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<MusicPiece.SubTrack> subTracks
    return:
      type: System.Collections.Generic.List{Music.MusicPiece.SubTrack}
    content.vb: Public subTracks As List(Of MusicPiece.SubTrack)
- uid: Music.MusicPiece.startedPlaying
  commentId: F:Music.MusicPiece.startedPlaying
  id: startedPlaying
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: startedPlaying
  nameWithType: MusicPiece.startedPlaying
  fullName: Music.MusicPiece.startedPlaying
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Music.MusicPiece.startedPlaying</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool startedPlaying
    return:
      type: System.Boolean
    content.vb: Public startedPlaying As Boolean
- uid: Music.MusicPiece.playWhenReady
  commentId: F:Music.MusicPiece.playWhenReady
  id: playWhenReady
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: playWhenReady
  nameWithType: MusicPiece.playWhenReady
  fullName: Music.MusicPiece.playWhenReady
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Music.MusicPiece.playWhenReady</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool playWhenReady
    return:
      type: System.Boolean
    content.vb: Public playWhenReady As Boolean
- uid: Music.MusicPiece.name
  commentId: F:Music.MusicPiece.name
  id: name
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: name
  nameWithType: MusicPiece.name
  fullName: Music.MusicPiece.name
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Music.MusicPiece.name</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string name
    return:
      type: System.String
    content.vb: Public name As String
- uid: Music.MusicPiece.volume
  commentId: F:Music.MusicPiece.volume
  id: volume
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: volume
  nameWithType: MusicPiece.volume
  fullName: Music.MusicPiece.volume
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Music.MusicPiece.volume</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float volume
    return:
      type: System.Single
    content.vb: Public volume As Single
- uid: Music.MusicPiece.context
  commentId: F:Music.MusicPiece.context
  id: context
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: context
  nameWithType: MusicPiece.context
  fullName: Music.MusicPiece.context
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Music.MusicPiece.context</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public MusicPlayer.MusicContext context
    return:
      type: Music.MusicPlayer.MusicContext
    content.vb: Public context As MusicPlayer.MusicContext
- uid: Music.MusicPiece.#ctor(Music.MusicPlayer,System.String,Music.MusicPlayer.MusicContext)
  commentId: M:Music.MusicPiece.#ctor(Music.MusicPlayer,System.String,Music.MusicPlayer.MusicContext)
  id: '#ctor(Music.MusicPlayer,System.String,Music.MusicPlayer.MusicContext)'
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: MusicPiece(MusicPlayer, string, MusicContext)
  nameWithType: MusicPiece.MusicPiece(MusicPlayer, string, MusicPlayer.MusicContext)
  fullName: Music.MusicPiece.MusicPiece(Music.MusicPlayer, string, Music.MusicPlayer.MusicContext)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Music.MusicPiece</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public MusicPiece(MusicPlayer musicPlayer, string name, MusicPlayer.MusicContext context)
    parameters:
    - id: musicPlayer
      type: Music.MusicPlayer
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>musicPlayer</parameter>
            <parameter>M:Music.MusicPiece.#ctor(Music.MusicPlayer,System.String,Music.MusicPlayer.MusicContext)</parameter>
          </include>
        </markup>
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Music.MusicPiece.#ctor(Music.MusicPlayer,System.String,Music.MusicPlayer.MusicContext)</parameter>
          </include>
        </markup>
    - id: context
      type: Music.MusicPlayer.MusicContext
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Music.MusicPiece.#ctor(Music.MusicPlayer,System.String,Music.MusicPlayer.MusicContext)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(musicPlayer As MusicPlayer, name As String, context As MusicPlayer.MusicContext)
  overload: Music.MusicPiece.#ctor*
  nameWithType.vb: MusicPiece.New(MusicPlayer, String, MusicPlayer.MusicContext)
  fullName.vb: Music.MusicPiece.New(Music.MusicPlayer, String, Music.MusicPlayer.MusicContext)
  name.vb: New(MusicPlayer, String, MusicContext)
- uid: Music.MusicPiece.Update
  commentId: M:Music.MusicPiece.Update
  id: Update
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: MusicPiece.Update()
  fullName: Music.MusicPiece.Update()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Music.MusicPiece.Update</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void Update()
    content.vb: Public Overridable Sub Update()
  overload: Music.MusicPiece.Update*
- uid: Music.MusicPiece.StartPlaying
  commentId: M:Music.MusicPiece.StartPlaying
  id: StartPlaying
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: StartPlaying()
  nameWithType: MusicPiece.StartPlaying()
  fullName: Music.MusicPiece.StartPlaying()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Music.MusicPiece.StartPlaying</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected virtual void StartPlaying()
    content.vb: Protected Overridable Sub StartPlaying()
  overload: Music.MusicPiece.StartPlaying*
- uid: Music.MusicPiece.StopAndDestroy
  commentId: M:Music.MusicPiece.StopAndDestroy
  id: StopAndDestroy
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: StopAndDestroy()
  nameWithType: MusicPiece.StopAndDestroy()
  fullName: Music.MusicPiece.StopAndDestroy()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Music.MusicPiece.StopAndDestroy</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void StopAndDestroy()
    content.vb: Public Sub StopAndDestroy()
  overload: Music.MusicPiece.StopAndDestroy*
- uid: Music.MusicPiece.IsProcedural
  commentId: P:Music.MusicPiece.IsProcedural
  id: IsProcedural
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: IsProcedural
  nameWithType: MusicPiece.IsProcedural
  fullName: Music.MusicPiece.IsProcedural
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Music.MusicPiece.IsProcedural</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsProcedural { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsProcedural As Boolean
  overload: Music.MusicPiece.IsProcedural*
- uid: Music.MusicPiece.Loop
  commentId: P:Music.MusicPiece.Loop
  id: Loop
  parent: Music.MusicPiece
  langs:
  - csharp
  - vb
  name: Loop
  nameWithType: MusicPiece.Loop
  fullName: Music.MusicPiece.Loop
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Music
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Music.MusicPiece.Loop</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Loop { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property [Loop] As Boolean
  overload: Music.MusicPiece.Loop*
references:
- uid: Music
  commentId: N:Music
  isExternal: true
  href: Music.html
  name: Music
  nameWithType: Music
  fullName: Music
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Music.MusicPlayer
  commentId: T:Music.MusicPlayer
  parent: Music
  isExternal: true
  href: Music.MusicPlayer.html
  name: MusicPlayer
  nameWithType: MusicPlayer
  fullName: Music.MusicPlayer
- uid: System.Collections.Generic.List{Music.MusicPiece.SubTrack}
  commentId: T:System.Collections.Generic.List{Music.MusicPiece.SubTrack}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<MusicPiece.SubTrack>
  nameWithType: List<MusicPiece.SubTrack>
  fullName: System.Collections.Generic.List<Music.MusicPiece.SubTrack>
  nameWithType.vb: List(Of MusicPiece.SubTrack)
  fullName.vb: System.Collections.Generic.List(Of Music.MusicPiece.SubTrack)
  name.vb: List(Of MusicPiece.SubTrack)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Music.MusicPiece
    name: MusicPiece
    isExternal: true
    href: Music.MusicPiece.html
  - name: .
  - uid: Music.MusicPiece.SubTrack
    name: SubTrack
    isExternal: true
    href: Music.MusicPiece.SubTrack.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Music.MusicPiece
    name: MusicPiece
    isExternal: true
    href: Music.MusicPiece.html
  - name: .
  - uid: Music.MusicPiece.SubTrack
    name: SubTrack
    isExternal: true
    href: Music.MusicPiece.SubTrack.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Music.MusicPlayer.MusicContext
  commentId: T:Music.MusicPlayer.MusicContext
  parent: Music
  isExternal: true
  href: Music.MusicPlayer.html
  name: MusicPlayer.MusicContext
  nameWithType: MusicPlayer.MusicContext
  fullName: Music.MusicPlayer.MusicContext
  spec.csharp:
  - uid: Music.MusicPlayer
    name: MusicPlayer
    isExternal: true
    href: Music.MusicPlayer.html
  - name: .
  - uid: Music.MusicPlayer.MusicContext
    name: MusicContext
    isExternal: true
    href: Music.MusicPlayer.MusicContext.html
  spec.vb:
  - uid: Music.MusicPlayer
    name: MusicPlayer
    isExternal: true
    href: Music.MusicPlayer.html
  - name: .
  - uid: Music.MusicPlayer.MusicContext
    name: MusicContext
    isExternal: true
    href: Music.MusicPlayer.MusicContext.html
- uid: Music.MusicPiece.#ctor*
  commentId: Overload:Music.MusicPiece.#ctor
  isExternal: true
  href: Music.MusicPiece.html#Music_MusicPiece__ctor_Music_MusicPlayer_System_String_Music_MusicPlayer_MusicContext_
  name: MusicPiece
  nameWithType: MusicPiece.MusicPiece
  fullName: Music.MusicPiece.MusicPiece
  nameWithType.vb: MusicPiece.New
  fullName.vb: Music.MusicPiece.New
  name.vb: New
- uid: Music.MusicPiece.Update*
  commentId: Overload:Music.MusicPiece.Update
  isExternal: true
  href: Music.MusicPiece.html#Music_MusicPiece_Update
  name: Update
  nameWithType: MusicPiece.Update
  fullName: Music.MusicPiece.Update
- uid: Music.MusicPiece.StartPlaying*
  commentId: Overload:Music.MusicPiece.StartPlaying
  isExternal: true
  href: Music.MusicPiece.html#Music_MusicPiece_StartPlaying
  name: StartPlaying
  nameWithType: MusicPiece.StartPlaying
  fullName: Music.MusicPiece.StartPlaying
- uid: Music.MusicPiece.StopAndDestroy*
  commentId: Overload:Music.MusicPiece.StopAndDestroy
  isExternal: true
  href: Music.MusicPiece.html#Music_MusicPiece_StopAndDestroy
  name: StopAndDestroy
  nameWithType: MusicPiece.StopAndDestroy
  fullName: Music.MusicPiece.StopAndDestroy
- uid: Music.MusicPiece.IsProcedural*
  commentId: Overload:Music.MusicPiece.IsProcedural
  isExternal: true
  href: Music.MusicPiece.html#Music_MusicPiece_IsProcedural
  name: IsProcedural
  nameWithType: MusicPiece.IsProcedural
  fullName: Music.MusicPiece.IsProcedural
- uid: Music.MusicPiece.Loop*
  commentId: Overload:Music.MusicPiece.Loop
  isExternal: true
  href: Music.MusicPiece.html#Music_MusicPiece_Loop
  name: Loop
  nameWithType: MusicPiece.Loop
  fullName: Music.MusicPiece.Loop
