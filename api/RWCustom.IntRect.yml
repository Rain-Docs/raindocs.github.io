### YamlMime:ManagedReference
items:
- uid: RWCustom.IntRect
  commentId: T:RWCustom.IntRect
  id: IntRect
  parent: RWCustom
  children:
  - RWCustom.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - RWCustom.IntRect.Area
  - RWCustom.IntRect.ExpandToInclude(RWCustom.IntVector2)
  - RWCustom.IntRect.Grow(System.Int32)
  - RWCustom.IntRect.Height
  - RWCustom.IntRect.Includes(RWCustom.IntVector2)
  - RWCustom.IntRect.MakeFromIntVector2(RWCustom.IntVector2)
  - RWCustom.IntRect.ToFloatRect
  - RWCustom.IntRect.Width
  - RWCustom.IntRect.bottom
  - RWCustom.IntRect.left
  - RWCustom.IntRect.right
  - RWCustom.IntRect.top
  langs:
  - csharp
  - vb
  name: IntRect
  nameWithType: IntRect
  fullName: RWCustom.IntRect
  type: Struct
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:RWCustom.IntRect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public struct IntRect
    content.vb: Public Structure IntRect
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: RWCustom.IntRect.left
  commentId: F:RWCustom.IntRect.left
  id: left
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: left
  nameWithType: IntRect.left
  fullName: RWCustom.IntRect.left
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.IntRect.left</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int left
    return:
      type: System.Int32
    content.vb: Public left As Integer
- uid: RWCustom.IntRect.bottom
  commentId: F:RWCustom.IntRect.bottom
  id: bottom
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: bottom
  nameWithType: IntRect.bottom
  fullName: RWCustom.IntRect.bottom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.IntRect.bottom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int bottom
    return:
      type: System.Int32
    content.vb: Public bottom As Integer
- uid: RWCustom.IntRect.right
  commentId: F:RWCustom.IntRect.right
  id: right
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: right
  nameWithType: IntRect.right
  fullName: RWCustom.IntRect.right
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.IntRect.right</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int right
    return:
      type: System.Int32
    content.vb: Public right As Integer
- uid: RWCustom.IntRect.top
  commentId: F:RWCustom.IntRect.top
  id: top
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: top
  nameWithType: IntRect.top
  fullName: RWCustom.IntRect.top
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RWCustom.IntRect.top</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int top
    return:
      type: System.Int32
    content.vb: Public top As Integer
- uid: RWCustom.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:RWCustom.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: IntRect(int, int, int, int)
  nameWithType: IntRect.IntRect(int, int, int, int)
  fullName: RWCustom.IntRect.IntRect(int, int, int, int)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>RWCustom.IntRect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public IntRect(int left, int bottom, int right, int top)
    parameters:
    - id: left
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>left</parameter>
            <parameter>M:RWCustom.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: bottom
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bottom</parameter>
            <parameter>M:RWCustom.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: right
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>right</parameter>
            <parameter>M:RWCustom.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: top
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>top</parameter>
            <parameter>M:RWCustom.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(left As Integer, bottom As Integer, right As Integer, top As Integer)
  overload: RWCustom.IntRect.#ctor*
  nameWithType.vb: IntRect.New(Integer, Integer, Integer, Integer)
  fullName.vb: RWCustom.IntRect.New(Integer, Integer, Integer, Integer)
  name.vb: New(Integer, Integer, Integer, Integer)
- uid: RWCustom.IntRect.ToFloatRect
  commentId: M:RWCustom.IntRect.ToFloatRect
  id: ToFloatRect
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: ToFloatRect()
  nameWithType: IntRect.ToFloatRect()
  fullName: RWCustom.IntRect.ToFloatRect()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.IntRect.ToFloatRect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FloatRect ToFloatRect()
    return:
      type: Global.FloatRect
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.IntRect.ToFloatRect</parameter>
          </include>
        </markup>
    content.vb: Public Function ToFloatRect() As FloatRect
  overload: RWCustom.IntRect.ToFloatRect*
- uid: RWCustom.IntRect.MakeFromIntVector2(RWCustom.IntVector2)
  commentId: M:RWCustom.IntRect.MakeFromIntVector2(RWCustom.IntVector2)
  id: MakeFromIntVector2(RWCustom.IntVector2)
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: MakeFromIntVector2(IntVector2)
  nameWithType: IntRect.MakeFromIntVector2(IntVector2)
  fullName: RWCustom.IntRect.MakeFromIntVector2(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.IntRect.MakeFromIntVector2(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static IntRect MakeFromIntVector2(IntVector2 intVec2)
    parameters:
    - id: intVec2
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>intVec2</parameter>
            <parameter>M:RWCustom.IntRect.MakeFromIntVector2(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: RWCustom.IntRect
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.IntRect.MakeFromIntVector2(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MakeFromIntVector2(intVec2 As IntVector2) As IntRect
  overload: RWCustom.IntRect.MakeFromIntVector2*
- uid: RWCustom.IntRect.ExpandToInclude(RWCustom.IntVector2)
  commentId: M:RWCustom.IntRect.ExpandToInclude(RWCustom.IntVector2)
  id: ExpandToInclude(RWCustom.IntVector2)
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: ExpandToInclude(IntVector2)
  nameWithType: IntRect.ExpandToInclude(IntVector2)
  fullName: RWCustom.IntRect.ExpandToInclude(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.IntRect.ExpandToInclude(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ExpandToInclude(IntVector2 iv2)
    parameters:
    - id: iv2
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>iv2</parameter>
            <parameter>M:RWCustom.IntRect.ExpandToInclude(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ExpandToInclude(iv2 As IntVector2)
  overload: RWCustom.IntRect.ExpandToInclude*
- uid: RWCustom.IntRect.Grow(System.Int32)
  commentId: M:RWCustom.IntRect.Grow(System.Int32)
  id: Grow(System.Int32)
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: Grow(int)
  nameWithType: IntRect.Grow(int)
  fullName: RWCustom.IntRect.Grow(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.IntRect.Grow(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Grow(int grow)
    parameters:
    - id: grow
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>grow</parameter>
            <parameter>M:RWCustom.IntRect.Grow(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Grow(grow As Integer)
  overload: RWCustom.IntRect.Grow*
  nameWithType.vb: IntRect.Grow(Integer)
  fullName.vb: RWCustom.IntRect.Grow(Integer)
  name.vb: Grow(Integer)
- uid: RWCustom.IntRect.Includes(RWCustom.IntVector2)
  commentId: M:RWCustom.IntRect.Includes(RWCustom.IntVector2)
  id: Includes(RWCustom.IntVector2)
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: Includes(IntVector2)
  nameWithType: IntRect.Includes(IntVector2)
  fullName: RWCustom.IntRect.Includes(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RWCustom.IntRect.Includes(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Includes(IntVector2 point)
    parameters:
    - id: point
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>point</parameter>
            <parameter>M:RWCustom.IntRect.Includes(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RWCustom.IntRect.Includes(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function Includes(point As IntVector2) As Boolean
  overload: RWCustom.IntRect.Includes*
- uid: RWCustom.IntRect.Height
  commentId: P:RWCustom.IntRect.Height
  id: Height
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: IntRect.Height
  fullName: RWCustom.IntRect.Height
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:RWCustom.IntRect.Height</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int Height { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Height As Integer
  overload: RWCustom.IntRect.Height*
- uid: RWCustom.IntRect.Width
  commentId: P:RWCustom.IntRect.Width
  id: Width
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: IntRect.Width
  fullName: RWCustom.IntRect.Width
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:RWCustom.IntRect.Width</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int Width { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Width As Integer
  overload: RWCustom.IntRect.Width*
- uid: RWCustom.IntRect.Area
  commentId: P:RWCustom.IntRect.Area
  id: Area
  parent: RWCustom.IntRect
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: IntRect.Area
  fullName: RWCustom.IntRect.Area
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: RWCustom
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:RWCustom.IntRect.Area</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int Area { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Area As Integer
  overload: RWCustom.IntRect.Area*
references:
- uid: RWCustom
  commentId: N:RWCustom
  isExternal: true
  href: RWCustom.html
  name: RWCustom
  nameWithType: RWCustom
  fullName: RWCustom
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: RWCustom.IntRect.#ctor*
  commentId: Overload:RWCustom.IntRect.#ctor
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect__ctor_System_Int32_System_Int32_System_Int32_System_Int32_
  name: IntRect
  nameWithType: IntRect.IntRect
  fullName: RWCustom.IntRect.IntRect
  nameWithType.vb: IntRect.New
  fullName.vb: RWCustom.IntRect.New
  name.vb: New
- uid: RWCustom.IntRect.ToFloatRect*
  commentId: Overload:RWCustom.IntRect.ToFloatRect
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_ToFloatRect
  name: ToFloatRect
  nameWithType: IntRect.ToFloatRect
  fullName: RWCustom.IntRect.ToFloatRect
- uid: Global.FloatRect
  commentId: T:Global.FloatRect
  isExternal: true
  href: FloatRect.html
  name: FloatRect
  nameWithType: FloatRect
  fullName: FloatRect
- uid: RWCustom.IntRect.MakeFromIntVector2*
  commentId: Overload:RWCustom.IntRect.MakeFromIntVector2
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_MakeFromIntVector2_RWCustom_IntVector2_
  name: MakeFromIntVector2
  nameWithType: IntRect.MakeFromIntVector2
  fullName: RWCustom.IntRect.MakeFromIntVector2
- uid: RWCustom.IntVector2
  commentId: T:RWCustom.IntVector2
  parent: RWCustom
  isExternal: true
  href: RWCustom.IntVector2.html
  name: IntVector2
  nameWithType: IntVector2
  fullName: RWCustom.IntVector2
- uid: RWCustom.IntRect
  commentId: T:RWCustom.IntRect
  parent: RWCustom
  isExternal: true
  href: RWCustom.IntRect.html
  name: IntRect
  nameWithType: IntRect
  fullName: RWCustom.IntRect
- uid: RWCustom.IntRect.ExpandToInclude*
  commentId: Overload:RWCustom.IntRect.ExpandToInclude
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_ExpandToInclude_RWCustom_IntVector2_
  name: ExpandToInclude
  nameWithType: IntRect.ExpandToInclude
  fullName: RWCustom.IntRect.ExpandToInclude
- uid: RWCustom.IntRect.Grow*
  commentId: Overload:RWCustom.IntRect.Grow
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_Grow_System_Int32_
  name: Grow
  nameWithType: IntRect.Grow
  fullName: RWCustom.IntRect.Grow
- uid: RWCustom.IntRect.Includes*
  commentId: Overload:RWCustom.IntRect.Includes
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_Includes_RWCustom_IntVector2_
  name: Includes
  nameWithType: IntRect.Includes
  fullName: RWCustom.IntRect.Includes
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: RWCustom.IntRect.Height*
  commentId: Overload:RWCustom.IntRect.Height
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_Height
  name: Height
  nameWithType: IntRect.Height
  fullName: RWCustom.IntRect.Height
- uid: RWCustom.IntRect.Width*
  commentId: Overload:RWCustom.IntRect.Width
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_Width
  name: Width
  nameWithType: IntRect.Width
  fullName: RWCustom.IntRect.Width
- uid: RWCustom.IntRect.Area*
  commentId: Overload:RWCustom.IntRect.Area
  isExternal: true
  href: RWCustom.IntRect.html#RWCustom_IntRect_Area
  name: Area
  nameWithType: IntRect.Area
  fullName: RWCustom.IntRect.Area
