### YamlMime:ManagedReference
items:
- uid: Global.FSliceButton
  commentId: T:Global.FSliceButton
  id: FSliceButton
  parent: Global
  children:
  - Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String)
  - Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)
  - Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)
  - Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)
  - Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)
  - Global.FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  - Global.FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  - Global.FSliceButton.HandleAddedToStage
  - Global.FSliceButton.HandleRemovedFromStage
  - Global.FSliceButton.HandleSingleTouchBegan(FTouch)
  - Global.FSliceButton.HandleSingleTouchCanceled(FTouch)
  - Global.FSliceButton.HandleSingleTouchEnded(FTouch)
  - Global.FSliceButton.HandleSingleTouchMoved(FTouch)
  - Global.FSliceButton.SetAnchor(System.Single,System.Single)
  - Global.FSliceButton.SignalPress
  - Global.FSliceButton.SignalRelease
  - Global.FSliceButton.SignalReleaseOutside
  - Global.FSliceButton._bg
  - Global.FSliceButton._downColor
  - Global.FSliceButton._downElement
  - Global.FSliceButton._labelA
  - Global.FSliceButton._labelB
  - Global.FSliceButton._soundName
  - Global.FSliceButton._upColor
  - Global.FSliceButton._upElement
  - Global.FSliceButton.anchorX
  - Global.FSliceButton.anchorY
  - Global.FSliceButton.expansionAmount
  - Global.FSliceButton.height
  - Global.FSliceButton.isEnabled
  - Global.FSliceButton.labelA
  - Global.FSliceButton.labelB
  - Global.FSliceButton.sprite
  - Global.FSliceButton.width
  langs:
  - csharp
  - vb
  name: FSliceButton
  nameWithType: FSliceButton
  fullName: FSliceButton
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FSliceButton</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public class FSliceButton : FContainer, FSingleTouchableInterface, FCapturedTouchableInterface'
    content.vb: Public Class FSliceButton Inherits FContainer Implements FSingleTouchableInterface, FCapturedTouchableInterface
  inheritance:
  - System.Object
  - Global.FNode
  - Global.FContainer
  implements:
  - Global.FSingleTouchableInterface
  - Global.FCapturedTouchableInterface
  inheritedMembers:
  - Global.FContainer._childNodes
  - Global.FContainer.Redraw(System.Boolean,System.Boolean)
  - Global.FContainer.AddChild(FNode)
  - Global.FContainer.AddChildAtIndex(FNode,System.Int32)
  - Global.FContainer.RemoveChild(FNode)
  - Global.FContainer.RemoveAllChildren
  - Global.FContainer.GetChildCount
  - Global.FContainer.GetChildAt(System.Int32)
  - Global.FContainer.GetChildIndex(FNode)
  - Global.FContainer.shouldSortByZ
  - Global.FNode._x
  - Global.FNode._y
  - Global.FNode._scaleX
  - Global.FNode._scaleY
  - Global.FNode._rotation
  - Global.FNode._meshZ
  - Global.FNode._sortZ
  - Global.FNode._isMatrixDirty
  - Global.FNode._container
  - Global.FNode._matrix
  - Global.FNode._concatenatedMatrix
  - Global.FNode._inverseConcatenatedMatrix
  - Global.FNode._screenConcatenatedMatrix
  - Global.FNode._screenInverseConcatenatedMatrix
  - Global.FNode._needsSpecialMatrices
  - Global.FNode._alpha
  - Global.FNode._concatenatedAlpha
  - Global.FNode._isAlphaDirty
  - Global.FNode._visibleScale
  - Global.FNode._isOnStage
  - Global.FNode._depth
  - Global.FNode._stage
  - Global.FNode._isVisible
  - Global.FNode.data
  - Global.FNode.AddEnabler(FNodeEnabler)
  - Global.FNode.RemoveEnabler(FNodeEnabler)
  - Global.FNode.RemoveEnablerOfType(System.Type)
  - Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  - Global.FNode.RemoveListenForResize
  - Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  - Global.FNode.RemoveListenForOrientationChange
  - Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.RemoveListenForUpdate
  - Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.RemoveListenForAfterUpdate
  - Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.RemoveListenForLateUpdate
  - Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  - Global.FNode.RemoveListenForFixedUpdate
  - Global.FNode.EnableSingleTouch
  - Global.FNode.DisableSingleTouch
  - Global.FNode.EnableMultiTouch
  - Global.FNode.DisableMultiTouch
  - Global.FNode.EnableSmartTouch
  - Global.FNode.DisableSmartTouch
  - Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  - Global.FNode.RemoveListenForAddedOrRemoved
  - Global.FNode.LocalToScreen(UnityEngine.Vector2)
  - Global.FNode.ScreenToLocal(UnityEngine.Vector2)
  - Global.FNode.LocalToStage(UnityEngine.Vector2)
  - Global.FNode.StageToLocal(UnityEngine.Vector2)
  - Global.FNode.LocalToGlobal(UnityEngine.Vector2)
  - Global.FNode.GlobalToLocal(UnityEngine.Vector2)
  - Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
  - Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
  - Global.FNode.GetLocalMousePosition
  - Global.FNode.GetLocalTouchPosition(FTouch)
  - Global.FNode.UpdateMatrix
  - Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
  - Global.FNode.HandleAddedToContainer(FContainer)
  - Global.FNode.HandleRemovedFromContainer
  - Global.FNode.RemoveFromContainer
  - Global.FNode.MoveToFront
  - Global.FNode.MoveToBack
  - Global.FNode.MoveInFrontOfOtherNode(FNode)
  - Global.FNode.MoveBehindOtherNode(FNode)
  - Global.FNode.IsAncestryVisible
  - Global.FNode.CreateSpecialMatrices
  - Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
  - Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
  - Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
  - Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
  - Global.FNode.SetPosition(System.Single,System.Single)
  - Global.FNode.SetPosition(UnityEngine.Vector2)
  - Global.FNode.GetPosition
  - Global.FNode.isVisible
  - Global.FNode.x
  - Global.FNode.y
  - Global.FNode.meshZ
  - Global.FNode.sortZ
  - Global.FNode.scaleX
  - Global.FNode.scaleY
  - Global.FNode.scale
  - Global.FNode.rotation
  - Global.FNode.isMatrixDirty
  - Global.FNode.container
  - Global.FNode.depth
  - Global.FNode.touchPriority
  - Global.FNode.matrix
  - Global.FNode.concatenatedMatrix
  - Global.FNode.inverseConcatenatedMatrix
  - Global.FNode.screenConcatenatedMatrix
  - Global.FNode.screenInverseConcatenatedMatrix
  - Global.FNode.alpha
  - Global.FNode.concatenatedAlpha
  - Global.FNode.stage
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.FSliceButton._upElement
  commentId: F:Global.FSliceButton._upElement
  id: _upElement
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _upElement
  nameWithType: FSliceButton._upElement
  fullName: FSliceButton._upElement
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._upElement</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FAtlasElement _upElement
    return:
      type: Global.FAtlasElement
    content.vb: Protected _upElement As FAtlasElement
- uid: Global.FSliceButton._downElement
  commentId: F:Global.FSliceButton._downElement
  id: _downElement
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _downElement
  nameWithType: FSliceButton._downElement
  fullName: FSliceButton._downElement
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._downElement</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FAtlasElement _downElement
    return:
      type: Global.FAtlasElement
    content.vb: Protected _downElement As FAtlasElement
- uid: Global.FSliceButton._upColor
  commentId: F:Global.FSliceButton._upColor
  id: _upColor
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _upColor
  nameWithType: FSliceButton._upColor
  fullName: FSliceButton._upColor
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._upColor</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected Color _upColor
    return:
      type: UnityEngine.Color
    content.vb: Protected _upColor As Color
- uid: Global.FSliceButton._downColor
  commentId: F:Global.FSliceButton._downColor
  id: _downColor
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _downColor
  nameWithType: FSliceButton._downColor
  fullName: FSliceButton._downColor
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._downColor</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected Color _downColor
    return:
      type: UnityEngine.Color
    content.vb: Protected _downColor As Color
- uid: Global.FSliceButton._bg
  commentId: F:Global.FSliceButton._bg
  id: _bg
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _bg
  nameWithType: FSliceButton._bg
  fullName: FSliceButton._bg
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._bg</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FSliceSprite _bg
    return:
      type: Global.FSliceSprite
    content.vb: Protected _bg As FSliceSprite
- uid: Global.FSliceButton._soundName
  commentId: F:Global.FSliceButton._soundName
  id: _soundName
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _soundName
  nameWithType: FSliceButton._soundName
  fullName: FSliceButton._soundName
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._soundName</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected string _soundName
    return:
      type: System.String
    content.vb: Protected _soundName As String
- uid: Global.FSliceButton._labelA
  commentId: F:Global.FSliceButton._labelA
  id: _labelA
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _labelA
  nameWithType: FSliceButton._labelA
  fullName: FSliceButton._labelA
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._labelA</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FLabel _labelA
    return:
      type: Global.FLabel
    content.vb: Protected _labelA As FLabel
- uid: Global.FSliceButton._labelB
  commentId: F:Global.FSliceButton._labelB
  id: _labelB
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: _labelB
  nameWithType: FSliceButton._labelB
  fullName: FSliceButton._labelB
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton._labelB</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: protected FLabel _labelB
    return:
      type: Global.FLabel
    content.vb: Protected _labelB As FLabel
- uid: Global.FSliceButton.expansionAmount
  commentId: F:Global.FSliceButton.expansionAmount
  id: expansionAmount
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: expansionAmount
  nameWithType: FSliceButton.expansionAmount
  fullName: FSliceButton.expansionAmount
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSliceButton.expansionAmount</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float expansionAmount
    return:
      type: System.Single
    content.vb: Public expansionAmount As Single
- uid: Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)
  commentId: M:Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)
  id: '#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)'
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: FSliceButton(float, float, string, string, Color, Color, string)
  nameWithType: FSliceButton.FSliceButton(float, float, string, string, Color, Color, string)
  fullName: FSliceButton.FSliceButton(float, float, string, string, UnityEngine.Color, UnityEngine.Color, string)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FSliceButton</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FSliceButton(float width, float height, string upElementName, string downElementName, Color upColor, Color downColor, string soundName)
    parameters:
    - id: width
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>width</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: height
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>height</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: upElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: downElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>downElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: upColor
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upColor</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: downColor
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>downColor</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: soundName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>soundName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(width As Single, height As Single, upElementName As String, downElementName As String, upColor As Color, downColor As Color, soundName As String)
  overload: Global.FSliceButton.#ctor*
  nameWithType.vb: FSliceButton.New(Single, Single, String, String, Color, Color, String)
  fullName.vb: FSliceButton.New(Single, Single, String, String, UnityEngine.Color, UnityEngine.Color, String)
  name.vb: New(Single, Single, String, String, Color, Color, String)
- uid: Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)
  commentId: M:Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)
  id: '#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)'
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: FSliceButton(float, float, string, string, Color, string)
  nameWithType: FSliceButton.FSliceButton(float, float, string, string, Color, string)
  fullName: FSliceButton.FSliceButton(float, float, string, string, UnityEngine.Color, string)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FSliceButton</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FSliceButton(float width, float height, string upElementName, string downElementName, Color color, string soundName)
    parameters:
    - id: width
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>width</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: height
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>height</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: upElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: downElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>downElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: color
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>color</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    - id: soundName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>soundName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(width As Single, height As Single, upElementName As String, downElementName As String, color As Color, soundName As String)
  overload: Global.FSliceButton.#ctor*
  nameWithType.vb: FSliceButton.New(Single, Single, String, String, Color, String)
  fullName.vb: FSliceButton.New(Single, Single, String, String, UnityEngine.Color, String)
  name.vb: New(Single, Single, String, String, Color, String)
- uid: Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)
  commentId: M:Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)
  id: '#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)'
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: FSliceButton(float, float, string, string, Color)
  nameWithType: FSliceButton.FSliceButton(float, float, string, string, Color)
  fullName: FSliceButton.FSliceButton(float, float, string, string, UnityEngine.Color)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FSliceButton</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FSliceButton(float width, float height, string upElementName, string downElementName, Color color)
    parameters:
    - id: width
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>width</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: height
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>height</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: upElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: downElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>downElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: color
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>color</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(width As Single, height As Single, upElementName As String, downElementName As String, color As Color)
  overload: Global.FSliceButton.#ctor*
  nameWithType.vb: FSliceButton.New(Single, Single, String, String, Color)
  fullName.vb: FSliceButton.New(Single, Single, String, String, UnityEngine.Color)
  name.vb: New(Single, Single, String, String, Color)
- uid: Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)
  commentId: M:Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)
  id: '#ctor(System.Single,System.Single,System.String,System.String,System.String)'
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: FSliceButton(float, float, string, string, string)
  nameWithType: FSliceButton.FSliceButton(float, float, string, string, string)
  fullName: FSliceButton.FSliceButton(float, float, string, string, string)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FSliceButton</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FSliceButton(float width, float height, string upElementName, string downElementName, string soundName)
    parameters:
    - id: width
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>width</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: height
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>height</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: upElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: downElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>downElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: soundName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>soundName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(width As Single, height As Single, upElementName As String, downElementName As String, soundName As String)
  overload: Global.FSliceButton.#ctor*
  nameWithType.vb: FSliceButton.New(Single, Single, String, String, String)
  fullName.vb: FSliceButton.New(Single, Single, String, String, String)
  name.vb: New(Single, Single, String, String, String)
- uid: Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String)
  commentId: M:Global.FSliceButton.#ctor(System.Single,System.Single,System.String,System.String)
  id: '#ctor(System.Single,System.Single,System.String,System.String)'
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: FSliceButton(float, float, string, string)
  nameWithType: FSliceButton.FSliceButton(float, float, string, string)
  fullName: FSliceButton.FSliceButton(float, float, string, string)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FSliceButton</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FSliceButton(float width, float height, string upElementName, string downElementName)
    parameters:
    - id: width
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>width</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: height
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>height</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: upElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String)</parameter>
          </include>
        </markup>
    - id: downElementName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>downElementName</parameter>
            <parameter>M:FSliceButton.#ctor(System.Single,System.Single,System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(width As Single, height As Single, upElementName As String, downElementName As String)
  overload: Global.FSliceButton.#ctor*
  nameWithType.vb: FSliceButton.New(Single, Single, String, String)
  fullName.vb: FSliceButton.New(Single, Single, String, String)
  name.vb: New(Single, Single, String, String)
- uid: Global.FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  commentId: M:Global.FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  id: AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: AddLabelA(string, string, float, float, Color)
  nameWithType: FSliceButton.AddLabelA(string, string, float, float, Color)
  fullName: FSliceButton.AddLabelA(string, string, float, float, UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FLabel AddLabelA(string fontName, string text, float scale, float offsetY, Color color)
    parameters:
    - id: fontName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fontName</parameter>
            <parameter>M:FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: text
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: scale
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scale</parameter>
            <parameter>M:FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: offsetY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offsetY</parameter>
            <parameter>M:FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: color
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>color</parameter>
            <parameter>M:FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: Global.FLabel
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FSliceButton.AddLabelA(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Function AddLabelA(fontName As String, text As String, scale As Single, offsetY As Single, color As Color) As FLabel
  overload: Global.FSliceButton.AddLabelA*
  nameWithType.vb: FSliceButton.AddLabelA(String, String, Single, Single, Color)
  fullName.vb: FSliceButton.AddLabelA(String, String, Single, Single, UnityEngine.Color)
  name.vb: AddLabelA(String, String, Single, Single, Color)
- uid: Global.FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  commentId: M:Global.FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  id: AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: AddLabelB(string, string, float, float, Color)
  nameWithType: FSliceButton.AddLabelB(string, string, float, float, Color)
  fullName: FSliceButton.AddLabelB(string, string, float, float, UnityEngine.Color)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FLabel AddLabelB(string fontName, string text, float scale, float offsetY, Color color)
    parameters:
    - id: fontName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fontName</parameter>
            <parameter>M:FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: text
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: scale
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scale</parameter>
            <parameter>M:FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: offsetY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offsetY</parameter>
            <parameter>M:FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    - id: color
      type: UnityEngine.Color
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>color</parameter>
            <parameter>M:FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    return:
      type: Global.FLabel
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FSliceButton.AddLabelB(System.String,System.String,System.Single,System.Single,UnityEngine.Color)</parameter>
          </include>
        </markup>
    content.vb: Public Function AddLabelB(fontName As String, text As String, scale As Single, offsetY As Single, color As Color) As FLabel
  overload: Global.FSliceButton.AddLabelB*
  nameWithType.vb: FSliceButton.AddLabelB(String, String, Single, Single, Color)
  fullName.vb: FSliceButton.AddLabelB(String, String, Single, Single, UnityEngine.Color)
  name.vb: AddLabelB(String, String, Single, Single, Color)
- uid: Global.FSliceButton.HandleAddedToStage
  commentId: M:Global.FSliceButton.HandleAddedToStage
  id: HandleAddedToStage
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: HandleAddedToStage()
  nameWithType: FSliceButton.HandleAddedToStage()
  fullName: FSliceButton.HandleAddedToStage()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.HandleAddedToStage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override void HandleAddedToStage()
    content.vb: Public Overrides Sub HandleAddedToStage()
  overridden: Global.FContainer.HandleAddedToStage
  overload: Global.FSliceButton.HandleAddedToStage*
- uid: Global.FSliceButton.HandleRemovedFromStage
  commentId: M:Global.FSliceButton.HandleRemovedFromStage
  id: HandleRemovedFromStage
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: HandleRemovedFromStage()
  nameWithType: FSliceButton.HandleRemovedFromStage()
  fullName: FSliceButton.HandleRemovedFromStage()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.HandleRemovedFromStage</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override void HandleRemovedFromStage()
    content.vb: Public Overrides Sub HandleRemovedFromStage()
  overridden: Global.FContainer.HandleRemovedFromStage
  overload: Global.FSliceButton.HandleRemovedFromStage*
- uid: Global.FSliceButton.HandleSingleTouchBegan(FTouch)
  commentId: M:Global.FSliceButton.HandleSingleTouchBegan(FTouch)
  id: HandleSingleTouchBegan(FTouch)
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: HandleSingleTouchBegan(FTouch)
  nameWithType: FSliceButton.HandleSingleTouchBegan(FTouch)
  fullName: FSliceButton.HandleSingleTouchBegan(FTouch)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.HandleSingleTouchBegan(FTouch)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool HandleSingleTouchBegan(FTouch touch)
    parameters:
    - id: touch
      type: Global.FTouch
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>touch</parameter>
            <parameter>M:FSliceButton.HandleSingleTouchBegan(FTouch)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FSliceButton.HandleSingleTouchBegan(FTouch)</parameter>
          </include>
        </markup>
    content.vb: Public Function HandleSingleTouchBegan(touch As FTouch) As Boolean
  overload: Global.FSliceButton.HandleSingleTouchBegan*
  implements:
  - Global.FSingleTouchableInterface.HandleSingleTouchBegan(FTouch)
- uid: Global.FSliceButton.HandleSingleTouchMoved(FTouch)
  commentId: M:Global.FSliceButton.HandleSingleTouchMoved(FTouch)
  id: HandleSingleTouchMoved(FTouch)
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: HandleSingleTouchMoved(FTouch)
  nameWithType: FSliceButton.HandleSingleTouchMoved(FTouch)
  fullName: FSliceButton.HandleSingleTouchMoved(FTouch)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.HandleSingleTouchMoved(FTouch)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void HandleSingleTouchMoved(FTouch touch)
    parameters:
    - id: touch
      type: Global.FTouch
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>touch</parameter>
            <parameter>M:FSliceButton.HandleSingleTouchMoved(FTouch)</parameter>
          </include>
        </markup>
    content.vb: Public Sub HandleSingleTouchMoved(touch As FTouch)
  overload: Global.FSliceButton.HandleSingleTouchMoved*
  implements:
  - Global.FSingleTouchableInterface.HandleSingleTouchMoved(FTouch)
- uid: Global.FSliceButton.HandleSingleTouchEnded(FTouch)
  commentId: M:Global.FSliceButton.HandleSingleTouchEnded(FTouch)
  id: HandleSingleTouchEnded(FTouch)
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: HandleSingleTouchEnded(FTouch)
  nameWithType: FSliceButton.HandleSingleTouchEnded(FTouch)
  fullName: FSliceButton.HandleSingleTouchEnded(FTouch)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.HandleSingleTouchEnded(FTouch)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void HandleSingleTouchEnded(FTouch touch)
    parameters:
    - id: touch
      type: Global.FTouch
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>touch</parameter>
            <parameter>M:FSliceButton.HandleSingleTouchEnded(FTouch)</parameter>
          </include>
        </markup>
    content.vb: Public Sub HandleSingleTouchEnded(touch As FTouch)
  overload: Global.FSliceButton.HandleSingleTouchEnded*
  implements:
  - Global.FSingleTouchableInterface.HandleSingleTouchEnded(FTouch)
- uid: Global.FSliceButton.HandleSingleTouchCanceled(FTouch)
  commentId: M:Global.FSliceButton.HandleSingleTouchCanceled(FTouch)
  id: HandleSingleTouchCanceled(FTouch)
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: HandleSingleTouchCanceled(FTouch)
  nameWithType: FSliceButton.HandleSingleTouchCanceled(FTouch)
  fullName: FSliceButton.HandleSingleTouchCanceled(FTouch)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.HandleSingleTouchCanceled(FTouch)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void HandleSingleTouchCanceled(FTouch touch)
    parameters:
    - id: touch
      type: Global.FTouch
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>touch</parameter>
            <parameter>M:FSliceButton.HandleSingleTouchCanceled(FTouch)</parameter>
          </include>
        </markup>
    content.vb: Public Sub HandleSingleTouchCanceled(touch As FTouch)
  overload: Global.FSliceButton.HandleSingleTouchCanceled*
  implements:
  - Global.FSingleTouchableInterface.HandleSingleTouchCanceled(FTouch)
- uid: Global.FSliceButton.SetAnchor(System.Single,System.Single)
  commentId: M:Global.FSliceButton.SetAnchor(System.Single,System.Single)
  id: SetAnchor(System.Single,System.Single)
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: SetAnchor(float, float)
  nameWithType: FSliceButton.SetAnchor(float, float)
  fullName: FSliceButton.SetAnchor(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSliceButton.SetAnchor(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SetAnchor(float x, float y)
    parameters:
    - id: x
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:FSliceButton.SetAnchor(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:FSliceButton.SetAnchor(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SetAnchor(x As Single, y As Single)
  overload: Global.FSliceButton.SetAnchor*
  nameWithType.vb: FSliceButton.SetAnchor(Single, Single)
  fullName.vb: FSliceButton.SetAnchor(Single, Single)
  name.vb: SetAnchor(Single, Single)
- uid: Global.FSliceButton.sprite
  commentId: P:Global.FSliceButton.sprite
  id: sprite
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: sprite
  nameWithType: FSliceButton.sprite
  fullName: FSliceButton.sprite
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.sprite</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FSprite sprite { get; }
    parameters: []
    return:
      type: Global.FSprite
    content.vb: Public ReadOnly Property sprite As FSprite
  overload: Global.FSliceButton.sprite*
- uid: Global.FSliceButton.anchorX
  commentId: P:Global.FSliceButton.anchorX
  id: anchorX
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: anchorX
  nameWithType: FSliceButton.anchorX
  fullName: FSliceButton.anchorX
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.anchorX</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float anchorX { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property anchorX As Single
  overload: Global.FSliceButton.anchorX*
- uid: Global.FSliceButton.anchorY
  commentId: P:Global.FSliceButton.anchorY
  id: anchorY
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: anchorY
  nameWithType: FSliceButton.anchorY
  fullName: FSliceButton.anchorY
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.anchorY</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float anchorY { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property anchorY As Single
  overload: Global.FSliceButton.anchorY*
- uid: Global.FSliceButton.isEnabled
  commentId: P:Global.FSliceButton.isEnabled
  id: isEnabled
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: isEnabled
  nameWithType: FSliceButton.isEnabled
  fullName: FSliceButton.isEnabled
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.isEnabled</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool isEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property isEnabled As Boolean
  overload: Global.FSliceButton.isEnabled*
- uid: Global.FSliceButton.labelA
  commentId: P:Global.FSliceButton.labelA
  id: labelA
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: labelA
  nameWithType: FSliceButton.labelA
  fullName: FSliceButton.labelA
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.labelA</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FLabel labelA { get; }
    parameters: []
    return:
      type: Global.FLabel
    content.vb: Public ReadOnly Property labelA As FLabel
  overload: Global.FSliceButton.labelA*
- uid: Global.FSliceButton.labelB
  commentId: P:Global.FSliceButton.labelB
  id: labelB
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: labelB
  nameWithType: FSliceButton.labelB
  fullName: FSliceButton.labelB
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.labelB</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FLabel labelB { get; }
    parameters: []
    return:
      type: Global.FLabel
    content.vb: Public ReadOnly Property labelB As FLabel
  overload: Global.FSliceButton.labelB*
- uid: Global.FSliceButton.width
  commentId: P:Global.FSliceButton.width
  id: width
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: width
  nameWithType: FSliceButton.width
  fullName: FSliceButton.width
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.width</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float width { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property width As Single
  overload: Global.FSliceButton.width*
- uid: Global.FSliceButton.height
  commentId: P:Global.FSliceButton.height
  id: height
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: height
  nameWithType: FSliceButton.height
  fullName: FSliceButton.height
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSliceButton.height</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float height { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property height As Single
  overload: Global.FSliceButton.height*
- uid: Global.FSliceButton.SignalPress
  commentId: E:Global.FSliceButton.SignalPress
  id: SignalPress
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: SignalPress
  nameWithType: FSliceButton.SignalPress
  fullName: FSliceButton.SignalPress
  type: Event
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>E:FSliceButton.SignalPress</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public event FSliceButton.FSliceButtonSignalDelegate SignalPress
    return:
      type: Global.FSliceButton.FSliceButtonSignalDelegate
    content.vb: Public Event SignalPress As FSliceButton.FSliceButtonSignalDelegate
- uid: Global.FSliceButton.SignalRelease
  commentId: E:Global.FSliceButton.SignalRelease
  id: SignalRelease
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: SignalRelease
  nameWithType: FSliceButton.SignalRelease
  fullName: FSliceButton.SignalRelease
  type: Event
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>E:FSliceButton.SignalRelease</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public event FSliceButton.FSliceButtonSignalDelegate SignalRelease
    return:
      type: Global.FSliceButton.FSliceButtonSignalDelegate
    content.vb: Public Event SignalRelease As FSliceButton.FSliceButtonSignalDelegate
- uid: Global.FSliceButton.SignalReleaseOutside
  commentId: E:Global.FSliceButton.SignalReleaseOutside
  id: SignalReleaseOutside
  parent: Global.FSliceButton
  langs:
  - csharp
  - vb
  name: SignalReleaseOutside
  nameWithType: FSliceButton.SignalReleaseOutside
  fullName: FSliceButton.SignalReleaseOutside
  type: Event
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>E:FSliceButton.SignalReleaseOutside</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public event FSliceButton.FSliceButtonSignalDelegate SignalReleaseOutside
    return:
      type: Global.FSliceButton.FSliceButtonSignalDelegate
    content.vb: Public Event SignalReleaseOutside As FSliceButton.FSliceButtonSignalDelegate
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.FNode
  commentId: T:Global.FNode
  isExternal: true
  href: FNode.html
  name: FNode
  nameWithType: FNode
  fullName: FNode
- uid: Global.FContainer
  commentId: T:Global.FContainer
  isExternal: true
  href: FContainer.html
  name: FContainer
  nameWithType: FContainer
  fullName: FContainer
- uid: Global.FSingleTouchableInterface
  commentId: T:Global.FSingleTouchableInterface
  isExternal: true
  href: FSingleTouchableInterface.html
  name: FSingleTouchableInterface
  nameWithType: FSingleTouchableInterface
  fullName: FSingleTouchableInterface
- uid: Global.FCapturedTouchableInterface
  commentId: T:Global.FCapturedTouchableInterface
  isExternal: true
  href: FCapturedTouchableInterface.html
  name: FCapturedTouchableInterface
  nameWithType: FCapturedTouchableInterface
  fullName: FCapturedTouchableInterface
- uid: Global.FContainer._childNodes
  commentId: F:Global.FContainer._childNodes
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer__childNodes
  name: _childNodes
  nameWithType: FContainer._childNodes
  fullName: FContainer._childNodes
- uid: Global.FContainer.Redraw(System.Boolean,System.Boolean)
  commentId: M:Global.FContainer.Redraw(System.Boolean,System.Boolean)
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_Redraw_System_Boolean_System_Boolean_
  name: Redraw(bool, bool)
  nameWithType: FContainer.Redraw(bool, bool)
  fullName: FContainer.Redraw(bool, bool)
  nameWithType.vb: FContainer.Redraw(Boolean, Boolean)
  fullName.vb: FContainer.Redraw(Boolean, Boolean)
  name.vb: Redraw(Boolean, Boolean)
  spec.csharp:
  - uid: Global.FContainer.Redraw(System.Boolean,System.Boolean)
    name: Redraw
    isExternal: true
    href: Global.FContainer.html#FContainer_Redraw_System_Boolean_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.FContainer.Redraw(System.Boolean,System.Boolean)
    name: Redraw
    isExternal: true
    href: Global.FContainer.html#FContainer_Redraw_System_Boolean_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.FContainer.AddChild(FNode)
  commentId: M:Global.FContainer.AddChild(FNode)
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_AddChild_FNode_
  name: AddChild(FNode)
  nameWithType: FContainer.AddChild(FNode)
  fullName: FContainer.AddChild(FNode)
  spec.csharp:
  - uid: Global.FContainer.AddChild(FNode)
    name: AddChild
    isExternal: true
    href: Global.FContainer.html#FContainer_AddChild_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
  spec.vb:
  - uid: Global.FContainer.AddChild(FNode)
    name: AddChild
    isExternal: true
    href: Global.FContainer.html#FContainer_AddChild_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
- uid: Global.FContainer.AddChildAtIndex(FNode,System.Int32)
  commentId: M:Global.FContainer.AddChildAtIndex(FNode,System.Int32)
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_AddChildAtIndex_FNode_System_Int32_
  name: AddChildAtIndex(FNode, int)
  nameWithType: FContainer.AddChildAtIndex(FNode, int)
  fullName: FContainer.AddChildAtIndex(FNode, int)
  nameWithType.vb: FContainer.AddChildAtIndex(FNode, Integer)
  fullName.vb: FContainer.AddChildAtIndex(FNode, Integer)
  name.vb: AddChildAtIndex(FNode, Integer)
  spec.csharp:
  - uid: Global.FContainer.AddChildAtIndex(FNode,System.Int32)
    name: AddChildAtIndex
    isExternal: true
    href: Global.FContainer.html#FContainer_AddChildAtIndex_FNode_System_Int32_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Global.FContainer.AddChildAtIndex(FNode,System.Int32)
    name: AddChildAtIndex
    isExternal: true
    href: Global.FContainer.html#FContainer_AddChildAtIndex_FNode_System_Int32_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Global.FContainer.RemoveChild(FNode)
  commentId: M:Global.FContainer.RemoveChild(FNode)
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_RemoveChild_FNode_
  name: RemoveChild(FNode)
  nameWithType: FContainer.RemoveChild(FNode)
  fullName: FContainer.RemoveChild(FNode)
  spec.csharp:
  - uid: Global.FContainer.RemoveChild(FNode)
    name: RemoveChild
    isExternal: true
    href: Global.FContainer.html#FContainer_RemoveChild_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
  spec.vb:
  - uid: Global.FContainer.RemoveChild(FNode)
    name: RemoveChild
    isExternal: true
    href: Global.FContainer.html#FContainer_RemoveChild_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
- uid: Global.FContainer.RemoveAllChildren
  commentId: M:Global.FContainer.RemoveAllChildren
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_RemoveAllChildren
  name: RemoveAllChildren()
  nameWithType: FContainer.RemoveAllChildren()
  fullName: FContainer.RemoveAllChildren()
  spec.csharp:
  - uid: Global.FContainer.RemoveAllChildren
    name: RemoveAllChildren
    isExternal: true
    href: Global.FContainer.html#FContainer_RemoveAllChildren
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FContainer.RemoveAllChildren
    name: RemoveAllChildren
    isExternal: true
    href: Global.FContainer.html#FContainer_RemoveAllChildren
  - name: (
  - name: )
- uid: Global.FContainer.GetChildCount
  commentId: M:Global.FContainer.GetChildCount
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_GetChildCount
  name: GetChildCount()
  nameWithType: FContainer.GetChildCount()
  fullName: FContainer.GetChildCount()
  spec.csharp:
  - uid: Global.FContainer.GetChildCount
    name: GetChildCount
    isExternal: true
    href: Global.FContainer.html#FContainer_GetChildCount
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FContainer.GetChildCount
    name: GetChildCount
    isExternal: true
    href: Global.FContainer.html#FContainer_GetChildCount
  - name: (
  - name: )
- uid: Global.FContainer.GetChildAt(System.Int32)
  commentId: M:Global.FContainer.GetChildAt(System.Int32)
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_GetChildAt_System_Int32_
  name: GetChildAt(int)
  nameWithType: FContainer.GetChildAt(int)
  fullName: FContainer.GetChildAt(int)
  nameWithType.vb: FContainer.GetChildAt(Integer)
  fullName.vb: FContainer.GetChildAt(Integer)
  name.vb: GetChildAt(Integer)
  spec.csharp:
  - uid: Global.FContainer.GetChildAt(System.Int32)
    name: GetChildAt
    isExternal: true
    href: Global.FContainer.html#FContainer_GetChildAt_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Global.FContainer.GetChildAt(System.Int32)
    name: GetChildAt
    isExternal: true
    href: Global.FContainer.html#FContainer_GetChildAt_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Global.FContainer.GetChildIndex(FNode)
  commentId: M:Global.FContainer.GetChildIndex(FNode)
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_GetChildIndex_FNode_
  name: GetChildIndex(FNode)
  nameWithType: FContainer.GetChildIndex(FNode)
  fullName: FContainer.GetChildIndex(FNode)
  spec.csharp:
  - uid: Global.FContainer.GetChildIndex(FNode)
    name: GetChildIndex
    isExternal: true
    href: Global.FContainer.html#FContainer_GetChildIndex_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
  spec.vb:
  - uid: Global.FContainer.GetChildIndex(FNode)
    name: GetChildIndex
    isExternal: true
    href: Global.FContainer.html#FContainer_GetChildIndex_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
- uid: Global.FContainer.shouldSortByZ
  commentId: P:Global.FContainer.shouldSortByZ
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_shouldSortByZ
  name: shouldSortByZ
  nameWithType: FContainer.shouldSortByZ
  fullName: FContainer.shouldSortByZ
- uid: Global.FNode._x
  commentId: F:Global.FNode._x
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__x
  name: _x
  nameWithType: FNode._x
  fullName: FNode._x
- uid: Global.FNode._y
  commentId: F:Global.FNode._y
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__y
  name: _y
  nameWithType: FNode._y
  fullName: FNode._y
- uid: Global.FNode._scaleX
  commentId: F:Global.FNode._scaleX
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__scaleX
  name: _scaleX
  nameWithType: FNode._scaleX
  fullName: FNode._scaleX
- uid: Global.FNode._scaleY
  commentId: F:Global.FNode._scaleY
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__scaleY
  name: _scaleY
  nameWithType: FNode._scaleY
  fullName: FNode._scaleY
- uid: Global.FNode._rotation
  commentId: F:Global.FNode._rotation
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__rotation
  name: _rotation
  nameWithType: FNode._rotation
  fullName: FNode._rotation
- uid: Global.FNode._meshZ
  commentId: F:Global.FNode._meshZ
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__meshZ
  name: _meshZ
  nameWithType: FNode._meshZ
  fullName: FNode._meshZ
- uid: Global.FNode._sortZ
  commentId: F:Global.FNode._sortZ
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__sortZ
  name: _sortZ
  nameWithType: FNode._sortZ
  fullName: FNode._sortZ
- uid: Global.FNode._isMatrixDirty
  commentId: F:Global.FNode._isMatrixDirty
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__isMatrixDirty
  name: _isMatrixDirty
  nameWithType: FNode._isMatrixDirty
  fullName: FNode._isMatrixDirty
- uid: Global.FNode._container
  commentId: F:Global.FNode._container
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__container
  name: _container
  nameWithType: FNode._container
  fullName: FNode._container
- uid: Global.FNode._matrix
  commentId: F:Global.FNode._matrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__matrix
  name: _matrix
  nameWithType: FNode._matrix
  fullName: FNode._matrix
- uid: Global.FNode._concatenatedMatrix
  commentId: F:Global.FNode._concatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__concatenatedMatrix
  name: _concatenatedMatrix
  nameWithType: FNode._concatenatedMatrix
  fullName: FNode._concatenatedMatrix
- uid: Global.FNode._inverseConcatenatedMatrix
  commentId: F:Global.FNode._inverseConcatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__inverseConcatenatedMatrix
  name: _inverseConcatenatedMatrix
  nameWithType: FNode._inverseConcatenatedMatrix
  fullName: FNode._inverseConcatenatedMatrix
- uid: Global.FNode._screenConcatenatedMatrix
  commentId: F:Global.FNode._screenConcatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__screenConcatenatedMatrix
  name: _screenConcatenatedMatrix
  nameWithType: FNode._screenConcatenatedMatrix
  fullName: FNode._screenConcatenatedMatrix
- uid: Global.FNode._screenInverseConcatenatedMatrix
  commentId: F:Global.FNode._screenInverseConcatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__screenInverseConcatenatedMatrix
  name: _screenInverseConcatenatedMatrix
  nameWithType: FNode._screenInverseConcatenatedMatrix
  fullName: FNode._screenInverseConcatenatedMatrix
- uid: Global.FNode._needsSpecialMatrices
  commentId: F:Global.FNode._needsSpecialMatrices
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__needsSpecialMatrices
  name: _needsSpecialMatrices
  nameWithType: FNode._needsSpecialMatrices
  fullName: FNode._needsSpecialMatrices
- uid: Global.FNode._alpha
  commentId: F:Global.FNode._alpha
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__alpha
  name: _alpha
  nameWithType: FNode._alpha
  fullName: FNode._alpha
- uid: Global.FNode._concatenatedAlpha
  commentId: F:Global.FNode._concatenatedAlpha
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__concatenatedAlpha
  name: _concatenatedAlpha
  nameWithType: FNode._concatenatedAlpha
  fullName: FNode._concatenatedAlpha
- uid: Global.FNode._isAlphaDirty
  commentId: F:Global.FNode._isAlphaDirty
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__isAlphaDirty
  name: _isAlphaDirty
  nameWithType: FNode._isAlphaDirty
  fullName: FNode._isAlphaDirty
- uid: Global.FNode._visibleScale
  commentId: F:Global.FNode._visibleScale
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__visibleScale
  name: _visibleScale
  nameWithType: FNode._visibleScale
  fullName: FNode._visibleScale
- uid: Global.FNode._isOnStage
  commentId: F:Global.FNode._isOnStage
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__isOnStage
  name: _isOnStage
  nameWithType: FNode._isOnStage
  fullName: FNode._isOnStage
- uid: Global.FNode._depth
  commentId: F:Global.FNode._depth
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__depth
  name: _depth
  nameWithType: FNode._depth
  fullName: FNode._depth
- uid: Global.FNode._stage
  commentId: F:Global.FNode._stage
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__stage
  name: _stage
  nameWithType: FNode._stage
  fullName: FNode._stage
- uid: Global.FNode._isVisible
  commentId: F:Global.FNode._isVisible
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode__isVisible
  name: _isVisible
  nameWithType: FNode._isVisible
  fullName: FNode._isVisible
- uid: Global.FNode.data
  commentId: F:Global.FNode.data
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_data
  name: data
  nameWithType: FNode.data
  fullName: FNode.data
- uid: Global.FNode.AddEnabler(FNodeEnabler)
  commentId: M:Global.FNode.AddEnabler(FNodeEnabler)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_AddEnabler_FNodeEnabler_
  name: AddEnabler(FNodeEnabler)
  nameWithType: FNode.AddEnabler(FNodeEnabler)
  fullName: FNode.AddEnabler(FNodeEnabler)
  spec.csharp:
  - uid: Global.FNode.AddEnabler(FNodeEnabler)
    name: AddEnabler
    isExternal: true
    href: Global.FNode.html#FNode_AddEnabler_FNodeEnabler_
  - name: (
  - uid: Global.FNodeEnabler
    name: FNodeEnabler
    isExternal: true
    href: FNodeEnabler.html
  - name: )
  spec.vb:
  - uid: Global.FNode.AddEnabler(FNodeEnabler)
    name: AddEnabler
    isExternal: true
    href: Global.FNode.html#FNode_AddEnabler_FNodeEnabler_
  - name: (
  - uid: Global.FNodeEnabler
    name: FNodeEnabler
    isExternal: true
    href: FNodeEnabler.html
  - name: )
- uid: Global.FNode.RemoveEnabler(FNodeEnabler)
  commentId: M:Global.FNode.RemoveEnabler(FNodeEnabler)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveEnabler_FNodeEnabler_
  name: RemoveEnabler(FNodeEnabler)
  nameWithType: FNode.RemoveEnabler(FNodeEnabler)
  fullName: FNode.RemoveEnabler(FNodeEnabler)
  spec.csharp:
  - uid: Global.FNode.RemoveEnabler(FNodeEnabler)
    name: RemoveEnabler
    isExternal: true
    href: Global.FNode.html#FNode_RemoveEnabler_FNodeEnabler_
  - name: (
  - uid: Global.FNodeEnabler
    name: FNodeEnabler
    isExternal: true
    href: FNodeEnabler.html
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveEnabler(FNodeEnabler)
    name: RemoveEnabler
    isExternal: true
    href: Global.FNode.html#FNode_RemoveEnabler_FNodeEnabler_
  - name: (
  - uid: Global.FNodeEnabler
    name: FNodeEnabler
    isExternal: true
    href: FNodeEnabler.html
  - name: )
- uid: Global.FNode.RemoveEnablerOfType(System.Type)
  commentId: M:Global.FNode.RemoveEnablerOfType(System.Type)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveEnablerOfType_System_Type_
  name: RemoveEnablerOfType(Type)
  nameWithType: FNode.RemoveEnablerOfType(Type)
  fullName: FNode.RemoveEnablerOfType(System.Type)
  spec.csharp:
  - uid: Global.FNode.RemoveEnablerOfType(System.Type)
    name: RemoveEnablerOfType
    isExternal: true
    href: Global.FNode.html#FNode_RemoveEnablerOfType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveEnablerOfType(System.Type)
    name: RemoveEnablerOfType
    isExternal: true
    href: Global.FNode.html#FNode_RemoveEnablerOfType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  commentId: M:Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ListenForResize_FScreen_ScreenResizeDelegate_
  name: ListenForResize(ScreenResizeDelegate)
  nameWithType: FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  fullName: FNode.ListenForResize(FScreen.ScreenResizeDelegate)
  spec.csharp:
  - uid: Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
    name: ListenForResize
    isExternal: true
    href: Global.FNode.html#FNode_ListenForResize_FScreen_ScreenResizeDelegate_
  - name: (
  - uid: Global.FScreen.ScreenResizeDelegate
    name: ScreenResizeDelegate
    isExternal: true
    href: FScreen.ScreenResizeDelegate.html
  - name: )
  spec.vb:
  - uid: Global.FNode.ListenForResize(FScreen.ScreenResizeDelegate)
    name: ListenForResize
    isExternal: true
    href: Global.FNode.html#FNode_ListenForResize_FScreen_ScreenResizeDelegate_
  - name: (
  - uid: Global.FScreen.ScreenResizeDelegate
    name: ScreenResizeDelegate
    isExternal: true
    href: FScreen.ScreenResizeDelegate.html
  - name: )
- uid: Global.FNode.RemoveListenForResize
  commentId: M:Global.FNode.RemoveListenForResize
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForResize
  name: RemoveListenForResize()
  nameWithType: FNode.RemoveListenForResize()
  fullName: FNode.RemoveListenForResize()
  spec.csharp:
  - uid: Global.FNode.RemoveListenForResize
    name: RemoveListenForResize
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForResize
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveListenForResize
    name: RemoveListenForResize
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForResize
  - name: (
  - name: )
- uid: Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  commentId: M:Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ListenForOrientationChange_FScreen_ScreenOrientationChangeDelegate_
  name: ListenForOrientationChange(ScreenOrientationChangeDelegate)
  nameWithType: FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  fullName: FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
  spec.csharp:
  - uid: Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
    name: ListenForOrientationChange
    isExternal: true
    href: Global.FNode.html#FNode_ListenForOrientationChange_FScreen_ScreenOrientationChangeDelegate_
  - name: (
  - uid: Global.FScreen.ScreenOrientationChangeDelegate
    name: ScreenOrientationChangeDelegate
    isExternal: true
    href: FScreen.ScreenOrientationChangeDelegate.html
  - name: )
  spec.vb:
  - uid: Global.FNode.ListenForOrientationChange(FScreen.ScreenOrientationChangeDelegate)
    name: ListenForOrientationChange
    isExternal: true
    href: Global.FNode.html#FNode_ListenForOrientationChange_FScreen_ScreenOrientationChangeDelegate_
  - name: (
  - uid: Global.FScreen.ScreenOrientationChangeDelegate
    name: ScreenOrientationChangeDelegate
    isExternal: true
    href: FScreen.ScreenOrientationChangeDelegate.html
  - name: )
- uid: Global.FNode.RemoveListenForOrientationChange
  commentId: M:Global.FNode.RemoveListenForOrientationChange
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForOrientationChange
  name: RemoveListenForOrientationChange()
  nameWithType: FNode.RemoveListenForOrientationChange()
  fullName: FNode.RemoveListenForOrientationChange()
  spec.csharp:
  - uid: Global.FNode.RemoveListenForOrientationChange
    name: RemoveListenForOrientationChange
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForOrientationChange
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveListenForOrientationChange
    name: RemoveListenForOrientationChange
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForOrientationChange
  - name: (
  - name: )
- uid: Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ListenForUpdate_Futile_FutileUpdateDelegate_
  name: ListenForUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
  spec.csharp:
  - uid: Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
    name: ListenForUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
  spec.vb:
  - uid: Global.FNode.ListenForUpdate(Futile.FutileUpdateDelegate)
    name: ListenForUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
- uid: Global.FNode.RemoveListenForUpdate
  commentId: M:Global.FNode.RemoveListenForUpdate
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForUpdate
  name: RemoveListenForUpdate()
  nameWithType: FNode.RemoveListenForUpdate()
  fullName: FNode.RemoveListenForUpdate()
  spec.csharp:
  - uid: Global.FNode.RemoveListenForUpdate
    name: RemoveListenForUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForUpdate
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveListenForUpdate
    name: RemoveListenForUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForUpdate
  - name: (
  - name: )
- uid: Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ListenForAfterUpdate_Futile_FutileUpdateDelegate_
  name: ListenForAfterUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
  spec.csharp:
  - uid: Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
    name: ListenForAfterUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForAfterUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
  spec.vb:
  - uid: Global.FNode.ListenForAfterUpdate(Futile.FutileUpdateDelegate)
    name: ListenForAfterUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForAfterUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
- uid: Global.FNode.RemoveListenForAfterUpdate
  commentId: M:Global.FNode.RemoveListenForAfterUpdate
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForAfterUpdate
  name: RemoveListenForAfterUpdate()
  nameWithType: FNode.RemoveListenForAfterUpdate()
  fullName: FNode.RemoveListenForAfterUpdate()
  spec.csharp:
  - uid: Global.FNode.RemoveListenForAfterUpdate
    name: RemoveListenForAfterUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForAfterUpdate
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveListenForAfterUpdate
    name: RemoveListenForAfterUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForAfterUpdate
  - name: (
  - name: )
- uid: Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ListenForLateUpdate_Futile_FutileUpdateDelegate_
  name: ListenForLateUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
  spec.csharp:
  - uid: Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
    name: ListenForLateUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForLateUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
  spec.vb:
  - uid: Global.FNode.ListenForLateUpdate(Futile.FutileUpdateDelegate)
    name: ListenForLateUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForLateUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
- uid: Global.FNode.RemoveListenForLateUpdate
  commentId: M:Global.FNode.RemoveListenForLateUpdate
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForLateUpdate
  name: RemoveListenForLateUpdate()
  nameWithType: FNode.RemoveListenForLateUpdate()
  fullName: FNode.RemoveListenForLateUpdate()
  spec.csharp:
  - uid: Global.FNode.RemoveListenForLateUpdate
    name: RemoveListenForLateUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForLateUpdate
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveListenForLateUpdate
    name: RemoveListenForLateUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForLateUpdate
  - name: (
  - name: )
- uid: Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  commentId: M:Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ListenForFixedUpdate_Futile_FutileUpdateDelegate_
  name: ListenForFixedUpdate(FutileUpdateDelegate)
  nameWithType: FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  fullName: FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
  spec.csharp:
  - uid: Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
    name: ListenForFixedUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForFixedUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
  spec.vb:
  - uid: Global.FNode.ListenForFixedUpdate(Futile.FutileUpdateDelegate)
    name: ListenForFixedUpdate
    isExternal: true
    href: Global.FNode.html#FNode_ListenForFixedUpdate_Futile_FutileUpdateDelegate_
  - name: (
  - uid: Global.Futile.FutileUpdateDelegate
    name: FutileUpdateDelegate
    isExternal: true
    href: Futile.FutileUpdateDelegate.html
  - name: )
- uid: Global.FNode.RemoveListenForFixedUpdate
  commentId: M:Global.FNode.RemoveListenForFixedUpdate
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForFixedUpdate
  name: RemoveListenForFixedUpdate()
  nameWithType: FNode.RemoveListenForFixedUpdate()
  fullName: FNode.RemoveListenForFixedUpdate()
  spec.csharp:
  - uid: Global.FNode.RemoveListenForFixedUpdate
    name: RemoveListenForFixedUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForFixedUpdate
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveListenForFixedUpdate
    name: RemoveListenForFixedUpdate
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForFixedUpdate
  - name: (
  - name: )
- uid: Global.FNode.EnableSingleTouch
  commentId: M:Global.FNode.EnableSingleTouch
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_EnableSingleTouch
  name: EnableSingleTouch()
  nameWithType: FNode.EnableSingleTouch()
  fullName: FNode.EnableSingleTouch()
  spec.csharp:
  - uid: Global.FNode.EnableSingleTouch
    name: EnableSingleTouch
    isExternal: true
    href: Global.FNode.html#FNode_EnableSingleTouch
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.EnableSingleTouch
    name: EnableSingleTouch
    isExternal: true
    href: Global.FNode.html#FNode_EnableSingleTouch
  - name: (
  - name: )
- uid: Global.FNode.DisableSingleTouch
  commentId: M:Global.FNode.DisableSingleTouch
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_DisableSingleTouch
  name: DisableSingleTouch()
  nameWithType: FNode.DisableSingleTouch()
  fullName: FNode.DisableSingleTouch()
  spec.csharp:
  - uid: Global.FNode.DisableSingleTouch
    name: DisableSingleTouch
    isExternal: true
    href: Global.FNode.html#FNode_DisableSingleTouch
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.DisableSingleTouch
    name: DisableSingleTouch
    isExternal: true
    href: Global.FNode.html#FNode_DisableSingleTouch
  - name: (
  - name: )
- uid: Global.FNode.EnableMultiTouch
  commentId: M:Global.FNode.EnableMultiTouch
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_EnableMultiTouch
  name: EnableMultiTouch()
  nameWithType: FNode.EnableMultiTouch()
  fullName: FNode.EnableMultiTouch()
  spec.csharp:
  - uid: Global.FNode.EnableMultiTouch
    name: EnableMultiTouch
    isExternal: true
    href: Global.FNode.html#FNode_EnableMultiTouch
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.EnableMultiTouch
    name: EnableMultiTouch
    isExternal: true
    href: Global.FNode.html#FNode_EnableMultiTouch
  - name: (
  - name: )
- uid: Global.FNode.DisableMultiTouch
  commentId: M:Global.FNode.DisableMultiTouch
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_DisableMultiTouch
  name: DisableMultiTouch()
  nameWithType: FNode.DisableMultiTouch()
  fullName: FNode.DisableMultiTouch()
  spec.csharp:
  - uid: Global.FNode.DisableMultiTouch
    name: DisableMultiTouch
    isExternal: true
    href: Global.FNode.html#FNode_DisableMultiTouch
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.DisableMultiTouch
    name: DisableMultiTouch
    isExternal: true
    href: Global.FNode.html#FNode_DisableMultiTouch
  - name: (
  - name: )
- uid: Global.FNode.EnableSmartTouch
  commentId: M:Global.FNode.EnableSmartTouch
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_EnableSmartTouch
  name: EnableSmartTouch()
  nameWithType: FNode.EnableSmartTouch()
  fullName: FNode.EnableSmartTouch()
  spec.csharp:
  - uid: Global.FNode.EnableSmartTouch
    name: EnableSmartTouch
    isExternal: true
    href: Global.FNode.html#FNode_EnableSmartTouch
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.EnableSmartTouch
    name: EnableSmartTouch
    isExternal: true
    href: Global.FNode.html#FNode_EnableSmartTouch
  - name: (
  - name: )
- uid: Global.FNode.DisableSmartTouch
  commentId: M:Global.FNode.DisableSmartTouch
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_DisableSmartTouch
  name: DisableSmartTouch()
  nameWithType: FNode.DisableSmartTouch()
  fullName: FNode.DisableSmartTouch()
  spec.csharp:
  - uid: Global.FNode.DisableSmartTouch
    name: DisableSmartTouch
    isExternal: true
    href: Global.FNode.html#FNode_DisableSmartTouch
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.DisableSmartTouch
    name: DisableSmartTouch
    isExternal: true
    href: Global.FNode.html#FNode_DisableSmartTouch
  - name: (
  - name: )
- uid: Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  commentId: M:Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ListenForAddedOrRemoved_FNodeEnablerForAddedOrRemoved_Delegate_
  name: ListenForAddedOrRemoved(Delegate)
  nameWithType: FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  fullName: FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
  spec.csharp:
  - uid: Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
    name: ListenForAddedOrRemoved
    isExternal: true
    href: Global.FNode.html#FNode_ListenForAddedOrRemoved_FNodeEnablerForAddedOrRemoved_Delegate_
  - name: (
  - uid: Global.FNodeEnablerForAddedOrRemoved.Delegate
    name: Delegate
    isExternal: true
    href: FNodeEnablerForAddedOrRemoved.Delegate.html
  - name: )
  spec.vb:
  - uid: Global.FNode.ListenForAddedOrRemoved(FNodeEnablerForAddedOrRemoved.Delegate)
    name: ListenForAddedOrRemoved
    isExternal: true
    href: Global.FNode.html#FNode_ListenForAddedOrRemoved_FNodeEnablerForAddedOrRemoved_Delegate_
  - name: (
  - uid: Global.FNodeEnablerForAddedOrRemoved.Delegate
    name: Delegate
    isExternal: true
    href: FNodeEnablerForAddedOrRemoved.Delegate.html
  - name: )
- uid: Global.FNode.RemoveListenForAddedOrRemoved
  commentId: M:Global.FNode.RemoveListenForAddedOrRemoved
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveListenForAddedOrRemoved
  name: RemoveListenForAddedOrRemoved()
  nameWithType: FNode.RemoveListenForAddedOrRemoved()
  fullName: FNode.RemoveListenForAddedOrRemoved()
  spec.csharp:
  - uid: Global.FNode.RemoveListenForAddedOrRemoved
    name: RemoveListenForAddedOrRemoved
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForAddedOrRemoved
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveListenForAddedOrRemoved
    name: RemoveListenForAddedOrRemoved
    isExternal: true
    href: Global.FNode.html#FNode_RemoveListenForAddedOrRemoved
  - name: (
  - name: )
- uid: Global.FNode.LocalToScreen(UnityEngine.Vector2)
  commentId: M:Global.FNode.LocalToScreen(UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_LocalToScreen_UnityEngine_Vector2_
  name: LocalToScreen(Vector2)
  nameWithType: FNode.LocalToScreen(Vector2)
  fullName: FNode.LocalToScreen(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.LocalToScreen(UnityEngine.Vector2)
    name: LocalToScreen
    isExternal: true
    href: Global.FNode.html#FNode_LocalToScreen_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.LocalToScreen(UnityEngine.Vector2)
    name: LocalToScreen
    isExternal: true
    href: Global.FNode.html#FNode_LocalToScreen_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.ScreenToLocal(UnityEngine.Vector2)
  commentId: M:Global.FNode.ScreenToLocal(UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ScreenToLocal_UnityEngine_Vector2_
  name: ScreenToLocal(Vector2)
  nameWithType: FNode.ScreenToLocal(Vector2)
  fullName: FNode.ScreenToLocal(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.ScreenToLocal(UnityEngine.Vector2)
    name: ScreenToLocal
    isExternal: true
    href: Global.FNode.html#FNode_ScreenToLocal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.ScreenToLocal(UnityEngine.Vector2)
    name: ScreenToLocal
    isExternal: true
    href: Global.FNode.html#FNode_ScreenToLocal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.LocalToStage(UnityEngine.Vector2)
  commentId: M:Global.FNode.LocalToStage(UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_LocalToStage_UnityEngine_Vector2_
  name: LocalToStage(Vector2)
  nameWithType: FNode.LocalToStage(Vector2)
  fullName: FNode.LocalToStage(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.LocalToStage(UnityEngine.Vector2)
    name: LocalToStage
    isExternal: true
    href: Global.FNode.html#FNode_LocalToStage_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.LocalToStage(UnityEngine.Vector2)
    name: LocalToStage
    isExternal: true
    href: Global.FNode.html#FNode_LocalToStage_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.StageToLocal(UnityEngine.Vector2)
  commentId: M:Global.FNode.StageToLocal(UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_StageToLocal_UnityEngine_Vector2_
  name: StageToLocal(Vector2)
  nameWithType: FNode.StageToLocal(Vector2)
  fullName: FNode.StageToLocal(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.StageToLocal(UnityEngine.Vector2)
    name: StageToLocal
    isExternal: true
    href: Global.FNode.html#FNode_StageToLocal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.StageToLocal(UnityEngine.Vector2)
    name: StageToLocal
    isExternal: true
    href: Global.FNode.html#FNode_StageToLocal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.LocalToGlobal(UnityEngine.Vector2)
  commentId: M:Global.FNode.LocalToGlobal(UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_LocalToGlobal_UnityEngine_Vector2_
  name: LocalToGlobal(Vector2)
  nameWithType: FNode.LocalToGlobal(Vector2)
  fullName: FNode.LocalToGlobal(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.LocalToGlobal(UnityEngine.Vector2)
    name: LocalToGlobal
    isExternal: true
    href: Global.FNode.html#FNode_LocalToGlobal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.LocalToGlobal(UnityEngine.Vector2)
    name: LocalToGlobal
    isExternal: true
    href: Global.FNode.html#FNode_LocalToGlobal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.GlobalToLocal(UnityEngine.Vector2)
  commentId: M:Global.FNode.GlobalToLocal(UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_GlobalToLocal_UnityEngine_Vector2_
  name: GlobalToLocal(Vector2)
  nameWithType: FNode.GlobalToLocal(Vector2)
  fullName: FNode.GlobalToLocal(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.GlobalToLocal(UnityEngine.Vector2)
    name: GlobalToLocal
    isExternal: true
    href: Global.FNode.html#FNode_GlobalToLocal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.GlobalToLocal(UnityEngine.Vector2)
    name: GlobalToLocal
    isExternal: true
    href: Global.FNode.html#FNode_GlobalToLocal_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
  commentId: M:Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_OtherToLocal_FNode_UnityEngine_Vector2_
  name: OtherToLocal(FNode, Vector2)
  nameWithType: FNode.OtherToLocal(FNode, Vector2)
  fullName: FNode.OtherToLocal(FNode, UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
    name: OtherToLocal
    isExternal: true
    href: Global.FNode.html#FNode_OtherToLocal_FNode_UnityEngine_Vector2_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.OtherToLocal(FNode,UnityEngine.Vector2)
    name: OtherToLocal
    isExternal: true
    href: Global.FNode.html#FNode_OtherToLocal_FNode_UnityEngine_Vector2_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
  commentId: M:Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_LocalToOther_UnityEngine_Vector2_FNode_
  name: LocalToOther(Vector2, FNode)
  nameWithType: FNode.LocalToOther(Vector2, FNode)
  fullName: FNode.LocalToOther(UnityEngine.Vector2, FNode)
  spec.csharp:
  - uid: Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
    name: LocalToOther
    isExternal: true
    href: Global.FNode.html#FNode_LocalToOther_UnityEngine_Vector2_FNode_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
  spec.vb:
  - uid: Global.FNode.LocalToOther(UnityEngine.Vector2,FNode)
    name: LocalToOther
    isExternal: true
    href: Global.FNode.html#FNode_LocalToOther_UnityEngine_Vector2_FNode_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
- uid: Global.FNode.GetLocalMousePosition
  commentId: M:Global.FNode.GetLocalMousePosition
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_GetLocalMousePosition
  name: GetLocalMousePosition()
  nameWithType: FNode.GetLocalMousePosition()
  fullName: FNode.GetLocalMousePosition()
  spec.csharp:
  - uid: Global.FNode.GetLocalMousePosition
    name: GetLocalMousePosition
    isExternal: true
    href: Global.FNode.html#FNode_GetLocalMousePosition
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.GetLocalMousePosition
    name: GetLocalMousePosition
    isExternal: true
    href: Global.FNode.html#FNode_GetLocalMousePosition
  - name: (
  - name: )
- uid: Global.FNode.GetLocalTouchPosition(FTouch)
  commentId: M:Global.FNode.GetLocalTouchPosition(FTouch)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_GetLocalTouchPosition_FTouch_
  name: GetLocalTouchPosition(FTouch)
  nameWithType: FNode.GetLocalTouchPosition(FTouch)
  fullName: FNode.GetLocalTouchPosition(FTouch)
  spec.csharp:
  - uid: Global.FNode.GetLocalTouchPosition(FTouch)
    name: GetLocalTouchPosition
    isExternal: true
    href: Global.FNode.html#FNode_GetLocalTouchPosition_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
  spec.vb:
  - uid: Global.FNode.GetLocalTouchPosition(FTouch)
    name: GetLocalTouchPosition
    isExternal: true
    href: Global.FNode.html#FNode_GetLocalTouchPosition_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
- uid: Global.FNode.UpdateMatrix
  commentId: M:Global.FNode.UpdateMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_UpdateMatrix
  name: UpdateMatrix()
  nameWithType: FNode.UpdateMatrix()
  fullName: FNode.UpdateMatrix()
  spec.csharp:
  - uid: Global.FNode.UpdateMatrix
    name: UpdateMatrix
    isExternal: true
    href: Global.FNode.html#FNode_UpdateMatrix
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.UpdateMatrix
    name: UpdateMatrix
    isExternal: true
    href: Global.FNode.html#FNode_UpdateMatrix
  - name: (
  - name: )
- uid: Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
  commentId: M:Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_UpdateDepthMatrixAlpha_System_Boolean_System_Boolean_
  name: UpdateDepthMatrixAlpha(bool, bool)
  nameWithType: FNode.UpdateDepthMatrixAlpha(bool, bool)
  fullName: FNode.UpdateDepthMatrixAlpha(bool, bool)
  nameWithType.vb: FNode.UpdateDepthMatrixAlpha(Boolean, Boolean)
  fullName.vb: FNode.UpdateDepthMatrixAlpha(Boolean, Boolean)
  name.vb: UpdateDepthMatrixAlpha(Boolean, Boolean)
  spec.csharp:
  - uid: Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
    name: UpdateDepthMatrixAlpha
    isExternal: true
    href: Global.FNode.html#FNode_UpdateDepthMatrixAlpha_System_Boolean_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.FNode.UpdateDepthMatrixAlpha(System.Boolean,System.Boolean)
    name: UpdateDepthMatrixAlpha
    isExternal: true
    href: Global.FNode.html#FNode_UpdateDepthMatrixAlpha_System_Boolean_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.FNode.HandleAddedToContainer(FContainer)
  commentId: M:Global.FNode.HandleAddedToContainer(FContainer)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_HandleAddedToContainer_FContainer_
  name: HandleAddedToContainer(FContainer)
  nameWithType: FNode.HandleAddedToContainer(FContainer)
  fullName: FNode.HandleAddedToContainer(FContainer)
  spec.csharp:
  - uid: Global.FNode.HandleAddedToContainer(FContainer)
    name: HandleAddedToContainer
    isExternal: true
    href: Global.FNode.html#FNode_HandleAddedToContainer_FContainer_
  - name: (
  - uid: Global.FContainer
    name: FContainer
    isExternal: true
    href: FContainer.html
  - name: )
  spec.vb:
  - uid: Global.FNode.HandleAddedToContainer(FContainer)
    name: HandleAddedToContainer
    isExternal: true
    href: Global.FNode.html#FNode_HandleAddedToContainer_FContainer_
  - name: (
  - uid: Global.FContainer
    name: FContainer
    isExternal: true
    href: FContainer.html
  - name: )
- uid: Global.FNode.HandleRemovedFromContainer
  commentId: M:Global.FNode.HandleRemovedFromContainer
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_HandleRemovedFromContainer
  name: HandleRemovedFromContainer()
  nameWithType: FNode.HandleRemovedFromContainer()
  fullName: FNode.HandleRemovedFromContainer()
  spec.csharp:
  - uid: Global.FNode.HandleRemovedFromContainer
    name: HandleRemovedFromContainer
    isExternal: true
    href: Global.FNode.html#FNode_HandleRemovedFromContainer
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.HandleRemovedFromContainer
    name: HandleRemovedFromContainer
    isExternal: true
    href: Global.FNode.html#FNode_HandleRemovedFromContainer
  - name: (
  - name: )
- uid: Global.FNode.RemoveFromContainer
  commentId: M:Global.FNode.RemoveFromContainer
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RemoveFromContainer
  name: RemoveFromContainer()
  nameWithType: FNode.RemoveFromContainer()
  fullName: FNode.RemoveFromContainer()
  spec.csharp:
  - uid: Global.FNode.RemoveFromContainer
    name: RemoveFromContainer
    isExternal: true
    href: Global.FNode.html#FNode_RemoveFromContainer
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.RemoveFromContainer
    name: RemoveFromContainer
    isExternal: true
    href: Global.FNode.html#FNode_RemoveFromContainer
  - name: (
  - name: )
- uid: Global.FNode.MoveToFront
  commentId: M:Global.FNode.MoveToFront
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_MoveToFront
  name: MoveToFront()
  nameWithType: FNode.MoveToFront()
  fullName: FNode.MoveToFront()
  spec.csharp:
  - uid: Global.FNode.MoveToFront
    name: MoveToFront
    isExternal: true
    href: Global.FNode.html#FNode_MoveToFront
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.MoveToFront
    name: MoveToFront
    isExternal: true
    href: Global.FNode.html#FNode_MoveToFront
  - name: (
  - name: )
- uid: Global.FNode.MoveToBack
  commentId: M:Global.FNode.MoveToBack
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_MoveToBack
  name: MoveToBack()
  nameWithType: FNode.MoveToBack()
  fullName: FNode.MoveToBack()
  spec.csharp:
  - uid: Global.FNode.MoveToBack
    name: MoveToBack
    isExternal: true
    href: Global.FNode.html#FNode_MoveToBack
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.MoveToBack
    name: MoveToBack
    isExternal: true
    href: Global.FNode.html#FNode_MoveToBack
  - name: (
  - name: )
- uid: Global.FNode.MoveInFrontOfOtherNode(FNode)
  commentId: M:Global.FNode.MoveInFrontOfOtherNode(FNode)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_MoveInFrontOfOtherNode_FNode_
  name: MoveInFrontOfOtherNode(FNode)
  nameWithType: FNode.MoveInFrontOfOtherNode(FNode)
  fullName: FNode.MoveInFrontOfOtherNode(FNode)
  spec.csharp:
  - uid: Global.FNode.MoveInFrontOfOtherNode(FNode)
    name: MoveInFrontOfOtherNode
    isExternal: true
    href: Global.FNode.html#FNode_MoveInFrontOfOtherNode_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
  spec.vb:
  - uid: Global.FNode.MoveInFrontOfOtherNode(FNode)
    name: MoveInFrontOfOtherNode
    isExternal: true
    href: Global.FNode.html#FNode_MoveInFrontOfOtherNode_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
- uid: Global.FNode.MoveBehindOtherNode(FNode)
  commentId: M:Global.FNode.MoveBehindOtherNode(FNode)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_MoveBehindOtherNode_FNode_
  name: MoveBehindOtherNode(FNode)
  nameWithType: FNode.MoveBehindOtherNode(FNode)
  fullName: FNode.MoveBehindOtherNode(FNode)
  spec.csharp:
  - uid: Global.FNode.MoveBehindOtherNode(FNode)
    name: MoveBehindOtherNode
    isExternal: true
    href: Global.FNode.html#FNode_MoveBehindOtherNode_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
  spec.vb:
  - uid: Global.FNode.MoveBehindOtherNode(FNode)
    name: MoveBehindOtherNode
    isExternal: true
    href: Global.FNode.html#FNode_MoveBehindOtherNode_FNode_
  - name: (
  - uid: Global.FNode
    name: FNode
    isExternal: true
    href: FNode.html
  - name: )
- uid: Global.FNode.IsAncestryVisible
  commentId: M:Global.FNode.IsAncestryVisible
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_IsAncestryVisible
  name: IsAncestryVisible()
  nameWithType: FNode.IsAncestryVisible()
  fullName: FNode.IsAncestryVisible()
  spec.csharp:
  - uid: Global.FNode.IsAncestryVisible
    name: IsAncestryVisible
    isExternal: true
    href: Global.FNode.html#FNode_IsAncestryVisible
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.IsAncestryVisible
    name: IsAncestryVisible
    isExternal: true
    href: Global.FNode.html#FNode_IsAncestryVisible
  - name: (
  - name: )
- uid: Global.FNode.CreateSpecialMatrices
  commentId: M:Global.FNode.CreateSpecialMatrices
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_CreateSpecialMatrices
  name: CreateSpecialMatrices()
  nameWithType: FNode.CreateSpecialMatrices()
  fullName: FNode.CreateSpecialMatrices()
  spec.csharp:
  - uid: Global.FNode.CreateSpecialMatrices
    name: CreateSpecialMatrices
    isExternal: true
    href: Global.FNode.html#FNode_CreateSpecialMatrices
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.CreateSpecialMatrices
    name: CreateSpecialMatrices
    isExternal: true
    href: Global.FNode.html#FNode_CreateSpecialMatrices
  - name: (
  - name: )
- uid: Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
  commentId: M:Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RotateAroundPointRelative_UnityEngine_Vector2_System_Single_
  name: RotateAroundPointRelative(Vector2, float)
  nameWithType: FNode.RotateAroundPointRelative(Vector2, float)
  fullName: FNode.RotateAroundPointRelative(UnityEngine.Vector2, float)
  nameWithType.vb: FNode.RotateAroundPointRelative(Vector2, Single)
  fullName.vb: FNode.RotateAroundPointRelative(UnityEngine.Vector2, Single)
  name.vb: RotateAroundPointRelative(Vector2, Single)
  spec.csharp:
  - uid: Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
    name: RotateAroundPointRelative
    isExternal: true
    href: Global.FNode.html#FNode_RotateAroundPointRelative_UnityEngine_Vector2_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: Global.FNode.RotateAroundPointRelative(UnityEngine.Vector2,System.Single)
    name: RotateAroundPointRelative
    isExternal: true
    href: Global.FNode.html#FNode_RotateAroundPointRelative_UnityEngine_Vector2_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
  commentId: M:Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_RotateAroundPointAbsolute_UnityEngine_Vector2_System_Single_
  name: RotateAroundPointAbsolute(Vector2, float)
  nameWithType: FNode.RotateAroundPointAbsolute(Vector2, float)
  fullName: FNode.RotateAroundPointAbsolute(UnityEngine.Vector2, float)
  nameWithType.vb: FNode.RotateAroundPointAbsolute(Vector2, Single)
  fullName.vb: FNode.RotateAroundPointAbsolute(UnityEngine.Vector2, Single)
  name.vb: RotateAroundPointAbsolute(Vector2, Single)
  spec.csharp:
  - uid: Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
    name: RotateAroundPointAbsolute
    isExternal: true
    href: Global.FNode.html#FNode_RotateAroundPointAbsolute_UnityEngine_Vector2_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: Global.FNode.RotateAroundPointAbsolute(UnityEngine.Vector2,System.Single)
    name: RotateAroundPointAbsolute
    isExternal: true
    href: Global.FNode.html#FNode_RotateAroundPointAbsolute_UnityEngine_Vector2_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ScaleAroundPointRelative_UnityEngine_Vector2_System_Single_System_Single_
  name: ScaleAroundPointRelative(Vector2, float, float)
  nameWithType: FNode.ScaleAroundPointRelative(Vector2, float, float)
  fullName: FNode.ScaleAroundPointRelative(UnityEngine.Vector2, float, float)
  nameWithType.vb: FNode.ScaleAroundPointRelative(Vector2, Single, Single)
  fullName.vb: FNode.ScaleAroundPointRelative(UnityEngine.Vector2, Single, Single)
  name.vb: ScaleAroundPointRelative(Vector2, Single, Single)
  spec.csharp:
  - uid: Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
    name: ScaleAroundPointRelative
    isExternal: true
    href: Global.FNode.html#FNode_ScaleAroundPointRelative_UnityEngine_Vector2_System_Single_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: Global.FNode.ScaleAroundPointRelative(UnityEngine.Vector2,System.Single,System.Single)
    name: ScaleAroundPointRelative
    isExternal: true
    href: Global.FNode.html#FNode_ScaleAroundPointRelative_UnityEngine_Vector2_System_Single_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_ScaleAroundPointAbsolute_UnityEngine_Vector2_System_Single_System_Single_
  name: ScaleAroundPointAbsolute(Vector2, float, float)
  nameWithType: FNode.ScaleAroundPointAbsolute(Vector2, float, float)
  fullName: FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2, float, float)
  nameWithType.vb: FNode.ScaleAroundPointAbsolute(Vector2, Single, Single)
  fullName.vb: FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2, Single, Single)
  name.vb: ScaleAroundPointAbsolute(Vector2, Single, Single)
  spec.csharp:
  - uid: Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
    name: ScaleAroundPointAbsolute
    isExternal: true
    href: Global.FNode.html#FNode_ScaleAroundPointAbsolute_UnityEngine_Vector2_System_Single_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: Global.FNode.ScaleAroundPointAbsolute(UnityEngine.Vector2,System.Single,System.Single)
    name: ScaleAroundPointAbsolute
    isExternal: true
    href: Global.FNode.html#FNode_ScaleAroundPointAbsolute_UnityEngine_Vector2_System_Single_System_Single_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: Global.FNode.SetPosition(System.Single,System.Single)
  commentId: M:Global.FNode.SetPosition(System.Single,System.Single)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_SetPosition_System_Single_System_Single_
  name: SetPosition(float, float)
  nameWithType: FNode.SetPosition(float, float)
  fullName: FNode.SetPosition(float, float)
  nameWithType.vb: FNode.SetPosition(Single, Single)
  fullName.vb: FNode.SetPosition(Single, Single)
  name.vb: SetPosition(Single, Single)
  spec.csharp:
  - uid: Global.FNode.SetPosition(System.Single,System.Single)
    name: SetPosition
    isExternal: true
    href: Global.FNode.html#FNode_SetPosition_System_Single_System_Single_
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: Global.FNode.SetPosition(System.Single,System.Single)
    name: SetPosition
    isExternal: true
    href: Global.FNode.html#FNode_SetPosition_System_Single_System_Single_
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: Global.FNode.SetPosition(UnityEngine.Vector2)
  commentId: M:Global.FNode.SetPosition(UnityEngine.Vector2)
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_SetPosition_UnityEngine_Vector2_
  name: SetPosition(Vector2)
  nameWithType: FNode.SetPosition(Vector2)
  fullName: FNode.SetPosition(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.FNode.SetPosition(UnityEngine.Vector2)
    name: SetPosition
    isExternal: true
    href: Global.FNode.html#FNode_SetPosition_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.FNode.SetPosition(UnityEngine.Vector2)
    name: SetPosition
    isExternal: true
    href: Global.FNode.html#FNode_SetPosition_UnityEngine_Vector2_
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.FNode.GetPosition
  commentId: M:Global.FNode.GetPosition
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_GetPosition
  name: GetPosition()
  nameWithType: FNode.GetPosition()
  fullName: FNode.GetPosition()
  spec.csharp:
  - uid: Global.FNode.GetPosition
    name: GetPosition
    isExternal: true
    href: Global.FNode.html#FNode_GetPosition
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FNode.GetPosition
    name: GetPosition
    isExternal: true
    href: Global.FNode.html#FNode_GetPosition
  - name: (
  - name: )
- uid: Global.FNode.isVisible
  commentId: P:Global.FNode.isVisible
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_isVisible
  name: isVisible
  nameWithType: FNode.isVisible
  fullName: FNode.isVisible
- uid: Global.FNode.x
  commentId: P:Global.FNode.x
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_x
  name: x
  nameWithType: FNode.x
  fullName: FNode.x
- uid: Global.FNode.y
  commentId: P:Global.FNode.y
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_y
  name: y
  nameWithType: FNode.y
  fullName: FNode.y
- uid: Global.FNode.meshZ
  commentId: P:Global.FNode.meshZ
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_meshZ
  name: meshZ
  nameWithType: FNode.meshZ
  fullName: FNode.meshZ
- uid: Global.FNode.sortZ
  commentId: P:Global.FNode.sortZ
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_sortZ
  name: sortZ
  nameWithType: FNode.sortZ
  fullName: FNode.sortZ
- uid: Global.FNode.scaleX
  commentId: P:Global.FNode.scaleX
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_scaleX
  name: scaleX
  nameWithType: FNode.scaleX
  fullName: FNode.scaleX
- uid: Global.FNode.scaleY
  commentId: P:Global.FNode.scaleY
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_scaleY
  name: scaleY
  nameWithType: FNode.scaleY
  fullName: FNode.scaleY
- uid: Global.FNode.scale
  commentId: P:Global.FNode.scale
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_scale
  name: scale
  nameWithType: FNode.scale
  fullName: FNode.scale
- uid: Global.FNode.rotation
  commentId: P:Global.FNode.rotation
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_rotation
  name: rotation
  nameWithType: FNode.rotation
  fullName: FNode.rotation
- uid: Global.FNode.isMatrixDirty
  commentId: P:Global.FNode.isMatrixDirty
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_isMatrixDirty
  name: isMatrixDirty
  nameWithType: FNode.isMatrixDirty
  fullName: FNode.isMatrixDirty
- uid: Global.FNode.container
  commentId: P:Global.FNode.container
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_container
  name: container
  nameWithType: FNode.container
  fullName: FNode.container
- uid: Global.FNode.depth
  commentId: P:Global.FNode.depth
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_depth
  name: depth
  nameWithType: FNode.depth
  fullName: FNode.depth
- uid: Global.FNode.touchPriority
  commentId: P:Global.FNode.touchPriority
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_touchPriority
  name: touchPriority
  nameWithType: FNode.touchPriority
  fullName: FNode.touchPriority
- uid: Global.FNode.matrix
  commentId: P:Global.FNode.matrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_matrix
  name: matrix
  nameWithType: FNode.matrix
  fullName: FNode.matrix
- uid: Global.FNode.concatenatedMatrix
  commentId: P:Global.FNode.concatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_concatenatedMatrix
  name: concatenatedMatrix
  nameWithType: FNode.concatenatedMatrix
  fullName: FNode.concatenatedMatrix
- uid: Global.FNode.inverseConcatenatedMatrix
  commentId: P:Global.FNode.inverseConcatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_inverseConcatenatedMatrix
  name: inverseConcatenatedMatrix
  nameWithType: FNode.inverseConcatenatedMatrix
  fullName: FNode.inverseConcatenatedMatrix
- uid: Global.FNode.screenConcatenatedMatrix
  commentId: P:Global.FNode.screenConcatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_screenConcatenatedMatrix
  name: screenConcatenatedMatrix
  nameWithType: FNode.screenConcatenatedMatrix
  fullName: FNode.screenConcatenatedMatrix
- uid: Global.FNode.screenInverseConcatenatedMatrix
  commentId: P:Global.FNode.screenInverseConcatenatedMatrix
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_screenInverseConcatenatedMatrix
  name: screenInverseConcatenatedMatrix
  nameWithType: FNode.screenInverseConcatenatedMatrix
  fullName: FNode.screenInverseConcatenatedMatrix
- uid: Global.FNode.alpha
  commentId: P:Global.FNode.alpha
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_alpha
  name: alpha
  nameWithType: FNode.alpha
  fullName: FNode.alpha
- uid: Global.FNode.concatenatedAlpha
  commentId: P:Global.FNode.concatenatedAlpha
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_concatenatedAlpha
  name: concatenatedAlpha
  nameWithType: FNode.concatenatedAlpha
  fullName: FNode.concatenatedAlpha
- uid: Global.FNode.stage
  commentId: P:Global.FNode.stage
  parent: Global.FNode
  isExternal: true
  href: Global.FNode.html#FNode_stage
  name: stage
  nameWithType: FNode.stage
  fullName: FNode.stage
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.FAtlasElement
  commentId: T:Global.FAtlasElement
  isExternal: true
  href: FAtlasElement.html
  name: FAtlasElement
  nameWithType: FAtlasElement
  fullName: FAtlasElement
- uid: UnityEngine.Color
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: Global.FSliceSprite
  commentId: T:Global.FSliceSprite
  isExternal: true
  href: FSliceSprite.html
  name: FSliceSprite
  nameWithType: FSliceSprite
  fullName: FSliceSprite
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.FLabel
  commentId: T:Global.FLabel
  isExternal: true
  href: FLabel.html
  name: FLabel
  nameWithType: FLabel
  fullName: FLabel
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.FSliceButton.#ctor*
  commentId: Overload:Global.FSliceButton.#ctor
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton__ctor_System_Single_System_Single_System_String_System_String_UnityEngine_Color_UnityEngine_Color_System_String_
  name: FSliceButton
  nameWithType: FSliceButton.FSliceButton
  fullName: FSliceButton.FSliceButton
  nameWithType.vb: FSliceButton.New
  fullName.vb: FSliceButton.New
  name.vb: New
- uid: Global.FSliceButton.AddLabelA*
  commentId: Overload:Global.FSliceButton.AddLabelA
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_AddLabelA_System_String_System_String_System_Single_System_Single_UnityEngine_Color_
  name: AddLabelA
  nameWithType: FSliceButton.AddLabelA
  fullName: FSliceButton.AddLabelA
- uid: Global.FSliceButton.AddLabelB*
  commentId: Overload:Global.FSliceButton.AddLabelB
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_AddLabelB_System_String_System_String_System_Single_System_Single_UnityEngine_Color_
  name: AddLabelB
  nameWithType: FSliceButton.AddLabelB
  fullName: FSliceButton.AddLabelB
- uid: Global.FContainer.HandleAddedToStage
  commentId: M:Global.FContainer.HandleAddedToStage
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_HandleAddedToStage
  name: HandleAddedToStage()
  nameWithType: FContainer.HandleAddedToStage()
  fullName: FContainer.HandleAddedToStage()
  spec.csharp:
  - uid: Global.FContainer.HandleAddedToStage
    name: HandleAddedToStage
    isExternal: true
    href: Global.FContainer.html#FContainer_HandleAddedToStage
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FContainer.HandleAddedToStage
    name: HandleAddedToStage
    isExternal: true
    href: Global.FContainer.html#FContainer_HandleAddedToStage
  - name: (
  - name: )
- uid: Global.FSliceButton.HandleAddedToStage*
  commentId: Overload:Global.FSliceButton.HandleAddedToStage
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_HandleAddedToStage
  name: HandleAddedToStage
  nameWithType: FSliceButton.HandleAddedToStage
  fullName: FSliceButton.HandleAddedToStage
- uid: Global.FContainer.HandleRemovedFromStage
  commentId: M:Global.FContainer.HandleRemovedFromStage
  parent: Global.FContainer
  isExternal: true
  href: Global.FContainer.html#FContainer_HandleRemovedFromStage
  name: HandleRemovedFromStage()
  nameWithType: FContainer.HandleRemovedFromStage()
  fullName: FContainer.HandleRemovedFromStage()
  spec.csharp:
  - uid: Global.FContainer.HandleRemovedFromStage
    name: HandleRemovedFromStage
    isExternal: true
    href: Global.FContainer.html#FContainer_HandleRemovedFromStage
  - name: (
  - name: )
  spec.vb:
  - uid: Global.FContainer.HandleRemovedFromStage
    name: HandleRemovedFromStage
    isExternal: true
    href: Global.FContainer.html#FContainer_HandleRemovedFromStage
  - name: (
  - name: )
- uid: Global.FSliceButton.HandleRemovedFromStage*
  commentId: Overload:Global.FSliceButton.HandleRemovedFromStage
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_HandleRemovedFromStage
  name: HandleRemovedFromStage
  nameWithType: FSliceButton.HandleRemovedFromStage
  fullName: FSliceButton.HandleRemovedFromStage
- uid: Global.FSliceButton.HandleSingleTouchBegan*
  commentId: Overload:Global.FSliceButton.HandleSingleTouchBegan
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_HandleSingleTouchBegan_FTouch_
  name: HandleSingleTouchBegan
  nameWithType: FSliceButton.HandleSingleTouchBegan
  fullName: FSliceButton.HandleSingleTouchBegan
- uid: Global.FSingleTouchableInterface.HandleSingleTouchBegan(FTouch)
  commentId: M:Global.FSingleTouchableInterface.HandleSingleTouchBegan(FTouch)
  parent: Global.FSingleTouchableInterface
  isExternal: true
  href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchBegan_FTouch_
  name: HandleSingleTouchBegan(FTouch)
  nameWithType: FSingleTouchableInterface.HandleSingleTouchBegan(FTouch)
  fullName: FSingleTouchableInterface.HandleSingleTouchBegan(FTouch)
  spec.csharp:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchBegan(FTouch)
    name: HandleSingleTouchBegan
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchBegan_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
  spec.vb:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchBegan(FTouch)
    name: HandleSingleTouchBegan
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchBegan_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
- uid: Global.FTouch
  commentId: T:Global.FTouch
  isExternal: true
  href: FTouch.html
  name: FTouch
  nameWithType: FTouch
  fullName: FTouch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.FSliceButton.HandleSingleTouchMoved*
  commentId: Overload:Global.FSliceButton.HandleSingleTouchMoved
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_HandleSingleTouchMoved_FTouch_
  name: HandleSingleTouchMoved
  nameWithType: FSliceButton.HandleSingleTouchMoved
  fullName: FSliceButton.HandleSingleTouchMoved
- uid: Global.FSingleTouchableInterface.HandleSingleTouchMoved(FTouch)
  commentId: M:Global.FSingleTouchableInterface.HandleSingleTouchMoved(FTouch)
  parent: Global.FSingleTouchableInterface
  isExternal: true
  href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchMoved_FTouch_
  name: HandleSingleTouchMoved(FTouch)
  nameWithType: FSingleTouchableInterface.HandleSingleTouchMoved(FTouch)
  fullName: FSingleTouchableInterface.HandleSingleTouchMoved(FTouch)
  spec.csharp:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchMoved(FTouch)
    name: HandleSingleTouchMoved
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchMoved_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
  spec.vb:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchMoved(FTouch)
    name: HandleSingleTouchMoved
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchMoved_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
- uid: Global.FSliceButton.HandleSingleTouchEnded*
  commentId: Overload:Global.FSliceButton.HandleSingleTouchEnded
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_HandleSingleTouchEnded_FTouch_
  name: HandleSingleTouchEnded
  nameWithType: FSliceButton.HandleSingleTouchEnded
  fullName: FSliceButton.HandleSingleTouchEnded
- uid: Global.FSingleTouchableInterface.HandleSingleTouchEnded(FTouch)
  commentId: M:Global.FSingleTouchableInterface.HandleSingleTouchEnded(FTouch)
  parent: Global.FSingleTouchableInterface
  isExternal: true
  href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchEnded_FTouch_
  name: HandleSingleTouchEnded(FTouch)
  nameWithType: FSingleTouchableInterface.HandleSingleTouchEnded(FTouch)
  fullName: FSingleTouchableInterface.HandleSingleTouchEnded(FTouch)
  spec.csharp:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchEnded(FTouch)
    name: HandleSingleTouchEnded
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchEnded_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
  spec.vb:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchEnded(FTouch)
    name: HandleSingleTouchEnded
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchEnded_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
- uid: Global.FSliceButton.HandleSingleTouchCanceled*
  commentId: Overload:Global.FSliceButton.HandleSingleTouchCanceled
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_HandleSingleTouchCanceled_FTouch_
  name: HandleSingleTouchCanceled
  nameWithType: FSliceButton.HandleSingleTouchCanceled
  fullName: FSliceButton.HandleSingleTouchCanceled
- uid: Global.FSingleTouchableInterface.HandleSingleTouchCanceled(FTouch)
  commentId: M:Global.FSingleTouchableInterface.HandleSingleTouchCanceled(FTouch)
  parent: Global.FSingleTouchableInterface
  isExternal: true
  href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchCanceled_FTouch_
  name: HandleSingleTouchCanceled(FTouch)
  nameWithType: FSingleTouchableInterface.HandleSingleTouchCanceled(FTouch)
  fullName: FSingleTouchableInterface.HandleSingleTouchCanceled(FTouch)
  spec.csharp:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchCanceled(FTouch)
    name: HandleSingleTouchCanceled
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchCanceled_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
  spec.vb:
  - uid: Global.FSingleTouchableInterface.HandleSingleTouchCanceled(FTouch)
    name: HandleSingleTouchCanceled
    isExternal: true
    href: Global.FSingleTouchableInterface.html#FSingleTouchableInterface_HandleSingleTouchCanceled_FTouch_
  - name: (
  - uid: Global.FTouch
    name: FTouch
    isExternal: true
    href: FTouch.html
  - name: )
- uid: Global.FSliceButton.SetAnchor*
  commentId: Overload:Global.FSliceButton.SetAnchor
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_SetAnchor_System_Single_System_Single_
  name: SetAnchor
  nameWithType: FSliceButton.SetAnchor
  fullName: FSliceButton.SetAnchor
- uid: Global.FSliceButton.sprite*
  commentId: Overload:Global.FSliceButton.sprite
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_sprite
  name: sprite
  nameWithType: FSliceButton.sprite
  fullName: FSliceButton.sprite
- uid: Global.FSprite
  commentId: T:Global.FSprite
  isExternal: true
  href: FSprite.html
  name: FSprite
  nameWithType: FSprite
  fullName: FSprite
- uid: Global.FSliceButton.anchorX*
  commentId: Overload:Global.FSliceButton.anchorX
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_anchorX
  name: anchorX
  nameWithType: FSliceButton.anchorX
  fullName: FSliceButton.anchorX
- uid: Global.FSliceButton.anchorY*
  commentId: Overload:Global.FSliceButton.anchorY
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_anchorY
  name: anchorY
  nameWithType: FSliceButton.anchorY
  fullName: FSliceButton.anchorY
- uid: Global.FSliceButton.isEnabled*
  commentId: Overload:Global.FSliceButton.isEnabled
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_isEnabled
  name: isEnabled
  nameWithType: FSliceButton.isEnabled
  fullName: FSliceButton.isEnabled
- uid: Global.FSliceButton.labelA*
  commentId: Overload:Global.FSliceButton.labelA
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_labelA
  name: labelA
  nameWithType: FSliceButton.labelA
  fullName: FSliceButton.labelA
- uid: Global.FSliceButton.labelB*
  commentId: Overload:Global.FSliceButton.labelB
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_labelB
  name: labelB
  nameWithType: FSliceButton.labelB
  fullName: FSliceButton.labelB
- uid: Global.FSliceButton.width*
  commentId: Overload:Global.FSliceButton.width
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_width
  name: width
  nameWithType: FSliceButton.width
  fullName: FSliceButton.width
- uid: Global.FSliceButton.height*
  commentId: Overload:Global.FSliceButton.height
  isExternal: true
  href: Global.FSliceButton.html#FSliceButton_height
  name: height
  nameWithType: FSliceButton.height
  fullName: FSliceButton.height
- uid: Global.FSliceButton.FSliceButtonSignalDelegate
  commentId: T:Global.FSliceButton.FSliceButtonSignalDelegate
  isExternal: true
  href: FSliceButton.html
  name: FSliceButton.FSliceButtonSignalDelegate
  nameWithType: FSliceButton.FSliceButtonSignalDelegate
  fullName: FSliceButton.FSliceButtonSignalDelegate
  spec.csharp:
  - uid: Global.FSliceButton
    name: FSliceButton
    isExternal: true
    href: FSliceButton.html
  - name: .
  - uid: Global.FSliceButton.FSliceButtonSignalDelegate
    name: FSliceButtonSignalDelegate
    isExternal: true
    href: FSliceButton.FSliceButtonSignalDelegate.html
  spec.vb:
  - uid: Global.FSliceButton
    name: FSliceButton
    isExternal: true
    href: FSliceButton.html
  - name: .
  - uid: Global.FSliceButton.FSliceButtonSignalDelegate
    name: FSliceButtonSignalDelegate
    isExternal: true
    href: FSliceButton.FSliceButtonSignalDelegate.html
