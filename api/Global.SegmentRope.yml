### YamlMime:ManagedReference
items:
- uid: Global.SegmentRope
  commentId: T:Global.SegmentRope
  id: SegmentRope
  parent: Global
  children:
  - Global.SegmentRope.#ctor(System.Int32,System.Single)
  - Global.SegmentRope.Reset(UnityEngine.Vector2,UnityEngine.Vector2)
  - Global.SegmentRope.UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})
  - Global.SegmentRope.drag
  - Global.SegmentRope.gravity
  - Global.SegmentRope.idealLength
  - Global.SegmentRope.pushSegments
  - Global.SegmentRope.segments
  - Global.SegmentRope.terrainCollision
  langs:
  - csharp
  - vb
  name: SegmentRope
  nameWithType: SegmentRope
  fullName: SegmentRope
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:SegmentRope</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class SegmentRope
    content.vb: Public Class SegmentRope
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.SegmentRope.segments
  commentId: F:Global.SegmentRope.segments
  id: segments
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: segments
  nameWithType: SegmentRope.segments
  fullName: SegmentRope.segments
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:SegmentRope.segments</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public SimpleSegment[] segments
    return:
      type: Global.SimpleSegment[]
    content.vb: Public segments As SimpleSegment()
- uid: Global.SegmentRope.idealLength
  commentId: F:Global.SegmentRope.idealLength
  id: idealLength
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: idealLength
  nameWithType: SegmentRope.idealLength
  fullName: SegmentRope.idealLength
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:SegmentRope.idealLength</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float idealLength
    return:
      type: System.Single
    content.vb: Public idealLength As Single
- uid: Global.SegmentRope.terrainCollision
  commentId: F:Global.SegmentRope.terrainCollision
  id: terrainCollision
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: terrainCollision
  nameWithType: SegmentRope.terrainCollision
  fullName: SegmentRope.terrainCollision
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:SegmentRope.terrainCollision</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool terrainCollision
    return:
      type: System.Boolean
    content.vb: Public terrainCollision As Boolean
- uid: Global.SegmentRope.drag
  commentId: F:Global.SegmentRope.drag
  id: drag
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: drag
  nameWithType: SegmentRope.drag
  fullName: SegmentRope.drag
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:SegmentRope.drag</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float drag
    return:
      type: System.Single
    content.vb: Public drag As Single
- uid: Global.SegmentRope.gravity
  commentId: F:Global.SegmentRope.gravity
  id: gravity
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: gravity
  nameWithType: SegmentRope.gravity
  fullName: SegmentRope.gravity
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:SegmentRope.gravity</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float gravity
    return:
      type: System.Single
    content.vb: Public gravity As Single
- uid: Global.SegmentRope.pushSegments
  commentId: F:Global.SegmentRope.pushSegments
  id: pushSegments
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: pushSegments
  nameWithType: SegmentRope.pushSegments
  fullName: SegmentRope.pushSegments
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:SegmentRope.pushSegments</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool pushSegments
    return:
      type: System.Boolean
    content.vb: Public pushSegments As Boolean
- uid: Global.SegmentRope.#ctor(System.Int32,System.Single)
  commentId: M:Global.SegmentRope.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: SegmentRope(int, float)
  nameWithType: SegmentRope.SegmentRope(int, float)
  fullName: SegmentRope.SegmentRope(int, float)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>SegmentRope</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public SegmentRope(int segments, float idealLength)
    parameters:
    - id: segments
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>segments</parameter>
            <parameter>M:SegmentRope.#ctor(System.Int32,System.Single)</parameter>
          </include>
        </markup>
    - id: idealLength
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>idealLength</parameter>
            <parameter>M:SegmentRope.#ctor(System.Int32,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(segments As Integer, idealLength As Single)
  overload: Global.SegmentRope.#ctor*
  nameWithType.vb: SegmentRope.New(Integer, Single)
  fullName.vb: SegmentRope.New(Integer, Single)
  name.vb: New(Integer, Single)
- uid: Global.SegmentRope.UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})
  commentId: M:Global.SegmentRope.UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})
  id: UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: UpdateRope(Room, Vector2?, Vector2?)
  nameWithType: SegmentRope.UpdateRope(Room, Vector2?, Vector2?)
  fullName: SegmentRope.UpdateRope(Room, UnityEngine.Vector2?, UnityEngine.Vector2?)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SegmentRope.UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public virtual void UpdateRope(Room room, Vector2? from, Vector2? to)
    parameters:
    - id: room
      type: Global.Room
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:SegmentRope.UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})</parameter>
          </include>
        </markup>
    - id: from
      type: System.Nullable{UnityEngine.Vector2}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>from</parameter>
            <parameter>M:SegmentRope.UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})</parameter>
          </include>
        </markup>
    - id: to
      type: System.Nullable{UnityEngine.Vector2}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>to</parameter>
            <parameter>M:SegmentRope.UpdateRope(Room,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})</parameter>
          </include>
        </markup>
    content.vb: Public Overridable Sub UpdateRope(room As Room, from As Vector2?, [to] As Vector2?)
  overload: Global.SegmentRope.UpdateRope*
- uid: Global.SegmentRope.Reset(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Global.SegmentRope.Reset(UnityEngine.Vector2,UnityEngine.Vector2)
  id: Reset(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: Global.SegmentRope
  langs:
  - csharp
  - vb
  name: Reset(Vector2, Vector2)
  nameWithType: SegmentRope.Reset(Vector2, Vector2)
  fullName: SegmentRope.Reset(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:SegmentRope.Reset(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Reset(Vector2 from, Vector2 to)
    parameters:
    - id: from
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>from</parameter>
            <parameter>M:SegmentRope.Reset(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: to
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>to</parameter>
            <parameter>M:SegmentRope.Reset(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Reset(from As Vector2, [to] As Vector2)
  overload: Global.SegmentRope.Reset*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.SimpleSegment[]
  isExternal: true
  href: SimpleSegment.html
  name: SimpleSegment[]
  nameWithType: SimpleSegment[]
  fullName: SimpleSegment[]
  nameWithType.vb: SimpleSegment()
  fullName.vb: SimpleSegment()
  name.vb: SimpleSegment()
  spec.csharp:
  - uid: Global.SimpleSegment
    name: SimpleSegment
    isExternal: true
    href: SimpleSegment.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.SimpleSegment
    name: SimpleSegment
    isExternal: true
    href: SimpleSegment.html
  - name: (
  - name: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.SegmentRope.#ctor*
  commentId: Overload:Global.SegmentRope.#ctor
  isExternal: true
  href: Global.SegmentRope.html#SegmentRope__ctor_System_Int32_System_Single_
  name: SegmentRope
  nameWithType: SegmentRope.SegmentRope
  fullName: SegmentRope.SegmentRope
  nameWithType.vb: SegmentRope.New
  fullName.vb: SegmentRope.New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.SegmentRope.UpdateRope*
  commentId: Overload:Global.SegmentRope.UpdateRope
  isExternal: true
  href: Global.SegmentRope.html#SegmentRope_UpdateRope_Room_System_Nullable_UnityEngine_Vector2__System_Nullable_UnityEngine_Vector2__
  name: UpdateRope
  nameWithType: SegmentRope.UpdateRope
  fullName: SegmentRope.UpdateRope
- uid: Global.Room
  commentId: T:Global.Room
  isExternal: true
  href: Room.html
  name: Room
  nameWithType: Room
  fullName: Room
- uid: System.Nullable{UnityEngine.Vector2}
  commentId: T:System.Nullable{UnityEngine.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Vector2?
  nameWithType: Vector2?
  fullName: UnityEngine.Vector2?
  spec.csharp:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.SegmentRope.Reset*
  commentId: Overload:Global.SegmentRope.Reset
  isExternal: true
  href: Global.SegmentRope.html#SegmentRope_Reset_UnityEngine_Vector2_UnityEngine_Vector2_
  name: Reset
  nameWithType: SegmentRope.Reset
  fullName: SegmentRope.Reset
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
