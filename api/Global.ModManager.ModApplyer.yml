### YamlMime:ManagedReference
items:
- uid: Global.ModManager.ModApplyer
  commentId: T:Global.ModManager.ModApplyer
  id: ModManager.ModApplyer
  parent: Global
  children:
  - Global.ModManager.ModApplyer.#ctor(ProcessManager,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})
  - Global.ModManager.ModApplyer.IsFinished
  - Global.ModManager.ModApplyer.IsStarted
  - Global.ModManager.ModApplyer.RequiresRestart
  - Global.ModManager.ModApplyer.Start(System.Boolean)
  - Global.ModManager.ModApplyer.Update
  - Global.ModManager.ModApplyer.WasSuccessful
  - Global.ModManager.ModApplyer.activeMergingMod
  - Global.ModManager.ModApplyer.applyError
  - Global.ModManager.ModApplyer.applyFileInd
  - Global.ModManager.ModApplyer.applyFileLength
  - Global.ModManager.ModApplyer.filesInBadState
  - Global.ModManager.ModApplyer.finalizeApplyingMaps
  - Global.ModManager.ModApplyer.mapsGeneratedSoFar
  - Global.ModManager.ModApplyer.mapsToGenerate
  - Global.ModManager.ModApplyer.mergeFileInd
  - Global.ModManager.ModApplyer.mergeFileLength
  - Global.ModManager.ModApplyer.nextMapInstructions
  - Global.ModManager.ModApplyer.nextMapKeyToGenerate
  - Global.ModManager.ModApplyer.refreshingIndexMaps
  - Global.ModManager.ModApplyer.statusText
  - Global.ModManager.ModApplyer.timeSinceLastMapGenerate
  - Global.ModManager.ModApplyer.worldMapBasePaths
  - Global.ModManager.ModApplyer.worldMapImageMetas
  - Global.ModManager.ModApplyer.worldMapImages
  - Global.ModManager.ModApplyer.worldMaps
  langs:
  - csharp
  - vb
  name: ModManager.ModApplyer
  nameWithType: ModManager.ModApplyer
  fullName: ModManager.ModApplyer
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:ModManager.ModApplyer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class ModManager.ModApplyer
    content.vb: Public Class ModManager.ModApplyer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.ModManager.ModApplyer.applyError
  commentId: F:Global.ModManager.ModApplyer.applyError
  id: applyError
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: applyError
  nameWithType: ModManager.ModApplyer.applyError
  fullName: ModManager.ModApplyer.applyError
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.applyError</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string applyError
    return:
      type: System.String
    content.vb: Public applyError As String
- uid: Global.ModManager.ModApplyer.refreshingIndexMaps
  commentId: F:Global.ModManager.ModApplyer.refreshingIndexMaps
  id: refreshingIndexMaps
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: refreshingIndexMaps
  nameWithType: ModManager.ModApplyer.refreshingIndexMaps
  fullName: ModManager.ModApplyer.refreshingIndexMaps
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.refreshingIndexMaps</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool refreshingIndexMaps
    return:
      type: System.Boolean
    content.vb: Public refreshingIndexMaps As Boolean
- uid: Global.ModManager.ModApplyer.activeMergingMod
  commentId: F:Global.ModManager.ModApplyer.activeMergingMod
  id: activeMergingMod
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: activeMergingMod
  nameWithType: ModManager.ModApplyer.activeMergingMod
  fullName: ModManager.ModApplyer.activeMergingMod
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.activeMergingMod</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int activeMergingMod
    return:
      type: System.Int32
    content.vb: Public activeMergingMod As Integer
- uid: Global.ModManager.ModApplyer.mergeFileInd
  commentId: F:Global.ModManager.ModApplyer.mergeFileInd
  id: mergeFileInd
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: mergeFileInd
  nameWithType: ModManager.ModApplyer.mergeFileInd
  fullName: ModManager.ModApplyer.mergeFileInd
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.mergeFileInd</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int mergeFileInd
    return:
      type: System.Int32
    content.vb: Public mergeFileInd As Integer
- uid: Global.ModManager.ModApplyer.mergeFileLength
  commentId: F:Global.ModManager.ModApplyer.mergeFileLength
  id: mergeFileLength
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: mergeFileLength
  nameWithType: ModManager.ModApplyer.mergeFileLength
  fullName: ModManager.ModApplyer.mergeFileLength
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.mergeFileLength</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int mergeFileLength
    return:
      type: System.Int32
    content.vb: Public mergeFileLength As Integer
- uid: Global.ModManager.ModApplyer.applyFileInd
  commentId: F:Global.ModManager.ModApplyer.applyFileInd
  id: applyFileInd
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: applyFileInd
  nameWithType: ModManager.ModApplyer.applyFileInd
  fullName: ModManager.ModApplyer.applyFileInd
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.applyFileInd</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int applyFileInd
    return:
      type: System.Int32
    content.vb: Public applyFileInd As Integer
- uid: Global.ModManager.ModApplyer.applyFileLength
  commentId: F:Global.ModManager.ModApplyer.applyFileLength
  id: applyFileLength
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: applyFileLength
  nameWithType: ModManager.ModApplyer.applyFileLength
  fullName: ModManager.ModApplyer.applyFileLength
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.applyFileLength</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int applyFileLength
    return:
      type: System.Int32
    content.vb: Public applyFileLength As Integer
- uid: Global.ModManager.ModApplyer.mapsToGenerate
  commentId: F:Global.ModManager.ModApplyer.mapsToGenerate
  id: mapsToGenerate
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: mapsToGenerate
  nameWithType: ModManager.ModApplyer.mapsToGenerate
  fullName: ModManager.ModApplyer.mapsToGenerate
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.mapsToGenerate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int mapsToGenerate
    return:
      type: System.Int32
    content.vb: Public mapsToGenerate As Integer
- uid: Global.ModManager.ModApplyer.mapsGeneratedSoFar
  commentId: F:Global.ModManager.ModApplyer.mapsGeneratedSoFar
  id: mapsGeneratedSoFar
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: mapsGeneratedSoFar
  nameWithType: ModManager.ModApplyer.mapsGeneratedSoFar
  fullName: ModManager.ModApplyer.mapsGeneratedSoFar
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.mapsGeneratedSoFar</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int mapsGeneratedSoFar
    return:
      type: System.Int32
    content.vb: Public mapsGeneratedSoFar As Integer
- uid: Global.ModManager.ModApplyer.statusText
  commentId: F:Global.ModManager.ModApplyer.statusText
  id: statusText
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: statusText
  nameWithType: ModManager.ModApplyer.statusText
  fullName: ModManager.ModApplyer.statusText
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.statusText</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string statusText
    return:
      type: System.String
    content.vb: Public statusText As String
- uid: Global.ModManager.ModApplyer.finalizeApplyingMaps
  commentId: F:Global.ModManager.ModApplyer.finalizeApplyingMaps
  id: finalizeApplyingMaps
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: finalizeApplyingMaps
  nameWithType: ModManager.ModApplyer.finalizeApplyingMaps
  fullName: ModManager.ModApplyer.finalizeApplyingMaps
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.finalizeApplyingMaps</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool finalizeApplyingMaps
    return:
      type: System.Boolean
    content.vb: Public finalizeApplyingMaps As Boolean
- uid: Global.ModManager.ModApplyer.timeSinceLastMapGenerate
  commentId: F:Global.ModManager.ModApplyer.timeSinceLastMapGenerate
  id: timeSinceLastMapGenerate
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: timeSinceLastMapGenerate
  nameWithType: ModManager.ModApplyer.timeSinceLastMapGenerate
  fullName: ModManager.ModApplyer.timeSinceLastMapGenerate
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.timeSinceLastMapGenerate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int timeSinceLastMapGenerate
    return:
      type: System.Int32
    content.vb: Public timeSinceLastMapGenerate As Integer
- uid: Global.ModManager.ModApplyer.filesInBadState
  commentId: F:Global.ModManager.ModApplyer.filesInBadState
  id: filesInBadState
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: filesInBadState
  nameWithType: ModManager.ModApplyer.filesInBadState
  fullName: ModManager.ModApplyer.filesInBadState
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.filesInBadState</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool filesInBadState
    return:
      type: System.Boolean
    content.vb: Public filesInBadState As Boolean
- uid: Global.ModManager.ModApplyer.nextMapInstructions
  commentId: F:Global.ModManager.ModApplyer.nextMapInstructions
  id: nextMapInstructions
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: nextMapInstructions
  nameWithType: ModManager.ModApplyer.nextMapInstructions
  fullName: ModManager.ModApplyer.nextMapInstructions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.nextMapInstructions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ModManager.MapMerger.MergeMapInstructions? nextMapInstructions
    return:
      type: System.Nullable{ModManager.MapMerger.MergeMapInstructions}
    content.vb: Public nextMapInstructions As ModManager.MapMerger.MergeMapInstructions?
- uid: Global.ModManager.ModApplyer.worldMapImages
  commentId: F:Global.ModManager.ModApplyer.worldMapImages
  id: worldMapImages
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: worldMapImages
  nameWithType: ModManager.ModApplyer.worldMapImages
  fullName: ModManager.ModApplyer.worldMapImages
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.worldMapImages</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Replaced by nextMapInstructions field")]

      public Dictionary<string, List<string>> worldMapImages
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
    content.vb: >-
      <Obsolete("Replaced by nextMapInstructions field")>

      Public worldMapImages As Dictionary(Of String, List(Of String))
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Replaced by nextMapInstructions field
- uid: Global.ModManager.ModApplyer.worldMapImageMetas
  commentId: F:Global.ModManager.ModApplyer.worldMapImageMetas
  id: worldMapImageMetas
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: worldMapImageMetas
  nameWithType: ModManager.ModApplyer.worldMapImageMetas
  fullName: ModManager.ModApplyer.worldMapImageMetas
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.worldMapImageMetas</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Replaced by nextMapInstructions field")]

      public Dictionary<string, List<string>> worldMapImageMetas
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
    content.vb: >-
      <Obsolete("Replaced by nextMapInstructions field")>

      Public worldMapImageMetas As Dictionary(Of String, List(Of String))
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Replaced by nextMapInstructions field
- uid: Global.ModManager.ModApplyer.worldMapBasePaths
  commentId: F:Global.ModManager.ModApplyer.worldMapBasePaths
  id: worldMapBasePaths
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: worldMapBasePaths
  nameWithType: ModManager.ModApplyer.worldMapBasePaths
  fullName: ModManager.ModApplyer.worldMapBasePaths
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.worldMapBasePaths</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Replaced by nextMapInstructions field")]

      public Dictionary<string, List<string>> worldMapBasePaths
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
    content.vb: >-
      <Obsolete("Replaced by nextMapInstructions field")>

      Public worldMapBasePaths As Dictionary(Of String, List(Of String))
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Replaced by nextMapInstructions field
- uid: Global.ModManager.ModApplyer.nextMapKeyToGenerate
  commentId: F:Global.ModManager.ModApplyer.nextMapKeyToGenerate
  id: nextMapKeyToGenerate
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: nextMapKeyToGenerate
  nameWithType: ModManager.ModApplyer.nextMapKeyToGenerate
  fullName: ModManager.ModApplyer.nextMapKeyToGenerate
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.nextMapKeyToGenerate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Replaced by nextMapInstructions field")]

      public string nextMapKeyToGenerate
    return:
      type: System.String
    content.vb: >-
      <Obsolete("Replaced by nextMapInstructions field")>

      Public nextMapKeyToGenerate As String
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Replaced by nextMapInstructions field
- uid: Global.ModManager.ModApplyer.worldMaps
  commentId: F:Global.ModManager.ModApplyer.worldMaps
  id: worldMaps
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: worldMaps
  nameWithType: ModManager.ModApplyer.worldMaps
  fullName: ModManager.ModApplyer.worldMaps
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModApplyer.worldMaps</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Replaced by nextMapInstructions field")]

      public Dictionary<string, List<ModManager.MapMerger.MergeMapData>> worldMaps
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ModManager.MapMerger.MergeMapData}}
    content.vb: >-
      <Obsolete("Replaced by nextMapInstructions field")>

      Public worldMaps As Dictionary(Of String, List(Of ModManager.MapMerger.MergeMapData))
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Replaced by nextMapInstructions field
- uid: Global.ModManager.ModApplyer.#ctor(ProcessManager,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})
  commentId: M:Global.ModManager.ModApplyer.#ctor(ProcessManager,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})
  id: '#ctor(ProcessManager,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})'
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: ModApplyer(ProcessManager, List<bool>, List<int>)
  nameWithType: ModManager.ModApplyer.ModApplyer(ProcessManager, List<bool>, List<int>)
  fullName: ModManager.ModApplyer.ModApplyer(ProcessManager, System.Collections.Generic.List<bool>, System.Collections.Generic.List<int>)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>ModManager.ModApplyer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ModApplyer(ProcessManager manager, List<bool> pendingEnabled, List<int> pendingLoadOrder)
    parameters:
    - id: manager
      type: Global.ProcessManager
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>manager</parameter>
            <parameter>M:ModManager.ModApplyer.#ctor(ProcessManager,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})</parameter>
          </include>
        </markup>
    - id: pendingEnabled
      type: System.Collections.Generic.List{System.Boolean}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pendingEnabled</parameter>
            <parameter>M:ModManager.ModApplyer.#ctor(ProcessManager,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})</parameter>
          </include>
        </markup>
    - id: pendingLoadOrder
      type: System.Collections.Generic.List{System.Int32}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pendingLoadOrder</parameter>
            <parameter>M:ModManager.ModApplyer.#ctor(ProcessManager,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(manager As ProcessManager, pendingEnabled As List(Of Boolean), pendingLoadOrder As List(Of Integer))
  overload: Global.ModManager.ModApplyer.#ctor*
  nameWithType.vb: ModManager.ModApplyer.New(ProcessManager, List(Of Boolean), List(Of Integer))
  fullName.vb: ModManager.ModApplyer.New(ProcessManager, System.Collections.Generic.List(Of Boolean), System.Collections.Generic.List(Of Integer))
  name.vb: New(ProcessManager, List(Of Boolean), List(Of Integer))
- uid: Global.ModManager.ModApplyer.IsFinished
  commentId: M:Global.ModManager.ModApplyer.IsFinished
  id: IsFinished
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: IsFinished()
  nameWithType: ModManager.ModApplyer.IsFinished()
  fullName: ModManager.ModApplyer.IsFinished()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModApplyer.IsFinished</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsFinished()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModApplyer.IsFinished</parameter>
          </include>
        </markup>
    content.vb: Public Function IsFinished() As Boolean
  overload: Global.ModManager.ModApplyer.IsFinished*
- uid: Global.ModManager.ModApplyer.WasSuccessful
  commentId: M:Global.ModManager.ModApplyer.WasSuccessful
  id: WasSuccessful
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: WasSuccessful()
  nameWithType: ModManager.ModApplyer.WasSuccessful()
  fullName: ModManager.ModApplyer.WasSuccessful()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModApplyer.WasSuccessful</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool WasSuccessful()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModApplyer.WasSuccessful</parameter>
          </include>
        </markup>
    content.vb: Public Function WasSuccessful() As Boolean
  overload: Global.ModManager.ModApplyer.WasSuccessful*
- uid: Global.ModManager.ModApplyer.IsStarted
  commentId: M:Global.ModManager.ModApplyer.IsStarted
  id: IsStarted
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: IsStarted()
  nameWithType: ModManager.ModApplyer.IsStarted()
  fullName: ModManager.ModApplyer.IsStarted()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModApplyer.IsStarted</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsStarted()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModApplyer.IsStarted</parameter>
          </include>
        </markup>
    content.vb: Public Function IsStarted() As Boolean
  overload: Global.ModManager.ModApplyer.IsStarted*
- uid: Global.ModManager.ModApplyer.RequiresRestart
  commentId: M:Global.ModManager.ModApplyer.RequiresRestart
  id: RequiresRestart
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: RequiresRestart()
  nameWithType: ModManager.ModApplyer.RequiresRestart()
  fullName: ModManager.ModApplyer.RequiresRestart()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModApplyer.RequiresRestart</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool RequiresRestart()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModApplyer.RequiresRestart</parameter>
          </include>
        </markup>
    content.vb: Public Function RequiresRestart() As Boolean
  overload: Global.ModManager.ModApplyer.RequiresRestart*
- uid: Global.ModManager.ModApplyer.Start(System.Boolean)
  commentId: M:Global.ModManager.ModApplyer.Start(System.Boolean)
  id: Start(System.Boolean)
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: Start(bool)
  nameWithType: ModManager.ModApplyer.Start(bool)
  fullName: ModManager.ModApplyer.Start(bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModApplyer.Start(System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Start(bool filesInBadState)
    parameters:
    - id: filesInBadState
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>filesInBadState</parameter>
            <parameter>M:ModManager.ModApplyer.Start(System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Start(filesInBadState As Boolean)
  overload: Global.ModManager.ModApplyer.Start*
  nameWithType.vb: ModManager.ModApplyer.Start(Boolean)
  fullName.vb: ModManager.ModApplyer.Start(Boolean)
  name.vb: Start(Boolean)
- uid: Global.ModManager.ModApplyer.Update
  commentId: M:Global.ModManager.ModApplyer.Update
  id: Update
  parent: Global.ModManager.ModApplyer
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: ModManager.ModApplyer.Update()
  fullName: ModManager.ModApplyer.Update()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModApplyer.Update</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update()
  overload: Global.ModManager.ModApplyer.Update*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Nullable{ModManager.MapMerger.MergeMapInstructions}
  commentId: T:System.Nullable{ModManager.MapMerger.MergeMapInstructions}
  parent: System
  definition: System.Nullable`1
  href: ModManager.html
  name: ModManager.MapMerger.MergeMapInstructions?
  nameWithType: ModManager.MapMerger.MergeMapInstructions?
  fullName: ModManager.MapMerger.MergeMapInstructions?
  spec.csharp:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapInstructions
    name: MergeMapInstructions
    isExternal: true
    href: ModManager.MapMerger.MergeMapInstructions.html
  - name: '?'
  spec.vb:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapInstructions
    name: MergeMapInstructions
    isExternal: true
    href: ModManager.MapMerger.MergeMapInstructions.html
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, List<string>>
  nameWithType: Dictionary<string, List<string>>
  fullName: System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>
  nameWithType.vb: Dictionary(Of String, List(Of String))
  fullName.vb: System.Collections.Generic.Dictionary(Of String, System.Collections.Generic.List(Of String))
  name.vb: Dictionary(Of String, List(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ModManager.MapMerger.MergeMapData}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ModManager.MapMerger.MergeMapData}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, List<ModManager.MapMerger.MergeMapData>>
  nameWithType: Dictionary<string, List<ModManager.MapMerger.MergeMapData>>
  fullName: System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<ModManager.MapMerger.MergeMapData>>
  nameWithType.vb: Dictionary(Of String, List(Of ModManager.MapMerger.MergeMapData))
  fullName.vb: System.Collections.Generic.Dictionary(Of String, System.Collections.Generic.List(Of ModManager.MapMerger.MergeMapData))
  name.vb: Dictionary(Of String, List(Of ModManager.MapMerger.MergeMapData))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapData
    name: MergeMapData
    isExternal: true
    href: ModManager.MapMerger.MergeMapData.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapData
    name: MergeMapData
    isExternal: true
    href: ModManager.MapMerger.MergeMapData.html
  - name: )
  - name: )
- uid: Global.ModManager.ModApplyer.#ctor*
  commentId: Overload:Global.ModManager.ModApplyer.#ctor
  isExternal: true
  href: Global.ModManager.ModApplyer.html#ModManager_ModApplyer__ctor_ProcessManager_System_Collections_Generic_List_System_Boolean__System_Collections_Generic_List_System_Int32__
  name: ModApplyer
  nameWithType: ModManager.ModApplyer.ModApplyer
  fullName: ModManager.ModApplyer.ModApplyer
  nameWithType.vb: ModManager.ModApplyer.New
  fullName.vb: ModManager.ModApplyer.New
  name.vb: New
- uid: Global.ProcessManager
  commentId: T:Global.ProcessManager
  isExternal: true
  href: ProcessManager.html
  name: ProcessManager
  nameWithType: ProcessManager
  fullName: ProcessManager
- uid: System.Collections.Generic.List{System.Boolean}
  commentId: T:System.Collections.Generic.List{System.Boolean}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<bool>
  nameWithType: List<bool>
  fullName: System.Collections.Generic.List<bool>
  nameWithType.vb: List(Of Boolean)
  fullName.vb: System.Collections.Generic.List(Of Boolean)
  name.vb: List(Of Boolean)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<int>
  nameWithType: List<int>
  fullName: System.Collections.Generic.List<int>
  nameWithType.vb: List(Of Integer)
  fullName.vb: System.Collections.Generic.List(Of Integer)
  name.vb: List(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ModManager.ModApplyer.IsFinished*
  commentId: Overload:Global.ModManager.ModApplyer.IsFinished
  isExternal: true
  href: Global.ModManager.ModApplyer.html#ModManager_ModApplyer_IsFinished
  name: IsFinished
  nameWithType: ModManager.ModApplyer.IsFinished
  fullName: ModManager.ModApplyer.IsFinished
- uid: Global.ModManager.ModApplyer.WasSuccessful*
  commentId: Overload:Global.ModManager.ModApplyer.WasSuccessful
  isExternal: true
  href: Global.ModManager.ModApplyer.html#ModManager_ModApplyer_WasSuccessful
  name: WasSuccessful
  nameWithType: ModManager.ModApplyer.WasSuccessful
  fullName: ModManager.ModApplyer.WasSuccessful
- uid: Global.ModManager.ModApplyer.IsStarted*
  commentId: Overload:Global.ModManager.ModApplyer.IsStarted
  isExternal: true
  href: Global.ModManager.ModApplyer.html#ModManager_ModApplyer_IsStarted
  name: IsStarted
  nameWithType: ModManager.ModApplyer.IsStarted
  fullName: ModManager.ModApplyer.IsStarted
- uid: Global.ModManager.ModApplyer.RequiresRestart*
  commentId: Overload:Global.ModManager.ModApplyer.RequiresRestart
  isExternal: true
  href: Global.ModManager.ModApplyer.html#ModManager_ModApplyer_RequiresRestart
  name: RequiresRestart
  nameWithType: ModManager.ModApplyer.RequiresRestart
  fullName: ModManager.ModApplyer.RequiresRestart
- uid: Global.ModManager.ModApplyer.Start*
  commentId: Overload:Global.ModManager.ModApplyer.Start
  isExternal: true
  href: Global.ModManager.ModApplyer.html#ModManager_ModApplyer_Start_System_Boolean_
  name: Start
  nameWithType: ModManager.ModApplyer.Start
  fullName: ModManager.ModApplyer.Start
- uid: Global.ModManager.ModApplyer.Update*
  commentId: Overload:Global.ModManager.ModApplyer.Update
  isExternal: true
  href: Global.ModManager.ModApplyer.html#ModManager_ModApplyer_Update
  name: Update
  nameWithType: ModManager.ModApplyer.Update
  fullName: ModManager.ModApplyer.Update
