### YamlMime:ManagedReference
items:
- uid: Global.Room.Tile
  commentId: T:Global.Room.Tile
  id: Room.Tile
  parent: Global
  children:
  - Global.Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  - Global.Room.Tile.AnyBeam
  - Global.Room.Tile.AnyWater
  - Global.Room.Tile.DeepWater
  - Global.Room.Tile.IsSolid
  - Global.Room.Tile.Solid
  - Global.Room.Tile.Terrain
  - Global.Room.Tile.WaterSurface
  - Global.Room.Tile.X
  - Global.Room.Tile.Y
  - Global.Room.Tile.hive
  - Global.Room.Tile.horizontalBeam
  - Global.Room.Tile.shortCut
  - Global.Room.Tile.verticalBeam
  - Global.Room.Tile.wallbehind
  - Global.Room.Tile.waterInt
  - Global.Room.Tile.wormGrass
  langs:
  - csharp
  - vb
  name: Room.Tile
  nameWithType: Room.Tile
  fullName: Room.Tile
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Room.Tile</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class Room.Tile
    content.vb: Public Class Room.Tile
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.Room.Tile.Terrain
  commentId: F:Global.Room.Tile.Terrain
  id: Terrain
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: Terrain
  nameWithType: Room.Tile.Terrain
  fullName: Room.Tile.Terrain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.Terrain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Room.Tile.TerrainType Terrain
    return:
      type: Global.Room.Tile.TerrainType
    content.vb: Public Terrain As Room.Tile.TerrainType
- uid: Global.Room.Tile.verticalBeam
  commentId: F:Global.Room.Tile.verticalBeam
  id: verticalBeam
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: verticalBeam
  nameWithType: Room.Tile.verticalBeam
  fullName: Room.Tile.verticalBeam
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.verticalBeam</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool verticalBeam
    return:
      type: System.Boolean
    content.vb: Public verticalBeam As Boolean
- uid: Global.Room.Tile.horizontalBeam
  commentId: F:Global.Room.Tile.horizontalBeam
  id: horizontalBeam
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: horizontalBeam
  nameWithType: Room.Tile.horizontalBeam
  fullName: Room.Tile.horizontalBeam
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.horizontalBeam</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool horizontalBeam
    return:
      type: System.Boolean
    content.vb: Public horizontalBeam As Boolean
- uid: Global.Room.Tile.wallbehind
  commentId: F:Global.Room.Tile.wallbehind
  id: wallbehind
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: wallbehind
  nameWithType: Room.Tile.wallbehind
  fullName: Room.Tile.wallbehind
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.wallbehind</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool wallbehind
    return:
      type: System.Boolean
    content.vb: Public wallbehind As Boolean
- uid: Global.Room.Tile.shortCut
  commentId: F:Global.Room.Tile.shortCut
  id: shortCut
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: shortCut
  nameWithType: Room.Tile.shortCut
  fullName: Room.Tile.shortCut
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.shortCut</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int shortCut
    return:
      type: System.Int32
    content.vb: Public shortCut As Integer
- uid: Global.Room.Tile.wormGrass
  commentId: F:Global.Room.Tile.wormGrass
  id: wormGrass
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: wormGrass
  nameWithType: Room.Tile.wormGrass
  fullName: Room.Tile.wormGrass
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.wormGrass</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool wormGrass
    return:
      type: System.Boolean
    content.vb: Public wormGrass As Boolean
- uid: Global.Room.Tile.waterInt
  commentId: F:Global.Room.Tile.waterInt
  id: waterInt
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: waterInt
  nameWithType: Room.Tile.waterInt
  fullName: Room.Tile.waterInt
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.waterInt</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int waterInt
    return:
      type: System.Int32
    content.vb: Public waterInt As Integer
- uid: Global.Room.Tile.X
  commentId: F:Global.Room.Tile.X
  id: X
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Room.Tile.X
  fullName: Room.Tile.X
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.X</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int X
    return:
      type: System.Int32
    content.vb: Public X As Integer
- uid: Global.Room.Tile.Y
  commentId: F:Global.Room.Tile.Y
  id: Y
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Room.Tile.Y
  fullName: Room.Tile.Y
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.Y</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int Y
    return:
      type: System.Int32
    content.vb: Public Y As Integer
- uid: Global.Room.Tile.hive
  commentId: F:Global.Room.Tile.hive
  id: hive
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: hive
  nameWithType: Room.Tile.hive
  fullName: Room.Tile.hive
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Room.Tile.hive</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool hive
    return:
      type: System.Boolean
    content.vb: Public hive As Boolean
- uid: Global.Room.Tile.IsSolid
  commentId: M:Global.Room.Tile.IsSolid
  id: IsSolid
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: IsSolid()
  nameWithType: Room.Tile.IsSolid()
  fullName: Room.Tile.IsSolid()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Room.Tile.IsSolid</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsSolid()
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Room.Tile.IsSolid</parameter>
          </include>
        </markup>
    content.vb: Public Function IsSolid() As Boolean
  overload: Global.Room.Tile.IsSolid*
- uid: Global.Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  commentId: M:Global.Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)'
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: Tile(int, int, TerrainType, bool, bool, bool, int, int)
  nameWithType: Room.Tile.Tile(int, int, Room.Tile.TerrainType, bool, bool, bool, int, int)
  fullName: Room.Tile.Tile(int, int, Room.Tile.TerrainType, bool, bool, bool, int, int)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Room.Tile</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Tile(int x, int y, Room.Tile.TerrainType tType, bool vBeam, bool hBeam, bool wbhnd, int sc, int wtr)
    parameters:
    - id: x
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: tType
      type: Global.Room.Tile.TerrainType
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tType</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: vBeam
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vBeam</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: hBeam
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hBeam</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: wbhnd
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>wbhnd</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: sc
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sc</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: wtr
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>wtr</parameter>
            <parameter>M:Room.Tile.#ctor(System.Int32,System.Int32,Room.Tile.TerrainType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(x As Integer, y As Integer, tType As Room.Tile.TerrainType, vBeam As Boolean, hBeam As Boolean, wbhnd As Boolean, sc As Integer, wtr As Integer)
  overload: Global.Room.Tile.#ctor*
  nameWithType.vb: Room.Tile.New(Integer, Integer, Room.Tile.TerrainType, Boolean, Boolean, Boolean, Integer, Integer)
  fullName.vb: Room.Tile.New(Integer, Integer, Room.Tile.TerrainType, Boolean, Boolean, Boolean, Integer, Integer)
  name.vb: New(Integer, Integer, TerrainType, Boolean, Boolean, Boolean, Integer, Integer)
- uid: Global.Room.Tile.AnyBeam
  commentId: P:Global.Room.Tile.AnyBeam
  id: AnyBeam
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: AnyBeam
  nameWithType: Room.Tile.AnyBeam
  fullName: Room.Tile.AnyBeam
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Room.Tile.AnyBeam</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool AnyBeam { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AnyBeam As Boolean
  overload: Global.Room.Tile.AnyBeam*
- uid: Global.Room.Tile.DeepWater
  commentId: P:Global.Room.Tile.DeepWater
  id: DeepWater
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: DeepWater
  nameWithType: Room.Tile.DeepWater
  fullName: Room.Tile.DeepWater
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Room.Tile.DeepWater</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool DeepWater { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property DeepWater As Boolean
  overload: Global.Room.Tile.DeepWater*
- uid: Global.Room.Tile.WaterSurface
  commentId: P:Global.Room.Tile.WaterSurface
  id: WaterSurface
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: WaterSurface
  nameWithType: Room.Tile.WaterSurface
  fullName: Room.Tile.WaterSurface
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Room.Tile.WaterSurface</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool WaterSurface { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property WaterSurface As Boolean
  overload: Global.Room.Tile.WaterSurface*
- uid: Global.Room.Tile.AnyWater
  commentId: P:Global.Room.Tile.AnyWater
  id: AnyWater
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: AnyWater
  nameWithType: Room.Tile.AnyWater
  fullName: Room.Tile.AnyWater
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Room.Tile.AnyWater</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool AnyWater { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AnyWater As Boolean
  overload: Global.Room.Tile.AnyWater*
- uid: Global.Room.Tile.Solid
  commentId: P:Global.Room.Tile.Solid
  id: Solid
  parent: Global.Room.Tile
  langs:
  - csharp
  - vb
  name: Solid
  nameWithType: Room.Tile.Solid
  fullName: Room.Tile.Solid
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Room.Tile.Solid</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool Solid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Solid As Boolean
  overload: Global.Room.Tile.Solid*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Room.Tile.TerrainType
  commentId: T:Global.Room.Tile.TerrainType
  isExternal: true
  href: Room.html
  name: Room.Tile.TerrainType
  nameWithType: Room.Tile.TerrainType
  fullName: Room.Tile.TerrainType
  spec.csharp:
  - uid: Global.Room
    name: Room
    isExternal: true
    href: Room.html
  - name: .
  - uid: Global.Room.Tile
    name: Tile
    isExternal: true
    href: Room.Tile.html
  - name: .
  - uid: Global.Room.Tile.TerrainType
    name: TerrainType
    isExternal: true
    href: Room.Tile.TerrainType.html
  spec.vb:
  - uid: Global.Room
    name: Room
    isExternal: true
    href: Room.html
  - name: .
  - uid: Global.Room.Tile
    name: Tile
    isExternal: true
    href: Room.Tile.html
  - name: .
  - uid: Global.Room.Tile.TerrainType
    name: TerrainType
    isExternal: true
    href: Room.Tile.TerrainType.html
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.Room.Tile.IsSolid*
  commentId: Overload:Global.Room.Tile.IsSolid
  isExternal: true
  href: Global.Room.Tile.html#Room_Tile_IsSolid
  name: IsSolid
  nameWithType: Room.Tile.IsSolid
  fullName: Room.Tile.IsSolid
- uid: Global.Room.Tile.#ctor*
  commentId: Overload:Global.Room.Tile.#ctor
  isExternal: true
  href: Global.Room.Tile.html#Room_Tile__ctor_System_Int32_System_Int32_Room_Tile_TerrainType_System_Boolean_System_Boolean_System_Boolean_System_Int32_System_Int32_
  name: Tile
  nameWithType: Room.Tile.Tile
  fullName: Room.Tile.Tile
  nameWithType.vb: Room.Tile.New
  fullName.vb: Room.Tile.New
  name.vb: New
- uid: Global.Room.Tile.AnyBeam*
  commentId: Overload:Global.Room.Tile.AnyBeam
  isExternal: true
  href: Global.Room.Tile.html#Room_Tile_AnyBeam
  name: AnyBeam
  nameWithType: Room.Tile.AnyBeam
  fullName: Room.Tile.AnyBeam
- uid: Global.Room.Tile.DeepWater*
  commentId: Overload:Global.Room.Tile.DeepWater
  isExternal: true
  href: Global.Room.Tile.html#Room_Tile_DeepWater
  name: DeepWater
  nameWithType: Room.Tile.DeepWater
  fullName: Room.Tile.DeepWater
- uid: Global.Room.Tile.WaterSurface*
  commentId: Overload:Global.Room.Tile.WaterSurface
  isExternal: true
  href: Global.Room.Tile.html#Room_Tile_WaterSurface
  name: WaterSurface
  nameWithType: Room.Tile.WaterSurface
  fullName: Room.Tile.WaterSurface
- uid: Global.Room.Tile.AnyWater*
  commentId: Overload:Global.Room.Tile.AnyWater
  isExternal: true
  href: Global.Room.Tile.html#Room_Tile_AnyWater
  name: AnyWater
  nameWithType: Room.Tile.AnyWater
  fullName: Room.Tile.AnyWater
- uid: Global.Room.Tile.Solid*
  commentId: Overload:Global.Room.Tile.Solid
  isExternal: true
  href: Global.Room.Tile.html#Room_Tile_Solid
  name: Solid
  nameWithType: Room.Tile.Solid
  fullName: Room.Tile.Solid
