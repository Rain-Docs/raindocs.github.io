### YamlMime:ManagedReference
items:
- uid: Global.World
  commentId: T:Global.World
  id: World
  parent: Global
  children:
  - Global.World.#ctor(RainWorldGame,Region,System.String,System.Boolean)
  - Global.World.ActivateRoom(AbstractRoom)
  - Global.World.ActivateRoom(System.Int32)
  - Global.World.ActivateRoom(System.String)
  - Global.World.AddWorldProcess(World.WorldProcess)
  - Global.World.CheckForRegionGhost(SlugcatStats.Name,System.String)
  - Global.World.DisabledMapIndices
  - Global.World.DisabledMapRooms
  - Global.World.GetAbstractRoom(System.Int32)
  - Global.World.GetAbstractRoom(System.String)
  - Global.World.GetAbstractRoom(WorldCoordinate)
  - Global.World.GetAttractionForRoom(WorldCoordinate,AbstractCreature)
  - Global.World.GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)
  - Global.World.GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)
  - Global.World.GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)
  - Global.World.GetNode(WorldCoordinate)
  - Global.World.GetSpawner(EntityID)
  - Global.World.GetSwarmRoom(System.Int32)
  - Global.World.IsRoomInRegion(System.Int32)
  - Global.World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  - Global.World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  - Global.World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  - Global.World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  - Global.World.LogCreatures
  - Global.World.LogDebugStats
  - Global.World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)
  - Global.World.NodeInALeadingToB(AbstractRoom,AbstractRoom)
  - Global.World.NodeInALeadingToB(System.Int32,System.Int32)
  - Global.World.NumberOfRooms
  - Global.World.RegionNumber
  - Global.World.RegionNumberOfSpawner(EntityID)
  - Global.World.RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  - Global.World.RoomToWorldPos(UnityEngine.Vector2,System.Int32)
  - Global.World.SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  - Global.World.SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  - Global.World.SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  - Global.World.SpawnPupNPCs
  - Global.World.ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)
  - Global.World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)
  - Global.World.TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)
  - Global.World.VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)
  - Global.World.abstractRooms
  - Global.World.activeRooms
  - Global.World.brokenShelterIndexDueToPrecycle
  - Global.World.brokenShelters
  - Global.World.defaultNamedAttractions
  - Global.World.defaultRoomAttractions
  - Global.World.firstRoomIndex
  - Global.World.fliesWorldAI
  - Global.World.game
  - Global.World.gates
  - Global.World.lineages
  - Global.World.loadingRooms
  - Global.World.logCreatures
  - Global.World.migrationInfluence
  - Global.World.mostNodesInARoom
  - Global.World.name
  - Global.World.offScreenDen
  - Global.World.overseersWorldAI
  - Global.World.preProcessingGeneration
  - Global.World.rainCycle
  - Global.World.region
  - Global.World.regionAccessNodes
  - Global.World.regionState
  - Global.World.scavengersWorldAI
  - Global.World.seaAccessNodes
  - Global.World.sentientRotRoomsInitiated
  - Global.World.shelters
  - Global.World.sideAccessNodes
  - Global.World.singleRoomWorld
  - Global.World.skyAccessNodes
  - Global.World.spawners
  - Global.World.spinningTopPresences
  - Global.World.swarmRooms
  - Global.World.voidSpawnWorldAI
  - Global.World.worldGhost
  - Global.World.worldProcesses
  langs:
  - csharp
  - vb
  name: World
  nameWithType: World
  fullName: World
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:World</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class World
    content.vb: Public Class World
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.World.offScreenDen
  commentId: F:Global.World.offScreenDen
  id: offScreenDen
  parent: Global.World
  langs:
  - csharp
  - vb
  name: offScreenDen
  nameWithType: World.offScreenDen
  fullName: World.offScreenDen
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.offScreenDen</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom offScreenDen
    return:
      type: Global.AbstractRoom
    content.vb: Public offScreenDen As AbstractRoom
- uid: Global.World.abstractRooms
  commentId: F:Global.World.abstractRooms
  id: abstractRooms
  parent: Global.World
  langs:
  - csharp
  - vb
  name: abstractRooms
  nameWithType: World.abstractRooms
  fullName: World.abstractRooms
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.abstractRooms</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom[] abstractRooms
    return:
      type: Global.AbstractRoom[]
    content.vb: Public abstractRooms As AbstractRoom()
- uid: Global.World.sentientRotRoomsInitiated
  commentId: F:Global.World.sentientRotRoomsInitiated
  id: sentientRotRoomsInitiated
  parent: Global.World
  langs:
  - csharp
  - vb
  name: sentientRotRoomsInitiated
  nameWithType: World.sentientRotRoomsInitiated
  fullName: World.sentientRotRoomsInitiated
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.sentientRotRoomsInitiated</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<AbstractRoom> sentientRotRoomsInitiated
    return:
      type: System.Collections.Generic.List{AbstractRoom}
    content.vb: Public sentientRotRoomsInitiated As List(Of AbstractRoom)
- uid: Global.World.activeRooms
  commentId: F:Global.World.activeRooms
  id: activeRooms
  parent: Global.World
  langs:
  - csharp
  - vb
  name: activeRooms
  nameWithType: World.activeRooms
  fullName: World.activeRooms
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.activeRooms</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<Room> activeRooms
    return:
      type: System.Collections.Generic.List{Room}
    content.vb: Public activeRooms As List(Of Room)
- uid: Global.World.loadingRooms
  commentId: F:Global.World.loadingRooms
  id: loadingRooms
  parent: Global.World
  langs:
  - csharp
  - vb
  name: loadingRooms
  nameWithType: World.loadingRooms
  fullName: World.loadingRooms
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.loadingRooms</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<RoomPreparer> loadingRooms
    return:
      type: System.Collections.Generic.List{RoomPreparer}
    content.vb: Public loadingRooms As List(Of RoomPreparer)
- uid: Global.World.preProcessingGeneration
  commentId: F:Global.World.preProcessingGeneration
  id: preProcessingGeneration
  parent: Global.World
  langs:
  - csharp
  - vb
  name: preProcessingGeneration
  nameWithType: World.preProcessingGeneration
  fullName: World.preProcessingGeneration
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.preProcessingGeneration</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public readonly int preProcessingGeneration
    return:
      type: System.Int32
    content.vb: Public ReadOnly preProcessingGeneration As Integer
- uid: Global.World.swarmRooms
  commentId: F:Global.World.swarmRooms
  id: swarmRooms
  parent: Global.World
  langs:
  - csharp
  - vb
  name: swarmRooms
  nameWithType: World.swarmRooms
  fullName: World.swarmRooms
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.swarmRooms</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int[] swarmRooms
    return:
      type: System.Int32[]
    content.vb: Public swarmRooms As Integer()
- uid: Global.World.shelters
  commentId: F:Global.World.shelters
  id: shelters
  parent: Global.World
  langs:
  - csharp
  - vb
  name: shelters
  nameWithType: World.shelters
  fullName: World.shelters
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.shelters</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int[] shelters
    return:
      type: System.Int32[]
    content.vb: Public shelters As Integer()
- uid: Global.World.gates
  commentId: F:Global.World.gates
  id: gates
  parent: Global.World
  langs:
  - csharp
  - vb
  name: gates
  nameWithType: World.gates
  fullName: World.gates
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.gates</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int[] gates
    return:
      type: System.Int32[]
    content.vb: Public gates As Integer()
- uid: Global.World.brokenShelters
  commentId: F:Global.World.brokenShelters
  id: brokenShelters
  parent: Global.World
  langs:
  - csharp
  - vb
  name: brokenShelters
  nameWithType: World.brokenShelters
  fullName: World.brokenShelters
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.brokenShelters</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool[] brokenShelters
    return:
      type: System.Boolean[]
    content.vb: Public brokenShelters As Boolean()
- uid: Global.World.brokenShelterIndexDueToPrecycle
  commentId: F:Global.World.brokenShelterIndexDueToPrecycle
  id: brokenShelterIndexDueToPrecycle
  parent: Global.World
  langs:
  - csharp
  - vb
  name: brokenShelterIndexDueToPrecycle
  nameWithType: World.brokenShelterIndexDueToPrecycle
  fullName: World.brokenShelterIndexDueToPrecycle
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.brokenShelterIndexDueToPrecycle</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int brokenShelterIndexDueToPrecycle
    return:
      type: System.Int32
    content.vb: Public brokenShelterIndexDueToPrecycle As Integer
- uid: Global.World.sideAccessNodes
  commentId: F:Global.World.sideAccessNodes
  id: sideAccessNodes
  parent: Global.World
  langs:
  - csharp
  - vb
  name: sideAccessNodes
  nameWithType: World.sideAccessNodes
  fullName: World.sideAccessNodes
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.sideAccessNodes</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public WorldCoordinate[] sideAccessNodes
    return:
      type: Global.WorldCoordinate[]
    content.vb: Public sideAccessNodes As WorldCoordinate()
- uid: Global.World.skyAccessNodes
  commentId: F:Global.World.skyAccessNodes
  id: skyAccessNodes
  parent: Global.World
  langs:
  - csharp
  - vb
  name: skyAccessNodes
  nameWithType: World.skyAccessNodes
  fullName: World.skyAccessNodes
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.skyAccessNodes</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public WorldCoordinate[] skyAccessNodes
    return:
      type: Global.WorldCoordinate[]
    content.vb: Public skyAccessNodes As WorldCoordinate()
- uid: Global.World.seaAccessNodes
  commentId: F:Global.World.seaAccessNodes
  id: seaAccessNodes
  parent: Global.World
  langs:
  - csharp
  - vb
  name: seaAccessNodes
  nameWithType: World.seaAccessNodes
  fullName: World.seaAccessNodes
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.seaAccessNodes</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public WorldCoordinate[] seaAccessNodes
    return:
      type: Global.WorldCoordinate[]
    content.vb: Public seaAccessNodes As WorldCoordinate()
- uid: Global.World.regionAccessNodes
  commentId: F:Global.World.regionAccessNodes
  id: regionAccessNodes
  parent: Global.World
  langs:
  - csharp
  - vb
  name: regionAccessNodes
  nameWithType: World.regionAccessNodes
  fullName: World.regionAccessNodes
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.regionAccessNodes</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public WorldCoordinate[] regionAccessNodes
    return:
      type: Global.WorldCoordinate[]
    content.vb: Public regionAccessNodes As WorldCoordinate()
- uid: Global.World.defaultRoomAttractions
  commentId: F:Global.World.defaultRoomAttractions
  id: defaultRoomAttractions
  parent: Global.World
  langs:
  - csharp
  - vb
  name: defaultRoomAttractions
  nameWithType: World.defaultRoomAttractions
  fullName: World.defaultRoomAttractions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.defaultRoomAttractions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Dictionary<CreatureTemplate.Type, string> defaultRoomAttractions
    return:
      type: System.Collections.Generic.Dictionary{CreatureTemplate.Type,System.String}
    content.vb: Public defaultRoomAttractions As Dictionary(Of CreatureTemplate.Type, String)
- uid: Global.World.defaultNamedAttractions
  commentId: F:Global.World.defaultNamedAttractions
  id: defaultNamedAttractions
  parent: Global.World
  langs:
  - csharp
  - vb
  name: defaultNamedAttractions
  nameWithType: World.defaultNamedAttractions
  fullName: World.defaultNamedAttractions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.defaultNamedAttractions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Dictionary<string, string> defaultNamedAttractions
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public defaultNamedAttractions As Dictionary(Of String, String)
- uid: Global.World.mostNodesInARoom
  commentId: F:Global.World.mostNodesInARoom
  id: mostNodesInARoom
  parent: Global.World
  langs:
  - csharp
  - vb
  name: mostNodesInARoom
  nameWithType: World.mostNodesInARoom
  fullName: World.mostNodesInARoom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.mostNodesInARoom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int mostNodesInARoom
    return:
      type: System.Int32
    content.vb: Public mostNodesInARoom As Integer
- uid: Global.World.name
  commentId: F:Global.World.name
  id: name
  parent: Global.World
  langs:
  - csharp
  - vb
  name: name
  nameWithType: World.name
  fullName: World.name
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.name</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string name
    return:
      type: System.String
    content.vb: Public name As String
- uid: Global.World.singleRoomWorld
  commentId: F:Global.World.singleRoomWorld
  id: singleRoomWorld
  parent: Global.World
  langs:
  - csharp
  - vb
  name: singleRoomWorld
  nameWithType: World.singleRoomWorld
  fullName: World.singleRoomWorld
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.singleRoomWorld</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool singleRoomWorld
    return:
      type: System.Boolean
    content.vb: Public singleRoomWorld As Boolean
- uid: Global.World.worldProcesses
  commentId: F:Global.World.worldProcesses
  id: worldProcesses
  parent: Global.World
  langs:
  - csharp
  - vb
  name: worldProcesses
  nameWithType: World.worldProcesses
  fullName: World.worldProcesses
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.worldProcesses</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<World.WorldProcess> worldProcesses
    return:
      type: System.Collections.Generic.List{World.WorldProcess}
    content.vb: Public worldProcesses As List(Of World.WorldProcess)
- uid: Global.World.fliesWorldAI
  commentId: F:Global.World.fliesWorldAI
  id: fliesWorldAI
  parent: Global.World
  langs:
  - csharp
  - vb
  name: fliesWorldAI
  nameWithType: World.fliesWorldAI
  fullName: World.fliesWorldAI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.fliesWorldAI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FliesWorldAI fliesWorldAI
    return:
      type: Global.FliesWorldAI
    content.vb: Public fliesWorldAI As FliesWorldAI
- uid: Global.World.scavengersWorldAI
  commentId: F:Global.World.scavengersWorldAI
  id: scavengersWorldAI
  parent: Global.World
  langs:
  - csharp
  - vb
  name: scavengersWorldAI
  nameWithType: World.scavengersWorldAI
  fullName: World.scavengersWorldAI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.scavengersWorldAI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ScavengersWorldAI scavengersWorldAI
    return:
      type: Global.ScavengersWorldAI
    content.vb: Public scavengersWorldAI As ScavengersWorldAI
- uid: Global.World.overseersWorldAI
  commentId: F:Global.World.overseersWorldAI
  id: overseersWorldAI
  parent: Global.World
  langs:
  - csharp
  - vb
  name: overseersWorldAI
  nameWithType: World.overseersWorldAI
  fullName: World.overseersWorldAI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.overseersWorldAI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public OverseersWorldAI overseersWorldAI
    return:
      type: Global.OverseersWorldAI
    content.vb: Public overseersWorldAI As OverseersWorldAI
- uid: Global.World.voidSpawnWorldAI
  commentId: F:Global.World.voidSpawnWorldAI
  id: voidSpawnWorldAI
  parent: Global.World
  langs:
  - csharp
  - vb
  name: voidSpawnWorldAI
  nameWithType: World.voidSpawnWorldAI
  fullName: World.voidSpawnWorldAI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.voidSpawnWorldAI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public VoidSpawnWorldAI voidSpawnWorldAI
    return:
      type: Global.VoidSpawnWorldAI
    content.vb: Public voidSpawnWorldAI As VoidSpawnWorldAI
- uid: Global.World.rainCycle
  commentId: F:Global.World.rainCycle
  id: rainCycle
  parent: Global.World
  langs:
  - csharp
  - vb
  name: rainCycle
  nameWithType: World.rainCycle
  fullName: World.rainCycle
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.rainCycle</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public RainCycle rainCycle
    return:
      type: Global.RainCycle
    content.vb: Public rainCycle As RainCycle
- uid: Global.World.region
  commentId: F:Global.World.region
  id: region
  parent: Global.World
  langs:
  - csharp
  - vb
  name: region
  nameWithType: World.region
  fullName: World.region
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.region</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Region region
    return:
      type: Global.Region
    content.vb: Public region As Region
- uid: Global.World.spawners
  commentId: F:Global.World.spawners
  id: spawners
  parent: Global.World
  langs:
  - csharp
  - vb
  name: spawners
  nameWithType: World.spawners
  fullName: World.spawners
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.spawners</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public World.CreatureSpawner[] spawners
    return:
      type: Global.World.CreatureSpawner[]
    content.vb: Public spawners As World.CreatureSpawner()
- uid: Global.World.lineages
  commentId: F:Global.World.lineages
  id: lineages
  parent: Global.World
  langs:
  - csharp
  - vb
  name: lineages
  nameWithType: World.lineages
  fullName: World.lineages
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.lineages</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public World.Lineage[] lineages
    return:
      type: Global.World.Lineage[]
    content.vb: Public lineages As World.Lineage()
- uid: Global.World.migrationInfluence
  commentId: F:Global.World.migrationInfluence
  id: migrationInfluence
  parent: Global.World
  langs:
  - csharp
  - vb
  name: migrationInfluence
  nameWithType: World.migrationInfluence
  fullName: World.migrationInfluence
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.migrationInfluence</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public World.IMigrationInfluence migrationInfluence
    return:
      type: Global.World.IMigrationInfluence
    content.vb: Public migrationInfluence As World.IMigrationInfluence
- uid: Global.World.worldGhost
  commentId: F:Global.World.worldGhost
  id: worldGhost
  parent: Global.World
  langs:
  - csharp
  - vb
  name: worldGhost
  nameWithType: World.worldGhost
  fullName: World.worldGhost
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.worldGhost</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public GhostWorldPresence worldGhost
    return:
      type: Global.GhostWorldPresence
    content.vb: Public worldGhost As GhostWorldPresence
- uid: Global.World.logCreatures
  commentId: F:Global.World.logCreatures
  id: logCreatures
  parent: Global.World
  langs:
  - csharp
  - vb
  name: logCreatures
  nameWithType: World.logCreatures
  fullName: World.logCreatures
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.logCreatures</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool logCreatures
    return:
      type: System.Boolean
    content.vb: Public logCreatures As Boolean
- uid: Global.World.DisabledMapRooms
  commentId: F:Global.World.DisabledMapRooms
  id: DisabledMapRooms
  parent: Global.World
  langs:
  - csharp
  - vb
  name: DisabledMapRooms
  nameWithType: World.DisabledMapRooms
  fullName: World.DisabledMapRooms
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.DisabledMapRooms</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<string> DisabledMapRooms
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public DisabledMapRooms As List(Of String)
- uid: Global.World.DisabledMapIndices
  commentId: F:Global.World.DisabledMapIndices
  id: DisabledMapIndices
  parent: Global.World
  langs:
  - csharp
  - vb
  name: DisabledMapIndices
  nameWithType: World.DisabledMapIndices
  fullName: World.DisabledMapIndices
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.DisabledMapIndices</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<int> DisabledMapIndices
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public DisabledMapIndices As List(Of Integer)
- uid: Global.World.spinningTopPresences
  commentId: F:Global.World.spinningTopPresences
  id: spinningTopPresences
  parent: Global.World
  langs:
  - csharp
  - vb
  name: spinningTopPresences
  nameWithType: World.spinningTopPresences
  fullName: World.spinningTopPresences
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:World.spinningTopPresences</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<GhostWorldPresence> spinningTopPresences
    return:
      type: System.Collections.Generic.List{GhostWorldPresence}
    content.vb: Public spinningTopPresences As List(Of GhostWorldPresence)
- uid: Global.World.#ctor(RainWorldGame,Region,System.String,System.Boolean)
  commentId: M:Global.World.#ctor(RainWorldGame,Region,System.String,System.Boolean)
  id: '#ctor(RainWorldGame,Region,System.String,System.Boolean)'
  parent: Global.World
  langs:
  - csharp
  - vb
  name: World(RainWorldGame, Region, string, bool)
  nameWithType: World.World(RainWorldGame, Region, string, bool)
  fullName: World.World(RainWorldGame, Region, string, bool)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>World</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public World(RainWorldGame game, Region region, string name, bool singleRoomWorld)
    parameters:
    - id: game
      type: Global.RainWorldGame
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>game</parameter>
            <parameter>M:World.#ctor(RainWorldGame,Region,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: region
      type: Global.Region
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>region</parameter>
            <parameter>M:World.#ctor(RainWorldGame,Region,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: name
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:World.#ctor(RainWorldGame,Region,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: singleRoomWorld
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>singleRoomWorld</parameter>
            <parameter>M:World.#ctor(RainWorldGame,Region,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(game As RainWorldGame, region As Region, name As String, singleRoomWorld As Boolean)
  overload: Global.World.#ctor*
  nameWithType.vb: World.New(RainWorldGame, Region, String, Boolean)
  fullName.vb: World.New(RainWorldGame, Region, String, Boolean)
  name.vb: New(RainWorldGame, Region, String, Boolean)
- uid: Global.World.AddWorldProcess(World.WorldProcess)
  commentId: M:Global.World.AddWorldProcess(World.WorldProcess)
  id: AddWorldProcess(World.WorldProcess)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: AddWorldProcess(WorldProcess)
  nameWithType: World.AddWorldProcess(World.WorldProcess)
  fullName: World.AddWorldProcess(World.WorldProcess)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.AddWorldProcess(World.WorldProcess)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddWorldProcess(World.WorldProcess process)
    parameters:
    - id: process
      type: Global.World.WorldProcess
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>process</parameter>
            <parameter>M:World.AddWorldProcess(World.WorldProcess)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddWorldProcess(process As World.WorldProcess)
  overload: Global.World.AddWorldProcess*
- uid: Global.World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  commentId: M:Global.World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  id: LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  parent: Global.World
  langs:
  - csharp
  - vb
  name: LoadWorld(Name, List<AbstractRoom>, int[], int[], int[])
  nameWithType: World.LoadWorld(SlugcatStats.Name, List<AbstractRoom>, int[], int[], int[])
  fullName: World.LoadWorld(SlugcatStats.Name, System.Collections.Generic.List<AbstractRoom>, int[], int[], int[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Use timeline parameter function instead.")]

      public void LoadWorld(SlugcatStats.Name slugcatNumber, List<AbstractRoom> abstractRoomsList, int[] swarmRooms, int[] shelters, int[] gates)
    parameters:
    - id: slugcatNumber
      type: Global.SlugcatStats.Name
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>slugcatNumber</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: abstractRoomsList
      type: System.Collections.Generic.List{AbstractRoom}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>abstractRoomsList</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: swarmRooms
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>swarmRooms</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: shelters
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shelters</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: gates
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>gates</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    content.vb: >-
      <Obsolete("Use timeline parameter function instead.")>

      Public Sub LoadWorld(slugcatNumber As SlugcatStats.Name, abstractRoomsList As List(Of AbstractRoom), swarmRooms As Integer(), shelters As Integer(), gates As Integer())
  overload: Global.World.LoadWorld*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use timeline parameter function instead.
  nameWithType.vb: World.LoadWorld(SlugcatStats.Name, List(Of AbstractRoom), Integer(), Integer(), Integer())
  fullName.vb: World.LoadWorld(SlugcatStats.Name, System.Collections.Generic.List(Of AbstractRoom), Integer(), Integer(), Integer())
  name.vb: LoadWorld(Name, List(Of AbstractRoom), Integer(), Integer(), Integer())
- uid: Global.World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  commentId: M:Global.World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  id: LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  parent: Global.World
  langs:
  - csharp
  - vb
  name: LoadWorld(Timeline, List<AbstractRoom>, int[], int[], int[])
  nameWithType: World.LoadWorld(SlugcatStats.Timeline, List<AbstractRoom>, int[], int[], int[])
  fullName: World.LoadWorld(SlugcatStats.Timeline, System.Collections.Generic.List<AbstractRoom>, int[], int[], int[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LoadWorld(SlugcatStats.Timeline timelinePosition, List<AbstractRoom> abstractRoomsList, int[] swarmRooms, int[] shelters, int[] gates)
    parameters:
    - id: timelinePosition
      type: Global.SlugcatStats.Timeline
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timelinePosition</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: abstractRoomsList
      type: System.Collections.Generic.List{AbstractRoom}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>abstractRoomsList</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: swarmRooms
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>swarmRooms</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: shelters
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shelters</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: gates
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>gates</parameter>
            <parameter>M:World.LoadWorld(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub LoadWorld(timelinePosition As SlugcatStats.Timeline, abstractRoomsList As List(Of AbstractRoom), swarmRooms As Integer(), shelters As Integer(), gates As Integer())
  overload: Global.World.LoadWorld*
  nameWithType.vb: World.LoadWorld(SlugcatStats.Timeline, List(Of AbstractRoom), Integer(), Integer(), Integer())
  fullName.vb: World.LoadWorld(SlugcatStats.Timeline, System.Collections.Generic.List(Of AbstractRoom), Integer(), Integer(), Integer())
  name.vb: LoadWorld(Timeline, List(Of AbstractRoom), Integer(), Integer(), Integer())
- uid: Global.World.ActivateRoom(System.Int32)
  commentId: M:Global.World.ActivateRoom(System.Int32)
  id: ActivateRoom(System.Int32)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: ActivateRoom(int)
  nameWithType: World.ActivateRoom(int)
  fullName: World.ActivateRoom(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.ActivateRoom(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ActivateRoom(int room)
    parameters:
    - id: room
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:World.ActivateRoom(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ActivateRoom(room As Integer)
  overload: Global.World.ActivateRoom*
  nameWithType.vb: World.ActivateRoom(Integer)
  fullName.vb: World.ActivateRoom(Integer)
  name.vb: ActivateRoom(Integer)
- uid: Global.World.ActivateRoom(System.String)
  commentId: M:Global.World.ActivateRoom(System.String)
  id: ActivateRoom(System.String)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: ActivateRoom(string)
  nameWithType: World.ActivateRoom(string)
  fullName: World.ActivateRoom(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.ActivateRoom(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ActivateRoom(string room)
    parameters:
    - id: room
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:World.ActivateRoom(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ActivateRoom(room As String)
  overload: Global.World.ActivateRoom*
  nameWithType.vb: World.ActivateRoom(String)
  fullName.vb: World.ActivateRoom(String)
  name.vb: ActivateRoom(String)
- uid: Global.World.ActivateRoom(AbstractRoom)
  commentId: M:Global.World.ActivateRoom(AbstractRoom)
  id: ActivateRoom(AbstractRoom)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: ActivateRoom(AbstractRoom)
  nameWithType: World.ActivateRoom(AbstractRoom)
  fullName: World.ActivateRoom(AbstractRoom)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.ActivateRoom(AbstractRoom)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ActivateRoom(AbstractRoom abstractRoom)
    parameters:
    - id: abstractRoom
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>abstractRoom</parameter>
            <parameter>M:World.ActivateRoom(AbstractRoom)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ActivateRoom(abstractRoom As AbstractRoom)
  overload: Global.World.ActivateRoom*
- uid: Global.World.GetSwarmRoom(System.Int32)
  commentId: M:Global.World.GetSwarmRoom(System.Int32)
  id: GetSwarmRoom(System.Int32)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetSwarmRoom(int)
  nameWithType: World.GetSwarmRoom(int)
  fullName: World.GetSwarmRoom(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetSwarmRoom(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom GetSwarmRoom(int swarmRoomIndex)
    parameters:
    - id: swarmRoomIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>swarmRoomIndex</parameter>
            <parameter>M:World.GetSwarmRoom(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetSwarmRoom(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetSwarmRoom(swarmRoomIndex As Integer) As AbstractRoom
  overload: Global.World.GetSwarmRoom*
  nameWithType.vb: World.GetSwarmRoom(Integer)
  fullName.vb: World.GetSwarmRoom(Integer)
  name.vb: GetSwarmRoom(Integer)
- uid: Global.World.GetAbstractRoom(WorldCoordinate)
  commentId: M:Global.World.GetAbstractRoom(WorldCoordinate)
  id: GetAbstractRoom(WorldCoordinate)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetAbstractRoom(WorldCoordinate)
  nameWithType: World.GetAbstractRoom(WorldCoordinate)
  fullName: World.GetAbstractRoom(WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetAbstractRoom(WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom GetAbstractRoom(WorldCoordinate coord)
    parameters:
    - id: coord
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>coord</parameter>
            <parameter>M:World.GetAbstractRoom(WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetAbstractRoom(WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAbstractRoom(coord As WorldCoordinate) As AbstractRoom
  overload: Global.World.GetAbstractRoom*
- uid: Global.World.GetAbstractRoom(System.Int32)
  commentId: M:Global.World.GetAbstractRoom(System.Int32)
  id: GetAbstractRoom(System.Int32)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetAbstractRoom(int)
  nameWithType: World.GetAbstractRoom(int)
  fullName: World.GetAbstractRoom(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetAbstractRoom(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom GetAbstractRoom(int room)
    parameters:
    - id: room
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:World.GetAbstractRoom(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetAbstractRoom(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAbstractRoom(room As Integer) As AbstractRoom
  overload: Global.World.GetAbstractRoom*
  nameWithType.vb: World.GetAbstractRoom(Integer)
  fullName.vb: World.GetAbstractRoom(Integer)
  name.vb: GetAbstractRoom(Integer)
- uid: Global.World.GetAbstractRoom(System.String)
  commentId: M:Global.World.GetAbstractRoom(System.String)
  id: GetAbstractRoom(System.String)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetAbstractRoom(string)
  nameWithType: World.GetAbstractRoom(string)
  fullName: World.GetAbstractRoom(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetAbstractRoom(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom GetAbstractRoom(string room)
    parameters:
    - id: room
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:World.GetAbstractRoom(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetAbstractRoom(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAbstractRoom(room As String) As AbstractRoom
  overload: Global.World.GetAbstractRoom*
  nameWithType.vb: World.GetAbstractRoom(String)
  fullName.vb: World.GetAbstractRoom(String)
  name.vb: GetAbstractRoom(String)
- uid: Global.World.GetNode(WorldCoordinate)
  commentId: M:Global.World.GetNode(WorldCoordinate)
  id: GetNode(WorldCoordinate)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetNode(WorldCoordinate)
  nameWithType: World.GetNode(WorldCoordinate)
  fullName: World.GetNode(WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetNode(WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoomNode GetNode(WorldCoordinate c)
    parameters:
    - id: c
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>c</parameter>
            <parameter>M:World.GetNode(WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoomNode
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetNode(WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetNode(c As WorldCoordinate) As AbstractRoomNode
  overload: Global.World.GetNode*
- uid: Global.World.VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)
  commentId: M:Global.World.VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)
  id: VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: VisualContactBetweenWorldCoordinates(WorldCoordinate, WorldCoordinate)
  nameWithType: World.VisualContactBetweenWorldCoordinates(WorldCoordinate, WorldCoordinate)
  fullName: World.VisualContactBetweenWorldCoordinates(WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool VisualContactBetweenWorldCoordinates(WorldCoordinate a, WorldCoordinate b)
    parameters:
    - id: a
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:World.VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: b
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:World.VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.VisualContactBetweenWorldCoordinates(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function VisualContactBetweenWorldCoordinates(a As WorldCoordinate, b As WorldCoordinate) As Boolean
  overload: Global.World.VisualContactBetweenWorldCoordinates*
- uid: Global.World.TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)
  commentId: M:Global.World.TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)
  id: TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: TotalShortCutLengthBetweenTwoConnectedRooms(int, int)
  nameWithType: World.TotalShortCutLengthBetweenTwoConnectedRooms(int, int)
  fullName: World.TotalShortCutLengthBetweenTwoConnectedRooms(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int TotalShortCutLengthBetweenTwoConnectedRooms(int room1, int room2)
    parameters:
    - id: room1
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room1</parameter>
            <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: room2
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room2</parameter>
            <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function TotalShortCutLengthBetweenTwoConnectedRooms(room1 As Integer, room2 As Integer) As Integer
  overload: Global.World.TotalShortCutLengthBetweenTwoConnectedRooms*
  nameWithType.vb: World.TotalShortCutLengthBetweenTwoConnectedRooms(Integer, Integer)
  fullName.vb: World.TotalShortCutLengthBetweenTwoConnectedRooms(Integer, Integer)
  name.vb: TotalShortCutLengthBetweenTwoConnectedRooms(Integer, Integer)
- uid: Global.World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)
  commentId: M:Global.World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)
  id: TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom, AbstractRoom)
  nameWithType: World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom, AbstractRoom)
  fullName: World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom, AbstractRoom)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom room1, AbstractRoom room2)
    parameters:
    - id: room1
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room1</parameter>
            <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    - id: room2
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room2</parameter>
            <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.TotalShortCutLengthBetweenTwoConnectedRooms(AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    content.vb: Public Function TotalShortCutLengthBetweenTwoConnectedRooms(room1 As AbstractRoom, room2 As AbstractRoom) As Integer
  overload: Global.World.TotalShortCutLengthBetweenTwoConnectedRooms*
- uid: Global.World.IsRoomInRegion(System.Int32)
  commentId: M:Global.World.IsRoomInRegion(System.Int32)
  id: IsRoomInRegion(System.Int32)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: IsRoomInRegion(int)
  nameWithType: World.IsRoomInRegion(int)
  fullName: World.IsRoomInRegion(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.IsRoomInRegion(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsRoomInRegion(int room)
    parameters:
    - id: room
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:World.IsRoomInRegion(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.IsRoomInRegion(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function IsRoomInRegion(room As Integer) As Boolean
  overload: Global.World.IsRoomInRegion*
  nameWithType.vb: World.IsRoomInRegion(Integer)
  fullName.vb: World.IsRoomInRegion(Integer)
  name.vb: IsRoomInRegion(Integer)
- uid: Global.World.NodeInALeadingToB(System.Int32,System.Int32)
  commentId: M:Global.World.NodeInALeadingToB(System.Int32,System.Int32)
  id: NodeInALeadingToB(System.Int32,System.Int32)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: NodeInALeadingToB(int, int)
  nameWithType: World.NodeInALeadingToB(int, int)
  fullName: World.NodeInALeadingToB(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.NodeInALeadingToB(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public WorldCoordinate NodeInALeadingToB(int roomA, int roomB)
    parameters:
    - id: roomA
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>roomA</parameter>
            <parameter>M:World.NodeInALeadingToB(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: roomB
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>roomB</parameter>
            <parameter>M:World.NodeInALeadingToB(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.NodeInALeadingToB(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function NodeInALeadingToB(roomA As Integer, roomB As Integer) As WorldCoordinate
  overload: Global.World.NodeInALeadingToB*
  nameWithType.vb: World.NodeInALeadingToB(Integer, Integer)
  fullName.vb: World.NodeInALeadingToB(Integer, Integer)
  name.vb: NodeInALeadingToB(Integer, Integer)
- uid: Global.World.NodeInALeadingToB(AbstractRoom,AbstractRoom)
  commentId: M:Global.World.NodeInALeadingToB(AbstractRoom,AbstractRoom)
  id: NodeInALeadingToB(AbstractRoom,AbstractRoom)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: NodeInALeadingToB(AbstractRoom, AbstractRoom)
  nameWithType: World.NodeInALeadingToB(AbstractRoom, AbstractRoom)
  fullName: World.NodeInALeadingToB(AbstractRoom, AbstractRoom)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.NodeInALeadingToB(AbstractRoom,AbstractRoom)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public WorldCoordinate NodeInALeadingToB(AbstractRoom roomA, AbstractRoom roomB)
    parameters:
    - id: roomA
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>roomA</parameter>
            <parameter>M:World.NodeInALeadingToB(AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    - id: roomB
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>roomB</parameter>
            <parameter>M:World.NodeInALeadingToB(AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    return:
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.NodeInALeadingToB(AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    content.vb: Public Function NodeInALeadingToB(roomA As AbstractRoom, roomB As AbstractRoom) As WorldCoordinate
  overload: Global.World.NodeInALeadingToB*
- uid: Global.World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)
  commentId: M:Global.World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)
  id: MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: MoveQuantifiedCreatureFromAbstractRoom(Type, AbstractRoom, AbstractRoom)
  nameWithType: World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type, AbstractRoom, AbstractRoom)
  fullName: World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type, AbstractRoom, AbstractRoom)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type crit, AbstractRoom fromRoom, AbstractRoom toRoom)
    parameters:
    - id: crit
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    - id: fromRoom
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromRoom</parameter>
            <parameter>M:World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    - id: toRoom
      type: Global.AbstractRoom
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toRoom</parameter>
            <parameter>M:World.MoveQuantifiedCreatureFromAbstractRoom(CreatureTemplate.Type,AbstractRoom,AbstractRoom)</parameter>
          </include>
        </markup>
    content.vb: Public Sub MoveQuantifiedCreatureFromAbstractRoom(crit As CreatureTemplate.Type, fromRoom As AbstractRoom, toRoom As AbstractRoom)
  overload: Global.World.MoveQuantifiedCreatureFromAbstractRoom*
- uid: Global.World.SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  commentId: M:Global.World.SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  id: SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: SideHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  nameWithType: World.SideHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  fullName: World.SideHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int SideHighwayDistanceBetweenNodes(WorldCoordinate A, WorldCoordinate B)
    parameters:
    - id: A
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:World.SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: B
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:World.SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.SideHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function SideHighwayDistanceBetweenNodes(A As WorldCoordinate, B As WorldCoordinate) As Integer
  overload: Global.World.SideHighwayDistanceBetweenNodes*
- uid: Global.World.SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  commentId: M:Global.World.SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  id: SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: SkyHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  nameWithType: World.SkyHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  fullName: World.SkyHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int SkyHighwayDistanceBetweenNodes(WorldCoordinate A, WorldCoordinate B)
    parameters:
    - id: A
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:World.SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: B
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:World.SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.SkyHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function SkyHighwayDistanceBetweenNodes(A As WorldCoordinate, B As WorldCoordinate) As Integer
  overload: Global.World.SkyHighwayDistanceBetweenNodes*
- uid: Global.World.SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  commentId: M:Global.World.SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  id: SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: SeaHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  nameWithType: World.SeaHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  fullName: World.SeaHighwayDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int SeaHighwayDistanceBetweenNodes(WorldCoordinate A, WorldCoordinate B)
    parameters:
    - id: A
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:World.SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: B
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:World.SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.SeaHighwayDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function SeaHighwayDistanceBetweenNodes(A As WorldCoordinate, B As WorldCoordinate) As Integer
  overload: Global.World.SeaHighwayDistanceBetweenNodes*
- uid: Global.World.RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  commentId: M:Global.World.RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  id: RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: RegionTransportationDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  nameWithType: World.RegionTransportationDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  fullName: World.RegionTransportationDistanceBetweenNodes(WorldCoordinate, WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int RegionTransportationDistanceBetweenNodes(WorldCoordinate A, WorldCoordinate B)
    parameters:
    - id: A
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:World.RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    - id: B
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:World.RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.RegionTransportationDistanceBetweenNodes(WorldCoordinate,WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function RegionTransportationDistanceBetweenNodes(A As WorldCoordinate, B As WorldCoordinate) As Integer
  overload: Global.World.RegionTransportationDistanceBetweenNodes*
- uid: Global.World.RoomToWorldPos(UnityEngine.Vector2,System.Int32)
  commentId: M:Global.World.RoomToWorldPos(UnityEngine.Vector2,System.Int32)
  id: RoomToWorldPos(UnityEngine.Vector2,System.Int32)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: RoomToWorldPos(Vector2, int)
  nameWithType: World.RoomToWorldPos(Vector2, int)
  fullName: World.RoomToWorldPos(UnityEngine.Vector2, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.RoomToWorldPos(UnityEngine.Vector2,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 RoomToWorldPos(Vector2 inRoomPos, int roomIndex)
    parameters:
    - id: inRoomPos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inRoomPos</parameter>
            <parameter>M:World.RoomToWorldPos(UnityEngine.Vector2,System.Int32)</parameter>
          </include>
        </markup>
    - id: roomIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>roomIndex</parameter>
            <parameter>M:World.RoomToWorldPos(UnityEngine.Vector2,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.RoomToWorldPos(UnityEngine.Vector2,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function RoomToWorldPos(inRoomPos As Vector2, roomIndex As Integer) As Vector2
  overload: Global.World.RoomToWorldPos*
  nameWithType.vb: World.RoomToWorldPos(Vector2, Integer)
  fullName.vb: World.RoomToWorldPos(UnityEngine.Vector2, Integer)
  name.vb: RoomToWorldPos(Vector2, Integer)
- uid: Global.World.GetSpawner(EntityID)
  commentId: M:Global.World.GetSpawner(EntityID)
  id: GetSpawner(EntityID)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetSpawner(EntityID)
  nameWithType: World.GetSpawner(EntityID)
  fullName: World.GetSpawner(EntityID)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetSpawner(EntityID)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public World.CreatureSpawner GetSpawner(EntityID ID)
    parameters:
    - id: ID
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ID</parameter>
            <parameter>M:World.GetSpawner(EntityID)</parameter>
          </include>
        </markup>
    return:
      type: Global.World.CreatureSpawner
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetSpawner(EntityID)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetSpawner(ID As EntityID) As World.CreatureSpawner
  overload: Global.World.GetSpawner*
- uid: Global.World.RegionNumberOfSpawner(EntityID)
  commentId: M:Global.World.RegionNumberOfSpawner(EntityID)
  id: RegionNumberOfSpawner(EntityID)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: RegionNumberOfSpawner(EntityID)
  nameWithType: World.RegionNumberOfSpawner(EntityID)
  fullName: World.RegionNumberOfSpawner(EntityID)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.RegionNumberOfSpawner(EntityID)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int RegionNumberOfSpawner(EntityID ID)
    parameters:
    - id: ID
      type: Global.EntityID
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ID</parameter>
            <parameter>M:World.RegionNumberOfSpawner(EntityID)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.RegionNumberOfSpawner(EntityID)</parameter>
          </include>
        </markup>
    content.vb: Public Function RegionNumberOfSpawner(ID As EntityID) As Integer
  overload: Global.World.RegionNumberOfSpawner*
- uid: Global.World.GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)
  commentId: M:Global.World.GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)
  id: GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetAttractionValueForRoom(WorldCoordinate, AbstractCreature)
  nameWithType: World.GetAttractionValueForRoom(WorldCoordinate, AbstractCreature)
  fullName: World.GetAttractionValueForRoom(WorldCoordinate, AbstractCreature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float GetAttractionValueForRoom(WorldCoordinate coord, AbstractCreature creature)
    parameters:
    - id: coord
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>coord</parameter>
            <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)</parameter>
          </include>
        </markup>
    - id: creature
      type: Global.AbstractCreature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creature</parameter>
            <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,AbstractCreature)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAttractionValueForRoom(coord As WorldCoordinate, creature As AbstractCreature) As Single
  overload: Global.World.GetAttractionValueForRoom*
- uid: Global.World.GetAttractionForRoom(WorldCoordinate,AbstractCreature)
  commentId: M:Global.World.GetAttractionForRoom(WorldCoordinate,AbstractCreature)
  id: GetAttractionForRoom(WorldCoordinate,AbstractCreature)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetAttractionForRoom(WorldCoordinate, AbstractCreature)
  nameWithType: World.GetAttractionForRoom(WorldCoordinate, AbstractCreature)
  fullName: World.GetAttractionForRoom(WorldCoordinate, AbstractCreature)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetAttractionForRoom(WorldCoordinate,AbstractCreature)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom.CreatureRoomAttraction GetAttractionForRoom(WorldCoordinate coord, AbstractCreature creature)
    parameters:
    - id: coord
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>coord</parameter>
            <parameter>M:World.GetAttractionForRoom(WorldCoordinate,AbstractCreature)</parameter>
          </include>
        </markup>
    - id: creature
      type: Global.AbstractCreature
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creature</parameter>
            <parameter>M:World.GetAttractionForRoom(WorldCoordinate,AbstractCreature)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetAttractionForRoom(WorldCoordinate,AbstractCreature)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAttractionForRoom(coord As WorldCoordinate, creature As AbstractCreature) As AbstractRoom.CreatureRoomAttraction
  overload: Global.World.GetAttractionForRoom*
- uid: Global.World.GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)
  commentId: M:Global.World.GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)
  id: GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetAttractionValueForRoom(WorldCoordinate, Type)
  nameWithType: World.GetAttractionValueForRoom(WorldCoordinate, CreatureTemplate.Type)
  fullName: World.GetAttractionValueForRoom(WorldCoordinate, CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float GetAttractionValueForRoom(WorldCoordinate coord, CreatureTemplate.Type tp)
    parameters:
    - id: coord
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>coord</parameter>
            <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    - id: tp
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tp</parameter>
            <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetAttractionValueForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAttractionValueForRoom(coord As WorldCoordinate, tp As CreatureTemplate.Type) As Single
  overload: Global.World.GetAttractionValueForRoom*
- uid: Global.World.GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)
  commentId: M:Global.World.GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)
  id: GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: GetAttractionForRoom(WorldCoordinate, Type)
  nameWithType: World.GetAttractionForRoom(WorldCoordinate, CreatureTemplate.Type)
  fullName: World.GetAttractionForRoom(WorldCoordinate, CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractRoom.CreatureRoomAttraction GetAttractionForRoom(WorldCoordinate coord, CreatureTemplate.Type tp)
    parameters:
    - id: coord
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>coord</parameter>
            <parameter>M:World.GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    - id: tp
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tp</parameter>
            <parameter>M:World.GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    return:
      type: Global.AbstractRoom.CreatureRoomAttraction
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.GetAttractionForRoom(WorldCoordinate,CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAttractionForRoom(coord As WorldCoordinate, tp As CreatureTemplate.Type) As AbstractRoom.CreatureRoomAttraction
  overload: Global.World.GetAttractionForRoom*
- uid: Global.World.LogCreatures
  commentId: M:Global.World.LogCreatures
  id: LogCreatures
  parent: Global.World
  langs:
  - csharp
  - vb
  name: LogCreatures()
  nameWithType: World.LogCreatures()
  fullName: World.LogCreatures()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.LogCreatures</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LogCreatures()
    content.vb: Public Sub LogCreatures()
  overload: Global.World.LogCreatures*
- uid: Global.World.SpawnPupNPCs
  commentId: M:Global.World.SpawnPupNPCs
  id: SpawnPupNPCs
  parent: Global.World
  langs:
  - csharp
  - vb
  name: SpawnPupNPCs()
  nameWithType: World.SpawnPupNPCs()
  fullName: World.SpawnPupNPCs()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.SpawnPupNPCs</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int SpawnPupNPCs()
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.SpawnPupNPCs</parameter>
          </include>
        </markup>
    content.vb: Public Function SpawnPupNPCs() As Integer
  overload: Global.World.SpawnPupNPCs*
- uid: Global.World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  commentId: M:Global.World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  id: LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  parent: Global.World
  langs:
  - csharp
  - vb
  name: LoadWorldForFastTravel(Name, List<AbstractRoom>, int[], int[], int[])
  nameWithType: World.LoadWorldForFastTravel(SlugcatStats.Name, List<AbstractRoom>, int[], int[], int[])
  fullName: World.LoadWorldForFastTravel(SlugcatStats.Name, System.Collections.Generic.List<AbstractRoom>, int[], int[], int[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Use timeline parameter function instead.")]

      public void LoadWorldForFastTravel(SlugcatStats.Name slugcatNumber, List<AbstractRoom> abstractRoomsList, int[] swarmRooms, int[] shelters, int[] gates)
    parameters:
    - id: slugcatNumber
      type: Global.SlugcatStats.Name
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>slugcatNumber</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: abstractRoomsList
      type: System.Collections.Generic.List{AbstractRoom}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>abstractRoomsList</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: swarmRooms
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>swarmRooms</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: shelters
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shelters</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: gates
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>gates</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Name,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    content.vb: >-
      <Obsolete("Use timeline parameter function instead.")>

      Public Sub LoadWorldForFastTravel(slugcatNumber As SlugcatStats.Name, abstractRoomsList As List(Of AbstractRoom), swarmRooms As Integer(), shelters As Integer(), gates As Integer())
  overload: Global.World.LoadWorldForFastTravel*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use timeline parameter function instead.
  nameWithType.vb: World.LoadWorldForFastTravel(SlugcatStats.Name, List(Of AbstractRoom), Integer(), Integer(), Integer())
  fullName.vb: World.LoadWorldForFastTravel(SlugcatStats.Name, System.Collections.Generic.List(Of AbstractRoom), Integer(), Integer(), Integer())
  name.vb: LoadWorldForFastTravel(Name, List(Of AbstractRoom), Integer(), Integer(), Integer())
- uid: Global.World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  commentId: M:Global.World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  id: LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])
  parent: Global.World
  langs:
  - csharp
  - vb
  name: LoadWorldForFastTravel(Timeline, List<AbstractRoom>, int[], int[], int[])
  nameWithType: World.LoadWorldForFastTravel(SlugcatStats.Timeline, List<AbstractRoom>, int[], int[], int[])
  fullName: World.LoadWorldForFastTravel(SlugcatStats.Timeline, System.Collections.Generic.List<AbstractRoom>, int[], int[], int[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LoadWorldForFastTravel(SlugcatStats.Timeline timelinePosition, List<AbstractRoom> abstractRoomsList, int[] swarmRooms, int[] shelters, int[] gates)
    parameters:
    - id: timelinePosition
      type: Global.SlugcatStats.Timeline
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timelinePosition</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: abstractRoomsList
      type: System.Collections.Generic.List{AbstractRoom}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>abstractRoomsList</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: swarmRooms
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>swarmRooms</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: shelters
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shelters</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    - id: gates
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>gates</parameter>
            <parameter>M:World.LoadWorldForFastTravel(SlugcatStats.Timeline,System.Collections.Generic.List{AbstractRoom},System.Int32[],System.Int32[],System.Int32[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub LoadWorldForFastTravel(timelinePosition As SlugcatStats.Timeline, abstractRoomsList As List(Of AbstractRoom), swarmRooms As Integer(), shelters As Integer(), gates As Integer())
  overload: Global.World.LoadWorldForFastTravel*
  nameWithType.vb: World.LoadWorldForFastTravel(SlugcatStats.Timeline, List(Of AbstractRoom), Integer(), Integer(), Integer())
  fullName.vb: World.LoadWorldForFastTravel(SlugcatStats.Timeline, System.Collections.Generic.List(Of AbstractRoom), Integer(), Integer(), Integer())
  name.vb: LoadWorldForFastTravel(Timeline, List(Of AbstractRoom), Integer(), Integer(), Integer())
- uid: Global.World.CheckForRegionGhost(SlugcatStats.Name,System.String)
  commentId: M:Global.World.CheckForRegionGhost(SlugcatStats.Name,System.String)
  id: CheckForRegionGhost(SlugcatStats.Name,System.String)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: CheckForRegionGhost(Name, string)
  nameWithType: World.CheckForRegionGhost(SlugcatStats.Name, string)
  fullName: World.CheckForRegionGhost(SlugcatStats.Name, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.CheckForRegionGhost(SlugcatStats.Name,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool CheckForRegionGhost(SlugcatStats.Name slugcatIndex, string regionString)
    parameters:
    - id: slugcatIndex
      type: Global.SlugcatStats.Name
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>slugcatIndex</parameter>
            <parameter>M:World.CheckForRegionGhost(SlugcatStats.Name,System.String)</parameter>
          </include>
        </markup>
    - id: regionString
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>regionString</parameter>
            <parameter>M:World.CheckForRegionGhost(SlugcatStats.Name,System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:World.CheckForRegionGhost(SlugcatStats.Name,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function CheckForRegionGhost(slugcatIndex As SlugcatStats.Name, regionString As String) As Boolean
  overload: Global.World.CheckForRegionGhost*
  nameWithType.vb: World.CheckForRegionGhost(SlugcatStats.Name, String)
  fullName.vb: World.CheckForRegionGhost(SlugcatStats.Name, String)
  name.vb: CheckForRegionGhost(Name, String)
- uid: Global.World.ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)
  commentId: M:Global.World.ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)
  id: ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)
  parent: Global.World
  langs:
  - csharp
  - vb
  name: ToggleCreatureAccessFromCutscene(string, Type, bool)
  nameWithType: World.ToggleCreatureAccessFromCutscene(string, CreatureTemplate.Type, bool)
  fullName: World.ToggleCreatureAccessFromCutscene(string, CreatureTemplate.Type, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ToggleCreatureAccessFromCutscene(string roomName, CreatureTemplate.Type CritterType, bool allowAccess)
    parameters:
    - id: roomName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>roomName</parameter>
            <parameter>M:World.ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)</parameter>
          </include>
        </markup>
    - id: CritterType
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>CritterType</parameter>
            <parameter>M:World.ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)</parameter>
          </include>
        </markup>
    - id: allowAccess
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>allowAccess</parameter>
            <parameter>M:World.ToggleCreatureAccessFromCutscene(System.String,CreatureTemplate.Type,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ToggleCreatureAccessFromCutscene(roomName As String, CritterType As CreatureTemplate.Type, allowAccess As Boolean)
  overload: Global.World.ToggleCreatureAccessFromCutscene*
  nameWithType.vb: World.ToggleCreatureAccessFromCutscene(String, CreatureTemplate.Type, Boolean)
  fullName.vb: World.ToggleCreatureAccessFromCutscene(String, CreatureTemplate.Type, Boolean)
  name.vb: ToggleCreatureAccessFromCutscene(String, Type, Boolean)
- uid: Global.World.LogDebugStats
  commentId: M:Global.World.LogDebugStats
  id: LogDebugStats
  parent: Global.World
  langs:
  - csharp
  - vb
  name: LogDebugStats()
  nameWithType: World.LogDebugStats()
  fullName: World.LogDebugStats()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:World.LogDebugStats</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void LogDebugStats()
    content.vb: Public Sub LogDebugStats()
  overload: Global.World.LogDebugStats*
- uid: Global.World.game
  commentId: P:Global.World.game
  id: game
  parent: Global.World
  langs:
  - csharp
  - vb
  name: game
  nameWithType: World.game
  fullName: World.game
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:World.game</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public RainWorldGame game { get; }
    parameters: []
    return:
      type: Global.RainWorldGame
    content.vb: Public ReadOnly Property game As RainWorldGame
  overload: Global.World.game*
- uid: Global.World.NumberOfRooms
  commentId: P:Global.World.NumberOfRooms
  id: NumberOfRooms
  parent: Global.World
  langs:
  - csharp
  - vb
  name: NumberOfRooms
  nameWithType: World.NumberOfRooms
  fullName: World.NumberOfRooms
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:World.NumberOfRooms</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int NumberOfRooms { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumberOfRooms As Integer
  overload: Global.World.NumberOfRooms*
- uid: Global.World.RegionNumber
  commentId: P:Global.World.RegionNumber
  id: RegionNumber
  parent: Global.World
  langs:
  - csharp
  - vb
  name: RegionNumber
  nameWithType: World.RegionNumber
  fullName: World.RegionNumber
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:World.RegionNumber</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int RegionNumber { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property RegionNumber As Integer
  overload: Global.World.RegionNumber*
- uid: Global.World.regionState
  commentId: P:Global.World.regionState
  id: regionState
  parent: Global.World
  langs:
  - csharp
  - vb
  name: regionState
  nameWithType: World.regionState
  fullName: World.regionState
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:World.regionState</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public RegionState regionState { get; }
    parameters: []
    return:
      type: Global.RegionState
    content.vb: Public ReadOnly Property regionState As RegionState
  overload: Global.World.regionState*
- uid: Global.World.firstRoomIndex
  commentId: P:Global.World.firstRoomIndex
  id: firstRoomIndex
  parent: Global.World
  langs:
  - csharp
  - vb
  name: firstRoomIndex
  nameWithType: World.firstRoomIndex
  fullName: World.firstRoomIndex
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:World.firstRoomIndex</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int firstRoomIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property firstRoomIndex As Integer
  overload: Global.World.firstRoomIndex*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.AbstractRoom
  commentId: T:Global.AbstractRoom
  isExternal: true
  href: AbstractRoom.html
  name: AbstractRoom
  nameWithType: AbstractRoom
  fullName: AbstractRoom
- uid: Global.AbstractRoom[]
  isExternal: true
  href: AbstractRoom.html
  name: AbstractRoom[]
  nameWithType: AbstractRoom[]
  fullName: AbstractRoom[]
  nameWithType.vb: AbstractRoom()
  fullName.vb: AbstractRoom()
  name.vb: AbstractRoom()
  spec.csharp:
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: (
  - name: )
- uid: System.Collections.Generic.List{AbstractRoom}
  commentId: T:System.Collections.Generic.List{AbstractRoom}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<AbstractRoom>
  nameWithType: List<AbstractRoom>
  fullName: System.Collections.Generic.List<AbstractRoom>
  nameWithType.vb: List(Of AbstractRoom)
  fullName.vb: System.Collections.Generic.List(Of AbstractRoom)
  name.vb: List(Of AbstractRoom)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.List{Room}
  commentId: T:System.Collections.Generic.List{Room}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Room>
  nameWithType: List<Room>
  fullName: System.Collections.Generic.List<Room>
  nameWithType.vb: List(Of Room)
  fullName.vb: System.Collections.Generic.List(Of Room)
  name.vb: List(Of Room)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.Room
    name: Room
    isExternal: true
    href: Room.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Room
    name: Room
    isExternal: true
    href: Room.html
  - name: )
- uid: System.Collections.Generic.List{RoomPreparer}
  commentId: T:System.Collections.Generic.List{RoomPreparer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<RoomPreparer>
  nameWithType: List<RoomPreparer>
  fullName: System.Collections.Generic.List<RoomPreparer>
  nameWithType.vb: List(Of RoomPreparer)
  fullName.vb: System.Collections.Generic.List(Of RoomPreparer)
  name.vb: List(Of RoomPreparer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.RoomPreparer
    name: RoomPreparer
    isExternal: true
    href: RoomPreparer.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.RoomPreparer
    name: RoomPreparer
    isExternal: true
    href: RoomPreparer.html
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Boolean[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool[]
  nameWithType: bool[]
  fullName: bool[]
  nameWithType.vb: Boolean()
  fullName.vb: Boolean()
  name.vb: Boolean()
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: (
  - name: )
- uid: Global.WorldCoordinate[]
  isExternal: true
  href: WorldCoordinate.html
  name: WorldCoordinate[]
  nameWithType: WorldCoordinate[]
  fullName: WorldCoordinate[]
  nameWithType.vb: WorldCoordinate()
  fullName.vb: WorldCoordinate()
  name.vb: WorldCoordinate()
  spec.csharp:
  - uid: Global.WorldCoordinate
    name: WorldCoordinate
    isExternal: true
    href: WorldCoordinate.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.WorldCoordinate
    name: WorldCoordinate
    isExternal: true
    href: WorldCoordinate.html
  - name: (
  - name: )
- uid: System.Collections.Generic.Dictionary{CreatureTemplate.Type,System.String}
  commentId: T:System.Collections.Generic.Dictionary{CreatureTemplate.Type,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<CreatureTemplate.Type, string>
  nameWithType: Dictionary<CreatureTemplate.Type, string>
  fullName: System.Collections.Generic.Dictionary<CreatureTemplate.Type, string>
  nameWithType.vb: Dictionary(Of CreatureTemplate.Type, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of CreatureTemplate.Type, String)
  name.vb: Dictionary(Of CreatureTemplate.Type, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, string>
  nameWithType: Dictionary<string, string>
  fullName: System.Collections.Generic.Dictionary<string, string>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.List{World.WorldProcess}
  commentId: T:System.Collections.Generic.List{World.WorldProcess}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<World.WorldProcess>
  nameWithType: List<World.WorldProcess>
  fullName: System.Collections.Generic.List<World.WorldProcess>
  nameWithType.vb: List(Of World.WorldProcess)
  fullName.vb: System.Collections.Generic.List(Of World.WorldProcess)
  name.vb: List(Of World.WorldProcess)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.WorldProcess
    name: WorldProcess
    isExternal: true
    href: World.WorldProcess.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.WorldProcess
    name: WorldProcess
    isExternal: true
    href: World.WorldProcess.html
  - name: )
- uid: Global.FliesWorldAI
  commentId: T:Global.FliesWorldAI
  isExternal: true
  href: FliesWorldAI.html
  name: FliesWorldAI
  nameWithType: FliesWorldAI
  fullName: FliesWorldAI
- uid: Global.ScavengersWorldAI
  commentId: T:Global.ScavengersWorldAI
  isExternal: true
  href: ScavengersWorldAI.html
  name: ScavengersWorldAI
  nameWithType: ScavengersWorldAI
  fullName: ScavengersWorldAI
- uid: Global.OverseersWorldAI
  commentId: T:Global.OverseersWorldAI
  isExternal: true
  href: OverseersWorldAI.html
  name: OverseersWorldAI
  nameWithType: OverseersWorldAI
  fullName: OverseersWorldAI
- uid: Global.VoidSpawnWorldAI
  commentId: T:Global.VoidSpawnWorldAI
  isExternal: true
  href: VoidSpawnWorldAI.html
  name: VoidSpawnWorldAI
  nameWithType: VoidSpawnWorldAI
  fullName: VoidSpawnWorldAI
- uid: Global.RainCycle
  commentId: T:Global.RainCycle
  isExternal: true
  href: RainCycle.html
  name: RainCycle
  nameWithType: RainCycle
  fullName: RainCycle
- uid: Global.Region
  commentId: T:Global.Region
  isExternal: true
  href: Region.html
  name: Region
  nameWithType: Region
  fullName: Region
- uid: Global.World.CreatureSpawner[]
  isExternal: true
  href: World.CreatureSpawner.html
  name: CreatureSpawner[]
  nameWithType: World.CreatureSpawner[]
  fullName: World.CreatureSpawner[]
  nameWithType.vb: World.CreatureSpawner()
  fullName.vb: World.CreatureSpawner()
  name.vb: CreatureSpawner()
  spec.csharp:
  - uid: Global.World.CreatureSpawner
    name: CreatureSpawner
    isExternal: true
    href: World.CreatureSpawner.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.World.CreatureSpawner
    name: CreatureSpawner
    isExternal: true
    href: World.CreatureSpawner.html
  - name: (
  - name: )
- uid: Global.World.Lineage[]
  isExternal: true
  href: World.Lineage.html
  name: Lineage[]
  nameWithType: World.Lineage[]
  fullName: World.Lineage[]
  nameWithType.vb: World.Lineage()
  fullName.vb: World.Lineage()
  name.vb: Lineage()
  spec.csharp:
  - uid: Global.World.Lineage
    name: Lineage
    isExternal: true
    href: World.Lineage.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.World.Lineage
    name: Lineage
    isExternal: true
    href: World.Lineage.html
  - name: (
  - name: )
- uid: Global.World.IMigrationInfluence
  commentId: T:Global.World.IMigrationInfluence
  isExternal: true
  href: World.html
  name: World.IMigrationInfluence
  nameWithType: World.IMigrationInfluence
  fullName: World.IMigrationInfluence
  spec.csharp:
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.IMigrationInfluence
    name: IMigrationInfluence
    isExternal: true
    href: World.IMigrationInfluence.html
  spec.vb:
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.IMigrationInfluence
    name: IMigrationInfluence
    isExternal: true
    href: World.IMigrationInfluence.html
- uid: Global.GhostWorldPresence
  commentId: T:Global.GhostWorldPresence
  isExternal: true
  href: GhostWorldPresence.html
  name: GhostWorldPresence
  nameWithType: GhostWorldPresence
  fullName: GhostWorldPresence
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<int>
  nameWithType: List<int>
  fullName: System.Collections.Generic.List<int>
  nameWithType.vb: List(Of Integer)
  fullName.vb: System.Collections.Generic.List(Of Integer)
  name.vb: List(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.List{GhostWorldPresence}
  commentId: T:System.Collections.Generic.List{GhostWorldPresence}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<GhostWorldPresence>
  nameWithType: List<GhostWorldPresence>
  fullName: System.Collections.Generic.List<GhostWorldPresence>
  nameWithType.vb: List(Of GhostWorldPresence)
  fullName.vb: System.Collections.Generic.List(Of GhostWorldPresence)
  name.vb: List(Of GhostWorldPresence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.GhostWorldPresence
    name: GhostWorldPresence
    isExternal: true
    href: GhostWorldPresence.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.GhostWorldPresence
    name: GhostWorldPresence
    isExternal: true
    href: GhostWorldPresence.html
  - name: )
- uid: Global.World.#ctor*
  commentId: Overload:Global.World.#ctor
  isExternal: true
  href: Global.World.html#World__ctor_RainWorldGame_Region_System_String_System_Boolean_
  name: World
  nameWithType: World.World
  fullName: World.World
  nameWithType.vb: World.New
  fullName.vb: World.New
  name.vb: New
- uid: Global.RainWorldGame
  commentId: T:Global.RainWorldGame
  isExternal: true
  href: RainWorldGame.html
  name: RainWorldGame
  nameWithType: RainWorldGame
  fullName: RainWorldGame
- uid: Global.World.AddWorldProcess*
  commentId: Overload:Global.World.AddWorldProcess
  isExternal: true
  href: Global.World.html#World_AddWorldProcess_World_WorldProcess_
  name: AddWorldProcess
  nameWithType: World.AddWorldProcess
  fullName: World.AddWorldProcess
- uid: Global.World.WorldProcess
  commentId: T:Global.World.WorldProcess
  isExternal: true
  href: World.html
  name: World.WorldProcess
  nameWithType: World.WorldProcess
  fullName: World.WorldProcess
  spec.csharp:
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.WorldProcess
    name: WorldProcess
    isExternal: true
    href: World.WorldProcess.html
  spec.vb:
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.WorldProcess
    name: WorldProcess
    isExternal: true
    href: World.WorldProcess.html
- uid: Global.World.LoadWorld*
  commentId: Overload:Global.World.LoadWorld
  isExternal: true
  href: Global.World.html#World_LoadWorld_SlugcatStats_Name_System_Collections_Generic_List_AbstractRoom__System_Int32___System_Int32___System_Int32___
  name: LoadWorld
  nameWithType: World.LoadWorld
  fullName: World.LoadWorld
- uid: Global.SlugcatStats.Name
  commentId: T:Global.SlugcatStats.Name
  isExternal: true
  href: SlugcatStats.html
  name: SlugcatStats.Name
  nameWithType: SlugcatStats.Name
  fullName: SlugcatStats.Name
  spec.csharp:
  - uid: Global.SlugcatStats
    name: SlugcatStats
    isExternal: true
    href: SlugcatStats.html
  - name: .
  - uid: Global.SlugcatStats.Name
    name: Name
    isExternal: true
    href: SlugcatStats.Name.html
  spec.vb:
  - uid: Global.SlugcatStats
    name: SlugcatStats
    isExternal: true
    href: SlugcatStats.html
  - name: .
  - uid: Global.SlugcatStats.Name
    name: Name
    isExternal: true
    href: SlugcatStats.Name.html
- uid: Global.SlugcatStats.Timeline
  commentId: T:Global.SlugcatStats.Timeline
  isExternal: true
  href: SlugcatStats.html
  name: SlugcatStats.Timeline
  nameWithType: SlugcatStats.Timeline
  fullName: SlugcatStats.Timeline
  spec.csharp:
  - uid: Global.SlugcatStats
    name: SlugcatStats
    isExternal: true
    href: SlugcatStats.html
  - name: .
  - uid: Global.SlugcatStats.Timeline
    name: Timeline
    isExternal: true
    href: SlugcatStats.Timeline.html
  spec.vb:
  - uid: Global.SlugcatStats
    name: SlugcatStats
    isExternal: true
    href: SlugcatStats.html
  - name: .
  - uid: Global.SlugcatStats.Timeline
    name: Timeline
    isExternal: true
    href: SlugcatStats.Timeline.html
- uid: Global.World.ActivateRoom*
  commentId: Overload:Global.World.ActivateRoom
  isExternal: true
  href: Global.World.html#World_ActivateRoom_System_Int32_
  name: ActivateRoom
  nameWithType: World.ActivateRoom
  fullName: World.ActivateRoom
- uid: Global.World.GetSwarmRoom*
  commentId: Overload:Global.World.GetSwarmRoom
  isExternal: true
  href: Global.World.html#World_GetSwarmRoom_System_Int32_
  name: GetSwarmRoom
  nameWithType: World.GetSwarmRoom
  fullName: World.GetSwarmRoom
- uid: Global.World.GetAbstractRoom*
  commentId: Overload:Global.World.GetAbstractRoom
  isExternal: true
  href: Global.World.html#World_GetAbstractRoom_WorldCoordinate_
  name: GetAbstractRoom
  nameWithType: World.GetAbstractRoom
  fullName: World.GetAbstractRoom
- uid: Global.WorldCoordinate
  commentId: T:Global.WorldCoordinate
  isExternal: true
  href: WorldCoordinate.html
  name: WorldCoordinate
  nameWithType: WorldCoordinate
  fullName: WorldCoordinate
- uid: Global.World.GetNode*
  commentId: Overload:Global.World.GetNode
  isExternal: true
  href: Global.World.html#World_GetNode_WorldCoordinate_
  name: GetNode
  nameWithType: World.GetNode
  fullName: World.GetNode
- uid: Global.AbstractRoomNode
  commentId: T:Global.AbstractRoomNode
  isExternal: true
  href: AbstractRoomNode.html
  name: AbstractRoomNode
  nameWithType: AbstractRoomNode
  fullName: AbstractRoomNode
- uid: Global.World.VisualContactBetweenWorldCoordinates*
  commentId: Overload:Global.World.VisualContactBetweenWorldCoordinates
  isExternal: true
  href: Global.World.html#World_VisualContactBetweenWorldCoordinates_WorldCoordinate_WorldCoordinate_
  name: VisualContactBetweenWorldCoordinates
  nameWithType: World.VisualContactBetweenWorldCoordinates
  fullName: World.VisualContactBetweenWorldCoordinates
- uid: Global.World.TotalShortCutLengthBetweenTwoConnectedRooms*
  commentId: Overload:Global.World.TotalShortCutLengthBetweenTwoConnectedRooms
  isExternal: true
  href: Global.World.html#World_TotalShortCutLengthBetweenTwoConnectedRooms_System_Int32_System_Int32_
  name: TotalShortCutLengthBetweenTwoConnectedRooms
  nameWithType: World.TotalShortCutLengthBetweenTwoConnectedRooms
  fullName: World.TotalShortCutLengthBetweenTwoConnectedRooms
- uid: Global.World.IsRoomInRegion*
  commentId: Overload:Global.World.IsRoomInRegion
  isExternal: true
  href: Global.World.html#World_IsRoomInRegion_System_Int32_
  name: IsRoomInRegion
  nameWithType: World.IsRoomInRegion
  fullName: World.IsRoomInRegion
- uid: Global.World.NodeInALeadingToB*
  commentId: Overload:Global.World.NodeInALeadingToB
  isExternal: true
  href: Global.World.html#World_NodeInALeadingToB_System_Int32_System_Int32_
  name: NodeInALeadingToB
  nameWithType: World.NodeInALeadingToB
  fullName: World.NodeInALeadingToB
- uid: Global.World.MoveQuantifiedCreatureFromAbstractRoom*
  commentId: Overload:Global.World.MoveQuantifiedCreatureFromAbstractRoom
  isExternal: true
  href: Global.World.html#World_MoveQuantifiedCreatureFromAbstractRoom_CreatureTemplate_Type_AbstractRoom_AbstractRoom_
  name: MoveQuantifiedCreatureFromAbstractRoom
  nameWithType: World.MoveQuantifiedCreatureFromAbstractRoom
  fullName: World.MoveQuantifiedCreatureFromAbstractRoom
- uid: Global.CreatureTemplate.Type
  commentId: T:Global.CreatureTemplate.Type
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate.Type
  nameWithType: CreatureTemplate.Type
  fullName: CreatureTemplate.Type
  spec.csharp:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  spec.vb:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
- uid: Global.World.SideHighwayDistanceBetweenNodes*
  commentId: Overload:Global.World.SideHighwayDistanceBetweenNodes
  isExternal: true
  href: Global.World.html#World_SideHighwayDistanceBetweenNodes_WorldCoordinate_WorldCoordinate_
  name: SideHighwayDistanceBetweenNodes
  nameWithType: World.SideHighwayDistanceBetweenNodes
  fullName: World.SideHighwayDistanceBetweenNodes
- uid: Global.World.SkyHighwayDistanceBetweenNodes*
  commentId: Overload:Global.World.SkyHighwayDistanceBetweenNodes
  isExternal: true
  href: Global.World.html#World_SkyHighwayDistanceBetweenNodes_WorldCoordinate_WorldCoordinate_
  name: SkyHighwayDistanceBetweenNodes
  nameWithType: World.SkyHighwayDistanceBetweenNodes
  fullName: World.SkyHighwayDistanceBetweenNodes
- uid: Global.World.SeaHighwayDistanceBetweenNodes*
  commentId: Overload:Global.World.SeaHighwayDistanceBetweenNodes
  isExternal: true
  href: Global.World.html#World_SeaHighwayDistanceBetweenNodes_WorldCoordinate_WorldCoordinate_
  name: SeaHighwayDistanceBetweenNodes
  nameWithType: World.SeaHighwayDistanceBetweenNodes
  fullName: World.SeaHighwayDistanceBetweenNodes
- uid: Global.World.RegionTransportationDistanceBetweenNodes*
  commentId: Overload:Global.World.RegionTransportationDistanceBetweenNodes
  isExternal: true
  href: Global.World.html#World_RegionTransportationDistanceBetweenNodes_WorldCoordinate_WorldCoordinate_
  name: RegionTransportationDistanceBetweenNodes
  nameWithType: World.RegionTransportationDistanceBetweenNodes
  fullName: World.RegionTransportationDistanceBetweenNodes
- uid: Global.World.RoomToWorldPos*
  commentId: Overload:Global.World.RoomToWorldPos
  isExternal: true
  href: Global.World.html#World_RoomToWorldPos_UnityEngine_Vector2_System_Int32_
  name: RoomToWorldPos
  nameWithType: World.RoomToWorldPos
  fullName: World.RoomToWorldPos
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.World.GetSpawner*
  commentId: Overload:Global.World.GetSpawner
  isExternal: true
  href: Global.World.html#World_GetSpawner_EntityID_
  name: GetSpawner
  nameWithType: World.GetSpawner
  fullName: World.GetSpawner
- uid: Global.EntityID
  commentId: T:Global.EntityID
  isExternal: true
  href: EntityID.html
  name: EntityID
  nameWithType: EntityID
  fullName: EntityID
- uid: Global.World.CreatureSpawner
  commentId: T:Global.World.CreatureSpawner
  isExternal: true
  href: World.html
  name: World.CreatureSpawner
  nameWithType: World.CreatureSpawner
  fullName: World.CreatureSpawner
  spec.csharp:
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.CreatureSpawner
    name: CreatureSpawner
    isExternal: true
    href: World.CreatureSpawner.html
  spec.vb:
  - uid: Global.World
    name: World
    isExternal: true
    href: World.html
  - name: .
  - uid: Global.World.CreatureSpawner
    name: CreatureSpawner
    isExternal: true
    href: World.CreatureSpawner.html
- uid: Global.World.RegionNumberOfSpawner*
  commentId: Overload:Global.World.RegionNumberOfSpawner
  isExternal: true
  href: Global.World.html#World_RegionNumberOfSpawner_EntityID_
  name: RegionNumberOfSpawner
  nameWithType: World.RegionNumberOfSpawner
  fullName: World.RegionNumberOfSpawner
- uid: Global.World.GetAttractionValueForRoom*
  commentId: Overload:Global.World.GetAttractionValueForRoom
  isExternal: true
  href: Global.World.html#World_GetAttractionValueForRoom_WorldCoordinate_AbstractCreature_
  name: GetAttractionValueForRoom
  nameWithType: World.GetAttractionValueForRoom
  fullName: World.GetAttractionValueForRoom
- uid: Global.AbstractCreature
  commentId: T:Global.AbstractCreature
  isExternal: true
  href: AbstractCreature.html
  name: AbstractCreature
  nameWithType: AbstractCreature
  fullName: AbstractCreature
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.World.GetAttractionForRoom*
  commentId: Overload:Global.World.GetAttractionForRoom
  isExternal: true
  href: Global.World.html#World_GetAttractionForRoom_WorldCoordinate_AbstractCreature_
  name: GetAttractionForRoom
  nameWithType: World.GetAttractionForRoom
  fullName: World.GetAttractionForRoom
- uid: Global.AbstractRoom.CreatureRoomAttraction
  commentId: T:Global.AbstractRoom.CreatureRoomAttraction
  isExternal: true
  href: AbstractRoom.html
  name: AbstractRoom.CreatureRoomAttraction
  nameWithType: AbstractRoom.CreatureRoomAttraction
  fullName: AbstractRoom.CreatureRoomAttraction
  spec.csharp:
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: .
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
  spec.vb:
  - uid: Global.AbstractRoom
    name: AbstractRoom
    isExternal: true
    href: AbstractRoom.html
  - name: .
  - uid: Global.AbstractRoom.CreatureRoomAttraction
    name: CreatureRoomAttraction
    isExternal: true
    href: AbstractRoom.CreatureRoomAttraction.html
- uid: Global.World.LogCreatures*
  commentId: Overload:Global.World.LogCreatures
  isExternal: true
  href: Global.World.html#World_LogCreatures
  name: LogCreatures
  nameWithType: World.LogCreatures
  fullName: World.LogCreatures
- uid: Global.World.SpawnPupNPCs*
  commentId: Overload:Global.World.SpawnPupNPCs
  isExternal: true
  href: Global.World.html#World_SpawnPupNPCs
  name: SpawnPupNPCs
  nameWithType: World.SpawnPupNPCs
  fullName: World.SpawnPupNPCs
- uid: Global.World.LoadWorldForFastTravel*
  commentId: Overload:Global.World.LoadWorldForFastTravel
  isExternal: true
  href: Global.World.html#World_LoadWorldForFastTravel_SlugcatStats_Name_System_Collections_Generic_List_AbstractRoom__System_Int32___System_Int32___System_Int32___
  name: LoadWorldForFastTravel
  nameWithType: World.LoadWorldForFastTravel
  fullName: World.LoadWorldForFastTravel
- uid: Global.World.CheckForRegionGhost*
  commentId: Overload:Global.World.CheckForRegionGhost
  isExternal: true
  href: Global.World.html#World_CheckForRegionGhost_SlugcatStats_Name_System_String_
  name: CheckForRegionGhost
  nameWithType: World.CheckForRegionGhost
  fullName: World.CheckForRegionGhost
- uid: Global.World.ToggleCreatureAccessFromCutscene*
  commentId: Overload:Global.World.ToggleCreatureAccessFromCutscene
  isExternal: true
  href: Global.World.html#World_ToggleCreatureAccessFromCutscene_System_String_CreatureTemplate_Type_System_Boolean_
  name: ToggleCreatureAccessFromCutscene
  nameWithType: World.ToggleCreatureAccessFromCutscene
  fullName: World.ToggleCreatureAccessFromCutscene
- uid: Global.World.LogDebugStats*
  commentId: Overload:Global.World.LogDebugStats
  isExternal: true
  href: Global.World.html#World_LogDebugStats
  name: LogDebugStats
  nameWithType: World.LogDebugStats
  fullName: World.LogDebugStats
- uid: Global.World.game*
  commentId: Overload:Global.World.game
  isExternal: true
  href: Global.World.html#World_game
  name: game
  nameWithType: World.game
  fullName: World.game
- uid: Global.World.NumberOfRooms*
  commentId: Overload:Global.World.NumberOfRooms
  isExternal: true
  href: Global.World.html#World_NumberOfRooms
  name: NumberOfRooms
  nameWithType: World.NumberOfRooms
  fullName: World.NumberOfRooms
- uid: Global.World.RegionNumber*
  commentId: Overload:Global.World.RegionNumber
  isExternal: true
  href: Global.World.html#World_RegionNumber
  name: RegionNumber
  nameWithType: World.RegionNumber
  fullName: World.RegionNumber
- uid: Global.World.regionState*
  commentId: Overload:Global.World.regionState
  isExternal: true
  href: Global.World.html#World_regionState
  name: regionState
  nameWithType: World.regionState
  fullName: World.regionState
- uid: Global.RegionState
  commentId: T:Global.RegionState
  isExternal: true
  href: RegionState.html
  name: RegionState
  nameWithType: RegionState
  fullName: RegionState
- uid: Global.World.firstRoomIndex*
  commentId: Overload:Global.World.firstRoomIndex
  isExternal: true
  href: Global.World.html#World_firstRoomIndex
  name: firstRoomIndex
  nameWithType: World.firstRoomIndex
  fullName: World.firstRoomIndex
