### YamlMime:ManagedReference
items:
- uid: Global.RXEase
  commentId: T:Global.RXEase
  id: RXEase
  parent: Global
  children:
  - Global.RXEase.BackIn(System.Single)
  - Global.RXEase.BackIn(System.Single,System.Single)
  - Global.RXEase.BackInOut(System.Single)
  - Global.RXEase.BackInOut(System.Single,System.Single)
  - Global.RXEase.BackOut(System.Single)
  - Global.RXEase.BackOut(System.Single,System.Single)
  - Global.RXEase.ExpoIn(System.Single)
  - Global.RXEase.ExpoInOut(System.Single)
  - Global.RXEase.ExpoOut(System.Single)
  - Global.RXEase.QuadIn(System.Single)
  - Global.RXEase.QuadInOut(System.Single)
  - Global.RXEase.QuadOut(System.Single)
  - Global.RXEase.SinInOut(System.Single)
  langs:
  - csharp
  - vb
  name: RXEase
  nameWithType: RXEase
  fullName: RXEase
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:RXEase</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static class RXEase
    content.vb: Public Module RXEase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.RXEase.QuadOut(System.Single)
  commentId: M:Global.RXEase.QuadOut(System.Single)
  id: QuadOut(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: QuadOut(float)
  nameWithType: RXEase.QuadOut(float)
  fullName: RXEase.QuadOut(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.QuadOut(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float QuadOut(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.QuadOut(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.QuadOut(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function QuadOut(input As Single) As Single
  overload: Global.RXEase.QuadOut*
  nameWithType.vb: RXEase.QuadOut(Single)
  fullName.vb: RXEase.QuadOut(Single)
  name.vb: QuadOut(Single)
- uid: Global.RXEase.QuadIn(System.Single)
  commentId: M:Global.RXEase.QuadIn(System.Single)
  id: QuadIn(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: QuadIn(float)
  nameWithType: RXEase.QuadIn(float)
  fullName: RXEase.QuadIn(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.QuadIn(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float QuadIn(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.QuadIn(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.QuadIn(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function QuadIn(input As Single) As Single
  overload: Global.RXEase.QuadIn*
  nameWithType.vb: RXEase.QuadIn(Single)
  fullName.vb: RXEase.QuadIn(Single)
  name.vb: QuadIn(Single)
- uid: Global.RXEase.QuadInOut(System.Single)
  commentId: M:Global.RXEase.QuadInOut(System.Single)
  id: QuadInOut(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: QuadInOut(float)
  nameWithType: RXEase.QuadInOut(float)
  fullName: RXEase.QuadInOut(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.QuadInOut(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float QuadInOut(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.QuadInOut(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.QuadInOut(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function QuadInOut(input As Single) As Single
  overload: Global.RXEase.QuadInOut*
  nameWithType.vb: RXEase.QuadInOut(Single)
  fullName.vb: RXEase.QuadInOut(Single)
  name.vb: QuadInOut(Single)
- uid: Global.RXEase.ExpoOut(System.Single)
  commentId: M:Global.RXEase.ExpoOut(System.Single)
  id: ExpoOut(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: ExpoOut(float)
  nameWithType: RXEase.ExpoOut(float)
  fullName: RXEase.ExpoOut(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.ExpoOut(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float ExpoOut(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.ExpoOut(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.ExpoOut(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ExpoOut(input As Single) As Single
  overload: Global.RXEase.ExpoOut*
  nameWithType.vb: RXEase.ExpoOut(Single)
  fullName.vb: RXEase.ExpoOut(Single)
  name.vb: ExpoOut(Single)
- uid: Global.RXEase.ExpoIn(System.Single)
  commentId: M:Global.RXEase.ExpoIn(System.Single)
  id: ExpoIn(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: ExpoIn(float)
  nameWithType: RXEase.ExpoIn(float)
  fullName: RXEase.ExpoIn(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.ExpoIn(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float ExpoIn(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.ExpoIn(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.ExpoIn(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ExpoIn(input As Single) As Single
  overload: Global.RXEase.ExpoIn*
  nameWithType.vb: RXEase.ExpoIn(Single)
  fullName.vb: RXEase.ExpoIn(Single)
  name.vb: ExpoIn(Single)
- uid: Global.RXEase.ExpoInOut(System.Single)
  commentId: M:Global.RXEase.ExpoInOut(System.Single)
  id: ExpoInOut(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: ExpoInOut(float)
  nameWithType: RXEase.ExpoInOut(float)
  fullName: RXEase.ExpoInOut(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.ExpoInOut(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float ExpoInOut(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.ExpoInOut(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.ExpoInOut(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function ExpoInOut(input As Single) As Single
  overload: Global.RXEase.ExpoInOut*
  nameWithType.vb: RXEase.ExpoInOut(Single)
  fullName.vb: RXEase.ExpoInOut(Single)
  name.vb: ExpoInOut(Single)
- uid: Global.RXEase.BackOut(System.Single)
  commentId: M:Global.RXEase.BackOut(System.Single)
  id: BackOut(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: BackOut(float)
  nameWithType: RXEase.BackOut(float)
  fullName: RXEase.BackOut(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.BackOut(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BackOut(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.BackOut(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.BackOut(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BackOut(input As Single) As Single
  overload: Global.RXEase.BackOut*
  nameWithType.vb: RXEase.BackOut(Single)
  fullName.vb: RXEase.BackOut(Single)
  name.vb: BackOut(Single)
- uid: Global.RXEase.BackOut(System.Single,System.Single)
  commentId: M:Global.RXEase.BackOut(System.Single,System.Single)
  id: BackOut(System.Single,System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: BackOut(float, float)
  nameWithType: RXEase.BackOut(float, float)
  fullName: RXEase.BackOut(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.BackOut(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BackOut(float input, float backAmount)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.BackOut(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: backAmount
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backAmount</parameter>
            <parameter>M:RXEase.BackOut(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.BackOut(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BackOut(input As Single, backAmount As Single) As Single
  overload: Global.RXEase.BackOut*
  nameWithType.vb: RXEase.BackOut(Single, Single)
  fullName.vb: RXEase.BackOut(Single, Single)
  name.vb: BackOut(Single, Single)
- uid: Global.RXEase.BackIn(System.Single)
  commentId: M:Global.RXEase.BackIn(System.Single)
  id: BackIn(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: BackIn(float)
  nameWithType: RXEase.BackIn(float)
  fullName: RXEase.BackIn(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.BackIn(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BackIn(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.BackIn(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.BackIn(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BackIn(input As Single) As Single
  overload: Global.RXEase.BackIn*
  nameWithType.vb: RXEase.BackIn(Single)
  fullName.vb: RXEase.BackIn(Single)
  name.vb: BackIn(Single)
- uid: Global.RXEase.BackIn(System.Single,System.Single)
  commentId: M:Global.RXEase.BackIn(System.Single,System.Single)
  id: BackIn(System.Single,System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: BackIn(float, float)
  nameWithType: RXEase.BackIn(float, float)
  fullName: RXEase.BackIn(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.BackIn(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BackIn(float input, float backAmount)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.BackIn(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: backAmount
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backAmount</parameter>
            <parameter>M:RXEase.BackIn(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.BackIn(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BackIn(input As Single, backAmount As Single) As Single
  overload: Global.RXEase.BackIn*
  nameWithType.vb: RXEase.BackIn(Single, Single)
  fullName.vb: RXEase.BackIn(Single, Single)
  name.vb: BackIn(Single, Single)
- uid: Global.RXEase.BackInOut(System.Single)
  commentId: M:Global.RXEase.BackInOut(System.Single)
  id: BackInOut(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: BackInOut(float)
  nameWithType: RXEase.BackInOut(float)
  fullName: RXEase.BackInOut(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.BackInOut(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BackInOut(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.BackInOut(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.BackInOut(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BackInOut(input As Single) As Single
  overload: Global.RXEase.BackInOut*
  nameWithType.vb: RXEase.BackInOut(Single)
  fullName.vb: RXEase.BackInOut(Single)
  name.vb: BackInOut(Single)
- uid: Global.RXEase.BackInOut(System.Single,System.Single)
  commentId: M:Global.RXEase.BackInOut(System.Single,System.Single)
  id: BackInOut(System.Single,System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: BackInOut(float, float)
  nameWithType: RXEase.BackInOut(float, float)
  fullName: RXEase.BackInOut(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.BackInOut(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float BackInOut(float input, float backAmount)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.BackInOut(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: backAmount
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backAmount</parameter>
            <parameter>M:RXEase.BackInOut(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.BackInOut(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function BackInOut(input As Single, backAmount As Single) As Single
  overload: Global.RXEase.BackInOut*
  nameWithType.vb: RXEase.BackInOut(Single, Single)
  fullName.vb: RXEase.BackInOut(Single, Single)
  name.vb: BackInOut(Single, Single)
- uid: Global.RXEase.SinInOut(System.Single)
  commentId: M:Global.RXEase.SinInOut(System.Single)
  id: SinInOut(System.Single)
  parent: Global.RXEase
  langs:
  - csharp
  - vb
  name: SinInOut(float)
  nameWithType: RXEase.SinInOut(float)
  fullName: RXEase.SinInOut(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXEase.SinInOut(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float SinInOut(float input)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXEase.SinInOut(System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXEase.SinInOut(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function SinInOut(input As Single) As Single
  overload: Global.RXEase.SinInOut*
  nameWithType.vb: RXEase.SinInOut(Single)
  fullName.vb: RXEase.SinInOut(Single)
  name.vb: SinInOut(Single)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.RXEase.QuadOut*
  commentId: Overload:Global.RXEase.QuadOut
  isExternal: true
  href: Global.RXEase.html#RXEase_QuadOut_System_Single_
  name: QuadOut
  nameWithType: RXEase.QuadOut
  fullName: RXEase.QuadOut
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.RXEase.QuadIn*
  commentId: Overload:Global.RXEase.QuadIn
  isExternal: true
  href: Global.RXEase.html#RXEase_QuadIn_System_Single_
  name: QuadIn
  nameWithType: RXEase.QuadIn
  fullName: RXEase.QuadIn
- uid: Global.RXEase.QuadInOut*
  commentId: Overload:Global.RXEase.QuadInOut
  isExternal: true
  href: Global.RXEase.html#RXEase_QuadInOut_System_Single_
  name: QuadInOut
  nameWithType: RXEase.QuadInOut
  fullName: RXEase.QuadInOut
- uid: Global.RXEase.ExpoOut*
  commentId: Overload:Global.RXEase.ExpoOut
  isExternal: true
  href: Global.RXEase.html#RXEase_ExpoOut_System_Single_
  name: ExpoOut
  nameWithType: RXEase.ExpoOut
  fullName: RXEase.ExpoOut
- uid: Global.RXEase.ExpoIn*
  commentId: Overload:Global.RXEase.ExpoIn
  isExternal: true
  href: Global.RXEase.html#RXEase_ExpoIn_System_Single_
  name: ExpoIn
  nameWithType: RXEase.ExpoIn
  fullName: RXEase.ExpoIn
- uid: Global.RXEase.ExpoInOut*
  commentId: Overload:Global.RXEase.ExpoInOut
  isExternal: true
  href: Global.RXEase.html#RXEase_ExpoInOut_System_Single_
  name: ExpoInOut
  nameWithType: RXEase.ExpoInOut
  fullName: RXEase.ExpoInOut
- uid: Global.RXEase.BackOut*
  commentId: Overload:Global.RXEase.BackOut
  isExternal: true
  href: Global.RXEase.html#RXEase_BackOut_System_Single_
  name: BackOut
  nameWithType: RXEase.BackOut
  fullName: RXEase.BackOut
- uid: Global.RXEase.BackIn*
  commentId: Overload:Global.RXEase.BackIn
  isExternal: true
  href: Global.RXEase.html#RXEase_BackIn_System_Single_
  name: BackIn
  nameWithType: RXEase.BackIn
  fullName: RXEase.BackIn
- uid: Global.RXEase.BackInOut*
  commentId: Overload:Global.RXEase.BackInOut
  isExternal: true
  href: Global.RXEase.html#RXEase_BackInOut_System_Single_
  name: BackInOut
  nameWithType: RXEase.BackInOut
  fullName: RXEase.BackInOut
- uid: Global.RXEase.SinInOut*
  commentId: Overload:Global.RXEase.SinInOut
  isExternal: true
  href: Global.RXEase.html#RXEase_SinInOut_System_Single_
  name: SinInOut
  nameWithType: RXEase.SinInOut
  fullName: RXEase.SinInOut
