### YamlMime:ManagedReference
items:
- uid: Global.RoomSettings.RoomEffect.Type
  commentId: T:Global.RoomSettings.RoomEffect.Type
  id: RoomSettings.RoomEffect.Type
  parent: Global
  children:
  - Global.RoomSettings.RoomEffect.Type.#ctor(System.String,System.Boolean)
  - Global.RoomSettings.RoomEffect.Type.AboveCloudsView
  - Global.RoomSettings.RoomEffect.Type.Ant
  - Global.RoomSettings.RoomEffect.Type.Beetle
  - Global.RoomSettings.RoomEffect.Type.BkgOnlyLightning
  - Global.RoomSettings.RoomEffect.Type.Bloom
  - Global.RoomSettings.RoomEffect.Type.BorderPushBack
  - Global.RoomSettings.RoomEffect.Type.Brightness
  - Global.RoomSettings.RoomEffect.Type.BrokenZeroG
  - Global.RoomSettings.RoomEffect.Type.BulletRain
  - Global.RoomSettings.RoomEffect.Type.BulletRainFlux
  - Global.RoomSettings.RoomEffect.Type.Coldness
  - Global.RoomSettings.RoomEffect.Type.Contrast
  - Global.RoomSettings.RoomEffect.Type.CorruptionSpores
  - Global.RoomSettings.RoomEffect.Type.DarkenLights
  - Global.RoomSettings.RoomEffect.Type.Darkness
  - Global.RoomSettings.RoomEffect.Type.DayNight
  - Global.RoomSettings.RoomEffect.Type.Desaturation
  - Global.RoomSettings.RoomEffect.Type.DirtyWater
  - Global.RoomSettings.RoomEffect.Type.Dustpuffs
  - Global.RoomSettings.RoomEffect.Type.ElectricDeath
  - Global.RoomSettings.RoomEffect.Type.ExtraLoudThunder
  - Global.RoomSettings.RoomEffect.Type.FairyParticles
  - Global.RoomSettings.RoomEffect.Type.FakeGate
  - Global.RoomSettings.RoomEffect.Type.FastFloodDrain
  - Global.RoomSettings.RoomEffect.Type.FastFloodPullDown
  - Global.RoomSettings.RoomEffect.Type.FireFlies
  - Global.RoomSettings.RoomEffect.Type.Flies
  - Global.RoomSettings.RoomEffect.Type.Fog
  - Global.RoomSettings.RoomEffect.Type.GeyserFrequency
  - Global.RoomSettings.RoomEffect.Type.GreenSparks
  - Global.RoomSettings.RoomEffect.Type.HeatWave
  - Global.RoomSettings.RoomEffect.Type.HeavyRain
  - Global.RoomSettings.RoomEffect.Type.HeavyRainFlux
  - Global.RoomSettings.RoomEffect.Type.Hue
  - Global.RoomSettings.RoomEffect.Type.LavaSurface
  - Global.RoomSettings.RoomEffect.Type.LethalWater
  - Global.RoomSettings.RoomEffect.Type.LightBurn
  - Global.RoomSettings.RoomEffect.Type.LightRain
  - Global.RoomSettings.RoomEffect.Type.Lightning
  - Global.RoomSettings.RoomEffect.Type.LocustSwarmConfig
  - Global.RoomSettings.RoomEffect.Type.ModifyEffectColorA
  - Global.RoomSettings.RoomEffect.Type.ModifyEffectColorB
  - Global.RoomSettings.RoomEffect.Type.Moth
  - Global.RoomSettings.RoomEffect.Type.None
  - Global.RoomSettings.RoomEffect.Type.PinkSky
  - Global.RoomSettings.RoomEffect.Type.PixelShift
  - Global.RoomSettings.RoomEffect.Type.ProjectedScanLines
  - Global.RoomSettings.RoomEffect.Type.RedSwarmer
  - Global.RoomSettings.RoomEffect.Type.RockFlea
  - Global.RoomSettings.RoomEffect.Type.RoofTopView
  - Global.RoomSettings.RoomEffect.Type.SSMusic
  - Global.RoomSettings.RoomEffect.Type.SSSwarmers
  - Global.RoomSettings.RoomEffect.Type.SandPuffs
  - Global.RoomSettings.RoomEffect.Type.SilenceWater
  - Global.RoomSettings.RoomEffect.Type.SkyAndLightBloom
  - Global.RoomSettings.RoomEffect.Type.SkyBloom
  - Global.RoomSettings.RoomEffect.Type.SkyDandelions
  - Global.RoomSettings.RoomEffect.Type.SunBlock
  - Global.RoomSettings.RoomEffect.Type.SuperStructureProjector
  - Global.RoomSettings.RoomEffect.Type.TinyDragonFly
  - Global.RoomSettings.RoomEffect.Type.VoidMelt
  - Global.RoomSettings.RoomEffect.Type.VoidSea
  - Global.RoomSettings.RoomEffect.Type.VoidSpawn
  - Global.RoomSettings.RoomEffect.Type.Wasp
  - Global.RoomSettings.RoomEffect.Type.WaterDepth
  - Global.RoomSettings.RoomEffect.Type.WaterFluxFrequency
  - Global.RoomSettings.RoomEffect.Type.WaterFluxMaxDelay
  - Global.RoomSettings.RoomEffect.Type.WaterFluxMaxLevel
  - Global.RoomSettings.RoomEffect.Type.WaterFluxMinDelay
  - Global.RoomSettings.RoomEffect.Type.WaterFluxMinLevel
  - Global.RoomSettings.RoomEffect.Type.WaterFluxOffset
  - Global.RoomSettings.RoomEffect.Type.WaterFluxRumble
  - Global.RoomSettings.RoomEffect.Type.WaterFluxSpeed
  - Global.RoomSettings.RoomEffect.Type.WaterGlowworm
  - Global.RoomSettings.RoomEffect.Type.WaterLights
  - Global.RoomSettings.RoomEffect.Type.WaterViscosity
  - Global.RoomSettings.RoomEffect.Type.WindDirection
  - Global.RoomSettings.RoomEffect.Type.ZeroG
  - Global.RoomSettings.RoomEffect.Type.ZeroGSpecks
  langs:
  - csharp
  - vb
  name: RoomSettings.RoomEffect.Type
  nameWithType: RoomSettings.RoomEffect.Type
  fullName: RoomSettings.RoomEffect.Type
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:RoomSettings.RoomEffect.Type</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public class RoomSettings.RoomEffect.Type : ExtEnum<RoomSettings.RoomEffect.Type>, IComparable, IEquatable<RoomSettings.RoomEffect.Type>'
    content.vb: Public Class RoomSettings.RoomEffect.Type Inherits ExtEnum(Of RoomSettings.RoomEffect.Type) Implements IComparable, IEquatable(Of RoomSettings.RoomEffect.Type)
  inheritance:
  - System.Object
  - Global.ExtEnumBase
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}
  implements:
  - System.IComparable
  - System.IEquatable{RoomSettings.RoomEffect.Type}
  inheritedMembers:
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.values
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(System.Object)
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(ExtEnum{RoomSettings.RoomEffect.Type})
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(RoomSettings.RoomEffect.Type)
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.GetHashCode
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.Unregister
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.valuesVersion
  - Global.ExtEnum{RoomSettings.RoomEffect.Type}.Index
  - Global.ExtEnumBase.value
  - Global.ExtEnumBase.valueHash
  - Global.ExtEnumBase.index
  - Global.ExtEnumBase.localVersion
  - Global.ExtEnumBase.enumType
  - Global.ExtEnumBase.valueDictionary
  - Global.ExtEnumBase.ToString
  - Global.ExtEnumBase.CompareTo(System.Object)
  - Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  - Global.ExtEnumBase.GetExtEnumType(System.Type)
  - Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  - Global.ExtEnumBase.GetNames(System.Type)
  - Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  - Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.RoomSettings.RoomEffect.Type.None
  commentId: F:Global.RoomSettings.RoomEffect.Type.None
  id: None
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: None
  nameWithType: RoomSettings.RoomEffect.Type.None
  fullName: RoomSettings.RoomEffect.Type.None
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.None</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type None
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly None As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SkyDandelions
  commentId: F:Global.RoomSettings.RoomEffect.Type.SkyDandelions
  id: SkyDandelions
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SkyDandelions
  nameWithType: RoomSettings.RoomEffect.Type.SkyDandelions
  fullName: RoomSettings.RoomEffect.Type.SkyDandelions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SkyDandelions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SkyDandelions
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SkyDandelions As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SkyBloom
  commentId: F:Global.RoomSettings.RoomEffect.Type.SkyBloom
  id: SkyBloom
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SkyBloom
  nameWithType: RoomSettings.RoomEffect.Type.SkyBloom
  fullName: RoomSettings.RoomEffect.Type.SkyBloom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SkyBloom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SkyBloom
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SkyBloom As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.LightBurn
  commentId: F:Global.RoomSettings.RoomEffect.Type.LightBurn
  id: LightBurn
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: LightBurn
  nameWithType: RoomSettings.RoomEffect.Type.LightBurn
  fullName: RoomSettings.RoomEffect.Type.LightBurn
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.LightBurn</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type LightBurn
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly LightBurn As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SkyAndLightBloom
  commentId: F:Global.RoomSettings.RoomEffect.Type.SkyAndLightBloom
  id: SkyAndLightBloom
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SkyAndLightBloom
  nameWithType: RoomSettings.RoomEffect.Type.SkyAndLightBloom
  fullName: RoomSettings.RoomEffect.Type.SkyAndLightBloom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SkyAndLightBloom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SkyAndLightBloom
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SkyAndLightBloom As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Bloom
  commentId: F:Global.RoomSettings.RoomEffect.Type.Bloom
  id: Bloom
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Bloom
  nameWithType: RoomSettings.RoomEffect.Type.Bloom
  fullName: RoomSettings.RoomEffect.Type.Bloom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Bloom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Bloom
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Bloom As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Fog
  commentId: F:Global.RoomSettings.RoomEffect.Type.Fog
  id: Fog
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Fog
  nameWithType: RoomSettings.RoomEffect.Type.Fog
  fullName: RoomSettings.RoomEffect.Type.Fog
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Fog</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Fog
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Fog As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Lightning
  commentId: F:Global.RoomSettings.RoomEffect.Type.Lightning
  id: Lightning
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Lightning
  nameWithType: RoomSettings.RoomEffect.Type.Lightning
  fullName: RoomSettings.RoomEffect.Type.Lightning
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Lightning</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Lightning
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Lightning As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.BkgOnlyLightning
  commentId: F:Global.RoomSettings.RoomEffect.Type.BkgOnlyLightning
  id: BkgOnlyLightning
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: BkgOnlyLightning
  nameWithType: RoomSettings.RoomEffect.Type.BkgOnlyLightning
  fullName: RoomSettings.RoomEffect.Type.BkgOnlyLightning
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.BkgOnlyLightning</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type BkgOnlyLightning
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly BkgOnlyLightning As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.ExtraLoudThunder
  commentId: F:Global.RoomSettings.RoomEffect.Type.ExtraLoudThunder
  id: ExtraLoudThunder
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: ExtraLoudThunder
  nameWithType: RoomSettings.RoomEffect.Type.ExtraLoudThunder
  fullName: RoomSettings.RoomEffect.Type.ExtraLoudThunder
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.ExtraLoudThunder</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type ExtraLoudThunder
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly ExtraLoudThunder As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.GreenSparks
  commentId: F:Global.RoomSettings.RoomEffect.Type.GreenSparks
  id: GreenSparks
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: GreenSparks
  nameWithType: RoomSettings.RoomEffect.Type.GreenSparks
  fullName: RoomSettings.RoomEffect.Type.GreenSparks
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.GreenSparks</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type GreenSparks
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly GreenSparks As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.VoidMelt
  commentId: F:Global.RoomSettings.RoomEffect.Type.VoidMelt
  id: VoidMelt
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: VoidMelt
  nameWithType: RoomSettings.RoomEffect.Type.VoidMelt
  fullName: RoomSettings.RoomEffect.Type.VoidMelt
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.VoidMelt</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type VoidMelt
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly VoidMelt As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.ZeroG
  commentId: F:Global.RoomSettings.RoomEffect.Type.ZeroG
  id: ZeroG
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: ZeroG
  nameWithType: RoomSettings.RoomEffect.Type.ZeroG
  fullName: RoomSettings.RoomEffect.Type.ZeroG
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.ZeroG</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type ZeroG
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly ZeroG As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.BrokenZeroG
  commentId: F:Global.RoomSettings.RoomEffect.Type.BrokenZeroG
  id: BrokenZeroG
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: BrokenZeroG
  nameWithType: RoomSettings.RoomEffect.Type.BrokenZeroG
  fullName: RoomSettings.RoomEffect.Type.BrokenZeroG
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.BrokenZeroG</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type BrokenZeroG
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly BrokenZeroG As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.ZeroGSpecks
  commentId: F:Global.RoomSettings.RoomEffect.Type.ZeroGSpecks
  id: ZeroGSpecks
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: ZeroGSpecks
  nameWithType: RoomSettings.RoomEffect.Type.ZeroGSpecks
  fullName: RoomSettings.RoomEffect.Type.ZeroGSpecks
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.ZeroGSpecks</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type ZeroGSpecks
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly ZeroGSpecks As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SunBlock
  commentId: F:Global.RoomSettings.RoomEffect.Type.SunBlock
  id: SunBlock
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SunBlock
  nameWithType: RoomSettings.RoomEffect.Type.SunBlock
  fullName: RoomSettings.RoomEffect.Type.SunBlock
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SunBlock</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SunBlock
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SunBlock As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SuperStructureProjector
  commentId: F:Global.RoomSettings.RoomEffect.Type.SuperStructureProjector
  id: SuperStructureProjector
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SuperStructureProjector
  nameWithType: RoomSettings.RoomEffect.Type.SuperStructureProjector
  fullName: RoomSettings.RoomEffect.Type.SuperStructureProjector
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SuperStructureProjector</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SuperStructureProjector
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SuperStructureProjector As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.ProjectedScanLines
  commentId: F:Global.RoomSettings.RoomEffect.Type.ProjectedScanLines
  id: ProjectedScanLines
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: ProjectedScanLines
  nameWithType: RoomSettings.RoomEffect.Type.ProjectedScanLines
  fullName: RoomSettings.RoomEffect.Type.ProjectedScanLines
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.ProjectedScanLines</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type ProjectedScanLines
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly ProjectedScanLines As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.CorruptionSpores
  commentId: F:Global.RoomSettings.RoomEffect.Type.CorruptionSpores
  id: CorruptionSpores
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: CorruptionSpores
  nameWithType: RoomSettings.RoomEffect.Type.CorruptionSpores
  fullName: RoomSettings.RoomEffect.Type.CorruptionSpores
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.CorruptionSpores</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type CorruptionSpores
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly CorruptionSpores As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SSSwarmers
  commentId: F:Global.RoomSettings.RoomEffect.Type.SSSwarmers
  id: SSSwarmers
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SSSwarmers
  nameWithType: RoomSettings.RoomEffect.Type.SSSwarmers
  fullName: RoomSettings.RoomEffect.Type.SSSwarmers
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SSSwarmers</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SSSwarmers
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SSSwarmers As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SSMusic
  commentId: F:Global.RoomSettings.RoomEffect.Type.SSMusic
  id: SSMusic
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SSMusic
  nameWithType: RoomSettings.RoomEffect.Type.SSMusic
  fullName: RoomSettings.RoomEffect.Type.SSMusic
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SSMusic</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SSMusic
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SSMusic As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.AboveCloudsView
  commentId: F:Global.RoomSettings.RoomEffect.Type.AboveCloudsView
  id: AboveCloudsView
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: AboveCloudsView
  nameWithType: RoomSettings.RoomEffect.Type.AboveCloudsView
  fullName: RoomSettings.RoomEffect.Type.AboveCloudsView
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.AboveCloudsView</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type AboveCloudsView
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly AboveCloudsView As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.RoofTopView
  commentId: F:Global.RoomSettings.RoomEffect.Type.RoofTopView
  id: RoofTopView
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: RoofTopView
  nameWithType: RoomSettings.RoomEffect.Type.RoofTopView
  fullName: RoomSettings.RoomEffect.Type.RoofTopView
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.RoofTopView</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type RoofTopView
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly RoofTopView As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.VoidSea
  commentId: F:Global.RoomSettings.RoomEffect.Type.VoidSea
  id: VoidSea
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: VoidSea
  nameWithType: RoomSettings.RoomEffect.Type.VoidSea
  fullName: RoomSettings.RoomEffect.Type.VoidSea
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.VoidSea</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type VoidSea
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly VoidSea As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.ElectricDeath
  commentId: F:Global.RoomSettings.RoomEffect.Type.ElectricDeath
  id: ElectricDeath
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: ElectricDeath
  nameWithType: RoomSettings.RoomEffect.Type.ElectricDeath
  fullName: RoomSettings.RoomEffect.Type.ElectricDeath
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.ElectricDeath</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type ElectricDeath
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly ElectricDeath As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.VoidSpawn
  commentId: F:Global.RoomSettings.RoomEffect.Type.VoidSpawn
  id: VoidSpawn
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: VoidSpawn
  nameWithType: RoomSettings.RoomEffect.Type.VoidSpawn
  fullName: RoomSettings.RoomEffect.Type.VoidSpawn
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.VoidSpawn</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type VoidSpawn
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly VoidSpawn As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.BorderPushBack
  commentId: F:Global.RoomSettings.RoomEffect.Type.BorderPushBack
  id: BorderPushBack
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: BorderPushBack
  nameWithType: RoomSettings.RoomEffect.Type.BorderPushBack
  fullName: RoomSettings.RoomEffect.Type.BorderPushBack
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.BorderPushBack</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type BorderPushBack
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly BorderPushBack As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Flies
  commentId: F:Global.RoomSettings.RoomEffect.Type.Flies
  id: Flies
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Flies
  nameWithType: RoomSettings.RoomEffect.Type.Flies
  fullName: RoomSettings.RoomEffect.Type.Flies
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Flies</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Flies
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Flies As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.FireFlies
  commentId: F:Global.RoomSettings.RoomEffect.Type.FireFlies
  id: FireFlies
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: FireFlies
  nameWithType: RoomSettings.RoomEffect.Type.FireFlies
  fullName: RoomSettings.RoomEffect.Type.FireFlies
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.FireFlies</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type FireFlies
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly FireFlies As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.TinyDragonFly
  commentId: F:Global.RoomSettings.RoomEffect.Type.TinyDragonFly
  id: TinyDragonFly
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: TinyDragonFly
  nameWithType: RoomSettings.RoomEffect.Type.TinyDragonFly
  fullName: RoomSettings.RoomEffect.Type.TinyDragonFly
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.TinyDragonFly</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type TinyDragonFly
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly TinyDragonFly As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.RockFlea
  commentId: F:Global.RoomSettings.RoomEffect.Type.RockFlea
  id: RockFlea
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: RockFlea
  nameWithType: RoomSettings.RoomEffect.Type.RockFlea
  fullName: RoomSettings.RoomEffect.Type.RockFlea
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.RockFlea</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type RockFlea
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly RockFlea As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.RedSwarmer
  commentId: F:Global.RoomSettings.RoomEffect.Type.RedSwarmer
  id: RedSwarmer
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: RedSwarmer
  nameWithType: RoomSettings.RoomEffect.Type.RedSwarmer
  fullName: RoomSettings.RoomEffect.Type.RedSwarmer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.RedSwarmer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type RedSwarmer
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly RedSwarmer As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Ant
  commentId: F:Global.RoomSettings.RoomEffect.Type.Ant
  id: Ant
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Ant
  nameWithType: RoomSettings.RoomEffect.Type.Ant
  fullName: RoomSettings.RoomEffect.Type.Ant
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Ant</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Ant
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Ant As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Beetle
  commentId: F:Global.RoomSettings.RoomEffect.Type.Beetle
  id: Beetle
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Beetle
  nameWithType: RoomSettings.RoomEffect.Type.Beetle
  fullName: RoomSettings.RoomEffect.Type.Beetle
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Beetle</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Beetle
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Beetle As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterGlowworm
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterGlowworm
  id: WaterGlowworm
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterGlowworm
  nameWithType: RoomSettings.RoomEffect.Type.WaterGlowworm
  fullName: RoomSettings.RoomEffect.Type.WaterGlowworm
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterGlowworm</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterGlowworm
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterGlowworm As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Wasp
  commentId: F:Global.RoomSettings.RoomEffect.Type.Wasp
  id: Wasp
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Wasp
  nameWithType: RoomSettings.RoomEffect.Type.Wasp
  fullName: RoomSettings.RoomEffect.Type.Wasp
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Wasp</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Wasp
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Wasp As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Moth
  commentId: F:Global.RoomSettings.RoomEffect.Type.Moth
  id: Moth
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Moth
  nameWithType: RoomSettings.RoomEffect.Type.Moth
  fullName: RoomSettings.RoomEffect.Type.Moth
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Moth</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Moth
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Moth As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.ModifyEffectColorA
  commentId: F:Global.RoomSettings.RoomEffect.Type.ModifyEffectColorA
  id: ModifyEffectColorA
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: ModifyEffectColorA
  nameWithType: RoomSettings.RoomEffect.Type.ModifyEffectColorA
  fullName: RoomSettings.RoomEffect.Type.ModifyEffectColorA
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.ModifyEffectColorA</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type ModifyEffectColorA
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly ModifyEffectColorA As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.ModifyEffectColorB
  commentId: F:Global.RoomSettings.RoomEffect.Type.ModifyEffectColorB
  id: ModifyEffectColorB
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: ModifyEffectColorB
  nameWithType: RoomSettings.RoomEffect.Type.ModifyEffectColorB
  fullName: RoomSettings.RoomEffect.Type.ModifyEffectColorB
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.ModifyEffectColorB</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type ModifyEffectColorB
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly ModifyEffectColorB As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.GeyserFrequency
  commentId: F:Global.RoomSettings.RoomEffect.Type.GeyserFrequency
  id: GeyserFrequency
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: GeyserFrequency
  nameWithType: RoomSettings.RoomEffect.Type.GeyserFrequency
  fullName: RoomSettings.RoomEffect.Type.GeyserFrequency
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.GeyserFrequency</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type GeyserFrequency
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly GeyserFrequency As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.PinkSky
  commentId: F:Global.RoomSettings.RoomEffect.Type.PinkSky
  id: PinkSky
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: PinkSky
  nameWithType: RoomSettings.RoomEffect.Type.PinkSky
  fullName: RoomSettings.RoomEffect.Type.PinkSky
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.PinkSky</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type PinkSky
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly PinkSky As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SandPuffs
  commentId: F:Global.RoomSettings.RoomEffect.Type.SandPuffs
  id: SandPuffs
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SandPuffs
  nameWithType: RoomSettings.RoomEffect.Type.SandPuffs
  fullName: RoomSettings.RoomEffect.Type.SandPuffs
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SandPuffs</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SandPuffs
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SandPuffs As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.LocustSwarmConfig
  commentId: F:Global.RoomSettings.RoomEffect.Type.LocustSwarmConfig
  id: LocustSwarmConfig
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: LocustSwarmConfig
  nameWithType: RoomSettings.RoomEffect.Type.LocustSwarmConfig
  fullName: RoomSettings.RoomEffect.Type.LocustSwarmConfig
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.LocustSwarmConfig</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type LocustSwarmConfig
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly LocustSwarmConfig As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WindDirection
  commentId: F:Global.RoomSettings.RoomEffect.Type.WindDirection
  id: WindDirection
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WindDirection
  nameWithType: RoomSettings.RoomEffect.Type.WindDirection
  fullName: RoomSettings.RoomEffect.Type.WindDirection
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WindDirection</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WindDirection
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WindDirection As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.LightRain
  commentId: F:Global.RoomSettings.RoomEffect.Type.LightRain
  id: LightRain
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: LightRain
  nameWithType: RoomSettings.RoomEffect.Type.LightRain
  fullName: RoomSettings.RoomEffect.Type.LightRain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.LightRain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type LightRain
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly LightRain As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.HeavyRain
  commentId: F:Global.RoomSettings.RoomEffect.Type.HeavyRain
  id: HeavyRain
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: HeavyRain
  nameWithType: RoomSettings.RoomEffect.Type.HeavyRain
  fullName: RoomSettings.RoomEffect.Type.HeavyRain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.HeavyRain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type HeavyRain
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly HeavyRain As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.HeavyRainFlux
  commentId: F:Global.RoomSettings.RoomEffect.Type.HeavyRainFlux
  id: HeavyRainFlux
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: HeavyRainFlux
  nameWithType: RoomSettings.RoomEffect.Type.HeavyRainFlux
  fullName: RoomSettings.RoomEffect.Type.HeavyRainFlux
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.HeavyRainFlux</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type HeavyRainFlux
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly HeavyRainFlux As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.BulletRain
  commentId: F:Global.RoomSettings.RoomEffect.Type.BulletRain
  id: BulletRain
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: BulletRain
  nameWithType: RoomSettings.RoomEffect.Type.BulletRain
  fullName: RoomSettings.RoomEffect.Type.BulletRain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.BulletRain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type BulletRain
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly BulletRain As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.BulletRainFlux
  commentId: F:Global.RoomSettings.RoomEffect.Type.BulletRainFlux
  id: BulletRainFlux
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: BulletRainFlux
  nameWithType: RoomSettings.RoomEffect.Type.BulletRainFlux
  fullName: RoomSettings.RoomEffect.Type.BulletRainFlux
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.BulletRainFlux</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type BulletRainFlux
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly BulletRainFlux As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxFrequency
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxFrequency
  id: WaterFluxFrequency
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxFrequency
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxFrequency
  fullName: RoomSettings.RoomEffect.Type.WaterFluxFrequency
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxFrequency</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxFrequency
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxFrequency As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxMinLevel
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxMinLevel
  id: WaterFluxMinLevel
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxMinLevel
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxMinLevel
  fullName: RoomSettings.RoomEffect.Type.WaterFluxMinLevel
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxMinLevel</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxMinLevel
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxMinLevel As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxMaxLevel
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxMaxLevel
  id: WaterFluxMaxLevel
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxMaxLevel
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxMaxLevel
  fullName: RoomSettings.RoomEffect.Type.WaterFluxMaxLevel
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxMaxLevel</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxMaxLevel
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxMaxLevel As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxMinDelay
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxMinDelay
  id: WaterFluxMinDelay
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxMinDelay
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxMinDelay
  fullName: RoomSettings.RoomEffect.Type.WaterFluxMinDelay
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxMinDelay</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxMinDelay
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxMinDelay As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxMaxDelay
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxMaxDelay
  id: WaterFluxMaxDelay
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxMaxDelay
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxMaxDelay
  fullName: RoomSettings.RoomEffect.Type.WaterFluxMaxDelay
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxMaxDelay</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxMaxDelay
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxMaxDelay As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxSpeed
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxSpeed
  id: WaterFluxSpeed
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxSpeed
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxSpeed
  fullName: RoomSettings.RoomEffect.Type.WaterFluxSpeed
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxSpeed</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxSpeed
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxSpeed As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxOffset
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxOffset
  id: WaterFluxOffset
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxOffset
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxOffset
  fullName: RoomSettings.RoomEffect.Type.WaterFluxOffset
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxOffset</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxOffset
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxOffset As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterFluxRumble
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterFluxRumble
  id: WaterFluxRumble
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterFluxRumble
  nameWithType: RoomSettings.RoomEffect.Type.WaterFluxRumble
  fullName: RoomSettings.RoomEffect.Type.WaterFluxRumble
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterFluxRumble</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterFluxRumble
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterFluxRumble As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.LethalWater
  commentId: F:Global.RoomSettings.RoomEffect.Type.LethalWater
  id: LethalWater
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: LethalWater
  nameWithType: RoomSettings.RoomEffect.Type.LethalWater
  fullName: RoomSettings.RoomEffect.Type.LethalWater
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.LethalWater</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type LethalWater
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly LethalWater As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.HeatWave
  commentId: F:Global.RoomSettings.RoomEffect.Type.HeatWave
  id: HeatWave
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: HeatWave
  nameWithType: RoomSettings.RoomEffect.Type.HeatWave
  fullName: RoomSettings.RoomEffect.Type.HeatWave
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.HeatWave</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type HeatWave
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly HeatWave As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Coldness
  commentId: F:Global.RoomSettings.RoomEffect.Type.Coldness
  id: Coldness
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Coldness
  nameWithType: RoomSettings.RoomEffect.Type.Coldness
  fullName: RoomSettings.RoomEffect.Type.Coldness
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Coldness</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Coldness
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Coldness As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.DayNight
  commentId: F:Global.RoomSettings.RoomEffect.Type.DayNight
  id: DayNight
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: DayNight
  nameWithType: RoomSettings.RoomEffect.Type.DayNight
  fullName: RoomSettings.RoomEffect.Type.DayNight
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.DayNight</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type DayNight
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly DayNight As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Darkness
  commentId: F:Global.RoomSettings.RoomEffect.Type.Darkness
  id: Darkness
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Darkness
  nameWithType: RoomSettings.RoomEffect.Type.Darkness
  fullName: RoomSettings.RoomEffect.Type.Darkness
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Darkness</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Darkness
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Darkness As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Brightness
  commentId: F:Global.RoomSettings.RoomEffect.Type.Brightness
  id: Brightness
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Brightness
  nameWithType: RoomSettings.RoomEffect.Type.Brightness
  fullName: RoomSettings.RoomEffect.Type.Brightness
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Brightness</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Brightness
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Brightness As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Contrast
  commentId: F:Global.RoomSettings.RoomEffect.Type.Contrast
  id: Contrast
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Contrast
  nameWithType: RoomSettings.RoomEffect.Type.Contrast
  fullName: RoomSettings.RoomEffect.Type.Contrast
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Contrast</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Contrast
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Contrast As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Desaturation
  commentId: F:Global.RoomSettings.RoomEffect.Type.Desaturation
  id: Desaturation
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Desaturation
  nameWithType: RoomSettings.RoomEffect.Type.Desaturation
  fullName: RoomSettings.RoomEffect.Type.Desaturation
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Desaturation</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Desaturation
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Desaturation As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Hue
  commentId: F:Global.RoomSettings.RoomEffect.Type.Hue
  id: Hue
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Hue
  nameWithType: RoomSettings.RoomEffect.Type.Hue
  fullName: RoomSettings.RoomEffect.Type.Hue
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Hue</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Hue
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Hue As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.FairyParticles
  commentId: F:Global.RoomSettings.RoomEffect.Type.FairyParticles
  id: FairyParticles
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: FairyParticles
  nameWithType: RoomSettings.RoomEffect.Type.FairyParticles
  fullName: RoomSettings.RoomEffect.Type.FairyParticles
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.FairyParticles</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type FairyParticles
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly FairyParticles As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.FakeGate
  commentId: F:Global.RoomSettings.RoomEffect.Type.FakeGate
  id: FakeGate
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: FakeGate
  nameWithType: RoomSettings.RoomEffect.Type.FakeGate
  fullName: RoomSettings.RoomEffect.Type.FakeGate
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.FakeGate</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type FakeGate
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly FakeGate As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.Dustpuffs
  commentId: F:Global.RoomSettings.RoomEffect.Type.Dustpuffs
  id: Dustpuffs
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Dustpuffs
  nameWithType: RoomSettings.RoomEffect.Type.Dustpuffs
  fullName: RoomSettings.RoomEffect.Type.Dustpuffs
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.Dustpuffs</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type Dustpuffs
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly Dustpuffs As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.SilenceWater
  commentId: F:Global.RoomSettings.RoomEffect.Type.SilenceWater
  id: SilenceWater
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: SilenceWater
  nameWithType: RoomSettings.RoomEffect.Type.SilenceWater
  fullName: RoomSettings.RoomEffect.Type.SilenceWater
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.SilenceWater</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type SilenceWater
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly SilenceWater As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterViscosity
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterViscosity
  id: WaterViscosity
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterViscosity
  nameWithType: RoomSettings.RoomEffect.Type.WaterViscosity
  fullName: RoomSettings.RoomEffect.Type.WaterViscosity
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterViscosity</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterViscosity
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterViscosity As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.DarkenLights
  commentId: F:Global.RoomSettings.RoomEffect.Type.DarkenLights
  id: DarkenLights
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: DarkenLights
  nameWithType: RoomSettings.RoomEffect.Type.DarkenLights
  fullName: RoomSettings.RoomEffect.Type.DarkenLights
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.DarkenLights</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type DarkenLights
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly DarkenLights As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterLights
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterLights
  id: WaterLights
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterLights
  nameWithType: RoomSettings.RoomEffect.Type.WaterLights
  fullName: RoomSettings.RoomEffect.Type.WaterLights
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterLights</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterLights
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterLights As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.WaterDepth
  commentId: F:Global.RoomSettings.RoomEffect.Type.WaterDepth
  id: WaterDepth
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: WaterDepth
  nameWithType: RoomSettings.RoomEffect.Type.WaterDepth
  fullName: RoomSettings.RoomEffect.Type.WaterDepth
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.WaterDepth</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type WaterDepth
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly WaterDepth As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.DirtyWater
  commentId: F:Global.RoomSettings.RoomEffect.Type.DirtyWater
  id: DirtyWater
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: DirtyWater
  nameWithType: RoomSettings.RoomEffect.Type.DirtyWater
  fullName: RoomSettings.RoomEffect.Type.DirtyWater
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.DirtyWater</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type DirtyWater
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly DirtyWater As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.LavaSurface
  commentId: F:Global.RoomSettings.RoomEffect.Type.LavaSurface
  id: LavaSurface
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: LavaSurface
  nameWithType: RoomSettings.RoomEffect.Type.LavaSurface
  fullName: RoomSettings.RoomEffect.Type.LavaSurface
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.LavaSurface</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type LavaSurface
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly LavaSurface As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.PixelShift
  commentId: F:Global.RoomSettings.RoomEffect.Type.PixelShift
  id: PixelShift
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: PixelShift
  nameWithType: RoomSettings.RoomEffect.Type.PixelShift
  fullName: RoomSettings.RoomEffect.Type.PixelShift
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.PixelShift</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type PixelShift
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly PixelShift As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.FastFloodDrain
  commentId: F:Global.RoomSettings.RoomEffect.Type.FastFloodDrain
  id: FastFloodDrain
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: FastFloodDrain
  nameWithType: RoomSettings.RoomEffect.Type.FastFloodDrain
  fullName: RoomSettings.RoomEffect.Type.FastFloodDrain
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.FastFloodDrain</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type FastFloodDrain
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly FastFloodDrain As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.FastFloodPullDown
  commentId: F:Global.RoomSettings.RoomEffect.Type.FastFloodPullDown
  id: FastFloodPullDown
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: FastFloodPullDown
  nameWithType: RoomSettings.RoomEffect.Type.FastFloodPullDown
  fullName: RoomSettings.RoomEffect.Type.FastFloodPullDown
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RoomSettings.RoomEffect.Type.FastFloodPullDown</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static readonly RoomSettings.RoomEffect.Type FastFloodPullDown
    return:
      type: Global.RoomSettings.RoomEffect.Type
    content.vb: Public Shared ReadOnly FastFloodPullDown As RoomSettings.RoomEffect.Type
- uid: Global.RoomSettings.RoomEffect.Type.#ctor(System.String,System.Boolean)
  commentId: M:Global.RoomSettings.RoomEffect.Type.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Global.RoomSettings.RoomEffect.Type
  langs:
  - csharp
  - vb
  name: Type(string, bool)
  nameWithType: RoomSettings.RoomEffect.Type.Type(string, bool)
  fullName: RoomSettings.RoomEffect.Type.Type(string, bool)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>RoomSettings.RoomEffect.Type</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Type(string value, bool register = false)
    parameters:
    - id: value
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:RoomSettings.RoomEffect.Type.#ctor(System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: register
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>register</parameter>
            <parameter>M:RoomSettings.RoomEffect.Type.#ctor(System.String,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(value As String, register As Boolean = False)
  overload: Global.RoomSettings.RoomEffect.Type.#ctor*
  nameWithType.vb: RoomSettings.RoomEffect.Type.New(String, Boolean)
  fullName.vb: RoomSettings.RoomEffect.Type.New(String, Boolean)
  name.vb: New(String, Boolean)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ExtEnumBase
  commentId: T:Global.ExtEnumBase
  isExternal: true
  href: ExtEnumBase.html
  name: ExtEnumBase
  nameWithType: ExtEnumBase
  fullName: ExtEnumBase
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  commentId: T:Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1
  href: ExtEnum-1.html
  name: ExtEnum<RoomSettings.RoomEffect.Type>
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type)
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type)
  name.vb: ExtEnum(Of RoomSettings.RoomEffect.Type)
  spec.csharp:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - uid: Global.RoomSettings
    name: RoomSettings
    isExternal: true
    href: RoomSettings.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect
    name: RoomEffect
    isExternal: true
    href: RoomSettings.RoomEffect.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: '>'
  spec.vb:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Global.RoomSettings
    name: RoomSettings
    isExternal: true
    href: RoomSettings.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect
    name: RoomEffect
    isExternal: true
    href: RoomSettings.RoomEffect.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IEquatable{RoomSettings.RoomEffect.Type}
  commentId: T:System.IEquatable{RoomSettings.RoomEffect.Type}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<RoomSettings.RoomEffect.Type>
  nameWithType: IEquatable<RoomSettings.RoomEffect.Type>
  fullName: System.IEquatable<RoomSettings.RoomEffect.Type>
  nameWithType.vb: IEquatable(Of RoomSettings.RoomEffect.Type)
  fullName.vb: System.IEquatable(Of RoomSettings.RoomEffect.Type)
  name.vb: IEquatable(Of RoomSettings.RoomEffect.Type)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Global.RoomSettings
    name: RoomSettings
    isExternal: true
    href: RoomSettings.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect
    name: RoomEffect
    isExternal: true
    href: RoomSettings.RoomEffect.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.RoomSettings
    name: RoomSettings
    isExternal: true
    href: RoomSettings.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect
    name: RoomEffect
    isExternal: true
    href: RoomSettings.RoomEffect.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: )
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.values
  commentId: F:Global.ExtEnum{RoomSettings.RoomEffect.Type}.values
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.values
  href: Global.ExtEnum-1.html#ExtEnum_1_values
  name: values
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.values
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.values
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).values
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).values
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(System.Object)
  commentId: M:Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(System.Object)
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.Equals(System.Object)
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  name: Equals(object)
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.Equals(object)
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.Equals(object)
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Equals(Object)
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(ExtEnum{RoomSettings.RoomEffect.Type})
  commentId: M:Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(ExtEnum{RoomSettings.RoomEffect.Type})
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.Equals(ExtEnum{`0})
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  name: Equals(ExtEnum<Type>)
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.Equals(ExtEnum<RoomSettings.RoomEffect.Type>)
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.Equals(ExtEnum<RoomSettings.RoomEffect.Type>)
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Equals(ExtEnum(Of RoomSettings.RoomEffect.Type))
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Equals(ExtEnum(Of RoomSettings.RoomEffect.Type))
  name.vb: Equals(ExtEnum(Of Type))
  spec.csharp:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(ExtEnum{RoomSettings.RoomEffect.Type})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(ExtEnum{RoomSettings.RoomEffect.Type})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: )
  - name: )
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(RoomSettings.RoomEffect.Type)
  commentId: M:Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(RoomSettings.RoomEffect.Type)
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.Equals(`0)
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  name: Equals(Type)
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.Equals(RoomSettings.RoomEffect.Type)
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.Equals(RoomSettings.RoomEffect.Type)
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Equals(RoomSettings.RoomEffect.Type)
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Equals(RoomSettings.RoomEffect.Type)
  spec.csharp:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(RoomSettings.RoomEffect.Type)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Equals(RoomSettings.RoomEffect.Type)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  - name: )
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.GetHashCode
  commentId: M:Global.ExtEnum{RoomSettings.RoomEffect.Type}.GetHashCode
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.GetHashCode
  href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  name: GetHashCode()
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.GetHashCode()
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.GetHashCode()
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).GetHashCode()
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).GetHashCode()
  spec.csharp:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Unregister
  commentId: M:Global.ExtEnum{RoomSettings.RoomEffect.Type}.Unregister
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.Unregister
  href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  name: Unregister()
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.Unregister()
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.Unregister()
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Unregister()
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Unregister()
  spec.csharp:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.valuesVersion
  commentId: P:Global.ExtEnum{RoomSettings.RoomEffect.Type}.valuesVersion
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.valuesVersion
  href: Global.ExtEnum-1.html#ExtEnum_1_valuesVersion
  name: valuesVersion
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.valuesVersion
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.valuesVersion
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).valuesVersion
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).valuesVersion
- uid: Global.ExtEnum{RoomSettings.RoomEffect.Type}.Index
  commentId: P:Global.ExtEnum{RoomSettings.RoomEffect.Type}.Index
  parent: Global.ExtEnum{RoomSettings.RoomEffect.Type}
  definition: Global.ExtEnum`1.Index
  href: Global.ExtEnum-1.html#ExtEnum_1_Index
  name: Index
  nameWithType: ExtEnum<RoomSettings.RoomEffect.Type>.Index
  fullName: ExtEnum<RoomSettings.RoomEffect.Type>.Index
  nameWithType.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Index
  fullName.vb: ExtEnum(Of RoomSettings.RoomEffect.Type).Index
- uid: Global.ExtEnumBase.value
  commentId: F:Global.ExtEnumBase.value
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_value
  name: value
  nameWithType: ExtEnumBase.value
  fullName: ExtEnumBase.value
- uid: Global.ExtEnumBase.valueHash
  commentId: F:Global.ExtEnumBase.valueHash
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_valueHash
  name: valueHash
  nameWithType: ExtEnumBase.valueHash
  fullName: ExtEnumBase.valueHash
- uid: Global.ExtEnumBase.index
  commentId: F:Global.ExtEnumBase.index
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_index
  name: index
  nameWithType: ExtEnumBase.index
  fullName: ExtEnumBase.index
- uid: Global.ExtEnumBase.localVersion
  commentId: F:Global.ExtEnumBase.localVersion
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_localVersion
  name: localVersion
  nameWithType: ExtEnumBase.localVersion
  fullName: ExtEnumBase.localVersion
- uid: Global.ExtEnumBase.enumType
  commentId: F:Global.ExtEnumBase.enumType
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_enumType
  name: enumType
  nameWithType: ExtEnumBase.enumType
  fullName: ExtEnumBase.enumType
- uid: Global.ExtEnumBase.valueDictionary
  commentId: F:Global.ExtEnumBase.valueDictionary
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_valueDictionary
  name: valueDictionary
  nameWithType: ExtEnumBase.valueDictionary
  fullName: ExtEnumBase.valueDictionary
- uid: Global.ExtEnumBase.ToString
  commentId: M:Global.ExtEnumBase.ToString
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  name: ToString()
  nameWithType: ExtEnumBase.ToString()
  fullName: ExtEnumBase.ToString()
  spec.csharp:
  - uid: Global.ExtEnumBase.ToString
    name: ToString
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.ToString
    name: ToString
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_ToString
  - name: (
  - name: )
- uid: Global.ExtEnumBase.CompareTo(System.Object)
  commentId: M:Global.ExtEnumBase.CompareTo(System.Object)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  name: CompareTo(object)
  nameWithType: ExtEnumBase.CompareTo(object)
  fullName: ExtEnumBase.CompareTo(object)
  nameWithType.vb: ExtEnumBase.CompareTo(Object)
  fullName.vb: ExtEnumBase.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: Global.ExtEnumBase.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_CompareTo_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  name: Parse(Type, string, bool)
  nameWithType: ExtEnumBase.Parse(Type, string, bool)
  fullName: ExtEnumBase.Parse(System.Type, string, bool)
  nameWithType.vb: ExtEnumBase.Parse(Type, String, Boolean)
  fullName.vb: ExtEnumBase.Parse(System.Type, String, Boolean)
  name.vb: Parse(Type, String, Boolean)
  spec.csharp:
  - uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
    name: Parse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.Parse(System.Type,System.String,System.Boolean)
    name: Parse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_Parse_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  commentId: M:Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  name: TryParse(Type, string, bool, out ExtEnumBase)
  nameWithType: ExtEnumBase.TryParse(Type, string, bool, out ExtEnumBase)
  fullName: ExtEnumBase.TryParse(System.Type, string, bool, out ExtEnumBase)
  nameWithType.vb: ExtEnumBase.TryParse(Type, String, Boolean, ExtEnumBase)
  fullName.vb: ExtEnumBase.TryParse(System.Type, String, Boolean, ExtEnumBase)
  name.vb: TryParse(Type, String, Boolean, ExtEnumBase)
  spec.csharp:
  - uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
    name: TryParse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Global.ExtEnumBase
    name: ExtEnumBase
    isExternal: true
    href: ExtEnumBase.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.TryParse(System.Type,System.String,System.Boolean,ExtEnumBase@)
    name: TryParse
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryParse_System_Type_System_String_System_Boolean_ExtEnumBase__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Global.ExtEnumBase
    name: ExtEnumBase
    isExternal: true
    href: ExtEnumBase.html
  - name: )
- uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
  commentId: M:Global.ExtEnumBase.GetExtEnumType(System.Type)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  name: GetExtEnumType(Type)
  nameWithType: ExtEnumBase.GetExtEnumType(Type)
  fullName: ExtEnumBase.GetExtEnumType(System.Type)
  spec.csharp:
  - uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
    name: GetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.GetExtEnumType(System.Type)
    name: GetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetExtEnumType_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  commentId: M:Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  name: TryGetExtEnumType(Type, out ExtEnumType)
  nameWithType: ExtEnumBase.TryGetExtEnumType(Type, out ExtEnumType)
  fullName: ExtEnumBase.TryGetExtEnumType(System.Type, out ExtEnumType)
  nameWithType.vb: ExtEnumBase.TryGetExtEnumType(Type, ExtEnumType)
  fullName.vb: ExtEnumBase.TryGetExtEnumType(System.Type, ExtEnumType)
  name.vb: TryGetExtEnumType(Type, ExtEnumType)
  spec.csharp:
  - uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
    name: TryGetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.TryGetExtEnumType(System.Type,ExtEnumType@)
    name: TryGetExtEnumType
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_TryGetExtEnumType_System_Type_ExtEnumType__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Global.ExtEnumType
    name: ExtEnumType
    isExternal: true
    href: ExtEnumType.html
  - name: )
- uid: Global.ExtEnumBase.GetNames(System.Type)
  commentId: M:Global.ExtEnumBase.GetNames(System.Type)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  name: GetNames(Type)
  nameWithType: ExtEnumBase.GetNames(Type)
  fullName: ExtEnumBase.GetNames(System.Type)
  spec.csharp:
  - uid: Global.ExtEnumBase.GetNames(System.Type)
    name: GetNames
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.GetNames(System.Type)
    name: GetNames
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_GetNames_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  name: IsDefined(Type, string, bool)
  nameWithType: ExtEnumBase.IsDefined(Type, string, bool)
  fullName: ExtEnumBase.IsDefined(System.Type, string, bool)
  nameWithType.vb: ExtEnumBase.IsDefined(Type, String, Boolean)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, String, Boolean)
  name.vb: IsDefined(Type, String, Boolean)
  spec.csharp:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.String,System.Boolean)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_String_System_Boolean_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  commentId: M:Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
  parent: Global.ExtEnumBase
  isExternal: true
  href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  name: IsDefined(Type, int)
  nameWithType: ExtEnumBase.IsDefined(Type, int)
  fullName: ExtEnumBase.IsDefined(System.Type, int)
  nameWithType.vb: ExtEnumBase.IsDefined(Type, Integer)
  fullName.vb: ExtEnumBase.IsDefined(System.Type, Integer)
  name.vb: IsDefined(Type, Integer)
  spec.csharp:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Global.ExtEnumBase.IsDefined(System.Type,System.Int32)
    name: IsDefined
    isExternal: true
    href: Global.ExtEnumBase.html#ExtEnumBase_IsDefined_System_Type_System_Int32_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ExtEnum`1
  commentId: T:Global.ExtEnum`1
  isExternal: true
  href: ExtEnum-1.html
  name: ExtEnum<T>
  nameWithType: ExtEnum<T>
  fullName: ExtEnum<T>
  nameWithType.vb: ExtEnum(Of T)
  fullName.vb: ExtEnum(Of T)
  name.vb: ExtEnum(Of T)
  spec.csharp:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ExtEnum`1.values
  commentId: F:Global.ExtEnum`1.values
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_values
  name: values
  nameWithType: ExtEnum<T>.values
  fullName: ExtEnum<T>.values
  nameWithType.vb: ExtEnum(Of T).values
  fullName.vb: ExtEnum(Of T).values
- uid: Global.ExtEnum`1.Equals(System.Object)
  commentId: M:Global.ExtEnum`1.Equals(System.Object)
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  name: Equals(object)
  nameWithType: ExtEnum<T>.Equals(object)
  fullName: ExtEnum<T>.Equals(object)
  nameWithType.vb: ExtEnum(Of T).Equals(Object)
  fullName.vb: ExtEnum(Of T).Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(System.Object)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
  commentId: M:Global.ExtEnum`1.Equals(ExtEnum{`0})
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  name: Equals(ExtEnum<T>)
  nameWithType: ExtEnum<T>.Equals(ExtEnum<T>)
  fullName: ExtEnum<T>.Equals(ExtEnum<T>)
  nameWithType.vb: ExtEnum(Of T).Equals(ExtEnum(Of T))
  fullName.vb: ExtEnum(Of T).Equals(ExtEnum(Of T))
  name.vb: Equals(ExtEnum(Of T))
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(ExtEnum{`0})
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals_ExtEnum__0__
  - name: (
  - uid: Global.ExtEnum`1
    name: ExtEnum
    isExternal: true
    href: ExtEnum-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Global.ExtEnum`1.Equals(`0)
  commentId: M:Global.ExtEnum`1.Equals(`0)
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  name: Equals(T)
  nameWithType: ExtEnum<T>.Equals(T)
  fullName: ExtEnum<T>.Equals(T)
  nameWithType.vb: ExtEnum(Of T).Equals(T)
  fullName.vb: ExtEnum(Of T).Equals(T)
  spec.csharp:
  - uid: Global.ExtEnum`1.Equals(`0)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Equals(`0)
    name: Equals
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Equals__0_
  - name: (
  - name: T
  - name: )
- uid: Global.ExtEnum`1.GetHashCode
  commentId: M:Global.ExtEnum`1.GetHashCode
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  name: GetHashCode()
  nameWithType: ExtEnum<T>.GetHashCode()
  fullName: ExtEnum<T>.GetHashCode()
  nameWithType.vb: ExtEnum(Of T).GetHashCode()
  fullName.vb: ExtEnum(Of T).GetHashCode()
  spec.csharp:
  - uid: Global.ExtEnum`1.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.GetHashCode
    name: GetHashCode
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_GetHashCode
  - name: (
  - name: )
- uid: Global.ExtEnum`1.Unregister
  commentId: M:Global.ExtEnum`1.Unregister
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  name: Unregister()
  nameWithType: ExtEnum<T>.Unregister()
  fullName: ExtEnum<T>.Unregister()
  nameWithType.vb: ExtEnum(Of T).Unregister()
  fullName.vb: ExtEnum(Of T).Unregister()
  spec.csharp:
  - uid: Global.ExtEnum`1.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ExtEnum`1.Unregister
    name: Unregister
    isExternal: true
    href: Global.ExtEnum-1.html#ExtEnum_1_Unregister
  - name: (
  - name: )
- uid: Global.ExtEnum`1.valuesVersion
  commentId: P:Global.ExtEnum`1.valuesVersion
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_valuesVersion
  name: valuesVersion
  nameWithType: ExtEnum<T>.valuesVersion
  fullName: ExtEnum<T>.valuesVersion
  nameWithType.vb: ExtEnum(Of T).valuesVersion
  fullName.vb: ExtEnum(Of T).valuesVersion
- uid: Global.ExtEnum`1.Index
  commentId: P:Global.ExtEnum`1.Index
  isExternal: true
  href: Global.ExtEnum-1.html#ExtEnum_1_Index
  name: Index
  nameWithType: ExtEnum<T>.Index
  fullName: ExtEnum<T>.Index
  nameWithType.vb: ExtEnum(Of T).Index
  fullName.vb: ExtEnum(Of T).Index
- uid: Global.RoomSettings.RoomEffect.Type
  commentId: T:Global.RoomSettings.RoomEffect.Type
  isExternal: true
  href: RoomSettings.html
  name: RoomSettings.RoomEffect.Type
  nameWithType: RoomSettings.RoomEffect.Type
  fullName: RoomSettings.RoomEffect.Type
  spec.csharp:
  - uid: Global.RoomSettings
    name: RoomSettings
    isExternal: true
    href: RoomSettings.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect
    name: RoomEffect
    isExternal: true
    href: RoomSettings.RoomEffect.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
  spec.vb:
  - uid: Global.RoomSettings
    name: RoomSettings
    isExternal: true
    href: RoomSettings.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect
    name: RoomEffect
    isExternal: true
    href: RoomSettings.RoomEffect.html
  - name: .
  - uid: Global.RoomSettings.RoomEffect.Type
    name: Type
    isExternal: true
    href: RoomSettings.RoomEffect.Type.html
- uid: Global.RoomSettings.RoomEffect.Type.#ctor*
  commentId: Overload:Global.RoomSettings.RoomEffect.Type.#ctor
  isExternal: true
  href: Global.RoomSettings.RoomEffect.Type.html#RoomSettings_RoomEffect_Type__ctor_System_String_System_Boolean_
  name: Type
  nameWithType: RoomSettings.RoomEffect.Type.Type
  fullName: RoomSettings.RoomEffect.Type.Type
  nameWithType.vb: RoomSettings.RoomEffect.Type.New
  fullName.vb: RoomSettings.RoomEffect.Type.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
