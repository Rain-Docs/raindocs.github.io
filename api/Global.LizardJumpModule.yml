### YamlMime:ManagedReference
items:
- uid: Global.LizardJumpModule
  commentId: T:Global.LizardJumpModule
  id: LizardJumpModule
  parent: Global
  children:
  - Global.LizardJumpModule.#ctor(Lizard)
  - Global.LizardJumpModule.InStandardRunMode
  - Global.LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder,System.Boolean)
  - Global.LizardJumpModule.Jump
  - Global.LizardJumpModule.NoRunBehavior
  - Global.LizardJumpModule.PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)
  - Global.LizardJumpModule.TryChainJump(UnityEngine.Vector2)
  - Global.LizardJumpModule.Update
  - Global.LizardJumpModule.actOnJump
  - Global.LizardJumpModule.canChainJump
  - Global.LizardJumpModule.chargeSound
  - Global.LizardJumpModule.controlledJumpFinder
  - Global.LizardJumpModule.gasLeakPower
  - Global.LizardJumpModule.gasLeakSound
  - Global.LizardJumpModule.gasLeakSpear
  - Global.LizardJumpModule.gasLeakTime
  - Global.LizardJumpModule.jumpCounter
  - Global.LizardJumpModule.jumpFinders
  - Global.LizardJumpModule.jumpToPoint
  - Global.LizardJumpModule.lizardCell
  - Global.LizardJumpModule.smoke
  - Global.LizardJumpModule.spin
  langs:
  - csharp
  - vb
  name: LizardJumpModule
  nameWithType: LizardJumpModule
  fullName: LizardJumpModule
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:LizardJumpModule</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class LizardJumpModule
    content.vb: Public Class LizardJumpModule
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.LizardJumpModule.jumpFinders
  commentId: F:Global.LizardJumpModule.jumpFinders
  id: jumpFinders
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: jumpFinders
  nameWithType: LizardJumpModule.jumpFinders
  fullName: LizardJumpModule.jumpFinders
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.jumpFinders</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<LizardJumpModule.JumpFinder> jumpFinders
    return:
      type: System.Collections.Generic.List{LizardJumpModule.JumpFinder}
    content.vb: Public jumpFinders As List(Of LizardJumpModule.JumpFinder)
- uid: Global.LizardJumpModule.actOnJump
  commentId: F:Global.LizardJumpModule.actOnJump
  id: actOnJump
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: actOnJump
  nameWithType: LizardJumpModule.actOnJump
  fullName: LizardJumpModule.actOnJump
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.actOnJump</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public LizardJumpModule.JumpFinder actOnJump
    return:
      type: Global.LizardJumpModule.JumpFinder
    content.vb: Public actOnJump As LizardJumpModule.JumpFinder
- uid: Global.LizardJumpModule.lizardCell
  commentId: F:Global.LizardJumpModule.lizardCell
  id: lizardCell
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: lizardCell
  nameWithType: LizardJumpModule.lizardCell
  fullName: LizardJumpModule.lizardCell
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.lizardCell</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PathFinder.PathingCell lizardCell
    return:
      type: Global.PathFinder.PathingCell
    content.vb: Public lizardCell As PathFinder.PathingCell
- uid: Global.LizardJumpModule.jumpCounter
  commentId: F:Global.LizardJumpModule.jumpCounter
  id: jumpCounter
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: jumpCounter
  nameWithType: LizardJumpModule.jumpCounter
  fullName: LizardJumpModule.jumpCounter
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.jumpCounter</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int jumpCounter
    return:
      type: System.Int32
    content.vb: Public jumpCounter As Integer
- uid: Global.LizardJumpModule.spin
  commentId: F:Global.LizardJumpModule.spin
  id: spin
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: spin
  nameWithType: LizardJumpModule.spin
  fullName: LizardJumpModule.spin
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.spin</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int spin
    return:
      type: System.Int32
    content.vb: Public spin As Integer
- uid: Global.LizardJumpModule.smoke
  commentId: F:Global.LizardJumpModule.smoke
  id: smoke
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: smoke
  nameWithType: LizardJumpModule.smoke
  fullName: LizardJumpModule.smoke
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.smoke</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public CyanLizardSmoke smoke
    return:
      type: Smoke.CyanLizardSmoke
    content.vb: Public smoke As CyanLizardSmoke
- uid: Global.LizardJumpModule.gasLeakSpear
  commentId: F:Global.LizardJumpModule.gasLeakSpear
  id: gasLeakSpear
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: gasLeakSpear
  nameWithType: LizardJumpModule.gasLeakSpear
  fullName: LizardJumpModule.gasLeakSpear
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.gasLeakSpear</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Spear gasLeakSpear
    return:
      type: Global.Spear
    content.vb: Public gasLeakSpear As Spear
- uid: Global.LizardJumpModule.gasLeakPower
  commentId: F:Global.LizardJumpModule.gasLeakPower
  id: gasLeakPower
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: gasLeakPower
  nameWithType: LizardJumpModule.gasLeakPower
  fullName: LizardJumpModule.gasLeakPower
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.gasLeakPower</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float gasLeakPower
    return:
      type: System.Single
    content.vb: Public gasLeakPower As Single
- uid: Global.LizardJumpModule.gasLeakTime
  commentId: F:Global.LizardJumpModule.gasLeakTime
  id: gasLeakTime
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: gasLeakTime
  nameWithType: LizardJumpModule.gasLeakTime
  fullName: LizardJumpModule.gasLeakTime
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.gasLeakTime</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float gasLeakTime
    return:
      type: System.Single
    content.vb: Public gasLeakTime As Single
- uid: Global.LizardJumpModule.gasLeakSound
  commentId: F:Global.LizardJumpModule.gasLeakSound
  id: gasLeakSound
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: gasLeakSound
  nameWithType: LizardJumpModule.gasLeakSound
  fullName: LizardJumpModule.gasLeakSound
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.gasLeakSound</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ChunkSoundEmitter gasLeakSound
    return:
      type: Global.ChunkSoundEmitter
    content.vb: Public gasLeakSound As ChunkSoundEmitter
- uid: Global.LizardJumpModule.chargeSound
  commentId: F:Global.LizardJumpModule.chargeSound
  id: chargeSound
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: chargeSound
  nameWithType: LizardJumpModule.chargeSound
  fullName: LizardJumpModule.chargeSound
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.chargeSound</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ChunkSoundEmitter chargeSound
    return:
      type: Global.ChunkSoundEmitter
    content.vb: Public chargeSound As ChunkSoundEmitter
- uid: Global.LizardJumpModule.controlledJumpFinder
  commentId: F:Global.LizardJumpModule.controlledJumpFinder
  id: controlledJumpFinder
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: controlledJumpFinder
  nameWithType: LizardJumpModule.controlledJumpFinder
  fullName: LizardJumpModule.controlledJumpFinder
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:LizardJumpModule.controlledJumpFinder</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public LizardJumpModule.JumpFinder controlledJumpFinder
    return:
      type: Global.LizardJumpModule.JumpFinder
    content.vb: Public controlledJumpFinder As LizardJumpModule.JumpFinder
- uid: Global.LizardJumpModule.#ctor(Lizard)
  commentId: M:Global.LizardJumpModule.#ctor(Lizard)
  id: '#ctor(Lizard)'
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: LizardJumpModule(Lizard)
  nameWithType: LizardJumpModule.LizardJumpModule(Lizard)
  fullName: LizardJumpModule.LizardJumpModule(Lizard)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>LizardJumpModule</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public LizardJumpModule(Lizard lizard)
    parameters:
    - id: lizard
      type: Global.Lizard
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lizard</parameter>
            <parameter>M:LizardJumpModule.#ctor(Lizard)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(lizard As Lizard)
  overload: Global.LizardJumpModule.#ctor*
  nameWithType.vb: LizardJumpModule.New(Lizard)
  fullName.vb: LizardJumpModule.New(Lizard)
  name.vb: New(Lizard)
- uid: Global.LizardJumpModule.Update
  commentId: M:Global.LizardJumpModule.Update
  id: Update
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: LizardJumpModule.Update()
  fullName: LizardJumpModule.Update()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardJumpModule.Update</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update()
  overload: Global.LizardJumpModule.Update*
- uid: Global.LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder,System.Boolean)
  commentId: M:Global.LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder,System.Boolean)
  id: InitiateJump(LizardJumpModule.JumpFinder,System.Boolean)
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: InitiateJump(JumpFinder, bool)
  nameWithType: LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder, bool)
  fullName: LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void InitiateJump(LizardJumpModule.JumpFinder jump, bool chainJump)
    parameters:
    - id: jump
      type: Global.LizardJumpModule.JumpFinder
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>jump</parameter>
            <parameter>M:LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder,System.Boolean)</parameter>
          </include>
        </markup>
    - id: chainJump
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>chainJump</parameter>
            <parameter>M:LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub InitiateJump(jump As LizardJumpModule.JumpFinder, chainJump As Boolean)
  overload: Global.LizardJumpModule.InitiateJump*
  nameWithType.vb: LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder, Boolean)
  fullName.vb: LizardJumpModule.InitiateJump(LizardJumpModule.JumpFinder, Boolean)
  name.vb: InitiateJump(JumpFinder, Boolean)
- uid: Global.LizardJumpModule.TryChainJump(UnityEngine.Vector2)
  commentId: M:Global.LizardJumpModule.TryChainJump(UnityEngine.Vector2)
  id: TryChainJump(UnityEngine.Vector2)
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: TryChainJump(Vector2)
  nameWithType: LizardJumpModule.TryChainJump(Vector2)
  fullName: LizardJumpModule.TryChainJump(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardJumpModule.TryChainJump(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool TryChainJump(Vector2 pos)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:LizardJumpModule.TryChainJump(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:LizardJumpModule.TryChainJump(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function TryChainJump(pos As Vector2) As Boolean
  overload: Global.LizardJumpModule.TryChainJump*
- uid: Global.LizardJumpModule.Jump
  commentId: M:Global.LizardJumpModule.Jump
  id: Jump
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: Jump()
  nameWithType: LizardJumpModule.Jump()
  fullName: LizardJumpModule.Jump()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardJumpModule.Jump</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Jump()
    content.vb: Public Sub Jump()
  overload: Global.LizardJumpModule.Jump*
- uid: Global.LizardJumpModule.PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)
  commentId: M:Global.LizardJumpModule.PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)
  id: PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: PathWeightComparison(PathingCell, PathingCell)
  nameWithType: LizardJumpModule.PathWeightComparison(PathFinder.PathingCell, PathFinder.PathingCell)
  fullName: LizardJumpModule.PathWeightComparison(PathFinder.PathingCell, PathFinder.PathingCell)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:LizardJumpModule.PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool PathWeightComparison(PathFinder.PathingCell A, PathFinder.PathingCell B)
    parameters:
    - id: A
      type: Global.PathFinder.PathingCell
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:LizardJumpModule.PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)</parameter>
          </include>
        </markup>
    - id: B
      type: Global.PathFinder.PathingCell
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:LizardJumpModule.PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:LizardJumpModule.PathWeightComparison(PathFinder.PathingCell,PathFinder.PathingCell)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PathWeightComparison(A As PathFinder.PathingCell, B As PathFinder.PathingCell) As Boolean
  overload: Global.LizardJumpModule.PathWeightComparison*
- uid: Global.LizardJumpModule.jumpToPoint
  commentId: P:Global.LizardJumpModule.jumpToPoint
  id: jumpToPoint
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: jumpToPoint
  nameWithType: LizardJumpModule.jumpToPoint
  fullName: LizardJumpModule.jumpToPoint
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardJumpModule.jumpToPoint</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 jumpToPoint { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public ReadOnly Property jumpToPoint As Vector2
  overload: Global.LizardJumpModule.jumpToPoint*
- uid: Global.LizardJumpModule.InStandardRunMode
  commentId: P:Global.LizardJumpModule.InStandardRunMode
  id: InStandardRunMode
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: InStandardRunMode
  nameWithType: LizardJumpModule.InStandardRunMode
  fullName: LizardJumpModule.InStandardRunMode
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardJumpModule.InStandardRunMode</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool InStandardRunMode { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property InStandardRunMode As Boolean
  overload: Global.LizardJumpModule.InStandardRunMode*
- uid: Global.LizardJumpModule.canChainJump
  commentId: P:Global.LizardJumpModule.canChainJump
  id: canChainJump
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: canChainJump
  nameWithType: LizardJumpModule.canChainJump
  fullName: LizardJumpModule.canChainJump
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardJumpModule.canChainJump</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool canChainJump { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property canChainJump As Boolean
  overload: Global.LizardJumpModule.canChainJump*
- uid: Global.LizardJumpModule.NoRunBehavior
  commentId: P:Global.LizardJumpModule.NoRunBehavior
  id: NoRunBehavior
  parent: Global.LizardJumpModule
  langs:
  - csharp
  - vb
  name: NoRunBehavior
  nameWithType: LizardJumpModule.NoRunBehavior
  fullName: LizardJumpModule.NoRunBehavior
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:LizardJumpModule.NoRunBehavior</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool NoRunBehavior { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property NoRunBehavior As Boolean
  overload: Global.LizardJumpModule.NoRunBehavior*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{LizardJumpModule.JumpFinder}
  commentId: T:System.Collections.Generic.List{LizardJumpModule.JumpFinder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<LizardJumpModule.JumpFinder>
  nameWithType: List<LizardJumpModule.JumpFinder>
  fullName: System.Collections.Generic.List<LizardJumpModule.JumpFinder>
  nameWithType.vb: List(Of LizardJumpModule.JumpFinder)
  fullName.vb: System.Collections.Generic.List(Of LizardJumpModule.JumpFinder)
  name.vb: List(Of LizardJumpModule.JumpFinder)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.LizardJumpModule
    name: LizardJumpModule
    isExternal: true
    href: LizardJumpModule.html
  - name: .
  - uid: Global.LizardJumpModule.JumpFinder
    name: JumpFinder
    isExternal: true
    href: LizardJumpModule.JumpFinder.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.LizardJumpModule
    name: LizardJumpModule
    isExternal: true
    href: LizardJumpModule.html
  - name: .
  - uid: Global.LizardJumpModule.JumpFinder
    name: JumpFinder
    isExternal: true
    href: LizardJumpModule.JumpFinder.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Global.LizardJumpModule.JumpFinder
  commentId: T:Global.LizardJumpModule.JumpFinder
  isExternal: true
  href: LizardJumpModule.html
  name: LizardJumpModule.JumpFinder
  nameWithType: LizardJumpModule.JumpFinder
  fullName: LizardJumpModule.JumpFinder
  spec.csharp:
  - uid: Global.LizardJumpModule
    name: LizardJumpModule
    isExternal: true
    href: LizardJumpModule.html
  - name: .
  - uid: Global.LizardJumpModule.JumpFinder
    name: JumpFinder
    isExternal: true
    href: LizardJumpModule.JumpFinder.html
  spec.vb:
  - uid: Global.LizardJumpModule
    name: LizardJumpModule
    isExternal: true
    href: LizardJumpModule.html
  - name: .
  - uid: Global.LizardJumpModule.JumpFinder
    name: JumpFinder
    isExternal: true
    href: LizardJumpModule.JumpFinder.html
- uid: Global.PathFinder.PathingCell
  commentId: T:Global.PathFinder.PathingCell
  isExternal: true
  href: PathFinder.html
  name: PathFinder.PathingCell
  nameWithType: PathFinder.PathingCell
  fullName: PathFinder.PathingCell
  spec.csharp:
  - uid: Global.PathFinder
    name: PathFinder
    isExternal: true
    href: PathFinder.html
  - name: .
  - uid: Global.PathFinder.PathingCell
    name: PathingCell
    isExternal: true
    href: PathFinder.PathingCell.html
  spec.vb:
  - uid: Global.PathFinder
    name: PathFinder
    isExternal: true
    href: PathFinder.html
  - name: .
  - uid: Global.PathFinder.PathingCell
    name: PathingCell
    isExternal: true
    href: PathFinder.PathingCell.html
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Smoke.CyanLizardSmoke
  commentId: T:Smoke.CyanLizardSmoke
  parent: Smoke
  isExternal: true
  href: Smoke.CyanLizardSmoke.html
  name: CyanLizardSmoke
  nameWithType: CyanLizardSmoke
  fullName: Smoke.CyanLizardSmoke
- uid: Smoke
  commentId: N:Smoke
  isExternal: true
  href: Smoke.html
  name: Smoke
  nameWithType: Smoke
  fullName: Smoke
- uid: Global.Spear
  commentId: T:Global.Spear
  isExternal: true
  href: Spear.html
  name: Spear
  nameWithType: Spear
  fullName: Spear
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.ChunkSoundEmitter
  commentId: T:Global.ChunkSoundEmitter
  isExternal: true
  href: ChunkSoundEmitter.html
  name: ChunkSoundEmitter
  nameWithType: ChunkSoundEmitter
  fullName: ChunkSoundEmitter
- uid: Global.LizardJumpModule.#ctor*
  commentId: Overload:Global.LizardJumpModule.#ctor
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule__ctor_Lizard_
  name: LizardJumpModule
  nameWithType: LizardJumpModule.LizardJumpModule
  fullName: LizardJumpModule.LizardJumpModule
  nameWithType.vb: LizardJumpModule.New
  fullName.vb: LizardJumpModule.New
  name.vb: New
- uid: Global.Lizard
  commentId: T:Global.Lizard
  isExternal: true
  href: Lizard.html
  name: Lizard
  nameWithType: Lizard
  fullName: Lizard
- uid: Global.LizardJumpModule.Update*
  commentId: Overload:Global.LizardJumpModule.Update
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_Update
  name: Update
  nameWithType: LizardJumpModule.Update
  fullName: LizardJumpModule.Update
- uid: Global.LizardJumpModule.InitiateJump*
  commentId: Overload:Global.LizardJumpModule.InitiateJump
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_InitiateJump_LizardJumpModule_JumpFinder_System_Boolean_
  name: InitiateJump
  nameWithType: LizardJumpModule.InitiateJump
  fullName: LizardJumpModule.InitiateJump
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.LizardJumpModule.TryChainJump*
  commentId: Overload:Global.LizardJumpModule.TryChainJump
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_TryChainJump_UnityEngine_Vector2_
  name: TryChainJump
  nameWithType: LizardJumpModule.TryChainJump
  fullName: LizardJumpModule.TryChainJump
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.LizardJumpModule.Jump*
  commentId: Overload:Global.LizardJumpModule.Jump
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_Jump
  name: Jump
  nameWithType: LizardJumpModule.Jump
  fullName: LizardJumpModule.Jump
- uid: Global.LizardJumpModule.PathWeightComparison*
  commentId: Overload:Global.LizardJumpModule.PathWeightComparison
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_PathWeightComparison_PathFinder_PathingCell_PathFinder_PathingCell_
  name: PathWeightComparison
  nameWithType: LizardJumpModule.PathWeightComparison
  fullName: LizardJumpModule.PathWeightComparison
- uid: Global.LizardJumpModule.jumpToPoint*
  commentId: Overload:Global.LizardJumpModule.jumpToPoint
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_jumpToPoint
  name: jumpToPoint
  nameWithType: LizardJumpModule.jumpToPoint
  fullName: LizardJumpModule.jumpToPoint
- uid: Global.LizardJumpModule.InStandardRunMode*
  commentId: Overload:Global.LizardJumpModule.InStandardRunMode
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_InStandardRunMode
  name: InStandardRunMode
  nameWithType: LizardJumpModule.InStandardRunMode
  fullName: LizardJumpModule.InStandardRunMode
- uid: Global.LizardJumpModule.canChainJump*
  commentId: Overload:Global.LizardJumpModule.canChainJump
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_canChainJump
  name: canChainJump
  nameWithType: LizardJumpModule.canChainJump
  fullName: LizardJumpModule.canChainJump
- uid: Global.LizardJumpModule.NoRunBehavior*
  commentId: Overload:Global.LizardJumpModule.NoRunBehavior
  isExternal: true
  href: Global.LizardJumpModule.html#LizardJumpModule_NoRunBehavior
  name: NoRunBehavior
  nameWithType: LizardJumpModule.NoRunBehavior
  fullName: LizardJumpModule.NoRunBehavior
