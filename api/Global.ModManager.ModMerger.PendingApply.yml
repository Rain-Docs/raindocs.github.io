### YamlMime:ManagedReference
items:
- uid: Global.ModManager.ModMerger.PendingApply
  commentId: T:Global.ModManager.ModMerger.PendingApply
  id: ModManager.ModMerger.PendingApply
  parent: Global
  children:
  - Global.ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)
  - Global.ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.String[],System.String[])
  - Global.ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)
  - Global.ModManager.ModMerger.PendingApply.ApplyModifications(System.String)
  - Global.ModManager.ModMerger.PendingApply.CollectModifications(System.String[])
  - Global.ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)
  - Global.ModManager.ModMerger.PendingApply.fileDestinations
  - Global.ModManager.ModMerger.PendingApply.filePath
  - Global.ModManager.ModMerger.PendingApply.isModification
  - Global.ModManager.ModMerger.PendingApply.isVanilla
  - Global.ModManager.ModMerger.PendingApply.mergeLines
  - Global.ModManager.ModMerger.PendingApply.modApplyFrom
  - Global.ModManager.ModMerger.PendingApply.subApplies
  langs:
  - csharp
  - vb
  name: ModManager.ModMerger.PendingApply
  nameWithType: ModManager.ModMerger.PendingApply
  fullName: ModManager.ModMerger.PendingApply
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:ModManager.ModMerger.PendingApply</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class ModManager.ModMerger.PendingApply
    content.vb: Public Class ModManager.ModMerger.PendingApply
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.ModManager.ModMerger.PendingApply.isVanilla
  commentId: F:Global.ModManager.ModMerger.PendingApply.isVanilla
  id: isVanilla
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: isVanilla
  nameWithType: ModManager.ModMerger.PendingApply.isVanilla
  fullName: ModManager.ModMerger.PendingApply.isVanilla
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.PendingApply.isVanilla</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool isVanilla
    return:
      type: System.Boolean
    content.vb: Public isVanilla As Boolean
- uid: Global.ModManager.ModMerger.PendingApply.isModification
  commentId: F:Global.ModManager.ModMerger.PendingApply.isModification
  id: isModification
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: isModification
  nameWithType: ModManager.ModMerger.PendingApply.isModification
  fullName: ModManager.ModMerger.PendingApply.isModification
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.PendingApply.isModification</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool isModification
    return:
      type: System.Boolean
    content.vb: Public isModification As Boolean
- uid: Global.ModManager.ModMerger.PendingApply.filePath
  commentId: F:Global.ModManager.ModMerger.PendingApply.filePath
  id: filePath
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: filePath
  nameWithType: ModManager.ModMerger.PendingApply.filePath
  fullName: ModManager.ModMerger.PendingApply.filePath
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.PendingApply.filePath</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string filePath
    return:
      type: System.String
    content.vb: Public filePath As String
- uid: Global.ModManager.ModMerger.PendingApply.fileDestinations
  commentId: F:Global.ModManager.ModMerger.PendingApply.fileDestinations
  id: fileDestinations
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: fileDestinations
  nameWithType: ModManager.ModMerger.PendingApply.fileDestinations
  fullName: ModManager.ModMerger.PendingApply.fileDestinations
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.PendingApply.fileDestinations</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string[] fileDestinations
    return:
      type: System.String[]
    content.vb: Public fileDestinations As String()
- uid: Global.ModManager.ModMerger.PendingApply.mergeLines
  commentId: F:Global.ModManager.ModMerger.PendingApply.mergeLines
  id: mergeLines
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: mergeLines
  nameWithType: ModManager.ModMerger.PendingApply.mergeLines
  fullName: ModManager.ModMerger.PendingApply.mergeLines
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.PendingApply.mergeLines</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<string> mergeLines
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public mergeLines As List(Of String)
- uid: Global.ModManager.ModMerger.PendingApply.modApplyFrom
  commentId: F:Global.ModManager.ModMerger.PendingApply.modApplyFrom
  id: modApplyFrom
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: modApplyFrom
  nameWithType: ModManager.ModMerger.PendingApply.modApplyFrom
  fullName: ModManager.ModMerger.PendingApply.modApplyFrom
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.PendingApply.modApplyFrom</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ModManager.Mod modApplyFrom
    return:
      type: Global.ModManager.Mod
    content.vb: Public modApplyFrom As ModManager.Mod
- uid: Global.ModManager.ModMerger.PendingApply.subApplies
  commentId: F:Global.ModManager.ModMerger.PendingApply.subApplies
  id: subApplies
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: subApplies
  nameWithType: ModManager.ModMerger.PendingApply.subApplies
  fullName: ModManager.ModMerger.PendingApply.subApplies
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.PendingApply.subApplies</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<ModManager.ModMerger.PendingApply> subApplies
    return:
      type: System.Collections.Generic.List{ModManager.ModMerger.PendingApply}
    content.vb: Public subApplies As List(Of ModManager.ModMerger.PendingApply)
- uid: Global.ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)
  commentId: M:Global.ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)
  id: '#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)'
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: PendingApply(Mod, string, bool, bool)
  nameWithType: ModManager.ModMerger.PendingApply.PendingApply(ModManager.Mod, string, bool, bool)
  fullName: ModManager.ModMerger.PendingApply.PendingApply(ModManager.Mod, string, bool, bool)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>ModManager.ModMerger.PendingApply</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PendingApply(ModManager.Mod modApplyFrom, string filePath, bool isVanilla, bool isModification)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: filePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>filePath</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: isVanilla
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isVanilla</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: isModification
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isModification</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(modApplyFrom As ModManager.Mod, filePath As String, isVanilla As Boolean, isModification As Boolean)
  overload: Global.ModManager.ModMerger.PendingApply.#ctor*
  nameWithType.vb: ModManager.ModMerger.PendingApply.New(ModManager.Mod, String, Boolean, Boolean)
  fullName.vb: ModManager.ModMerger.PendingApply.New(ModManager.Mod, String, Boolean, Boolean)
  name.vb: New(Mod, String, Boolean, Boolean)
- uid: Global.ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.String[],System.String[])
  commentId: M:Global.ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.String[],System.String[])
  id: '#ctor(ModManager.Mod,System.String,System.String[],System.String[])'
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: PendingApply(Mod, string, string[], string[])
  nameWithType: ModManager.ModMerger.PendingApply.PendingApply(ModManager.Mod, string, string[], string[])
  fullName: ModManager.ModMerger.PendingApply.PendingApply(ModManager.Mod, string, string[], string[])
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>ModManager.ModMerger.PendingApply</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PendingApply(ModManager.Mod modApplyFrom, string filePath, string[] fileDestinations, string[] lines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.String[],System.String[])</parameter>
          </include>
        </markup>
    - id: filePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>filePath</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.String[],System.String[])</parameter>
          </include>
        </markup>
    - id: fileDestinations
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fileDestinations</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.String[],System.String[])</parameter>
          </include>
        </markup>
    - id: lines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lines</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.#ctor(ModManager.Mod,System.String,System.String[],System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(modApplyFrom As ModManager.Mod, filePath As String, fileDestinations As String(), lines As String())
  overload: Global.ModManager.ModMerger.PendingApply.#ctor*
  nameWithType.vb: ModManager.ModMerger.PendingApply.New(ModManager.Mod, String, String(), String())
  fullName.vb: ModManager.ModMerger.PendingApply.New(ModManager.Mod, String, String(), String())
  name.vb: New(Mod, String, String(), String())
- uid: Global.ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)
  commentId: M:Global.ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)
  id: MatchAndRemoveStart(System.String,System.String,System.String@)
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: MatchAndRemoveStart(string, string, out string)
  nameWithType: ModManager.ModMerger.PendingApply.MatchAndRemoveStart(string, string, out string)
  fullName: ModManager.ModMerger.PendingApply.MatchAndRemoveStart(string, string, out string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool MatchAndRemoveStart(string line, string match, out string result)
    parameters:
    - id: line
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)</parameter>
          </include>
        </markup>
    - id: match
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>match</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)</parameter>
          </include>
        </markup>
    - id: result
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>result</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.MatchAndRemoveStart(System.String,System.String,System.String@)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function MatchAndRemoveStart(line As String, match As String, result As String) As Boolean
  overload: Global.ModManager.ModMerger.PendingApply.MatchAndRemoveStart*
  nameWithType.vb: ModManager.ModMerger.PendingApply.MatchAndRemoveStart(String, String, String)
  fullName.vb: ModManager.ModMerger.PendingApply.MatchAndRemoveStart(String, String, String)
  name.vb: MatchAndRemoveStart(String, String, String)
- uid: Global.ModManager.ModMerger.PendingApply.CollectModifications(System.String[])
  commentId: M:Global.ModManager.ModMerger.PendingApply.CollectModifications(System.String[])
  id: CollectModifications(System.String[])
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: CollectModifications(string[])
  nameWithType: ModManager.ModMerger.PendingApply.CollectModifications(string[])
  fullName: ModManager.ModMerger.PendingApply.CollectModifications(string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.PendingApply.CollectModifications(System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void CollectModifications(string[] modifyFileLines)
    parameters:
    - id: modifyFileLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modifyFileLines</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.CollectModifications(System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub CollectModifications(modifyFileLines As String())
  overload: Global.ModManager.ModMerger.PendingApply.CollectModifications*
  nameWithType.vb: ModManager.ModMerger.PendingApply.CollectModifications(String())
  fullName.vb: ModManager.ModMerger.PendingApply.CollectModifications(String())
  name.vb: CollectModifications(String())
- uid: Global.ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)
  commentId: M:Global.ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)
  id: ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: ApplyMerges(Mod, ModMerger, string)
  nameWithType: ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod, ModManager.ModMerger, string)
  fullName: ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod, ModManager.ModMerger, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ApplyMerges(ModManager.Mod modApplyFrom, ModManager.ModMerger merger, string pathToModify)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)</parameter>
          </include>
        </markup>
    - id: merger
      type: Global.ModManager.ModMerger
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>merger</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)</parameter>
          </include>
        </markup>
    - id: pathToModify
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pathToModify</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod,ModManager.ModMerger,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ApplyMerges(modApplyFrom As ModManager.Mod, merger As ModManager.ModMerger, pathToModify As String)
  overload: Global.ModManager.ModMerger.PendingApply.ApplyMerges*
  nameWithType.vb: ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod, ModManager.ModMerger, String)
  fullName.vb: ModManager.ModMerger.PendingApply.ApplyMerges(ModManager.Mod, ModManager.ModMerger, String)
  name.vb: ApplyMerges(Mod, ModMerger, String)
- uid: Global.ModManager.ModMerger.PendingApply.ApplyModifications(System.String)
  commentId: M:Global.ModManager.ModMerger.PendingApply.ApplyModifications(System.String)
  id: ApplyModifications(System.String)
  parent: Global.ModManager.ModMerger.PendingApply
  langs:
  - csharp
  - vb
  name: ApplyModifications(string)
  nameWithType: ModManager.ModMerger.PendingApply.ApplyModifications(string)
  fullName: ModManager.ModMerger.PendingApply.ApplyModifications(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.PendingApply.ApplyModifications(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ApplyModifications(string pathToModify)
    parameters:
    - id: pathToModify
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pathToModify</parameter>
            <parameter>M:ModManager.ModMerger.PendingApply.ApplyModifications(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ApplyModifications(pathToModify As String)
  overload: Global.ModManager.ModMerger.PendingApply.ApplyModifications*
  nameWithType.vb: ModManager.ModMerger.PendingApply.ApplyModifications(String)
  fullName.vb: ModManager.ModMerger.PendingApply.ApplyModifications(String)
  name.vb: ApplyModifications(String)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Global.ModManager.Mod
  commentId: T:Global.ModManager.Mod
  isExternal: true
  href: ModManager.html
  name: ModManager.Mod
  nameWithType: ModManager.Mod
  fullName: ModManager.Mod
  spec.csharp:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.Mod
    name: Mod
    isExternal: true
    href: ModManager.Mod.html
  spec.vb:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.Mod
    name: Mod
    isExternal: true
    href: ModManager.Mod.html
- uid: System.Collections.Generic.List{ModManager.ModMerger.PendingApply}
  commentId: T:System.Collections.Generic.List{ModManager.ModMerger.PendingApply}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<ModManager.ModMerger.PendingApply>
  nameWithType: List<ModManager.ModMerger.PendingApply>
  fullName: System.Collections.Generic.List<ModManager.ModMerger.PendingApply>
  nameWithType.vb: List(Of ModManager.ModMerger.PendingApply)
  fullName.vb: System.Collections.Generic.List(Of ModManager.ModMerger.PendingApply)
  name.vb: List(Of ModManager.ModMerger.PendingApply)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.ModMerger
    name: ModMerger
    isExternal: true
    href: ModManager.ModMerger.html
  - name: .
  - uid: Global.ModManager.ModMerger.PendingApply
    name: PendingApply
    isExternal: true
    href: ModManager.ModMerger.PendingApply.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.ModMerger
    name: ModMerger
    isExternal: true
    href: ModManager.ModMerger.html
  - name: .
  - uid: Global.ModManager.ModMerger.PendingApply
    name: PendingApply
    isExternal: true
    href: ModManager.ModMerger.PendingApply.html
  - name: )
- uid: Global.ModManager.ModMerger.PendingApply.#ctor*
  commentId: Overload:Global.ModManager.ModMerger.PendingApply.#ctor
  isExternal: true
  href: Global.ModManager.ModMerger.PendingApply.html#ModManager_ModMerger_PendingApply__ctor_ModManager_Mod_System_String_System_Boolean_System_Boolean_
  name: PendingApply
  nameWithType: ModManager.ModMerger.PendingApply.PendingApply
  fullName: ModManager.ModMerger.PendingApply.PendingApply
  nameWithType.vb: ModManager.ModMerger.PendingApply.New
  fullName.vb: ModManager.ModMerger.PendingApply.New
  name.vb: New
- uid: Global.ModManager.ModMerger.PendingApply.MatchAndRemoveStart*
  commentId: Overload:Global.ModManager.ModMerger.PendingApply.MatchAndRemoveStart
  isExternal: true
  href: Global.ModManager.ModMerger.PendingApply.html#ModManager_ModMerger_PendingApply_MatchAndRemoveStart_System_String_System_String_System_String__
  name: MatchAndRemoveStart
  nameWithType: ModManager.ModMerger.PendingApply.MatchAndRemoveStart
  fullName: ModManager.ModMerger.PendingApply.MatchAndRemoveStart
- uid: Global.ModManager.ModMerger.PendingApply.CollectModifications*
  commentId: Overload:Global.ModManager.ModMerger.PendingApply.CollectModifications
  isExternal: true
  href: Global.ModManager.ModMerger.PendingApply.html#ModManager_ModMerger_PendingApply_CollectModifications_System_String___
  name: CollectModifications
  nameWithType: ModManager.ModMerger.PendingApply.CollectModifications
  fullName: ModManager.ModMerger.PendingApply.CollectModifications
- uid: Global.ModManager.ModMerger.PendingApply.ApplyMerges*
  commentId: Overload:Global.ModManager.ModMerger.PendingApply.ApplyMerges
  isExternal: true
  href: Global.ModManager.ModMerger.PendingApply.html#ModManager_ModMerger_PendingApply_ApplyMerges_ModManager_Mod_ModManager_ModMerger_System_String_
  name: ApplyMerges
  nameWithType: ModManager.ModMerger.PendingApply.ApplyMerges
  fullName: ModManager.ModMerger.PendingApply.ApplyMerges
- uid: Global.ModManager.ModMerger
  commentId: T:Global.ModManager.ModMerger
  isExternal: true
  href: ModManager.html
  name: ModManager.ModMerger
  nameWithType: ModManager.ModMerger
  fullName: ModManager.ModMerger
  spec.csharp:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.ModMerger
    name: ModMerger
    isExternal: true
    href: ModManager.ModMerger.html
  spec.vb:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.ModMerger
    name: ModMerger
    isExternal: true
    href: ModManager.ModMerger.html
- uid: Global.ModManager.ModMerger.PendingApply.ApplyModifications*
  commentId: Overload:Global.ModManager.ModMerger.PendingApply.ApplyModifications
  isExternal: true
  href: Global.ModManager.ModMerger.PendingApply.html#ModManager_ModMerger_PendingApply_ApplyModifications_System_String_
  name: ApplyModifications
  nameWithType: ModManager.ModMerger.PendingApply.ApplyModifications
  fullName: ModManager.ModMerger.PendingApply.ApplyModifications
