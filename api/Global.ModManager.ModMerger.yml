### YamlMime:ManagedReference
items:
- uid: Global.ModManager.ModMerger
  commentId: T:Global.ModManager.ModMerger
  id: ModManager.ModMerger
  parent: Global
  children:
  - Global.ModManager.ModMerger.#ctor
  - Global.ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)
  - Global.ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)
  - Global.ModManager.ModMerger.DeterminePaletteConflicts(System.String)
  - Global.ModManager.ModMerger.ExecutePendingMerge(ModManager.ModApplyer)
  - Global.ModManager.ModMerger.FindOutputPath(ModManager.Mod,System.String)
  - Global.ModManager.ModMerger.MergeConcat(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.MergeMapFiles(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.MergeRoomSettings(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.MergeShortStrings(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.MergeWorldFiles(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.MergeWorldMaps(ModManager.ModApplyer)
  - Global.ModManager.ModMerger.RelativePathToAbsolute(System.String,System.String)
  - Global.ModManager.ModMerger.UpdatePaletteLineWithConflict(System.String,System.String)
  - Global.ModManager.ModMerger.WriteMergedFile(ModManager.Mod,System.String,System.String[])
  - Global.ModManager.ModMerger.mergeMapInstructions
  - Global.ModManager.ModMerger.modMapData
  - Global.ModManager.ModMerger.modMapData2
  - Global.ModManager.ModMerger.paletteRemapping
  - Global.ModManager.ModMerger.palettesUsedSoFar
  langs:
  - csharp
  - vb
  name: ModManager.ModMerger
  nameWithType: ModManager.ModMerger
  fullName: ModManager.ModMerger
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:ModManager.ModMerger</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class ModManager.ModMerger
    content.vb: Public Class ModManager.ModMerger
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.ModManager.ModMerger.palettesUsedSoFar
  commentId: F:Global.ModManager.ModMerger.palettesUsedSoFar
  id: palettesUsedSoFar
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: palettesUsedSoFar
  nameWithType: ModManager.ModMerger.palettesUsedSoFar
  fullName: ModManager.ModMerger.palettesUsedSoFar
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.palettesUsedSoFar</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<int> palettesUsedSoFar
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public palettesUsedSoFar As List(Of Integer)
- uid: Global.ModManager.ModMerger.paletteRemapping
  commentId: F:Global.ModManager.ModMerger.paletteRemapping
  id: paletteRemapping
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: paletteRemapping
  nameWithType: ModManager.ModMerger.paletteRemapping
  fullName: ModManager.ModMerger.paletteRemapping
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.paletteRemapping</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Dictionary<int, int> paletteRemapping
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
    content.vb: Public paletteRemapping As Dictionary(Of Integer, Integer)
- uid: Global.ModManager.ModMerger.modMapData
  commentId: F:Global.ModManager.ModMerger.modMapData
  id: modMapData
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: modMapData
  nameWithType: ModManager.ModMerger.modMapData
  fullName: ModManager.ModMerger.modMapData
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.modMapData</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<ModManager.MapMerger.MergeMapData> modMapData
    return:
      type: System.Collections.Generic.List{ModManager.MapMerger.MergeMapData}
    content.vb: Public modMapData As List(Of ModManager.MapMerger.MergeMapData)
- uid: Global.ModManager.ModMerger.modMapData2
  commentId: F:Global.ModManager.ModMerger.modMapData2
  id: modMapData2
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: modMapData2
  nameWithType: ModManager.ModMerger.modMapData2
  fullName: ModManager.ModMerger.modMapData2
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.modMapData2</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<ModManager.MapMerger.MergeMapData> modMapData2
    return:
      type: System.Collections.Generic.List{ModManager.MapMerger.MergeMapData}
    content.vb: Public modMapData2 As List(Of ModManager.MapMerger.MergeMapData)
- uid: Global.ModManager.ModMerger.mergeMapInstructions
  commentId: F:Global.ModManager.ModMerger.mergeMapInstructions
  id: mergeMapInstructions
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: mergeMapInstructions
  nameWithType: ModManager.ModMerger.mergeMapInstructions
  fullName: ModManager.ModMerger.mergeMapInstructions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:ModManager.ModMerger.mergeMapInstructions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Dictionary<string, ModManager.MapMerger.MergeMapInstructions> mergeMapInstructions
    return:
      type: System.Collections.Generic.Dictionary{System.String,ModManager.MapMerger.MergeMapInstructions}
    content.vb: Public mergeMapInstructions As Dictionary(Of String, ModManager.MapMerger.MergeMapInstructions)
- uid: Global.ModManager.ModMerger.#ctor
  commentId: M:Global.ModManager.ModMerger.#ctor
  id: '#ctor'
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: ModMerger()
  nameWithType: ModManager.ModMerger.ModMerger()
  fullName: ModManager.ModMerger.ModMerger()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>ModManager.ModMerger</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public ModMerger()
    content.vb: Public Sub New()
  overload: Global.ModManager.ModMerger.#ctor*
  nameWithType.vb: ModManager.ModMerger.New()
  fullName.vb: ModManager.ModMerger.New()
  name.vb: New()
- uid: Global.ModManager.ModMerger.MergeWorldMaps(ModManager.ModApplyer)
  commentId: M:Global.ModManager.ModMerger.MergeWorldMaps(ModManager.ModApplyer)
  id: MergeWorldMaps(ModManager.ModApplyer)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeWorldMaps(ModApplyer)
  nameWithType: ModManager.ModMerger.MergeWorldMaps(ModManager.ModApplyer)
  fullName: ModManager.ModMerger.MergeWorldMaps(ModManager.ModApplyer)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeWorldMaps(ModManager.ModApplyer)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Replaced by MapMerger.MergeWorldMaps")]

      public void MergeWorldMaps(ModManager.ModApplyer applyer)
    parameters:
    - id: applyer
      type: Global.ModManager.ModApplyer
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>applyer</parameter>
            <parameter>M:ModManager.ModMerger.MergeWorldMaps(ModManager.ModApplyer)</parameter>
          </include>
        </markup>
    content.vb: >-
      <Obsolete("Replaced by MapMerger.MergeWorldMaps")>

      Public Sub MergeWorldMaps(applyer As ModManager.ModApplyer)
  overload: Global.ModManager.ModMerger.MergeWorldMaps*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Replaced by MapMerger.MergeWorldMaps
- uid: Global.ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)
  commentId: M:Global.ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)
  id: AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: AddPendingApply(Mod, string, string, bool)
  nameWithType: ModManager.ModMerger.AddPendingApply(ModManager.Mod, string, string, bool)
  fullName: ModManager.ModMerger.AddPendingApply(ModManager.Mod, string, string, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void AddPendingApply(ModManager.Mod modApplyFrom, string basePath, string moddedPath, bool isModification)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: basePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>basePath</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: moddedPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>moddedPath</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    - id: isModification
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isModification</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Sub AddPendingApply(modApplyFrom As ModManager.Mod, basePath As String, moddedPath As String, isModification As Boolean)
  overload: Global.ModManager.ModMerger.AddPendingApply*
  nameWithType.vb: ModManager.ModMerger.AddPendingApply(ModManager.Mod, String, String, Boolean)
  fullName.vb: ModManager.ModMerger.AddPendingApply(ModManager.Mod, String, String, Boolean)
  name.vb: AddPendingApply(Mod, String, String, Boolean)
- uid: Global.ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Global.ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)
  id: AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: AddPendingApply(Mod, string, string, bool, bool)
  nameWithType: ModManager.ModMerger.AddPendingApply(ModManager.Mod, string, string, bool, bool)
  fullName: ModManager.ModMerger.AddPendingApply(ModManager.Mod, string, string, bool, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: >-
      [Obsolete("Use four parameter function instead")]

      public void AddPendingApply(ModManager.Mod modApplyFrom, string basePath, string moddedPath, bool hasVanilla, bool isModification)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: basePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>basePath</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: moddedPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>moddedPath</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: hasVanilla
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hasVanilla</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    - id: isModification
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isModification</parameter>
            <parameter>M:ModManager.ModMerger.AddPendingApply(ModManager.Mod,System.String,System.String,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: >-
      <Obsolete("Use four parameter function instead")>

      Public Sub AddPendingApply(modApplyFrom As ModManager.Mod, basePath As String, moddedPath As String, hasVanilla As Boolean, isModification As Boolean)
  overload: Global.ModManager.ModMerger.AddPendingApply*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use four parameter function instead
  nameWithType.vb: ModManager.ModMerger.AddPendingApply(ModManager.Mod, String, String, Boolean, Boolean)
  fullName.vb: ModManager.ModMerger.AddPendingApply(ModManager.Mod, String, String, Boolean, Boolean)
  name.vb: AddPendingApply(Mod, String, String, Boolean, Boolean)
- uid: Global.ModManager.ModMerger.ExecutePendingMerge(ModManager.ModApplyer)
  commentId: M:Global.ModManager.ModMerger.ExecutePendingMerge(ModManager.ModApplyer)
  id: ExecutePendingMerge(ModManager.ModApplyer)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: ExecutePendingMerge(ModApplyer)
  nameWithType: ModManager.ModMerger.ExecutePendingMerge(ModManager.ModApplyer)
  fullName: ModManager.ModMerger.ExecutePendingMerge(ModManager.ModApplyer)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.ExecutePendingMerge(ModManager.ModApplyer)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ExecutePendingMerge(ModManager.ModApplyer applyer)
    parameters:
    - id: applyer
      type: Global.ModManager.ModApplyer
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>applyer</parameter>
            <parameter>M:ModManager.ModMerger.ExecutePendingMerge(ModManager.ModApplyer)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ExecutePendingMerge(applyer As ModManager.ModApplyer)
  overload: Global.ModManager.ModMerger.ExecutePendingMerge*
- uid: Global.ModManager.ModMerger.RelativePathToAbsolute(System.String,System.String)
  commentId: M:Global.ModManager.ModMerger.RelativePathToAbsolute(System.String,System.String)
  id: RelativePathToAbsolute(System.String,System.String)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: RelativePathToAbsolute(string, string)
  nameWithType: ModManager.ModMerger.RelativePathToAbsolute(string, string)
  fullName: ModManager.ModMerger.RelativePathToAbsolute(string, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.RelativePathToAbsolute(System.String,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string RelativePathToAbsolute(string destination, string origin)
    parameters:
    - id: destination
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>destination</parameter>
            <parameter>M:ModManager.ModMerger.RelativePathToAbsolute(System.String,System.String)</parameter>
          </include>
        </markup>
    - id: origin
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>origin</parameter>
            <parameter>M:ModManager.ModMerger.RelativePathToAbsolute(System.String,System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModMerger.RelativePathToAbsolute(System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function RelativePathToAbsolute(destination As String, origin As String) As String
  overload: Global.ModManager.ModMerger.RelativePathToAbsolute*
  nameWithType.vb: ModManager.ModMerger.RelativePathToAbsolute(String, String)
  fullName.vb: ModManager.ModMerger.RelativePathToAbsolute(String, String)
  name.vb: RelativePathToAbsolute(String, String)
- uid: Global.ModManager.ModMerger.MergeConcat(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.MergeConcat(ModManager.Mod,System.String,System.String[])
  id: MergeConcat(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeConcat(Mod, string, string[])
  nameWithType: ModManager.ModMerger.MergeConcat(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.MergeConcat(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeConcat(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void MergeConcat(ModManager.Mod modApplyFrom, string sourcePath, string[] mergeLines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.MergeConcat(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.MergeConcat(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.MergeConcat(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub MergeConcat(modApplyFrom As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.MergeConcat*
  nameWithType.vb: ModManager.ModMerger.MergeConcat(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.MergeConcat(ModManager.Mod, String, String())
  name.vb: MergeConcat(Mod, String, String())
- uid: Global.ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])
  id: MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeUniqueLinesUnordered(Mod, string, string[])
  nameWithType: ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MergeUniqueLinesUnordered(ModManager.Mod modApplyFrom, string sourcePath, string[] mergeLines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub MergeUniqueLinesUnordered(modApplyFrom As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.MergeUniqueLinesUnordered*
  nameWithType.vb: ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.MergeUniqueLinesUnordered(ModManager.Mod, String, String())
  name.vb: MergeUniqueLinesUnordered(Mod, String, String())
- uid: Global.ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])
  id: MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeUniqueItemsUnordered(Mod, string, string[])
  nameWithType: ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void MergeUniqueItemsUnordered(ModManager.Mod modApplyFrom, string sourcePath, string[] mergeLines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub MergeUniqueItemsUnordered(modApplyFrom As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.MergeUniqueItemsUnordered*
  nameWithType.vb: ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.MergeUniqueItemsUnordered(ModManager.Mod, String, String())
  name.vb: MergeUniqueItemsUnordered(Mod, String, String())
- uid: Global.ModManager.ModMerger.MergeShortStrings(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.MergeShortStrings(ModManager.Mod,System.String,System.String[])
  id: MergeShortStrings(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeShortStrings(Mod, string, string[])
  nameWithType: ModManager.ModMerger.MergeShortStrings(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.MergeShortStrings(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeShortStrings(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void MergeShortStrings(ModManager.Mod modApplyFrom, string sourcePath, string[] mergeLines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.MergeShortStrings(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.MergeShortStrings(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.MergeShortStrings(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub MergeShortStrings(modApplyFrom As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.MergeShortStrings*
  nameWithType.vb: ModManager.ModMerger.MergeShortStrings(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.MergeShortStrings(ModManager.Mod, String, String())
  name.vb: MergeShortStrings(Mod, String, String())
- uid: Global.ModManager.ModMerger.MergeRoomSettings(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.MergeRoomSettings(ModManager.Mod,System.String,System.String[])
  id: MergeRoomSettings(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeRoomSettings(Mod, string, string[])
  nameWithType: ModManager.ModMerger.MergeRoomSettings(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.MergeRoomSettings(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeRoomSettings(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MergeRoomSettings(ModManager.Mod modApplyFrom, string sourcePath, string[] mergeLines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.MergeRoomSettings(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.MergeRoomSettings(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.MergeRoomSettings(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub MergeRoomSettings(modApplyFrom As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.MergeRoomSettings*
  nameWithType.vb: ModManager.ModMerger.MergeRoomSettings(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.MergeRoomSettings(ModManager.Mod, String, String())
  name.vb: MergeRoomSettings(Mod, String, String())
- uid: Global.ModManager.ModMerger.MergeMapFiles(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.MergeMapFiles(ModManager.Mod,System.String,System.String[])
  id: MergeMapFiles(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeMapFiles(Mod, string, string[])
  nameWithType: ModManager.ModMerger.MergeMapFiles(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.MergeMapFiles(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeMapFiles(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MergeMapFiles(ModManager.Mod modApplyFrom, string sourcePath, string[] mergeLines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.MergeMapFiles(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.MergeMapFiles(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.MergeMapFiles(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub MergeMapFiles(modApplyFrom As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.MergeMapFiles*
  nameWithType.vb: ModManager.ModMerger.MergeMapFiles(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.MergeMapFiles(ModManager.Mod, String, String())
  name.vb: MergeMapFiles(Mod, String, String())
- uid: Global.ModManager.ModMerger.MergeWorldFiles(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.MergeWorldFiles(ModManager.Mod,System.String,System.String[])
  id: MergeWorldFiles(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: MergeWorldFiles(Mod, string, string[])
  nameWithType: ModManager.ModMerger.MergeWorldFiles(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.MergeWorldFiles(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.MergeWorldFiles(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void MergeWorldFiles(ModManager.Mod modApplyFrom, string sourcePath, string[] mergeLines)
    parameters:
    - id: modApplyFrom
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modApplyFrom</parameter>
            <parameter>M:ModManager.ModMerger.MergeWorldFiles(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.MergeWorldFiles(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.MergeWorldFiles(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub MergeWorldFiles(modApplyFrom As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.MergeWorldFiles*
  nameWithType.vb: ModManager.ModMerger.MergeWorldFiles(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.MergeWorldFiles(ModManager.Mod, String, String())
  name.vb: MergeWorldFiles(Mod, String, String())
- uid: Global.ModManager.ModMerger.DeterminePaletteConflicts(System.String)
  commentId: M:Global.ModManager.ModMerger.DeterminePaletteConflicts(System.String)
  id: DeterminePaletteConflicts(System.String)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: DeterminePaletteConflicts(string)
  nameWithType: ModManager.ModMerger.DeterminePaletteConflicts(string)
  fullName: ModManager.ModMerger.DeterminePaletteConflicts(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.DeterminePaletteConflicts(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void DeterminePaletteConflicts(string modPath)
    parameters:
    - id: modPath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>modPath</parameter>
            <parameter>M:ModManager.ModMerger.DeterminePaletteConflicts(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Sub DeterminePaletteConflicts(modPath As String)
  overload: Global.ModManager.ModMerger.DeterminePaletteConflicts*
  nameWithType.vb: ModManager.ModMerger.DeterminePaletteConflicts(String)
  fullName.vb: ModManager.ModMerger.DeterminePaletteConflicts(String)
  name.vb: DeterminePaletteConflicts(String)
- uid: Global.ModManager.ModMerger.UpdatePaletteLineWithConflict(System.String,System.String)
  commentId: M:Global.ModManager.ModMerger.UpdatePaletteLineWithConflict(System.String,System.String)
  id: UpdatePaletteLineWithConflict(System.String,System.String)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: UpdatePaletteLineWithConflict(string, string)
  nameWithType: ModManager.ModMerger.UpdatePaletteLineWithConflict(string, string)
  fullName: ModManager.ModMerger.UpdatePaletteLineWithConflict(string, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.UpdatePaletteLineWithConflict(System.String,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public string UpdatePaletteLineWithConflict(string lineKey, string lineValue)
    parameters:
    - id: lineKey
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lineKey</parameter>
            <parameter>M:ModManager.ModMerger.UpdatePaletteLineWithConflict(System.String,System.String)</parameter>
          </include>
        </markup>
    - id: lineValue
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lineValue</parameter>
            <parameter>M:ModManager.ModMerger.UpdatePaletteLineWithConflict(System.String,System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModMerger.UpdatePaletteLineWithConflict(System.String,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Function UpdatePaletteLineWithConflict(lineKey As String, lineValue As String) As String
  overload: Global.ModManager.ModMerger.UpdatePaletteLineWithConflict*
  nameWithType.vb: ModManager.ModMerger.UpdatePaletteLineWithConflict(String, String)
  fullName.vb: ModManager.ModMerger.UpdatePaletteLineWithConflict(String, String)
  name.vb: UpdatePaletteLineWithConflict(String, String)
- uid: Global.ModManager.ModMerger.WriteMergedFile(ModManager.Mod,System.String,System.String[])
  commentId: M:Global.ModManager.ModMerger.WriteMergedFile(ModManager.Mod,System.String,System.String[])
  id: WriteMergedFile(ModManager.Mod,System.String,System.String[])
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: WriteMergedFile(Mod, string, string[])
  nameWithType: ModManager.ModMerger.WriteMergedFile(ModManager.Mod, string, string[])
  fullName: ModManager.ModMerger.WriteMergedFile(ModManager.Mod, string, string[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.WriteMergedFile(ModManager.Mod,System.String,System.String[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void WriteMergedFile(ModManager.Mod sourceMod, string sourcePath, string[] mergeLines)
    parameters:
    - id: sourceMod
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourceMod</parameter>
            <parameter>M:ModManager.ModMerger.WriteMergedFile(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.WriteMergedFile(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    - id: mergeLines
      type: System.String[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mergeLines</parameter>
            <parameter>M:ModManager.ModMerger.WriteMergedFile(ModManager.Mod,System.String,System.String[])</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub WriteMergedFile(sourceMod As ModManager.Mod, sourcePath As String, mergeLines As String())
  overload: Global.ModManager.ModMerger.WriteMergedFile*
  nameWithType.vb: ModManager.ModMerger.WriteMergedFile(ModManager.Mod, String, String())
  fullName.vb: ModManager.ModMerger.WriteMergedFile(ModManager.Mod, String, String())
  name.vb: WriteMergedFile(Mod, String, String())
- uid: Global.ModManager.ModMerger.FindOutputPath(ModManager.Mod,System.String)
  commentId: M:Global.ModManager.ModMerger.FindOutputPath(ModManager.Mod,System.String)
  id: FindOutputPath(ModManager.Mod,System.String)
  parent: Global.ModManager.ModMerger
  langs:
  - csharp
  - vb
  name: FindOutputPath(Mod, string)
  nameWithType: ModManager.ModMerger.FindOutputPath(ModManager.Mod, string)
  fullName: ModManager.ModMerger.FindOutputPath(ModManager.Mod, string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:ModManager.ModMerger.FindOutputPath(ModManager.Mod,System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string FindOutputPath(ModManager.Mod sourceMod, string sourcePath)
    parameters:
    - id: sourceMod
      type: Global.ModManager.Mod
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourceMod</parameter>
            <parameter>M:ModManager.ModMerger.FindOutputPath(ModManager.Mod,System.String)</parameter>
          </include>
        </markup>
    - id: sourcePath
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePath</parameter>
            <parameter>M:ModManager.ModMerger.FindOutputPath(ModManager.Mod,System.String)</parameter>
          </include>
        </markup>
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:ModManager.ModMerger.FindOutputPath(ModManager.Mod,System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function FindOutputPath(sourceMod As ModManager.Mod, sourcePath As String) As String
  overload: Global.ModManager.ModMerger.FindOutputPath*
  nameWithType.vb: ModManager.ModMerger.FindOutputPath(ModManager.Mod, String)
  fullName.vb: ModManager.ModMerger.FindOutputPath(ModManager.Mod, String)
  name.vb: FindOutputPath(Mod, String)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<int>
  nameWithType: List<int>
  fullName: System.Collections.Generic.List<int>
  nameWithType.vb: List(Of Integer)
  fullName.vb: System.Collections.Generic.List(Of Integer)
  name.vb: List(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, int>
  nameWithType: Dictionary<int, int>
  fullName: System.Collections.Generic.Dictionary<int, int>
  nameWithType.vb: Dictionary(Of Integer, Integer)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, Integer)
  name.vb: Dictionary(Of Integer, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.List{ModManager.MapMerger.MergeMapData}
  commentId: T:System.Collections.Generic.List{ModManager.MapMerger.MergeMapData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<ModManager.MapMerger.MergeMapData>
  nameWithType: List<ModManager.MapMerger.MergeMapData>
  fullName: System.Collections.Generic.List<ModManager.MapMerger.MergeMapData>
  nameWithType.vb: List(Of ModManager.MapMerger.MergeMapData)
  fullName.vb: System.Collections.Generic.List(Of ModManager.MapMerger.MergeMapData)
  name.vb: List(Of ModManager.MapMerger.MergeMapData)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapData
    name: MergeMapData
    isExternal: true
    href: ModManager.MapMerger.MergeMapData.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapData
    name: MergeMapData
    isExternal: true
    href: ModManager.MapMerger.MergeMapData.html
  - name: )
- uid: System.Collections.Generic.Dictionary{System.String,ModManager.MapMerger.MergeMapInstructions}
  commentId: T:System.Collections.Generic.Dictionary{System.String,ModManager.MapMerger.MergeMapInstructions}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, ModManager.MapMerger.MergeMapInstructions>
  nameWithType: Dictionary<string, ModManager.MapMerger.MergeMapInstructions>
  fullName: System.Collections.Generic.Dictionary<string, ModManager.MapMerger.MergeMapInstructions>
  nameWithType.vb: Dictionary(Of String, ModManager.MapMerger.MergeMapInstructions)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, ModManager.MapMerger.MergeMapInstructions)
  name.vb: Dictionary(Of String, ModManager.MapMerger.MergeMapInstructions)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapInstructions
    name: MergeMapInstructions
    isExternal: true
    href: ModManager.MapMerger.MergeMapInstructions.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.MapMerger
    name: MapMerger
    isExternal: true
    href: ModManager.MapMerger.html
  - name: .
  - uid: Global.ModManager.MapMerger.MergeMapInstructions
    name: MergeMapInstructions
    isExternal: true
    href: ModManager.MapMerger.MergeMapInstructions.html
  - name: )
- uid: Global.ModManager.ModMerger.#ctor*
  commentId: Overload:Global.ModManager.ModMerger.#ctor
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger__ctor
  name: ModMerger
  nameWithType: ModManager.ModMerger.ModMerger
  fullName: ModManager.ModMerger.ModMerger
  nameWithType.vb: ModManager.ModMerger.New
  fullName.vb: ModManager.ModMerger.New
  name.vb: New
- uid: Global.ModManager.ModMerger.MergeWorldMaps*
  commentId: Overload:Global.ModManager.ModMerger.MergeWorldMaps
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeWorldMaps_ModManager_ModApplyer_
  name: MergeWorldMaps
  nameWithType: ModManager.ModMerger.MergeWorldMaps
  fullName: ModManager.ModMerger.MergeWorldMaps
- uid: Global.ModManager.ModApplyer
  commentId: T:Global.ModManager.ModApplyer
  isExternal: true
  href: ModManager.html
  name: ModManager.ModApplyer
  nameWithType: ModManager.ModApplyer
  fullName: ModManager.ModApplyer
  spec.csharp:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.ModApplyer
    name: ModApplyer
    isExternal: true
    href: ModManager.ModApplyer.html
  spec.vb:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.ModApplyer
    name: ModApplyer
    isExternal: true
    href: ModManager.ModApplyer.html
- uid: Global.ModManager.ModMerger.AddPendingApply*
  commentId: Overload:Global.ModManager.ModMerger.AddPendingApply
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_AddPendingApply_ModManager_Mod_System_String_System_String_System_Boolean_
  name: AddPendingApply
  nameWithType: ModManager.ModMerger.AddPendingApply
  fullName: ModManager.ModMerger.AddPendingApply
- uid: Global.ModManager.Mod
  commentId: T:Global.ModManager.Mod
  isExternal: true
  href: ModManager.html
  name: ModManager.Mod
  nameWithType: ModManager.Mod
  fullName: ModManager.Mod
  spec.csharp:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.Mod
    name: Mod
    isExternal: true
    href: ModManager.Mod.html
  spec.vb:
  - uid: Global.ModManager
    name: ModManager
    isExternal: true
    href: ModManager.html
  - name: .
  - uid: Global.ModManager.Mod
    name: Mod
    isExternal: true
    href: ModManager.Mod.html
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.ModManager.ModMerger.ExecutePendingMerge*
  commentId: Overload:Global.ModManager.ModMerger.ExecutePendingMerge
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_ExecutePendingMerge_ModManager_ModApplyer_
  name: ExecutePendingMerge
  nameWithType: ModManager.ModMerger.ExecutePendingMerge
  fullName: ModManager.ModMerger.ExecutePendingMerge
- uid: Global.ModManager.ModMerger.RelativePathToAbsolute*
  commentId: Overload:Global.ModManager.ModMerger.RelativePathToAbsolute
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_RelativePathToAbsolute_System_String_System_String_
  name: RelativePathToAbsolute
  nameWithType: ModManager.ModMerger.RelativePathToAbsolute
  fullName: ModManager.ModMerger.RelativePathToAbsolute
- uid: Global.ModManager.ModMerger.MergeConcat*
  commentId: Overload:Global.ModManager.ModMerger.MergeConcat
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeConcat_ModManager_Mod_System_String_System_String___
  name: MergeConcat
  nameWithType: ModManager.ModMerger.MergeConcat
  fullName: ModManager.ModMerger.MergeConcat
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Global.ModManager.ModMerger.MergeUniqueLinesUnordered*
  commentId: Overload:Global.ModManager.ModMerger.MergeUniqueLinesUnordered
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeUniqueLinesUnordered_ModManager_Mod_System_String_System_String___
  name: MergeUniqueLinesUnordered
  nameWithType: ModManager.ModMerger.MergeUniqueLinesUnordered
  fullName: ModManager.ModMerger.MergeUniqueLinesUnordered
- uid: Global.ModManager.ModMerger.MergeUniqueItemsUnordered*
  commentId: Overload:Global.ModManager.ModMerger.MergeUniqueItemsUnordered
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeUniqueItemsUnordered_ModManager_Mod_System_String_System_String___
  name: MergeUniqueItemsUnordered
  nameWithType: ModManager.ModMerger.MergeUniqueItemsUnordered
  fullName: ModManager.ModMerger.MergeUniqueItemsUnordered
- uid: Global.ModManager.ModMerger.MergeShortStrings*
  commentId: Overload:Global.ModManager.ModMerger.MergeShortStrings
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeShortStrings_ModManager_Mod_System_String_System_String___
  name: MergeShortStrings
  nameWithType: ModManager.ModMerger.MergeShortStrings
  fullName: ModManager.ModMerger.MergeShortStrings
- uid: Global.ModManager.ModMerger.MergeRoomSettings*
  commentId: Overload:Global.ModManager.ModMerger.MergeRoomSettings
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeRoomSettings_ModManager_Mod_System_String_System_String___
  name: MergeRoomSettings
  nameWithType: ModManager.ModMerger.MergeRoomSettings
  fullName: ModManager.ModMerger.MergeRoomSettings
- uid: Global.ModManager.ModMerger.MergeMapFiles*
  commentId: Overload:Global.ModManager.ModMerger.MergeMapFiles
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeMapFiles_ModManager_Mod_System_String_System_String___
  name: MergeMapFiles
  nameWithType: ModManager.ModMerger.MergeMapFiles
  fullName: ModManager.ModMerger.MergeMapFiles
- uid: Global.ModManager.ModMerger.MergeWorldFiles*
  commentId: Overload:Global.ModManager.ModMerger.MergeWorldFiles
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_MergeWorldFiles_ModManager_Mod_System_String_System_String___
  name: MergeWorldFiles
  nameWithType: ModManager.ModMerger.MergeWorldFiles
  fullName: ModManager.ModMerger.MergeWorldFiles
- uid: Global.ModManager.ModMerger.DeterminePaletteConflicts*
  commentId: Overload:Global.ModManager.ModMerger.DeterminePaletteConflicts
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_DeterminePaletteConflicts_System_String_
  name: DeterminePaletteConflicts
  nameWithType: ModManager.ModMerger.DeterminePaletteConflicts
  fullName: ModManager.ModMerger.DeterminePaletteConflicts
- uid: Global.ModManager.ModMerger.UpdatePaletteLineWithConflict*
  commentId: Overload:Global.ModManager.ModMerger.UpdatePaletteLineWithConflict
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_UpdatePaletteLineWithConflict_System_String_System_String_
  name: UpdatePaletteLineWithConflict
  nameWithType: ModManager.ModMerger.UpdatePaletteLineWithConflict
  fullName: ModManager.ModMerger.UpdatePaletteLineWithConflict
- uid: Global.ModManager.ModMerger.WriteMergedFile*
  commentId: Overload:Global.ModManager.ModMerger.WriteMergedFile
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_WriteMergedFile_ModManager_Mod_System_String_System_String___
  name: WriteMergedFile
  nameWithType: ModManager.ModMerger.WriteMergedFile
  fullName: ModManager.ModMerger.WriteMergedFile
- uid: Global.ModManager.ModMerger.FindOutputPath*
  commentId: Overload:Global.ModManager.ModMerger.FindOutputPath
  isExternal: true
  href: Global.ModManager.ModMerger.html#ModManager_ModMerger_FindOutputPath_ModManager_Mod_System_String_
  name: FindOutputPath
  nameWithType: ModManager.ModMerger.FindOutputPath
  fullName: ModManager.ModMerger.FindOutputPath
