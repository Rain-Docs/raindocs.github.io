### YamlMime:ManagedReference
items:
- uid: Global.StaticWorld
  commentId: T:Global.StaticWorld
  id: StaticWorld
  parent: Global
  children:
  - Global.StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)
  - Global.StaticWorld.GetCreatureTemplate(System.String)
  - Global.StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)
  - Global.StaticWorld.InitBarnacle(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  - Global.StaticWorld.InitBigMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitBigSandGrub(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitBoxWorm(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitCustomTemplates
  - Global.StaticWorld.InitDrillCrab(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitFireBug(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitFireSprite(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitFrog(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitJungleLeech(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  - Global.StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  - Global.StaticWorld.InitLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitLongLegsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitMirosVulture(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitMotherSpider(System.Collections.Generic.List{CreatureTemplate})
  - Global.StaticWorld.InitRat(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitRattler(System.Collections.Generic.List{CreatureTemplate})
  - Global.StaticWorld.InitRotLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitSandGrub(System.Collections.Generic.List{CreatureTemplate})
  - Global.StaticWorld.InitScavengerDisciple(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitScavengerTemplar(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitScavengersMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitSkyWhale(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitSlugpup(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  - Global.StaticWorld.InitStaticWorld
  - Global.StaticWorld.InitStaticWorldRelationships
  - Global.StaticWorld.InitStaticWorldRelationshipsMSC
  - Global.StaticWorld.InitStaticWorldRelationshipsWatcher
  - Global.StaticWorld.InitStowaway(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitTardigrade(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.InitYeek(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  - Global.StaticWorld.creatureTemplates
  - Global.StaticWorld.numberOfRoomAttractions
  - Global.StaticWorld.preBakedPathingCreatures
  - Global.StaticWorld.quantifiedCreatures
  langs:
  - csharp
  - vb
  name: StaticWorld
  nameWithType: StaticWorld
  fullName: StaticWorld
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: A helper class that initializes and contains every CreatureTemplate in the game.
  example: []
  syntax:
    content: public static class StaticWorld
    content.vb: Public Module StaticWorld
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.StaticWorld.creatureTemplates
  commentId: F:Global.StaticWorld.creatureTemplates
  id: creatureTemplates
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: creatureTemplates
  nameWithType: StaticWorld.creatureTemplates
  fullName: StaticWorld.creatureTemplates
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:StaticWorld.creatureTemplates</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static CreatureTemplate[] creatureTemplates
    return:
      type: Global.CreatureTemplate[]
    content.vb: Public Shared creatureTemplates As CreatureTemplate()
- uid: Global.StaticWorld.preBakedPathingCreatures
  commentId: F:Global.StaticWorld.preBakedPathingCreatures
  id: preBakedPathingCreatures
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: preBakedPathingCreatures
  nameWithType: StaticWorld.preBakedPathingCreatures
  fullName: StaticWorld.preBakedPathingCreatures
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:StaticWorld.preBakedPathingCreatures</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static CreatureTemplate[] preBakedPathingCreatures
    return:
      type: Global.CreatureTemplate[]
    content.vb: Public Shared preBakedPathingCreatures As CreatureTemplate()
- uid: Global.StaticWorld.quantifiedCreatures
  commentId: F:Global.StaticWorld.quantifiedCreatures
  id: quantifiedCreatures
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: quantifiedCreatures
  nameWithType: StaticWorld.quantifiedCreatures
  fullName: StaticWorld.quantifiedCreatures
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:StaticWorld.quantifiedCreatures</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static CreatureTemplate[] quantifiedCreatures
    return:
      type: Global.CreatureTemplate[]
    content.vb: Public Shared quantifiedCreatures As CreatureTemplate()
- uid: Global.StaticWorld.numberOfRoomAttractions
  commentId: F:Global.StaticWorld.numberOfRoomAttractions
  id: numberOfRoomAttractions
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: numberOfRoomAttractions
  nameWithType: StaticWorld.numberOfRoomAttractions
  fullName: StaticWorld.numberOfRoomAttractions
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:StaticWorld.numberOfRoomAttractions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int numberOfRoomAttractions
    return:
      type: System.Int32
    content.vb: Public Shared numberOfRoomAttractions As Integer
- uid: Global.StaticWorld.InitYeek(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitYeek(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitYeek(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitYeek(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitYeek(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitYeek(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitYeek(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitYeek(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate scavengerTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitYeek(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: scavengerTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scavengerTemplate</parameter>
            <parameter>M:StaticWorld.InitYeek(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitYeek(tempCreatureTemplates As List(Of CreatureTemplate), scavengerTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitYeek*
  nameWithType.vb: StaticWorld.InitYeek(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitYeek(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitYeek(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitJungleLeech(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitJungleLeech(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitJungleLeech(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitJungleLeech(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitJungleLeech(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitJungleLeech(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitJungleLeech(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitJungleLeech(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate leechTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitJungleLeech(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: leechTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>leechTemplate</parameter>
            <parameter>M:StaticWorld.InitJungleLeech(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitJungleLeech(tempCreatureTemplates As List(Of CreatureTemplate), leechTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitJungleLeech*
  nameWithType.vb: StaticWorld.InitJungleLeech(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitJungleLeech(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitJungleLeech(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitMotherSpider(System.Collections.Generic.List{CreatureTemplate})
  commentId: M:Global.StaticWorld.InitMotherSpider(System.Collections.Generic.List{CreatureTemplate})
  id: InitMotherSpider(System.Collections.Generic.List{CreatureTemplate})
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitMotherSpider(List<CreatureTemplate>)
  nameWithType: StaticWorld.InitMotherSpider(List<CreatureTemplate>)
  fullName: StaticWorld.InitMotherSpider(System.Collections.Generic.List<CreatureTemplate>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitMotherSpider(System.Collections.Generic.List{CreatureTemplate})</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitMotherSpider(List<CreatureTemplate> tempCreatureTemplates)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitMotherSpider(System.Collections.Generic.List{CreatureTemplate})</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitMotherSpider(tempCreatureTemplates As List(Of CreatureTemplate))
  overload: Global.StaticWorld.InitMotherSpider*
  nameWithType.vb: StaticWorld.InitMotherSpider(List(Of CreatureTemplate))
  fullName.vb: StaticWorld.InitMotherSpider(System.Collections.Generic.List(Of CreatureTemplate))
  name.vb: InitMotherSpider(List(Of CreatureTemplate))
- uid: Global.StaticWorld.InitMirosVulture(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitMirosVulture(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitMirosVulture(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitMirosVulture(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitMirosVulture(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitMirosVulture(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitMirosVulture(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitMirosVulture(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate vultureTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitMirosVulture(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: vultureTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vultureTemplate</parameter>
            <parameter>M:StaticWorld.InitMirosVulture(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitMirosVulture(tempCreatureTemplates As List(Of CreatureTemplate), vultureTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitMirosVulture*
  nameWithType.vb: StaticWorld.InitMirosVulture(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitMirosVulture(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitMirosVulture(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)
  commentId: M:Global.StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)
  id: InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitAquapede(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  nameWithType: StaticWorld.InitAquapede(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  fullName: StaticWorld.InitAquapede(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitAquapede(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate jetfishTemplate, CreatureTemplate centipedeTemplate, CreatureTemplate blueLizardTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: jetfishTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>jetfishTemplate</parameter>
            <parameter>M:StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: centipedeTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>centipedeTemplate</parameter>
            <parameter>M:StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: blueLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>blueLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitAquapede(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitAquapede(tempCreatureTemplates As List(Of CreatureTemplate), jetfishTemplate As CreatureTemplate, centipedeTemplate As CreatureTemplate, blueLizardTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitAquapede*
  nameWithType.vb: StaticWorld.InitAquapede(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate)
  fullName.vb: StaticWorld.InitAquapede(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate)
  name.vb: InitAquapede(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate)
- uid: Global.StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  commentId: M:Global.StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  id: InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitLizardsMSC(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  nameWithType: StaticWorld.InitLizardsMSC(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  fullName: StaticWorld.InitLizardsMSC(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitLizardsMSC(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate lizardTemplate, CreatureTemplate greenLizardTemplate, CreatureTemplate pinkLizardTemplate, CreatureTemplate blueLizardTemplate, CreatureTemplate creatureTemplateSalamander)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: lizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: greenLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>greenLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: pinkLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pinkLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: blueLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>blueLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureTemplateSalamander
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureTemplateSalamander</parameter>
            <parameter>M:StaticWorld.InitLizardsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitLizardsMSC(tempCreatureTemplates As List(Of CreatureTemplate), lizardTemplate As CreatureTemplate, greenLizardTemplate As CreatureTemplate, pinkLizardTemplate As CreatureTemplate, blueLizardTemplate As CreatureTemplate, creatureTemplateSalamander As CreatureTemplate)
  overload: Global.StaticWorld.InitLizardsMSC*
  nameWithType.vb: StaticWorld.InitLizardsMSC(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  fullName.vb: StaticWorld.InitLizardsMSC(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  name.vb: InitLizardsMSC(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
- uid: Global.StaticWorld.InitLongLegsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitLongLegsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitLongLegsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitLongLegsMSC(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitLongLegsMSC(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitLongLegsMSC(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitLongLegsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitLongLegsMSC(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate daddyTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitLongLegsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: daddyTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>daddyTemplate</parameter>
            <parameter>M:StaticWorld.InitLongLegsMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitLongLegsMSC(tempCreatureTemplates As List(Of CreatureTemplate), daddyTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitLongLegsMSC*
  nameWithType.vb: StaticWorld.InitLongLegsMSC(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitLongLegsMSC(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitLongLegsMSC(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitScavengersMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitScavengersMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitScavengersMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitScavengersMSC(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitScavengersMSC(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitScavengersMSC(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitScavengersMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitScavengersMSC(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate scavengerTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitScavengersMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: scavengerTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scavengerTemplate</parameter>
            <parameter>M:StaticWorld.InitScavengersMSC(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitScavengersMSC(tempCreatureTemplates As List(Of CreatureTemplate), scavengerTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitScavengersMSC*
  nameWithType.vb: StaticWorld.InitScavengersMSC(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitScavengersMSC(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitScavengersMSC(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  commentId: M:Global.StaticWorld.InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  id: InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitBigJellyfish(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate)
  nameWithType: StaticWorld.InitBigJellyfish(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate)
  fullName: StaticWorld.InitBigJellyfish(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitBigJellyfish(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate jetfishTemplate, CreatureTemplate blueLizardTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: jetfishTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>jetfishTemplate</parameter>
            <parameter>M:StaticWorld.InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: blueLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>blueLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitBigJellyfish(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitBigJellyfish(tempCreatureTemplates As List(Of CreatureTemplate), jetfishTemplate As CreatureTemplate, blueLizardTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitBigJellyfish*
  nameWithType.vb: StaticWorld.InitBigJellyfish(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate)
  fullName.vb: StaticWorld.InitBigJellyfish(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate)
  name.vb: InitBigJellyfish(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate)
- uid: Global.StaticWorld.InitStowaway(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitStowaway(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitStowaway(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitStowaway(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitStowaway(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitStowaway(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitStowaway(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitStowaway(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate flyTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitStowaway(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: flyTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flyTemplate</parameter>
            <parameter>M:StaticWorld.InitStowaway(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitStowaway(tempCreatureTemplates As List(Of CreatureTemplate), flyTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitStowaway*
  nameWithType.vb: StaticWorld.InitStowaway(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitStowaway(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitStowaway(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitFireBug(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitFireBug(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitFireBug(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitFireBug(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitFireBug(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitFireBug(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitFireBug(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitFireBug(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate whiteLizardTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitFireBug(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: whiteLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>whiteLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitFireBug(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitFireBug(tempCreatureTemplates As List(Of CreatureTemplate), whiteLizardTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitFireBug*
  nameWithType.vb: StaticWorld.InitFireBug(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitFireBug(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitFireBug(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitSlugpup(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitSlugpup(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitSlugpup(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitSlugpup(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitSlugpup(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitSlugpup(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitSlugpup(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitSlugpup(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate scavengerTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitSlugpup(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: scavengerTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scavengerTemplate</parameter>
            <parameter>M:StaticWorld.InitSlugpup(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitSlugpup(tempCreatureTemplates As List(Of CreatureTemplate), scavengerTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitSlugpup*
  nameWithType.vb: StaticWorld.InitSlugpup(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitSlugpup(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitSlugpup(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitStaticWorldRelationshipsMSC
  commentId: M:Global.StaticWorld.InitStaticWorldRelationshipsMSC
  id: InitStaticWorldRelationshipsMSC
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitStaticWorldRelationshipsMSC()
  nameWithType: StaticWorld.InitStaticWorldRelationshipsMSC()
  fullName: StaticWorld.InitStaticWorldRelationshipsMSC()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitStaticWorldRelationshipsMSC</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitStaticWorldRelationshipsMSC()
    content.vb: Public Shared Sub InitStaticWorldRelationshipsMSC()
  overload: Global.StaticWorld.InitStaticWorldRelationshipsMSC*
- uid: Global.StaticWorld.InitBarnacle(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitBarnacle(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitBarnacle(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitBarnacle(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitBarnacle(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitBarnacle(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitBarnacle(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitBarnacle(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate blueLizardTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitBarnacle(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: blueLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>blueLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitBarnacle(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitBarnacle(tempCreatureTemplates As List(Of CreatureTemplate), blueLizardTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitBarnacle*
  nameWithType.vb: StaticWorld.InitBarnacle(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitBarnacle(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitBarnacle(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitDrillCrab(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitDrillCrab(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitDrillCrab(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitDrillCrab(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitDrillCrab(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitDrillCrab(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitDrillCrab(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitDrillCrab(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate daddyTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitDrillCrab(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: daddyTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>daddyTemplate</parameter>
            <parameter>M:StaticWorld.InitDrillCrab(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitDrillCrab(tempCreatureTemplates As List(Of CreatureTemplate), daddyTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitDrillCrab*
  nameWithType.vb: StaticWorld.InitDrillCrab(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitDrillCrab(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitDrillCrab(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitSandGrub(System.Collections.Generic.List{CreatureTemplate})
  commentId: M:Global.StaticWorld.InitSandGrub(System.Collections.Generic.List{CreatureTemplate})
  id: InitSandGrub(System.Collections.Generic.List{CreatureTemplate})
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitSandGrub(List<CreatureTemplate>)
  nameWithType: StaticWorld.InitSandGrub(List<CreatureTemplate>)
  fullName: StaticWorld.InitSandGrub(System.Collections.Generic.List<CreatureTemplate>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitSandGrub(System.Collections.Generic.List{CreatureTemplate})</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitSandGrub(List<CreatureTemplate> tempCreatureTemplates)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitSandGrub(System.Collections.Generic.List{CreatureTemplate})</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitSandGrub(tempCreatureTemplates As List(Of CreatureTemplate))
  overload: Global.StaticWorld.InitSandGrub*
  nameWithType.vb: StaticWorld.InitSandGrub(List(Of CreatureTemplate))
  fullName.vb: StaticWorld.InitSandGrub(System.Collections.Generic.List(Of CreatureTemplate))
  name.vb: InitSandGrub(List(Of CreatureTemplate))
- uid: Global.StaticWorld.InitBigSandGrub(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitBigSandGrub(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitBigSandGrub(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitBigSandGrub(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitBigSandGrub(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitBigSandGrub(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitBigSandGrub(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitBigSandGrub(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate sandWormTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitBigSandGrub(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: sandWormTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sandWormTemplate</parameter>
            <parameter>M:StaticWorld.InitBigSandGrub(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitBigSandGrub(tempCreatureTemplates As List(Of CreatureTemplate), sandWormTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitBigSandGrub*
  nameWithType.vb: StaticWorld.InitBigSandGrub(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitBigSandGrub(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitBigSandGrub(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitRattler(System.Collections.Generic.List{CreatureTemplate})
  commentId: M:Global.StaticWorld.InitRattler(System.Collections.Generic.List{CreatureTemplate})
  id: InitRattler(System.Collections.Generic.List{CreatureTemplate})
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitRattler(List<CreatureTemplate>)
  nameWithType: StaticWorld.InitRattler(List<CreatureTemplate>)
  fullName: StaticWorld.InitRattler(System.Collections.Generic.List<CreatureTemplate>)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitRattler(System.Collections.Generic.List{CreatureTemplate})</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitRattler(List<CreatureTemplate> tempCreatureTemplates)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitRattler(System.Collections.Generic.List{CreatureTemplate})</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitRattler(tempCreatureTemplates As List(Of CreatureTemplate))
  overload: Global.StaticWorld.InitRattler*
  nameWithType.vb: StaticWorld.InitRattler(List(Of CreatureTemplate))
  fullName.vb: StaticWorld.InitRattler(System.Collections.Generic.List(Of CreatureTemplate))
  name.vb: InitRattler(List(Of CreatureTemplate))
- uid: Global.StaticWorld.InitBigMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitBigMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitBigMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitBigMoth(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitBigMoth(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitBigMoth(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitBigMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitBigMoth(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate vultureTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitBigMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: vultureTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vultureTemplate</parameter>
            <parameter>M:StaticWorld.InitBigMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitBigMoth(tempCreatureTemplates As List(Of CreatureTemplate), vultureTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitBigMoth*
  nameWithType.vb: StaticWorld.InitBigMoth(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitBigMoth(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitBigMoth(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  commentId: M:Global.StaticWorld.InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  id: InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitSmallMoth(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate)
  nameWithType: StaticWorld.InitSmallMoth(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate)
  fullName: StaticWorld.InitSmallMoth(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitSmallMoth(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate bigMothTemplate, CreatureTemplate batTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: bigMothTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bigMothTemplate</parameter>
            <parameter>M:StaticWorld.InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: batTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>batTemplate</parameter>
            <parameter>M:StaticWorld.InitSmallMoth(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitSmallMoth(tempCreatureTemplates As List(Of CreatureTemplate), bigMothTemplate As CreatureTemplate, batTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitSmallMoth*
  nameWithType.vb: StaticWorld.InitSmallMoth(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate)
  fullName.vb: StaticWorld.InitSmallMoth(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate)
  name.vb: InitSmallMoth(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate)
- uid: Global.StaticWorld.InitBoxWorm(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitBoxWorm(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitBoxWorm(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitBoxWorm(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitBoxWorm(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitBoxWorm(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitBoxWorm(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitBoxWorm(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate pathingAncestor)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitBoxWorm(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: pathingAncestor
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pathingAncestor</parameter>
            <parameter>M:StaticWorld.InitBoxWorm(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitBoxWorm(tempCreatureTemplates As List(Of CreatureTemplate), pathingAncestor As CreatureTemplate)
  overload: Global.StaticWorld.InitBoxWorm*
  nameWithType.vb: StaticWorld.InitBoxWorm(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitBoxWorm(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitBoxWorm(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitFireSprite(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitFireSprite(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitFireSprite(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitFireSprite(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitFireSprite(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitFireSprite(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitFireSprite(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitFireSprite(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate flyTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitFireSprite(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: flyTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flyTemplate</parameter>
            <parameter>M:StaticWorld.InitFireSprite(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitFireSprite(tempCreatureTemplates As List(Of CreatureTemplate), flyTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitFireSprite*
  nameWithType.vb: StaticWorld.InitFireSprite(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitFireSprite(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitFireSprite(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitSkyWhale(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitSkyWhale(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitSkyWhale(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitSkyWhale(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitSkyWhale(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitSkyWhale(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitSkyWhale(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitSkyWhale(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate skyWhaleTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitSkyWhale(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: skyWhaleTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>skyWhaleTemplate</parameter>
            <parameter>M:StaticWorld.InitSkyWhale(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitSkyWhale(tempCreatureTemplates As List(Of CreatureTemplate), skyWhaleTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitSkyWhale*
  nameWithType.vb: StaticWorld.InitSkyWhale(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitSkyWhale(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitSkyWhale(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitScavengerTemplar(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitScavengerTemplar(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitScavengerTemplar(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitScavengerTemplar(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitScavengerTemplar(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitScavengerTemplar(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitScavengerTemplar(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitScavengerTemplar(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate scavengerTemplarTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitScavengerTemplar(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: scavengerTemplarTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scavengerTemplarTemplate</parameter>
            <parameter>M:StaticWorld.InitScavengerTemplar(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitScavengerTemplar(tempCreatureTemplates As List(Of CreatureTemplate), scavengerTemplarTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitScavengerTemplar*
  nameWithType.vb: StaticWorld.InitScavengerTemplar(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitScavengerTemplar(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitScavengerTemplar(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitScavengerDisciple(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitScavengerDisciple(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitScavengerDisciple(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitScavengerDisciple(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitScavengerDisciple(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitScavengerDisciple(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitScavengerDisciple(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitScavengerDisciple(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate scavengerTemplarTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitScavengerDisciple(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: scavengerTemplarTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scavengerTemplarTemplate</parameter>
            <parameter>M:StaticWorld.InitScavengerDisciple(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitScavengerDisciple(tempCreatureTemplates As List(Of CreatureTemplate), scavengerTemplarTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitScavengerDisciple*
  nameWithType.vb: StaticWorld.InitScavengerDisciple(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitScavengerDisciple(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitScavengerDisciple(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitLoach(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitLoach(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitLoach(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitLoach(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate ancestorTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: ancestorTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ancestorTemplate</parameter>
            <parameter>M:StaticWorld.InitLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitLoach(tempCreatureTemplates As List(Of CreatureTemplate), ancestorTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitLoach*
  nameWithType.vb: StaticWorld.InitLoach(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitLoach(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitLoach(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitRotLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitRotLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitRotLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitRotLoach(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitRotLoach(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitRotLoach(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitRotLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitRotLoach(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate loach)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitRotLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: loach
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>loach</parameter>
            <parameter>M:StaticWorld.InitRotLoach(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitRotLoach(tempCreatureTemplates As List(Of CreatureTemplate), loach As CreatureTemplate)
  overload: Global.StaticWorld.InitRotLoach*
  nameWithType.vb: StaticWorld.InitRotLoach(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitRotLoach(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitRotLoach(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  commentId: M:Global.StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  id: InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitLizardsWatcher(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  nameWithType: StaticWorld.InitLizardsWatcher(List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  fullName: StaticWorld.InitLizardsWatcher(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitLizardsWatcher(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate lizardTemplate, CreatureTemplate greenLizardTemplate, CreatureTemplate pinkLizardTemplate, CreatureTemplate blueLizardTemplate, CreatureTemplate creatureTemplateSalamander)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: lizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: greenLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>greenLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: pinkLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pinkLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: blueLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>blueLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureTemplateSalamander
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureTemplateSalamander</parameter>
            <parameter>M:StaticWorld.InitLizardsWatcher(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitLizardsWatcher(tempCreatureTemplates As List(Of CreatureTemplate), lizardTemplate As CreatureTemplate, greenLizardTemplate As CreatureTemplate, pinkLizardTemplate As CreatureTemplate, blueLizardTemplate As CreatureTemplate, creatureTemplateSalamander As CreatureTemplate)
  overload: Global.StaticWorld.InitLizardsWatcher*
  nameWithType.vb: StaticWorld.InitLizardsWatcher(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  fullName.vb: StaticWorld.InitLizardsWatcher(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
  name.vb: InitLizardsWatcher(List(Of CreatureTemplate), CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate, CreatureTemplate)
- uid: Global.StaticWorld.InitRat(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitRat(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitRat(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitRat(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitRat(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitRat(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitRat(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitRat(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate ratTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitRat(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: ratTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ratTemplate</parameter>
            <parameter>M:StaticWorld.InitRat(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitRat(tempCreatureTemplates As List(Of CreatureTemplate), ratTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitRat*
  nameWithType.vb: StaticWorld.InitRat(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitRat(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitRat(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitFrog(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitFrog(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitFrog(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitFrog(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitFrog(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitFrog(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitFrog(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitFrog(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate frogTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitFrog(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: frogTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>frogTemplate</parameter>
            <parameter>M:StaticWorld.InitFrog(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitFrog(tempCreatureTemplates As List(Of CreatureTemplate), frogTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitFrog*
  nameWithType.vb: StaticWorld.InitFrog(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitFrog(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitFrog(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitTardigrade(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  commentId: M:Global.StaticWorld.InitTardigrade(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  id: InitTardigrade(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitTardigrade(List<CreatureTemplate>, CreatureTemplate)
  nameWithType: StaticWorld.InitTardigrade(List<CreatureTemplate>, CreatureTemplate)
  fullName: StaticWorld.InitTardigrade(System.Collections.Generic.List<CreatureTemplate>, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitTardigrade(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitTardigrade(List<CreatureTemplate> tempCreatureTemplates, CreatureTemplate whiteLizardTemplate)
    parameters:
    - id: tempCreatureTemplates
      type: System.Collections.Generic.List{CreatureTemplate}
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tempCreatureTemplates</parameter>
            <parameter>M:StaticWorld.InitTardigrade(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: whiteLizardTemplate
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>whiteLizardTemplate</parameter>
            <parameter>M:StaticWorld.InitTardigrade(System.Collections.Generic.List{CreatureTemplate},CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub InitTardigrade(tempCreatureTemplates As List(Of CreatureTemplate), whiteLizardTemplate As CreatureTemplate)
  overload: Global.StaticWorld.InitTardigrade*
  nameWithType.vb: StaticWorld.InitTardigrade(List(Of CreatureTemplate), CreatureTemplate)
  fullName.vb: StaticWorld.InitTardigrade(System.Collections.Generic.List(Of CreatureTemplate), CreatureTemplate)
  name.vb: InitTardigrade(List(Of CreatureTemplate), CreatureTemplate)
- uid: Global.StaticWorld.InitStaticWorldRelationshipsWatcher
  commentId: M:Global.StaticWorld.InitStaticWorldRelationshipsWatcher
  id: InitStaticWorldRelationshipsWatcher
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitStaticWorldRelationshipsWatcher()
  nameWithType: StaticWorld.InitStaticWorldRelationshipsWatcher()
  fullName: StaticWorld.InitStaticWorldRelationshipsWatcher()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitStaticWorldRelationshipsWatcher</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitStaticWorldRelationshipsWatcher()
    content.vb: Public Shared Sub InitStaticWorldRelationshipsWatcher()
  overload: Global.StaticWorld.InitStaticWorldRelationshipsWatcher*
- uid: Global.StaticWorld.InitCustomTemplates
  commentId: M:Global.StaticWorld.InitCustomTemplates
  id: InitCustomTemplates
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitCustomTemplates()
  nameWithType: StaticWorld.InitCustomTemplates()
  fullName: StaticWorld.InitCustomTemplates()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitCustomTemplates</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitCustomTemplates()
    content.vb: Public Shared Sub InitCustomTemplates()
  overload: Global.StaticWorld.InitCustomTemplates*
- uid: Global.StaticWorld.InitStaticWorld
  commentId: M:Global.StaticWorld.InitStaticWorld
  id: InitStaticWorld
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitStaticWorld()
  nameWithType: StaticWorld.InitStaticWorld()
  fullName: StaticWorld.InitStaticWorld()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitStaticWorld</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitStaticWorld()
    content.vb: Public Shared Sub InitStaticWorld()
  overload: Global.StaticWorld.InitStaticWorld*
- uid: Global.StaticWorld.InitStaticWorldRelationships
  commentId: M:Global.StaticWorld.InitStaticWorldRelationships
  id: InitStaticWorldRelationships
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: InitStaticWorldRelationships()
  nameWithType: StaticWorld.InitStaticWorldRelationships()
  fullName: StaticWorld.InitStaticWorldRelationships()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.InitStaticWorldRelationships</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void InitStaticWorldRelationships()
    content.vb: Public Shared Sub InitStaticWorldRelationships()
  overload: Global.StaticWorld.InitStaticWorldRelationships*
- uid: Global.StaticWorld.GetCreatureTemplate(System.String)
  commentId: M:Global.StaticWorld.GetCreatureTemplate(System.String)
  id: GetCreatureTemplate(System.String)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: GetCreatureTemplate(string)
  nameWithType: StaticWorld.GetCreatureTemplate(string)
  fullName: StaticWorld.GetCreatureTemplate(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.GetCreatureTemplate(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static CreatureTemplate GetCreatureTemplate(string nm)
    parameters:
    - id: nm
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>nm</parameter>
            <parameter>M:StaticWorld.GetCreatureTemplate(System.String)</parameter>
          </include>
        </markup>
    return:
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:StaticWorld.GetCreatureTemplate(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetCreatureTemplate(nm As String) As CreatureTemplate
  overload: Global.StaticWorld.GetCreatureTemplate*
  nameWithType.vb: StaticWorld.GetCreatureTemplate(String)
  fullName.vb: StaticWorld.GetCreatureTemplate(String)
  name.vb: GetCreatureTemplate(String)
- uid: Global.StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)
  commentId: M:Global.StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)
  id: GetCreatureTemplate(CreatureTemplate.Type)
  parent: Global.StaticWorld
  langs:
  - csharp
  - vb
  name: GetCreatureTemplate(Type)
  nameWithType: StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)
  fullName: StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static CreatureTemplate GetCreatureTemplate(CreatureTemplate.Type type)
    parameters:
    - id: type
      type: Global.CreatureTemplate.Type
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    return:
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:StaticWorld.GetCreatureTemplate(CreatureTemplate.Type)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetCreatureTemplate(type As CreatureTemplate.Type) As CreatureTemplate
  overload: Global.StaticWorld.GetCreatureTemplate*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.CreatureTemplate[]
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate[]
  nameWithType: CreatureTemplate[]
  fullName: CreatureTemplate[]
  nameWithType.vb: CreatureTemplate()
  fullName.vb: CreatureTemplate()
  name.vb: CreatureTemplate()
  spec.csharp:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.StaticWorld.InitYeek*
  commentId: Overload:Global.StaticWorld.InitYeek
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitYeek_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitYeek
  nameWithType: StaticWorld.InitYeek
  fullName: StaticWorld.InitYeek
- uid: System.Collections.Generic.List{CreatureTemplate}
  commentId: T:System.Collections.Generic.List{CreatureTemplate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<CreatureTemplate>
  nameWithType: List<CreatureTemplate>
  fullName: System.Collections.Generic.List<CreatureTemplate>
  nameWithType.vb: List(Of CreatureTemplate)
  fullName.vb: System.Collections.Generic.List(Of CreatureTemplate)
  name.vb: List(Of CreatureTemplate)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: )
- uid: Global.CreatureTemplate
  commentId: T:Global.CreatureTemplate
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate
  nameWithType: CreatureTemplate
  fullName: CreatureTemplate
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Global.StaticWorld.InitJungleLeech*
  commentId: Overload:Global.StaticWorld.InitJungleLeech
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitJungleLeech_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitJungleLeech
  nameWithType: StaticWorld.InitJungleLeech
  fullName: StaticWorld.InitJungleLeech
- uid: Global.StaticWorld.InitMotherSpider*
  commentId: Overload:Global.StaticWorld.InitMotherSpider
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitMotherSpider_System_Collections_Generic_List_CreatureTemplate__
  name: InitMotherSpider
  nameWithType: StaticWorld.InitMotherSpider
  fullName: StaticWorld.InitMotherSpider
- uid: Global.StaticWorld.InitMirosVulture*
  commentId: Overload:Global.StaticWorld.InitMirosVulture
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitMirosVulture_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitMirosVulture
  nameWithType: StaticWorld.InitMirosVulture
  fullName: StaticWorld.InitMirosVulture
- uid: Global.StaticWorld.InitAquapede*
  commentId: Overload:Global.StaticWorld.InitAquapede
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitAquapede_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_CreatureTemplate_CreatureTemplate_
  name: InitAquapede
  nameWithType: StaticWorld.InitAquapede
  fullName: StaticWorld.InitAquapede
- uid: Global.StaticWorld.InitLizardsMSC*
  commentId: Overload:Global.StaticWorld.InitLizardsMSC
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitLizardsMSC_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_CreatureTemplate_CreatureTemplate_CreatureTemplate_CreatureTemplate_
  name: InitLizardsMSC
  nameWithType: StaticWorld.InitLizardsMSC
  fullName: StaticWorld.InitLizardsMSC
- uid: Global.StaticWorld.InitLongLegsMSC*
  commentId: Overload:Global.StaticWorld.InitLongLegsMSC
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitLongLegsMSC_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitLongLegsMSC
  nameWithType: StaticWorld.InitLongLegsMSC
  fullName: StaticWorld.InitLongLegsMSC
- uid: Global.StaticWorld.InitScavengersMSC*
  commentId: Overload:Global.StaticWorld.InitScavengersMSC
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitScavengersMSC_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitScavengersMSC
  nameWithType: StaticWorld.InitScavengersMSC
  fullName: StaticWorld.InitScavengersMSC
- uid: Global.StaticWorld.InitBigJellyfish*
  commentId: Overload:Global.StaticWorld.InitBigJellyfish
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitBigJellyfish_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_CreatureTemplate_
  name: InitBigJellyfish
  nameWithType: StaticWorld.InitBigJellyfish
  fullName: StaticWorld.InitBigJellyfish
- uid: Global.StaticWorld.InitStowaway*
  commentId: Overload:Global.StaticWorld.InitStowaway
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitStowaway_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitStowaway
  nameWithType: StaticWorld.InitStowaway
  fullName: StaticWorld.InitStowaway
- uid: Global.StaticWorld.InitFireBug*
  commentId: Overload:Global.StaticWorld.InitFireBug
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitFireBug_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitFireBug
  nameWithType: StaticWorld.InitFireBug
  fullName: StaticWorld.InitFireBug
- uid: Global.StaticWorld.InitSlugpup*
  commentId: Overload:Global.StaticWorld.InitSlugpup
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitSlugpup_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitSlugpup
  nameWithType: StaticWorld.InitSlugpup
  fullName: StaticWorld.InitSlugpup
- uid: Global.StaticWorld.InitStaticWorldRelationshipsMSC*
  commentId: Overload:Global.StaticWorld.InitStaticWorldRelationshipsMSC
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitStaticWorldRelationshipsMSC
  name: InitStaticWorldRelationshipsMSC
  nameWithType: StaticWorld.InitStaticWorldRelationshipsMSC
  fullName: StaticWorld.InitStaticWorldRelationshipsMSC
- uid: Global.StaticWorld.InitBarnacle*
  commentId: Overload:Global.StaticWorld.InitBarnacle
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitBarnacle_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitBarnacle
  nameWithType: StaticWorld.InitBarnacle
  fullName: StaticWorld.InitBarnacle
- uid: Global.StaticWorld.InitDrillCrab*
  commentId: Overload:Global.StaticWorld.InitDrillCrab
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitDrillCrab_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitDrillCrab
  nameWithType: StaticWorld.InitDrillCrab
  fullName: StaticWorld.InitDrillCrab
- uid: Global.StaticWorld.InitSandGrub*
  commentId: Overload:Global.StaticWorld.InitSandGrub
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitSandGrub_System_Collections_Generic_List_CreatureTemplate__
  name: InitSandGrub
  nameWithType: StaticWorld.InitSandGrub
  fullName: StaticWorld.InitSandGrub
- uid: Global.StaticWorld.InitBigSandGrub*
  commentId: Overload:Global.StaticWorld.InitBigSandGrub
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitBigSandGrub_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitBigSandGrub
  nameWithType: StaticWorld.InitBigSandGrub
  fullName: StaticWorld.InitBigSandGrub
- uid: Global.StaticWorld.InitRattler*
  commentId: Overload:Global.StaticWorld.InitRattler
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitRattler_System_Collections_Generic_List_CreatureTemplate__
  name: InitRattler
  nameWithType: StaticWorld.InitRattler
  fullName: StaticWorld.InitRattler
- uid: Global.StaticWorld.InitBigMoth*
  commentId: Overload:Global.StaticWorld.InitBigMoth
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitBigMoth_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitBigMoth
  nameWithType: StaticWorld.InitBigMoth
  fullName: StaticWorld.InitBigMoth
- uid: Global.StaticWorld.InitSmallMoth*
  commentId: Overload:Global.StaticWorld.InitSmallMoth
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitSmallMoth_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_CreatureTemplate_
  name: InitSmallMoth
  nameWithType: StaticWorld.InitSmallMoth
  fullName: StaticWorld.InitSmallMoth
- uid: Global.StaticWorld.InitBoxWorm*
  commentId: Overload:Global.StaticWorld.InitBoxWorm
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitBoxWorm_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitBoxWorm
  nameWithType: StaticWorld.InitBoxWorm
  fullName: StaticWorld.InitBoxWorm
- uid: Global.StaticWorld.InitFireSprite*
  commentId: Overload:Global.StaticWorld.InitFireSprite
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitFireSprite_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitFireSprite
  nameWithType: StaticWorld.InitFireSprite
  fullName: StaticWorld.InitFireSprite
- uid: Global.StaticWorld.InitSkyWhale*
  commentId: Overload:Global.StaticWorld.InitSkyWhale
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitSkyWhale_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitSkyWhale
  nameWithType: StaticWorld.InitSkyWhale
  fullName: StaticWorld.InitSkyWhale
- uid: Global.StaticWorld.InitScavengerTemplar*
  commentId: Overload:Global.StaticWorld.InitScavengerTemplar
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitScavengerTemplar_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitScavengerTemplar
  nameWithType: StaticWorld.InitScavengerTemplar
  fullName: StaticWorld.InitScavengerTemplar
- uid: Global.StaticWorld.InitScavengerDisciple*
  commentId: Overload:Global.StaticWorld.InitScavengerDisciple
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitScavengerDisciple_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitScavengerDisciple
  nameWithType: StaticWorld.InitScavengerDisciple
  fullName: StaticWorld.InitScavengerDisciple
- uid: Global.StaticWorld.InitLoach*
  commentId: Overload:Global.StaticWorld.InitLoach
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitLoach_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitLoach
  nameWithType: StaticWorld.InitLoach
  fullName: StaticWorld.InitLoach
- uid: Global.StaticWorld.InitRotLoach*
  commentId: Overload:Global.StaticWorld.InitRotLoach
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitRotLoach_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitRotLoach
  nameWithType: StaticWorld.InitRotLoach
  fullName: StaticWorld.InitRotLoach
- uid: Global.StaticWorld.InitLizardsWatcher*
  commentId: Overload:Global.StaticWorld.InitLizardsWatcher
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitLizardsWatcher_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_CreatureTemplate_CreatureTemplate_CreatureTemplate_CreatureTemplate_
  name: InitLizardsWatcher
  nameWithType: StaticWorld.InitLizardsWatcher
  fullName: StaticWorld.InitLizardsWatcher
- uid: Global.StaticWorld.InitRat*
  commentId: Overload:Global.StaticWorld.InitRat
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitRat_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitRat
  nameWithType: StaticWorld.InitRat
  fullName: StaticWorld.InitRat
- uid: Global.StaticWorld.InitFrog*
  commentId: Overload:Global.StaticWorld.InitFrog
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitFrog_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitFrog
  nameWithType: StaticWorld.InitFrog
  fullName: StaticWorld.InitFrog
- uid: Global.StaticWorld.InitTardigrade*
  commentId: Overload:Global.StaticWorld.InitTardigrade
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitTardigrade_System_Collections_Generic_List_CreatureTemplate__CreatureTemplate_
  name: InitTardigrade
  nameWithType: StaticWorld.InitTardigrade
  fullName: StaticWorld.InitTardigrade
- uid: Global.StaticWorld.InitStaticWorldRelationshipsWatcher*
  commentId: Overload:Global.StaticWorld.InitStaticWorldRelationshipsWatcher
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitStaticWorldRelationshipsWatcher
  name: InitStaticWorldRelationshipsWatcher
  nameWithType: StaticWorld.InitStaticWorldRelationshipsWatcher
  fullName: StaticWorld.InitStaticWorldRelationshipsWatcher
- uid: Global.StaticWorld.InitCustomTemplates*
  commentId: Overload:Global.StaticWorld.InitCustomTemplates
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitCustomTemplates
  name: InitCustomTemplates
  nameWithType: StaticWorld.InitCustomTemplates
  fullName: StaticWorld.InitCustomTemplates
- uid: Global.StaticWorld.InitStaticWorld*
  commentId: Overload:Global.StaticWorld.InitStaticWorld
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitStaticWorld
  name: InitStaticWorld
  nameWithType: StaticWorld.InitStaticWorld
  fullName: StaticWorld.InitStaticWorld
- uid: Global.StaticWorld.InitStaticWorldRelationships*
  commentId: Overload:Global.StaticWorld.InitStaticWorldRelationships
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_InitStaticWorldRelationships
  name: InitStaticWorldRelationships
  nameWithType: StaticWorld.InitStaticWorldRelationships
  fullName: StaticWorld.InitStaticWorldRelationships
- uid: Global.StaticWorld.GetCreatureTemplate*
  commentId: Overload:Global.StaticWorld.GetCreatureTemplate
  isExternal: true
  href: Global.StaticWorld.html#StaticWorld_GetCreatureTemplate_System_String_
  name: GetCreatureTemplate
  nameWithType: StaticWorld.GetCreatureTemplate
  fullName: StaticWorld.GetCreatureTemplate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.CreatureTemplate.Type
  commentId: T:Global.CreatureTemplate.Type
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate.Type
  nameWithType: CreatureTemplate.Type
  fullName: CreatureTemplate.Type
  spec.csharp:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
  spec.vb:
  - uid: Global.CreatureTemplate
    name: CreatureTemplate
    isExternal: true
    href: CreatureTemplate.html
  - name: .
  - uid: Global.CreatureTemplate.Type
    name: Type
    isExternal: true
    href: CreatureTemplate.Type.html
