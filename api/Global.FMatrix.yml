### YamlMime:ManagedReference
items:
- uid: Global.FMatrix
  commentId: T:Global.FMatrix
  id: FMatrix
  parent: Global
  children:
  - Global.FMatrix.#ctor
  - Global.FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)
  - Global.FMatrix.Clone
  - Global.FMatrix.Concat(FMatrix)
  - Global.FMatrix.ConcatAndCopyValues(FMatrix,FMatrix)
  - Global.FMatrix.ConcatOther(FMatrix)
  - Global.FMatrix.CopyValues(FMatrix)
  - Global.FMatrix.GetNewTransformedVector(UnityEngine.Vector2)
  - Global.FMatrix.GetRotation
  - Global.FMatrix.GetScaleX
  - Global.FMatrix.GetScaleY
  - Global.FMatrix.GetTransformedUnitVector
  - Global.FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)
  - Global.FMatrix.Invert
  - Global.FMatrix.InvertAndCopyValues(FMatrix)
  - Global.FMatrix.ResetToIdentity
  - Global.FMatrix.Rotate(System.Single)
  - Global.FMatrix.RotateInPlace(System.Single)
  - Global.FMatrix.Scale(System.Single,System.Single)
  - Global.FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Global.FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Global.FMatrix.ToString
  - Global.FMatrix.Translate(System.Single,System.Single)
  - Global.FMatrix.a
  - Global.FMatrix.b
  - Global.FMatrix.c
  - Global.FMatrix.d
  - Global.FMatrix.tempMatrix
  - Global.FMatrix.tx
  - Global.FMatrix.ty
  langs:
  - csharp
  - vb
  name: FMatrix
  nameWithType: FMatrix
  fullName: FMatrix
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class FMatrix
    content.vb: Public Class FMatrix
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.FMatrix.tempMatrix
  commentId: F:Global.FMatrix.tempMatrix
  id: tempMatrix
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: tempMatrix
  nameWithType: FMatrix.tempMatrix
  fullName: FMatrix.tempMatrix
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FMatrix.tempMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static FMatrix tempMatrix
    return:
      type: Global.FMatrix
    content.vb: Public Shared tempMatrix As FMatrix
- uid: Global.FMatrix.a
  commentId: F:Global.FMatrix.a
  id: a
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: a
  nameWithType: FMatrix.a
  fullName: FMatrix.a
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FMatrix.a</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float a
    return:
      type: System.Single
    content.vb: Public a As Single
- uid: Global.FMatrix.b
  commentId: F:Global.FMatrix.b
  id: b
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: b
  nameWithType: FMatrix.b
  fullName: FMatrix.b
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FMatrix.b</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float b
    return:
      type: System.Single
    content.vb: Public b As Single
- uid: Global.FMatrix.c
  commentId: F:Global.FMatrix.c
  id: c
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: c
  nameWithType: FMatrix.c
  fullName: FMatrix.c
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FMatrix.c</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float c
    return:
      type: System.Single
    content.vb: Public c As Single
- uid: Global.FMatrix.d
  commentId: F:Global.FMatrix.d
  id: d
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: d
  nameWithType: FMatrix.d
  fullName: FMatrix.d
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FMatrix.d</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float d
    return:
      type: System.Single
    content.vb: Public d As Single
- uid: Global.FMatrix.tx
  commentId: F:Global.FMatrix.tx
  id: tx
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: tx
  nameWithType: FMatrix.tx
  fullName: FMatrix.tx
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FMatrix.tx</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float tx
    return:
      type: System.Single
    content.vb: Public tx As Single
- uid: Global.FMatrix.ty
  commentId: F:Global.FMatrix.ty
  id: ty
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: ty
  nameWithType: FMatrix.ty
  fullName: FMatrix.ty
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FMatrix.ty</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float ty
    return:
      type: System.Single
    content.vb: Public ty As Single
- uid: Global.FMatrix.#ctor
  commentId: M:Global.FMatrix.#ctor
  id: '#ctor'
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: FMatrix()
  nameWithType: FMatrix.FMatrix()
  fullName: FMatrix.FMatrix()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FMatrix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FMatrix()
    content.vb: Public Sub New()
  overload: Global.FMatrix.#ctor*
  nameWithType.vb: FMatrix.New()
  fullName.vb: FMatrix.New()
  name.vb: New()
- uid: Global.FMatrix.Clone
  commentId: M:Global.FMatrix.Clone
  id: Clone
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: FMatrix.Clone()
  fullName: FMatrix.Clone()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.Clone</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FMatrix Clone()
    return:
      type: Global.FMatrix
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.Clone</parameter>
          </include>
        </markup>
    content.vb: Public Function Clone() As FMatrix
  overload: Global.FMatrix.Clone*
- uid: Global.FMatrix.CopyValues(FMatrix)
  commentId: M:Global.FMatrix.CopyValues(FMatrix)
  id: CopyValues(FMatrix)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: CopyValues(FMatrix)
  nameWithType: FMatrix.CopyValues(FMatrix)
  fullName: FMatrix.CopyValues(FMatrix)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.CopyValues(FMatrix)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void CopyValues(FMatrix sourceMatrix)
    parameters:
    - id: sourceMatrix
      type: Global.FMatrix
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourceMatrix</parameter>
            <parameter>M:FMatrix.CopyValues(FMatrix)</parameter>
          </include>
        </markup>
    content.vb: Public Sub CopyValues(sourceMatrix As FMatrix)
  overload: Global.FMatrix.CopyValues*
- uid: Global.FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Global.FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: SetRotateThenScale(float, float, float, float, float)
  nameWithType: FMatrix.SetRotateThenScale(float, float, float, float, float)
  fullName: FMatrix.SetRotateThenScale(float, float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SetRotateThenScale(float x, float y, float scaleX, float scaleY, float rotationInRadians)
    parameters:
    - id: x
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: scaleX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scaleX</parameter>
            <parameter>M:FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: scaleY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scaleY</parameter>
            <parameter>M:FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: rotationInRadians
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rotationInRadians</parameter>
            <parameter>M:FMatrix.SetRotateThenScale(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SetRotateThenScale(x As Single, y As Single, scaleX As Single, scaleY As Single, rotationInRadians As Single)
  overload: Global.FMatrix.SetRotateThenScale*
  nameWithType.vb: FMatrix.SetRotateThenScale(Single, Single, Single, Single, Single)
  fullName.vb: FMatrix.SetRotateThenScale(Single, Single, Single, Single, Single)
  name.vb: SetRotateThenScale(Single, Single, Single, Single, Single)
- uid: Global.FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Global.FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: SetScaleThenRotate(float, float, float, float, float)
  nameWithType: FMatrix.SetScaleThenRotate(float, float, float, float, float)
  fullName: FMatrix.SetScaleThenRotate(float, float, float, float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SetScaleThenRotate(float x, float y, float scaleX, float scaleY, float rotationInRadians)
    parameters:
    - id: x
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: scaleX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scaleX</parameter>
            <parameter>M:FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: scaleY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scaleY</parameter>
            <parameter>M:FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: rotationInRadians
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rotationInRadians</parameter>
            <parameter>M:FMatrix.SetScaleThenRotate(System.Single,System.Single,System.Single,System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub SetScaleThenRotate(x As Single, y As Single, scaleX As Single, scaleY As Single, rotationInRadians As Single)
  overload: Global.FMatrix.SetScaleThenRotate*
  nameWithType.vb: FMatrix.SetScaleThenRotate(Single, Single, Single, Single, Single)
  fullName.vb: FMatrix.SetScaleThenRotate(Single, Single, Single, Single, Single)
  name.vb: SetScaleThenRotate(Single, Single, Single, Single, Single)
- uid: Global.FMatrix.Translate(System.Single,System.Single)
  commentId: M:Global.FMatrix.Translate(System.Single,System.Single)
  id: Translate(System.Single,System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: Translate(float, float)
  nameWithType: FMatrix.Translate(float, float)
  fullName: FMatrix.Translate(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.Translate(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Translate(float deltaX, float deltaY)
    parameters:
    - id: deltaX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>deltaX</parameter>
            <parameter>M:FMatrix.Translate(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: deltaY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>deltaY</parameter>
            <parameter>M:FMatrix.Translate(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Translate(deltaX As Single, deltaY As Single)
  overload: Global.FMatrix.Translate*
  nameWithType.vb: FMatrix.Translate(Single, Single)
  fullName.vb: FMatrix.Translate(Single, Single)
  name.vb: Translate(Single, Single)
- uid: Global.FMatrix.Scale(System.Single,System.Single)
  commentId: M:Global.FMatrix.Scale(System.Single,System.Single)
  id: Scale(System.Single,System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: Scale(float, float)
  nameWithType: FMatrix.Scale(float, float)
  fullName: FMatrix.Scale(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.Scale(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Scale(float scaleX, float scaleY)
    parameters:
    - id: scaleX
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scaleX</parameter>
            <parameter>M:FMatrix.Scale(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: scaleY
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scaleY</parameter>
            <parameter>M:FMatrix.Scale(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Scale(scaleX As Single, scaleY As Single)
  overload: Global.FMatrix.Scale*
  nameWithType.vb: FMatrix.Scale(Single, Single)
  fullName.vb: FMatrix.Scale(Single, Single)
  name.vb: Scale(Single, Single)
- uid: Global.FMatrix.Rotate(System.Single)
  commentId: M:Global.FMatrix.Rotate(System.Single)
  id: Rotate(System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: Rotate(float)
  nameWithType: FMatrix.Rotate(float)
  fullName: FMatrix.Rotate(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.Rotate(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Rotate(float rotationInRadians)
    parameters:
    - id: rotationInRadians
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rotationInRadians</parameter>
            <parameter>M:FMatrix.Rotate(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Rotate(rotationInRadians As Single)
  overload: Global.FMatrix.Rotate*
  nameWithType.vb: FMatrix.Rotate(Single)
  fullName.vb: FMatrix.Rotate(Single)
  name.vb: Rotate(Single)
- uid: Global.FMatrix.RotateInPlace(System.Single)
  commentId: M:Global.FMatrix.RotateInPlace(System.Single)
  id: RotateInPlace(System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: RotateInPlace(float)
  nameWithType: FMatrix.RotateInPlace(float)
  fullName: FMatrix.RotateInPlace(float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.RotateInPlace(System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void RotateInPlace(float rotationInRadians)
    parameters:
    - id: rotationInRadians
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rotationInRadians</parameter>
            <parameter>M:FMatrix.RotateInPlace(System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub RotateInPlace(rotationInRadians As Single)
  overload: Global.FMatrix.RotateInPlace*
  nameWithType.vb: FMatrix.RotateInPlace(Single)
  fullName.vb: FMatrix.RotateInPlace(Single)
  name.vb: RotateInPlace(Single)
- uid: Global.FMatrix.GetScaleX
  commentId: M:Global.FMatrix.GetScaleX
  id: GetScaleX
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: GetScaleX()
  nameWithType: FMatrix.GetScaleX()
  fullName: FMatrix.GetScaleX()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.GetScaleX</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float GetScaleX()
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.GetScaleX</parameter>
          </include>
        </markup>
    content.vb: Public Function GetScaleX() As Single
  overload: Global.FMatrix.GetScaleX*
- uid: Global.FMatrix.GetScaleY
  commentId: M:Global.FMatrix.GetScaleY
  id: GetScaleY
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: GetScaleY()
  nameWithType: FMatrix.GetScaleY()
  fullName: FMatrix.GetScaleY()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.GetScaleY</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float GetScaleY()
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.GetScaleY</parameter>
          </include>
        </markup>
    content.vb: Public Function GetScaleY() As Single
  overload: Global.FMatrix.GetScaleY*
- uid: Global.FMatrix.GetRotation
  commentId: M:Global.FMatrix.GetRotation
  id: GetRotation
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: GetRotation()
  nameWithType: FMatrix.GetRotation()
  fullName: FMatrix.GetRotation()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.GetRotation</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float GetRotation()
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.GetRotation</parameter>
          </include>
        </markup>
    content.vb: Public Function GetRotation() As Single
  overload: Global.FMatrix.GetRotation*
- uid: Global.FMatrix.Concat(FMatrix)
  commentId: M:Global.FMatrix.Concat(FMatrix)
  id: Concat(FMatrix)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: Concat(FMatrix)
  nameWithType: FMatrix.Concat(FMatrix)
  fullName: FMatrix.Concat(FMatrix)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.Concat(FMatrix)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Concat(FMatrix other)
    parameters:
    - id: other
      type: Global.FMatrix
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:FMatrix.Concat(FMatrix)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Concat(other As FMatrix)
  overload: Global.FMatrix.Concat*
- uid: Global.FMatrix.ConcatOther(FMatrix)
  commentId: M:Global.FMatrix.ConcatOther(FMatrix)
  id: ConcatOther(FMatrix)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: ConcatOther(FMatrix)
  nameWithType: FMatrix.ConcatOther(FMatrix)
  fullName: FMatrix.ConcatOther(FMatrix)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.ConcatOther(FMatrix)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ConcatOther(FMatrix other)
    parameters:
    - id: other
      type: Global.FMatrix
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:FMatrix.ConcatOther(FMatrix)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ConcatOther(other As FMatrix)
  overload: Global.FMatrix.ConcatOther*
- uid: Global.FMatrix.ConcatAndCopyValues(FMatrix,FMatrix)
  commentId: M:Global.FMatrix.ConcatAndCopyValues(FMatrix,FMatrix)
  id: ConcatAndCopyValues(FMatrix,FMatrix)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: ConcatAndCopyValues(FMatrix, FMatrix)
  nameWithType: FMatrix.ConcatAndCopyValues(FMatrix, FMatrix)
  fullName: FMatrix.ConcatAndCopyValues(FMatrix, FMatrix)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.ConcatAndCopyValues(FMatrix,FMatrix)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ConcatAndCopyValues(FMatrix first, FMatrix second)
    parameters:
    - id: first
      type: Global.FMatrix
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>first</parameter>
            <parameter>M:FMatrix.ConcatAndCopyValues(FMatrix,FMatrix)</parameter>
          </include>
        </markup>
    - id: second
      type: Global.FMatrix
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>second</parameter>
            <parameter>M:FMatrix.ConcatAndCopyValues(FMatrix,FMatrix)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ConcatAndCopyValues(first As FMatrix, second As FMatrix)
  overload: Global.FMatrix.ConcatAndCopyValues*
- uid: Global.FMatrix.Invert
  commentId: M:Global.FMatrix.Invert
  id: Invert
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: Invert()
  nameWithType: FMatrix.Invert()
  fullName: FMatrix.Invert()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.Invert</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Invert()
    content.vb: Public Sub Invert()
  overload: Global.FMatrix.Invert*
- uid: Global.FMatrix.InvertAndCopyValues(FMatrix)
  commentId: M:Global.FMatrix.InvertAndCopyValues(FMatrix)
  id: InvertAndCopyValues(FMatrix)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: InvertAndCopyValues(FMatrix)
  nameWithType: FMatrix.InvertAndCopyValues(FMatrix)
  fullName: FMatrix.InvertAndCopyValues(FMatrix)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.InvertAndCopyValues(FMatrix)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void InvertAndCopyValues(FMatrix other)
    parameters:
    - id: other
      type: Global.FMatrix
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:FMatrix.InvertAndCopyValues(FMatrix)</parameter>
          </include>
        </markup>
    content.vb: Public Sub InvertAndCopyValues(other As FMatrix)
  overload: Global.FMatrix.InvertAndCopyValues*
- uid: Global.FMatrix.GetNewTransformedVector(UnityEngine.Vector2)
  commentId: M:Global.FMatrix.GetNewTransformedVector(UnityEngine.Vector2)
  id: GetNewTransformedVector(UnityEngine.Vector2)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: GetNewTransformedVector(Vector2)
  nameWithType: FMatrix.GetNewTransformedVector(Vector2)
  fullName: FMatrix.GetNewTransformedVector(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.GetNewTransformedVector(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetNewTransformedVector(Vector2 vector)
    parameters:
    - id: vector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vector</parameter>
            <parameter>M:FMatrix.GetNewTransformedVector(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.GetNewTransformedVector(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetNewTransformedVector(vector As Vector2) As Vector2
  overload: Global.FMatrix.GetNewTransformedVector*
- uid: Global.FMatrix.GetTransformedUnitVector
  commentId: M:Global.FMatrix.GetTransformedUnitVector
  id: GetTransformedUnitVector
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: GetTransformedUnitVector()
  nameWithType: FMatrix.GetTransformedUnitVector()
  fullName: FMatrix.GetTransformedUnitVector()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.GetTransformedUnitVector</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetTransformedUnitVector()
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.GetTransformedUnitVector</parameter>
          </include>
        </markup>
    content.vb: Public Function GetTransformedUnitVector() As Vector2
  overload: Global.FMatrix.GetTransformedUnitVector*
- uid: Global.FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)
  commentId: M:Global.FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)
  id: GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: GetVector3FromLocalVector2(Vector2, float)
  nameWithType: FMatrix.GetVector3FromLocalVector2(Vector2, float)
  fullName: FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector3 GetVector3FromLocalVector2(Vector2 localVector, float z)
    parameters:
    - id: localVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localVector</parameter>
            <parameter>M:FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: z
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>z</parameter>
            <parameter>M:FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector3
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetVector3FromLocalVector2(localVector As Vector2, z As Single) As Vector3
  overload: Global.FMatrix.GetVector3FromLocalVector2*
  nameWithType.vb: FMatrix.GetVector3FromLocalVector2(Vector2, Single)
  fullName.vb: FMatrix.GetVector3FromLocalVector2(UnityEngine.Vector2, Single)
  name.vb: GetVector3FromLocalVector2(Vector2, Single)
- uid: Global.FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)
  commentId: M:Global.FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)
  id: ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: ApplyVector3FromLocalVector2(ref Vector3, Vector2, float)
  nameWithType: FMatrix.ApplyVector3FromLocalVector2(ref Vector3, Vector2, float)
  fullName: FMatrix.ApplyVector3FromLocalVector2(ref UnityEngine.Vector3, UnityEngine.Vector2, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ApplyVector3FromLocalVector2(ref Vector3 outVector, Vector2 localVector, float z)
    parameters:
    - id: outVector
      type: UnityEngine.Vector3
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>outVector</parameter>
            <parameter>M:FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: localVector
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>localVector</parameter>
            <parameter>M:FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: z
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>z</parameter>
            <parameter>M:FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3@,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub ApplyVector3FromLocalVector2(outVector As Vector3, localVector As Vector2, z As Single)
  overload: Global.FMatrix.ApplyVector3FromLocalVector2*
  nameWithType.vb: FMatrix.ApplyVector3FromLocalVector2(Vector3, Vector2, Single)
  fullName.vb: FMatrix.ApplyVector3FromLocalVector2(UnityEngine.Vector3, UnityEngine.Vector2, Single)
  name.vb: ApplyVector3FromLocalVector2(Vector3, Vector2, Single)
- uid: Global.FMatrix.ResetToIdentity
  commentId: M:Global.FMatrix.ResetToIdentity
  id: ResetToIdentity
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: ResetToIdentity()
  nameWithType: FMatrix.ResetToIdentity()
  fullName: FMatrix.ResetToIdentity()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.ResetToIdentity</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void ResetToIdentity()
    content.vb: Public Sub ResetToIdentity()
  overload: Global.FMatrix.ResetToIdentity*
- uid: Global.FMatrix.ToString
  commentId: M:Global.FMatrix.ToString
  id: ToString
  parent: Global.FMatrix
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FMatrix.ToString()
  fullName: FMatrix.ToString()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FMatrix.ToString</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:FMatrix.ToString</parameter>
          </include>
        </markup>
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Global.FMatrix.ToString*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.FMatrix
  commentId: T:Global.FMatrix
  isExternal: true
  href: FMatrix.html
  name: FMatrix
  nameWithType: FMatrix
  fullName: FMatrix
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.FMatrix.#ctor*
  commentId: Overload:Global.FMatrix.#ctor
  isExternal: true
  href: Global.FMatrix.html#FMatrix__ctor
  name: FMatrix
  nameWithType: FMatrix.FMatrix
  fullName: FMatrix.FMatrix
  nameWithType.vb: FMatrix.New
  fullName.vb: FMatrix.New
  name.vb: New
- uid: Global.FMatrix.Clone*
  commentId: Overload:Global.FMatrix.Clone
  isExternal: true
  href: Global.FMatrix.html#FMatrix_Clone
  name: Clone
  nameWithType: FMatrix.Clone
  fullName: FMatrix.Clone
- uid: Global.FMatrix.CopyValues*
  commentId: Overload:Global.FMatrix.CopyValues
  isExternal: true
  href: Global.FMatrix.html#FMatrix_CopyValues_FMatrix_
  name: CopyValues
  nameWithType: FMatrix.CopyValues
  fullName: FMatrix.CopyValues
- uid: Global.FMatrix.SetRotateThenScale*
  commentId: Overload:Global.FMatrix.SetRotateThenScale
  isExternal: true
  href: Global.FMatrix.html#FMatrix_SetRotateThenScale_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: SetRotateThenScale
  nameWithType: FMatrix.SetRotateThenScale
  fullName: FMatrix.SetRotateThenScale
- uid: Global.FMatrix.SetScaleThenRotate*
  commentId: Overload:Global.FMatrix.SetScaleThenRotate
  isExternal: true
  href: Global.FMatrix.html#FMatrix_SetScaleThenRotate_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: SetScaleThenRotate
  nameWithType: FMatrix.SetScaleThenRotate
  fullName: FMatrix.SetScaleThenRotate
- uid: Global.FMatrix.Translate*
  commentId: Overload:Global.FMatrix.Translate
  isExternal: true
  href: Global.FMatrix.html#FMatrix_Translate_System_Single_System_Single_
  name: Translate
  nameWithType: FMatrix.Translate
  fullName: FMatrix.Translate
- uid: Global.FMatrix.Scale*
  commentId: Overload:Global.FMatrix.Scale
  isExternal: true
  href: Global.FMatrix.html#FMatrix_Scale_System_Single_System_Single_
  name: Scale
  nameWithType: FMatrix.Scale
  fullName: FMatrix.Scale
- uid: Global.FMatrix.Rotate*
  commentId: Overload:Global.FMatrix.Rotate
  isExternal: true
  href: Global.FMatrix.html#FMatrix_Rotate_System_Single_
  name: Rotate
  nameWithType: FMatrix.Rotate
  fullName: FMatrix.Rotate
- uid: Global.FMatrix.RotateInPlace*
  commentId: Overload:Global.FMatrix.RotateInPlace
  isExternal: true
  href: Global.FMatrix.html#FMatrix_RotateInPlace_System_Single_
  name: RotateInPlace
  nameWithType: FMatrix.RotateInPlace
  fullName: FMatrix.RotateInPlace
- uid: Global.FMatrix.GetScaleX*
  commentId: Overload:Global.FMatrix.GetScaleX
  isExternal: true
  href: Global.FMatrix.html#FMatrix_GetScaleX
  name: GetScaleX
  nameWithType: FMatrix.GetScaleX
  fullName: FMatrix.GetScaleX
- uid: Global.FMatrix.GetScaleY*
  commentId: Overload:Global.FMatrix.GetScaleY
  isExternal: true
  href: Global.FMatrix.html#FMatrix_GetScaleY
  name: GetScaleY
  nameWithType: FMatrix.GetScaleY
  fullName: FMatrix.GetScaleY
- uid: Global.FMatrix.GetRotation*
  commentId: Overload:Global.FMatrix.GetRotation
  isExternal: true
  href: Global.FMatrix.html#FMatrix_GetRotation
  name: GetRotation
  nameWithType: FMatrix.GetRotation
  fullName: FMatrix.GetRotation
- uid: Global.FMatrix.Concat*
  commentId: Overload:Global.FMatrix.Concat
  isExternal: true
  href: Global.FMatrix.html#FMatrix_Concat_FMatrix_
  name: Concat
  nameWithType: FMatrix.Concat
  fullName: FMatrix.Concat
- uid: Global.FMatrix.ConcatOther*
  commentId: Overload:Global.FMatrix.ConcatOther
  isExternal: true
  href: Global.FMatrix.html#FMatrix_ConcatOther_FMatrix_
  name: ConcatOther
  nameWithType: FMatrix.ConcatOther
  fullName: FMatrix.ConcatOther
- uid: Global.FMatrix.ConcatAndCopyValues*
  commentId: Overload:Global.FMatrix.ConcatAndCopyValues
  isExternal: true
  href: Global.FMatrix.html#FMatrix_ConcatAndCopyValues_FMatrix_FMatrix_
  name: ConcatAndCopyValues
  nameWithType: FMatrix.ConcatAndCopyValues
  fullName: FMatrix.ConcatAndCopyValues
- uid: Global.FMatrix.Invert*
  commentId: Overload:Global.FMatrix.Invert
  isExternal: true
  href: Global.FMatrix.html#FMatrix_Invert
  name: Invert
  nameWithType: FMatrix.Invert
  fullName: FMatrix.Invert
- uid: Global.FMatrix.InvertAndCopyValues*
  commentId: Overload:Global.FMatrix.InvertAndCopyValues
  isExternal: true
  href: Global.FMatrix.html#FMatrix_InvertAndCopyValues_FMatrix_
  name: InvertAndCopyValues
  nameWithType: FMatrix.InvertAndCopyValues
  fullName: FMatrix.InvertAndCopyValues
- uid: Global.FMatrix.GetNewTransformedVector*
  commentId: Overload:Global.FMatrix.GetNewTransformedVector
  isExternal: true
  href: Global.FMatrix.html#FMatrix_GetNewTransformedVector_UnityEngine_Vector2_
  name: GetNewTransformedVector
  nameWithType: FMatrix.GetNewTransformedVector
  fullName: FMatrix.GetNewTransformedVector
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.FMatrix.GetTransformedUnitVector*
  commentId: Overload:Global.FMatrix.GetTransformedUnitVector
  isExternal: true
  href: Global.FMatrix.html#FMatrix_GetTransformedUnitVector
  name: GetTransformedUnitVector
  nameWithType: FMatrix.GetTransformedUnitVector
  fullName: FMatrix.GetTransformedUnitVector
- uid: Global.FMatrix.GetVector3FromLocalVector2*
  commentId: Overload:Global.FMatrix.GetVector3FromLocalVector2
  isExternal: true
  href: Global.FMatrix.html#FMatrix_GetVector3FromLocalVector2_UnityEngine_Vector2_System_Single_
  name: GetVector3FromLocalVector2
  nameWithType: FMatrix.GetVector3FromLocalVector2
  fullName: FMatrix.GetVector3FromLocalVector2
- uid: UnityEngine.Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: Global.FMatrix.ApplyVector3FromLocalVector2*
  commentId: Overload:Global.FMatrix.ApplyVector3FromLocalVector2
  isExternal: true
  href: Global.FMatrix.html#FMatrix_ApplyVector3FromLocalVector2_UnityEngine_Vector3__UnityEngine_Vector2_System_Single_
  name: ApplyVector3FromLocalVector2
  nameWithType: FMatrix.ApplyVector3FromLocalVector2
  fullName: FMatrix.ApplyVector3FromLocalVector2
- uid: Global.FMatrix.ResetToIdentity*
  commentId: Overload:Global.FMatrix.ResetToIdentity
  isExternal: true
  href: Global.FMatrix.html#FMatrix_ResetToIdentity
  name: ResetToIdentity
  nameWithType: FMatrix.ResetToIdentity
  fullName: FMatrix.ResetToIdentity
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Global.FMatrix.ToString*
  commentId: Overload:Global.FMatrix.ToString
  isExternal: true
  href: Global.FMatrix.html#FMatrix_ToString
  name: ToString
  nameWithType: FMatrix.ToString
  fullName: FMatrix.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
