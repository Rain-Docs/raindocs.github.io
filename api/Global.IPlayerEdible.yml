### YamlMime:ManagedReference
items:
- uid: Global.IPlayerEdible
  commentId: T:Global.IPlayerEdible
  id: IPlayerEdible
  parent: Global
  children:
  - Global.IPlayerEdible.AutomaticPickUp
  - Global.IPlayerEdible.BitByPlayer(Creature.Grasp,System.Boolean)
  - Global.IPlayerEdible.BitesLeft
  - Global.IPlayerEdible.Edible
  - Global.IPlayerEdible.FoodPoints
  - Global.IPlayerEdible.ThrowByPlayer
  langs:
  - csharp
  - vb
  name: IPlayerEdible
  nameWithType: IPlayerEdible
  fullName: IPlayerEdible
  type: Interface
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:IPlayerEdible</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public interface IPlayerEdible
    content.vb: Public Interface IPlayerEdible
- uid: Global.IPlayerEdible.BitByPlayer(Creature.Grasp,System.Boolean)
  commentId: M:Global.IPlayerEdible.BitByPlayer(Creature.Grasp,System.Boolean)
  id: BitByPlayer(Creature.Grasp,System.Boolean)
  parent: Global.IPlayerEdible
  langs:
  - csharp
  - vb
  name: BitByPlayer(Grasp, bool)
  nameWithType: IPlayerEdible.BitByPlayer(Creature.Grasp, bool)
  fullName: IPlayerEdible.BitByPlayer(Creature.Grasp, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:IPlayerEdible.BitByPlayer(Creature.Grasp,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: void BitByPlayer(Creature.Grasp grasp, bool eu)
    parameters:
    - id: grasp
      type: Global.Creature.Grasp
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>grasp</parameter>
            <parameter>M:IPlayerEdible.BitByPlayer(Creature.Grasp,System.Boolean)</parameter>
          </include>
        </markup>
    - id: eu
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>eu</parameter>
            <parameter>M:IPlayerEdible.BitByPlayer(Creature.Grasp,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Sub BitByPlayer(grasp As Creature.Grasp, eu As Boolean)
  overload: Global.IPlayerEdible.BitByPlayer*
  nameWithType.vb: IPlayerEdible.BitByPlayer(Creature.Grasp, Boolean)
  fullName.vb: IPlayerEdible.BitByPlayer(Creature.Grasp, Boolean)
  name.vb: BitByPlayer(Grasp, Boolean)
- uid: Global.IPlayerEdible.ThrowByPlayer
  commentId: M:Global.IPlayerEdible.ThrowByPlayer
  id: ThrowByPlayer
  parent: Global.IPlayerEdible
  langs:
  - csharp
  - vb
  name: ThrowByPlayer()
  nameWithType: IPlayerEdible.ThrowByPlayer()
  fullName: IPlayerEdible.ThrowByPlayer()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:IPlayerEdible.ThrowByPlayer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: void ThrowByPlayer()
    content.vb: Sub ThrowByPlayer()
  overload: Global.IPlayerEdible.ThrowByPlayer*
- uid: Global.IPlayerEdible.BitesLeft
  commentId: P:Global.IPlayerEdible.BitesLeft
  id: BitesLeft
  parent: Global.IPlayerEdible
  langs:
  - csharp
  - vb
  name: BitesLeft
  nameWithType: IPlayerEdible.BitesLeft
  fullName: IPlayerEdible.BitesLeft
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:IPlayerEdible.BitesLeft</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: int BitesLeft { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property BitesLeft As Integer
  overload: Global.IPlayerEdible.BitesLeft*
- uid: Global.IPlayerEdible.FoodPoints
  commentId: P:Global.IPlayerEdible.FoodPoints
  id: FoodPoints
  parent: Global.IPlayerEdible
  langs:
  - csharp
  - vb
  name: FoodPoints
  nameWithType: IPlayerEdible.FoodPoints
  fullName: IPlayerEdible.FoodPoints
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:IPlayerEdible.FoodPoints</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: int FoodPoints { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property FoodPoints As Integer
  overload: Global.IPlayerEdible.FoodPoints*
- uid: Global.IPlayerEdible.Edible
  commentId: P:Global.IPlayerEdible.Edible
  id: Edible
  parent: Global.IPlayerEdible
  langs:
  - csharp
  - vb
  name: Edible
  nameWithType: IPlayerEdible.Edible
  fullName: IPlayerEdible.Edible
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:IPlayerEdible.Edible</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: bool Edible { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Edible As Boolean
  overload: Global.IPlayerEdible.Edible*
- uid: Global.IPlayerEdible.AutomaticPickUp
  commentId: P:Global.IPlayerEdible.AutomaticPickUp
  id: AutomaticPickUp
  parent: Global.IPlayerEdible
  langs:
  - csharp
  - vb
  name: AutomaticPickUp
  nameWithType: IPlayerEdible.AutomaticPickUp
  fullName: IPlayerEdible.AutomaticPickUp
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:IPlayerEdible.AutomaticPickUp</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: bool AutomaticPickUp { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property AutomaticPickUp As Boolean
  overload: Global.IPlayerEdible.AutomaticPickUp*
references:
- uid: Global
- uid: Global.IPlayerEdible.BitByPlayer*
  commentId: Overload:Global.IPlayerEdible.BitByPlayer
  isExternal: true
  href: Global.IPlayerEdible.html#IPlayerEdible_BitByPlayer_Creature_Grasp_System_Boolean_
  name: BitByPlayer
  nameWithType: IPlayerEdible.BitByPlayer
  fullName: IPlayerEdible.BitByPlayer
- uid: Global.Creature.Grasp
  commentId: T:Global.Creature.Grasp
  isExternal: true
  href: Creature.html
  name: Creature.Grasp
  nameWithType: Creature.Grasp
  fullName: Creature.Grasp
  spec.csharp:
  - uid: Global.Creature
    name: Creature
    isExternal: true
    href: Creature.html
  - name: .
  - uid: Global.Creature.Grasp
    name: Grasp
    isExternal: true
    href: Creature.Grasp.html
  spec.vb:
  - uid: Global.Creature
    name: Creature
    isExternal: true
    href: Creature.html
  - name: .
  - uid: Global.Creature.Grasp
    name: Grasp
    isExternal: true
    href: Creature.Grasp.html
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.IPlayerEdible.ThrowByPlayer*
  commentId: Overload:Global.IPlayerEdible.ThrowByPlayer
  isExternal: true
  href: Global.IPlayerEdible.html#IPlayerEdible_ThrowByPlayer
  name: ThrowByPlayer
  nameWithType: IPlayerEdible.ThrowByPlayer
  fullName: IPlayerEdible.ThrowByPlayer
- uid: Global.IPlayerEdible.BitesLeft*
  commentId: Overload:Global.IPlayerEdible.BitesLeft
  isExternal: true
  href: Global.IPlayerEdible.html#IPlayerEdible_BitesLeft
  name: BitesLeft
  nameWithType: IPlayerEdible.BitesLeft
  fullName: IPlayerEdible.BitesLeft
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.IPlayerEdible.FoodPoints*
  commentId: Overload:Global.IPlayerEdible.FoodPoints
  isExternal: true
  href: Global.IPlayerEdible.html#IPlayerEdible_FoodPoints
  name: FoodPoints
  nameWithType: IPlayerEdible.FoodPoints
  fullName: IPlayerEdible.FoodPoints
- uid: Global.IPlayerEdible.Edible*
  commentId: Overload:Global.IPlayerEdible.Edible
  isExternal: true
  href: Global.IPlayerEdible.html#IPlayerEdible_Edible
  name: Edible
  nameWithType: IPlayerEdible.Edible
  fullName: IPlayerEdible.Edible
- uid: Global.IPlayerEdible.AutomaticPickUp*
  commentId: Overload:Global.IPlayerEdible.AutomaticPickUp
  isExternal: true
  href: Global.IPlayerEdible.html#IPlayerEdible_AutomaticPickUp
  name: AutomaticPickUp
  nameWithType: IPlayerEdible.AutomaticPickUp
  fullName: IPlayerEdible.AutomaticPickUp
