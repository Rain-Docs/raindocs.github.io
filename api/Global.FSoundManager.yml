### YamlMime:ManagedReference
items:
- uid: Global.FSoundManager
  commentId: T:Global.FSoundManager
  id: FSoundManager
  parent: Global
  children:
  - Global.FSoundManager.#ctor
  - Global.FSoundManager.Init
  - Global.FSoundManager.PlayMusic(System.String)
  - Global.FSoundManager.PlayMusic(System.String,System.Single)
  - Global.FSoundManager.PlayMusic(System.String,System.Single,System.Boolean)
  - Global.FSoundManager.PlaySound(System.String)
  - Global.FSoundManager.PlaySound(System.String,System.Single)
  - Global.FSoundManager.PreloadSound(System.String)
  - Global.FSoundManager.SetResourcePrefix(System.String)
  - Global.FSoundManager.StopMusic
  - Global.FSoundManager.UnloadAllSounds
  - Global.FSoundManager.UnloadAllSoundsAndMusic
  - Global.FSoundManager.UnloadMusic
  - Global.FSoundManager.UnloadSound(System.String)
  - Global.FSoundManager.isMuted
  - Global.FSoundManager.resourcePrefix
  - Global.FSoundManager.volume
  langs:
  - csharp
  - vb
  name: FSoundManager
  nameWithType: FSoundManager
  fullName: FSoundManager
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:FSoundManager</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class FSoundManager
    content.vb: Public Class FSoundManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.FSoundManager.resourcePrefix
  commentId: F:Global.FSoundManager.resourcePrefix
  id: resourcePrefix
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: resourcePrefix
  nameWithType: FSoundManager.resourcePrefix
  fullName: FSoundManager.resourcePrefix
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:FSoundManager.resourcePrefix</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static string resourcePrefix
    return:
      type: System.String
    content.vb: Public Shared resourcePrefix As String
- uid: Global.FSoundManager.Init
  commentId: M:Global.FSoundManager.Init
  id: Init
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: FSoundManager.Init()
  fullName: FSoundManager.Init()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.Init</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void Init()
    content.vb: Public Shared Sub Init()
  overload: Global.FSoundManager.Init*
- uid: Global.FSoundManager.SetResourcePrefix(System.String)
  commentId: M:Global.FSoundManager.SetResourcePrefix(System.String)
  id: SetResourcePrefix(System.String)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: SetResourcePrefix(string)
  nameWithType: FSoundManager.SetResourcePrefix(string)
  fullName: FSoundManager.SetResourcePrefix(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.SetResourcePrefix(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void SetResourcePrefix(string prefix)
    parameters:
    - id: prefix
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>prefix</parameter>
            <parameter>M:FSoundManager.SetResourcePrefix(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub SetResourcePrefix(prefix As String)
  overload: Global.FSoundManager.SetResourcePrefix*
  nameWithType.vb: FSoundManager.SetResourcePrefix(String)
  fullName.vb: FSoundManager.SetResourcePrefix(String)
  name.vb: SetResourcePrefix(String)
- uid: Global.FSoundManager.PreloadSound(System.String)
  commentId: M:Global.FSoundManager.PreloadSound(System.String)
  id: PreloadSound(System.String)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: PreloadSound(string)
  nameWithType: FSoundManager.PreloadSound(string)
  fullName: FSoundManager.PreloadSound(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.PreloadSound(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void PreloadSound(string resourceName)
    parameters:
    - id: resourceName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resourceName</parameter>
            <parameter>M:FSoundManager.PreloadSound(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub PreloadSound(resourceName As String)
  overload: Global.FSoundManager.PreloadSound*
  nameWithType.vb: FSoundManager.PreloadSound(String)
  fullName.vb: FSoundManager.PreloadSound(String)
  name.vb: PreloadSound(String)
- uid: Global.FSoundManager.PlaySound(System.String,System.Single)
  commentId: M:Global.FSoundManager.PlaySound(System.String,System.Single)
  id: PlaySound(System.String,System.Single)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: PlaySound(string, float)
  nameWithType: FSoundManager.PlaySound(string, float)
  fullName: FSoundManager.PlaySound(string, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.PlaySound(System.String,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void PlaySound(string resourceName, float volume)
    parameters:
    - id: resourceName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resourceName</parameter>
            <parameter>M:FSoundManager.PlaySound(System.String,System.Single)</parameter>
          </include>
        </markup>
    - id: volume
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>volume</parameter>
            <parameter>M:FSoundManager.PlaySound(System.String,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub PlaySound(resourceName As String, volume As Single)
  overload: Global.FSoundManager.PlaySound*
  nameWithType.vb: FSoundManager.PlaySound(String, Single)
  fullName.vb: FSoundManager.PlaySound(String, Single)
  name.vb: PlaySound(String, Single)
- uid: Global.FSoundManager.PlaySound(System.String)
  commentId: M:Global.FSoundManager.PlaySound(System.String)
  id: PlaySound(System.String)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: PlaySound(string)
  nameWithType: FSoundManager.PlaySound(string)
  fullName: FSoundManager.PlaySound(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.PlaySound(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void PlaySound(string resourceName)
    parameters:
    - id: resourceName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resourceName</parameter>
            <parameter>M:FSoundManager.PlaySound(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub PlaySound(resourceName As String)
  overload: Global.FSoundManager.PlaySound*
  nameWithType.vb: FSoundManager.PlaySound(String)
  fullName.vb: FSoundManager.PlaySound(String)
  name.vb: PlaySound(String)
- uid: Global.FSoundManager.PlayMusic(System.String,System.Single)
  commentId: M:Global.FSoundManager.PlayMusic(System.String,System.Single)
  id: PlayMusic(System.String,System.Single)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: PlayMusic(string, float)
  nameWithType: FSoundManager.PlayMusic(string, float)
  fullName: FSoundManager.PlayMusic(string, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.PlayMusic(System.String,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void PlayMusic(string resourceName, float volume)
    parameters:
    - id: resourceName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resourceName</parameter>
            <parameter>M:FSoundManager.PlayMusic(System.String,System.Single)</parameter>
          </include>
        </markup>
    - id: volume
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>volume</parameter>
            <parameter>M:FSoundManager.PlayMusic(System.String,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub PlayMusic(resourceName As String, volume As Single)
  overload: Global.FSoundManager.PlayMusic*
  nameWithType.vb: FSoundManager.PlayMusic(String, Single)
  fullName.vb: FSoundManager.PlayMusic(String, Single)
  name.vb: PlayMusic(String, Single)
- uid: Global.FSoundManager.PlayMusic(System.String,System.Single,System.Boolean)
  commentId: M:Global.FSoundManager.PlayMusic(System.String,System.Single,System.Boolean)
  id: PlayMusic(System.String,System.Single,System.Boolean)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: PlayMusic(string, float, bool)
  nameWithType: FSoundManager.PlayMusic(string, float, bool)
  fullName: FSoundManager.PlayMusic(string, float, bool)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.PlayMusic(System.String,System.Single,System.Boolean)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void PlayMusic(string resourceName, float volume, bool shouldRestartIfSameSongIsAlreadyPlaying)
    parameters:
    - id: resourceName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resourceName</parameter>
            <parameter>M:FSoundManager.PlayMusic(System.String,System.Single,System.Boolean)</parameter>
          </include>
        </markup>
    - id: volume
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>volume</parameter>
            <parameter>M:FSoundManager.PlayMusic(System.String,System.Single,System.Boolean)</parameter>
          </include>
        </markup>
    - id: shouldRestartIfSameSongIsAlreadyPlaying
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>shouldRestartIfSameSongIsAlreadyPlaying</parameter>
            <parameter>M:FSoundManager.PlayMusic(System.String,System.Single,System.Boolean)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub PlayMusic(resourceName As String, volume As Single, shouldRestartIfSameSongIsAlreadyPlaying As Boolean)
  overload: Global.FSoundManager.PlayMusic*
  nameWithType.vb: FSoundManager.PlayMusic(String, Single, Boolean)
  fullName.vb: FSoundManager.PlayMusic(String, Single, Boolean)
  name.vb: PlayMusic(String, Single, Boolean)
- uid: Global.FSoundManager.PlayMusic(System.String)
  commentId: M:Global.FSoundManager.PlayMusic(System.String)
  id: PlayMusic(System.String)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: PlayMusic(string)
  nameWithType: FSoundManager.PlayMusic(string)
  fullName: FSoundManager.PlayMusic(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.PlayMusic(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void PlayMusic(string resourceName)
    parameters:
    - id: resourceName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resourceName</parameter>
            <parameter>M:FSoundManager.PlayMusic(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub PlayMusic(resourceName As String)
  overload: Global.FSoundManager.PlayMusic*
  nameWithType.vb: FSoundManager.PlayMusic(String)
  fullName.vb: FSoundManager.PlayMusic(String)
  name.vb: PlayMusic(String)
- uid: Global.FSoundManager.StopMusic
  commentId: M:Global.FSoundManager.StopMusic
  id: StopMusic
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: StopMusic()
  nameWithType: FSoundManager.StopMusic()
  fullName: FSoundManager.StopMusic()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.StopMusic</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void StopMusic()
    content.vb: Public Shared Sub StopMusic()
  overload: Global.FSoundManager.StopMusic*
- uid: Global.FSoundManager.UnloadSound(System.String)
  commentId: M:Global.FSoundManager.UnloadSound(System.String)
  id: UnloadSound(System.String)
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: UnloadSound(string)
  nameWithType: FSoundManager.UnloadSound(string)
  fullName: FSoundManager.UnloadSound(string)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.UnloadSound(System.String)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void UnloadSound(string resourceName)
    parameters:
    - id: resourceName
      type: System.String
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resourceName</parameter>
            <parameter>M:FSoundManager.UnloadSound(System.String)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Sub UnloadSound(resourceName As String)
  overload: Global.FSoundManager.UnloadSound*
  nameWithType.vb: FSoundManager.UnloadSound(String)
  fullName.vb: FSoundManager.UnloadSound(String)
  name.vb: UnloadSound(String)
- uid: Global.FSoundManager.UnloadMusic
  commentId: M:Global.FSoundManager.UnloadMusic
  id: UnloadMusic
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: UnloadMusic()
  nameWithType: FSoundManager.UnloadMusic()
  fullName: FSoundManager.UnloadMusic()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.UnloadMusic</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void UnloadMusic()
    content.vb: Public Shared Sub UnloadMusic()
  overload: Global.FSoundManager.UnloadMusic*
- uid: Global.FSoundManager.UnloadAllSounds
  commentId: M:Global.FSoundManager.UnloadAllSounds
  id: UnloadAllSounds
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: UnloadAllSounds()
  nameWithType: FSoundManager.UnloadAllSounds()
  fullName: FSoundManager.UnloadAllSounds()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.UnloadAllSounds</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void UnloadAllSounds()
    content.vb: Public Shared Sub UnloadAllSounds()
  overload: Global.FSoundManager.UnloadAllSounds*
- uid: Global.FSoundManager.UnloadAllSoundsAndMusic
  commentId: M:Global.FSoundManager.UnloadAllSoundsAndMusic
  id: UnloadAllSoundsAndMusic
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: UnloadAllSoundsAndMusic()
  nameWithType: FSoundManager.UnloadAllSoundsAndMusic()
  fullName: FSoundManager.UnloadAllSoundsAndMusic()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:FSoundManager.UnloadAllSoundsAndMusic</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void UnloadAllSoundsAndMusic()
    content.vb: Public Shared Sub UnloadAllSoundsAndMusic()
  overload: Global.FSoundManager.UnloadAllSoundsAndMusic*
- uid: Global.FSoundManager.#ctor
  commentId: M:Global.FSoundManager.#ctor
  id: '#ctor'
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: FSoundManager()
  nameWithType: FSoundManager.FSoundManager()
  fullName: FSoundManager.FSoundManager()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>FSoundManager</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public FSoundManager()
    content.vb: Public Sub New()
  overload: Global.FSoundManager.#ctor*
  nameWithType.vb: FSoundManager.New()
  fullName.vb: FSoundManager.New()
  name.vb: New()
- uid: Global.FSoundManager.volume
  commentId: P:Global.FSoundManager.volume
  id: volume
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: volume
  nameWithType: FSoundManager.volume
  fullName: FSoundManager.volume
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSoundManager.volume</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float volume { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared Property volume As Single
  overload: Global.FSoundManager.volume*
- uid: Global.FSoundManager.isMuted
  commentId: P:Global.FSoundManager.isMuted
  id: isMuted
  parent: Global.FSoundManager
  langs:
  - csharp
  - vb
  name: isMuted
  nameWithType: FSoundManager.isMuted
  fullName: FSoundManager.isMuted
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:FSoundManager.isMuted</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static bool isMuted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property isMuted As Boolean
  overload: Global.FSoundManager.isMuted*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.FSoundManager.Init*
  commentId: Overload:Global.FSoundManager.Init
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_Init
  name: Init
  nameWithType: FSoundManager.Init
  fullName: FSoundManager.Init
- uid: Global.FSoundManager.SetResourcePrefix*
  commentId: Overload:Global.FSoundManager.SetResourcePrefix
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_SetResourcePrefix_System_String_
  name: SetResourcePrefix
  nameWithType: FSoundManager.SetResourcePrefix
  fullName: FSoundManager.SetResourcePrefix
- uid: Global.FSoundManager.PreloadSound*
  commentId: Overload:Global.FSoundManager.PreloadSound
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_PreloadSound_System_String_
  name: PreloadSound
  nameWithType: FSoundManager.PreloadSound
  fullName: FSoundManager.PreloadSound
- uid: Global.FSoundManager.PlaySound*
  commentId: Overload:Global.FSoundManager.PlaySound
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_PlaySound_System_String_System_Single_
  name: PlaySound
  nameWithType: FSoundManager.PlaySound
  fullName: FSoundManager.PlaySound
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.FSoundManager.PlayMusic*
  commentId: Overload:Global.FSoundManager.PlayMusic
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_PlayMusic_System_String_System_Single_
  name: PlayMusic
  nameWithType: FSoundManager.PlayMusic
  fullName: FSoundManager.PlayMusic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.FSoundManager.StopMusic*
  commentId: Overload:Global.FSoundManager.StopMusic
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_StopMusic
  name: StopMusic
  nameWithType: FSoundManager.StopMusic
  fullName: FSoundManager.StopMusic
- uid: Global.FSoundManager.UnloadSound*
  commentId: Overload:Global.FSoundManager.UnloadSound
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_UnloadSound_System_String_
  name: UnloadSound
  nameWithType: FSoundManager.UnloadSound
  fullName: FSoundManager.UnloadSound
- uid: Global.FSoundManager.UnloadMusic*
  commentId: Overload:Global.FSoundManager.UnloadMusic
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_UnloadMusic
  name: UnloadMusic
  nameWithType: FSoundManager.UnloadMusic
  fullName: FSoundManager.UnloadMusic
- uid: Global.FSoundManager.UnloadAllSounds*
  commentId: Overload:Global.FSoundManager.UnloadAllSounds
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_UnloadAllSounds
  name: UnloadAllSounds
  nameWithType: FSoundManager.UnloadAllSounds
  fullName: FSoundManager.UnloadAllSounds
- uid: Global.FSoundManager.UnloadAllSoundsAndMusic*
  commentId: Overload:Global.FSoundManager.UnloadAllSoundsAndMusic
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_UnloadAllSoundsAndMusic
  name: UnloadAllSoundsAndMusic
  nameWithType: FSoundManager.UnloadAllSoundsAndMusic
  fullName: FSoundManager.UnloadAllSoundsAndMusic
- uid: Global.FSoundManager.#ctor*
  commentId: Overload:Global.FSoundManager.#ctor
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager__ctor
  name: FSoundManager
  nameWithType: FSoundManager.FSoundManager
  fullName: FSoundManager.FSoundManager
  nameWithType.vb: FSoundManager.New
  fullName.vb: FSoundManager.New
  name.vb: New
- uid: Global.FSoundManager.volume*
  commentId: Overload:Global.FSoundManager.volume
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_volume
  name: volume
  nameWithType: FSoundManager.volume
  fullName: FSoundManager.volume
- uid: Global.FSoundManager.isMuted*
  commentId: Overload:Global.FSoundManager.isMuted
  isExternal: true
  href: Global.FSoundManager.html#FSoundManager_isMuted
  name: isMuted
  nameWithType: FSoundManager.isMuted
  fullName: FSoundManager.isMuted
