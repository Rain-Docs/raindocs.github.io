### YamlMime:ManagedReference
items:
- uid: Watcher.WatcherEnums.AbstractObjectType
  commentId: T:Watcher.WatcherEnums.AbstractObjectType
  id: WatcherEnums.AbstractObjectType
  parent: Watcher
  children:
  - Watcher.WatcherEnums.AbstractObjectType.#ctor
  - Watcher.WatcherEnums.AbstractObjectType.BallToy
  - Watcher.WatcherEnums.AbstractObjectType.Boomerang
  - Watcher.WatcherEnums.AbstractObjectType.FireSpriteLarva
  - Watcher.WatcherEnums.AbstractObjectType.Prince
  - Watcher.WatcherEnums.AbstractObjectType.PrinceBulb
  - Watcher.WatcherEnums.AbstractObjectType.RegisterValues
  - Watcher.WatcherEnums.AbstractObjectType.RippleSpawn
  - Watcher.WatcherEnums.AbstractObjectType.SoftToy
  - Watcher.WatcherEnums.AbstractObjectType.SpinToy
  - Watcher.WatcherEnums.AbstractObjectType.UnregisterValues
  - Watcher.WatcherEnums.AbstractObjectType.WeirdToy
  langs:
  - csharp
  - vb
  name: WatcherEnums.AbstractObjectType
  nameWithType: WatcherEnums.AbstractObjectType
  fullName: Watcher.WatcherEnums.AbstractObjectType
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Watcher.WatcherEnums.AbstractObjectType</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class WatcherEnums.AbstractObjectType
    content.vb: Public Class WatcherEnums.AbstractObjectType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Watcher.WatcherEnums.AbstractObjectType.RippleSpawn
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.RippleSpawn
  id: RippleSpawn
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: RippleSpawn
  nameWithType: WatcherEnums.AbstractObjectType.RippleSpawn
  fullName: Watcher.WatcherEnums.AbstractObjectType.RippleSpawn
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.RippleSpawn</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType RippleSpawn
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared RippleSpawn As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.FireSpriteLarva
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.FireSpriteLarva
  id: FireSpriteLarva
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: FireSpriteLarva
  nameWithType: WatcherEnums.AbstractObjectType.FireSpriteLarva
  fullName: Watcher.WatcherEnums.AbstractObjectType.FireSpriteLarva
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.FireSpriteLarva</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType FireSpriteLarva
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared FireSpriteLarva As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.Boomerang
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.Boomerang
  id: Boomerang
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: Boomerang
  nameWithType: WatcherEnums.AbstractObjectType.Boomerang
  fullName: Watcher.WatcherEnums.AbstractObjectType.Boomerang
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.Boomerang</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType Boomerang
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared Boomerang As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.PrinceBulb
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.PrinceBulb
  id: PrinceBulb
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: PrinceBulb
  nameWithType: WatcherEnums.AbstractObjectType.PrinceBulb
  fullName: Watcher.WatcherEnums.AbstractObjectType.PrinceBulb
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.PrinceBulb</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType PrinceBulb
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared PrinceBulb As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.Prince
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.Prince
  id: Prince
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: Prince
  nameWithType: WatcherEnums.AbstractObjectType.Prince
  fullName: Watcher.WatcherEnums.AbstractObjectType.Prince
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.Prince</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType Prince
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared Prince As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.SpinToy
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.SpinToy
  id: SpinToy
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: SpinToy
  nameWithType: WatcherEnums.AbstractObjectType.SpinToy
  fullName: Watcher.WatcherEnums.AbstractObjectType.SpinToy
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.SpinToy</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType SpinToy
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared SpinToy As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.BallToy
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.BallToy
  id: BallToy
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: BallToy
  nameWithType: WatcherEnums.AbstractObjectType.BallToy
  fullName: Watcher.WatcherEnums.AbstractObjectType.BallToy
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.BallToy</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType BallToy
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared BallToy As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.SoftToy
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.SoftToy
  id: SoftToy
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: SoftToy
  nameWithType: WatcherEnums.AbstractObjectType.SoftToy
  fullName: Watcher.WatcherEnums.AbstractObjectType.SoftToy
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.SoftToy</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType SoftToy
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared SoftToy As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.WeirdToy
  commentId: F:Watcher.WatcherEnums.AbstractObjectType.WeirdToy
  id: WeirdToy
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: WeirdToy
  nameWithType: WatcherEnums.AbstractObjectType.WeirdToy
  fullName: Watcher.WatcherEnums.AbstractObjectType.WeirdToy
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Watcher.WatcherEnums.AbstractObjectType.WeirdToy</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static AbstractPhysicalObject.AbstractObjectType WeirdToy
    return:
      type: Global.AbstractPhysicalObject.AbstractObjectType
    content.vb: Public Shared WeirdToy As AbstractPhysicalObject.AbstractObjectType
- uid: Watcher.WatcherEnums.AbstractObjectType.RegisterValues
  commentId: M:Watcher.WatcherEnums.AbstractObjectType.RegisterValues
  id: RegisterValues
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: RegisterValues()
  nameWithType: WatcherEnums.AbstractObjectType.RegisterValues()
  fullName: Watcher.WatcherEnums.AbstractObjectType.RegisterValues()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Watcher.WatcherEnums.AbstractObjectType.RegisterValues</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void RegisterValues()
    content.vb: Public Shared Sub RegisterValues()
  overload: Watcher.WatcherEnums.AbstractObjectType.RegisterValues*
- uid: Watcher.WatcherEnums.AbstractObjectType.UnregisterValues
  commentId: M:Watcher.WatcherEnums.AbstractObjectType.UnregisterValues
  id: UnregisterValues
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: UnregisterValues()
  nameWithType: WatcherEnums.AbstractObjectType.UnregisterValues()
  fullName: Watcher.WatcherEnums.AbstractObjectType.UnregisterValues()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Watcher.WatcherEnums.AbstractObjectType.UnregisterValues</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static void UnregisterValues()
    content.vb: Public Shared Sub UnregisterValues()
  overload: Watcher.WatcherEnums.AbstractObjectType.UnregisterValues*
- uid: Watcher.WatcherEnums.AbstractObjectType.#ctor
  commentId: M:Watcher.WatcherEnums.AbstractObjectType.#ctor
  id: '#ctor'
  parent: Watcher.WatcherEnums.AbstractObjectType
  langs:
  - csharp
  - vb
  name: AbstractObjectType()
  nameWithType: WatcherEnums.AbstractObjectType.AbstractObjectType()
  fullName: Watcher.WatcherEnums.AbstractObjectType.AbstractObjectType()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Watcher
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Watcher.WatcherEnums.AbstractObjectType</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AbstractObjectType()
    content.vb: Public Sub New()
  overload: Watcher.WatcherEnums.AbstractObjectType.#ctor*
  nameWithType.vb: WatcherEnums.AbstractObjectType.New()
  fullName.vb: Watcher.WatcherEnums.AbstractObjectType.New()
  name.vb: New()
references:
- uid: Watcher
  commentId: N:Watcher
  isExternal: true
  href: Watcher.html
  name: Watcher
  nameWithType: Watcher
  fullName: Watcher
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.AbstractPhysicalObject.AbstractObjectType
  commentId: T:Global.AbstractPhysicalObject.AbstractObjectType
  isExternal: true
  href: AbstractPhysicalObject.html
  name: AbstractPhysicalObject.AbstractObjectType
  nameWithType: AbstractPhysicalObject.AbstractObjectType
  fullName: AbstractPhysicalObject.AbstractObjectType
  spec.csharp:
  - uid: Global.AbstractPhysicalObject
    name: AbstractPhysicalObject
    isExternal: true
    href: AbstractPhysicalObject.html
  - name: .
  - uid: Global.AbstractPhysicalObject.AbstractObjectType
    name: AbstractObjectType
    isExternal: true
    href: AbstractPhysicalObject.AbstractObjectType.html
  spec.vb:
  - uid: Global.AbstractPhysicalObject
    name: AbstractPhysicalObject
    isExternal: true
    href: AbstractPhysicalObject.html
  - name: .
  - uid: Global.AbstractPhysicalObject.AbstractObjectType
    name: AbstractObjectType
    isExternal: true
    href: AbstractPhysicalObject.AbstractObjectType.html
- uid: Watcher.WatcherEnums.AbstractObjectType.RegisterValues*
  commentId: Overload:Watcher.WatcherEnums.AbstractObjectType.RegisterValues
  isExternal: true
  href: Watcher.WatcherEnums.AbstractObjectType.html#Watcher_WatcherEnums_AbstractObjectType_RegisterValues
  name: RegisterValues
  nameWithType: WatcherEnums.AbstractObjectType.RegisterValues
  fullName: Watcher.WatcherEnums.AbstractObjectType.RegisterValues
- uid: Watcher.WatcherEnums.AbstractObjectType.UnregisterValues*
  commentId: Overload:Watcher.WatcherEnums.AbstractObjectType.UnregisterValues
  isExternal: true
  href: Watcher.WatcherEnums.AbstractObjectType.html#Watcher_WatcherEnums_AbstractObjectType_UnregisterValues
  name: UnregisterValues
  nameWithType: WatcherEnums.AbstractObjectType.UnregisterValues
  fullName: Watcher.WatcherEnums.AbstractObjectType.UnregisterValues
- uid: Watcher.WatcherEnums.AbstractObjectType.#ctor*
  commentId: Overload:Watcher.WatcherEnums.AbstractObjectType.#ctor
  isExternal: true
  href: Watcher.WatcherEnums.AbstractObjectType.html#Watcher_WatcherEnums_AbstractObjectType__ctor
  name: AbstractObjectType
  nameWithType: WatcherEnums.AbstractObjectType.AbstractObjectType
  fullName: Watcher.WatcherEnums.AbstractObjectType.AbstractObjectType
  nameWithType.vb: WatcherEnums.AbstractObjectType.New
  fullName.vb: Watcher.WatcherEnums.AbstractObjectType.New
  name.vb: New
