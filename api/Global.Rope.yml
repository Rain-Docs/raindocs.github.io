### YamlMime:ManagedReference
items:
- uid: Global.Rope
  commentId: T:Global.Rope
  id: Rope
  parent: Global
  children:
  - Global.Rope.#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - Global.Rope.A
  - Global.Rope.AConnect
  - Global.Rope.B
  - Global.Rope.BConnect
  - Global.Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)
  - Global.Rope.GetAllPositions
  - Global.Rope.GetPosition(System.Int32)
  - Global.Rope.Reset
  - Global.Rope.Reset(UnityEngine.Vector2)
  - Global.Rope.TotalPositions
  - Global.Rope.Update(UnityEngine.Vector2,UnityEngine.Vector2)
  - Global.Rope.bends
  - Global.Rope.lastA
  - Global.Rope.lastB
  - Global.Rope.room
  - Global.Rope.totalLength
  - Global.Rope.visualizer
  langs:
  - csharp
  - vb
  name: Rope
  nameWithType: Rope
  fullName: Rope
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Rope</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class Rope
    content.vb: Public Class Rope
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.Rope.room
  commentId: F:Global.Rope.room
  id: room
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: room
  nameWithType: Rope.room
  fullName: Rope.room
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.room</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Room room
    return:
      type: Global.Room
    content.vb: Public room As Room
- uid: Global.Rope.A
  commentId: F:Global.Rope.A
  id: A
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: A
  nameWithType: Rope.A
  fullName: Rope.A
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.A</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 A
    return:
      type: UnityEngine.Vector2
    content.vb: Public A As Vector2
- uid: Global.Rope.B
  commentId: F:Global.Rope.B
  id: B
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: B
  nameWithType: Rope.B
  fullName: Rope.B
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.B</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 B
    return:
      type: UnityEngine.Vector2
    content.vb: Public B As Vector2
- uid: Global.Rope.lastA
  commentId: F:Global.Rope.lastA
  id: lastA
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: lastA
  nameWithType: Rope.lastA
  fullName: Rope.lastA
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.lastA</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 lastA
    return:
      type: UnityEngine.Vector2
    content.vb: Public lastA As Vector2
- uid: Global.Rope.lastB
  commentId: F:Global.Rope.lastB
  id: lastB
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: lastB
  nameWithType: Rope.lastB
  fullName: Rope.lastB
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.lastB</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 lastB
    return:
      type: UnityEngine.Vector2
    content.vb: Public lastB As Vector2
- uid: Global.Rope.totalLength
  commentId: F:Global.Rope.totalLength
  id: totalLength
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: totalLength
  nameWithType: Rope.totalLength
  fullName: Rope.totalLength
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.totalLength</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float totalLength
    return:
      type: System.Single
    content.vb: Public totalLength As Single
- uid: Global.Rope.bends
  commentId: F:Global.Rope.bends
  id: bends
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: bends
  nameWithType: Rope.bends
  fullName: Rope.bends
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.bends</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<Rope.Corner> bends
    return:
      type: System.Collections.Generic.List{Rope.Corner}
    content.vb: Public bends As List(Of Rope.Corner)
- uid: Global.Rope.visualizer
  commentId: F:Global.Rope.visualizer
  id: visualizer
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: visualizer
  nameWithType: Rope.visualizer
  fullName: Rope.visualizer
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:Rope.visualizer</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Rope.RopeDebugVisualizer visualizer
    return:
      type: Global.Rope.RopeDebugVisualizer
    content.vb: Public visualizer As Rope.RopeDebugVisualizer
- uid: Global.Rope.GetPosition(System.Int32)
  commentId: M:Global.Rope.GetPosition(System.Int32)
  id: GetPosition(System.Int32)
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: GetPosition(int)
  nameWithType: Rope.GetPosition(int)
  fullName: Rope.GetPosition(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Rope.GetPosition(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 GetPosition(int index)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Rope.GetPosition(System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Rope.GetPosition(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function GetPosition(index As Integer) As Vector2
  overload: Global.Rope.GetPosition*
  nameWithType.vb: Rope.GetPosition(Integer)
  fullName.vb: Rope.GetPosition(Integer)
  name.vb: GetPosition(Integer)
- uid: Global.Rope.GetAllPositions
  commentId: M:Global.Rope.GetAllPositions
  id: GetAllPositions
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: GetAllPositions()
  nameWithType: Rope.GetAllPositions()
  fullName: Rope.GetAllPositions()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Rope.GetAllPositions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public List<Vector2> GetAllPositions()
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector2}
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Rope.GetAllPositions</parameter>
          </include>
        </markup>
    content.vb: Public Function GetAllPositions() As List(Of Vector2)
  overload: Global.Rope.GetAllPositions*
- uid: Global.Rope.#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:Global.Rope.#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: '#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)'
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: Rope(Room, Vector2, Vector2, float)
  nameWithType: Rope.Rope(Room, Vector2, Vector2, float)
  fullName: Rope.Rope(Room, UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Rope</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Rope(Room room, Vector2 initA, Vector2 initB, float thickness)
    parameters:
    - id: room
      type: Global.Room
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>room</parameter>
            <parameter>M:Rope.#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: initA
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>initA</parameter>
            <parameter>M:Rope.#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: initB
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>initB</parameter>
            <parameter>M:Rope.#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    - id: thickness
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>thickness</parameter>
            <parameter>M:Rope.#ctor(Room,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(room As Room, initA As Vector2, initB As Vector2, thickness As Single)
  overload: Global.Rope.#ctor*
  nameWithType.vb: Rope.New(Room, Vector2, Vector2, Single)
  fullName.vb: Rope.New(Room, UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: New(Room, Vector2, Vector2, Single)
- uid: Global.Rope.Reset
  commentId: M:Global.Rope.Reset
  id: Reset
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: Rope.Reset()
  fullName: Rope.Reset()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Rope.Reset</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset()
  overload: Global.Rope.Reset*
- uid: Global.Rope.Reset(UnityEngine.Vector2)
  commentId: M:Global.Rope.Reset(UnityEngine.Vector2)
  id: Reset(UnityEngine.Vector2)
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: Reset(Vector2)
  nameWithType: Rope.Reset(Vector2)
  fullName: Rope.Reset(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Rope.Reset(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Reset(Vector2 pos)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:Rope.Reset(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Reset(pos As Vector2)
  overload: Global.Rope.Reset*
- uid: Global.Rope.Update(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Global.Rope.Update(UnityEngine.Vector2,UnityEngine.Vector2)
  id: Update(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: Update(Vector2, Vector2)
  nameWithType: Rope.Update(Vector2, Vector2)
  fullName: Rope.Update(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Rope.Update(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void Update(Vector2 newA, Vector2 newB)
    parameters:
    - id: newA
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newA</parameter>
            <parameter>M:Rope.Update(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    - id: newB
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newB</parameter>
            <parameter>M:Rope.Update(UnityEngine.Vector2,UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Sub Update(newA As Vector2, newB As Vector2)
  overload: Global.Rope.Update*
- uid: Global.Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)
  commentId: M:Global.Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)
  id: DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: DoesLineOverlapCorner(Vector2, Vector2, Corner)
  nameWithType: Rope.DoesLineOverlapCorner(Vector2, Vector2, Rope.Corner)
  fullName: Rope.DoesLineOverlapCorner(UnityEngine.Vector2, UnityEngine.Vector2, Rope.Corner)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool DoesLineOverlapCorner(Vector2 l1, Vector2 l2, Rope.Corner corner)
    parameters:
    - id: l1
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l1</parameter>
            <parameter>M:Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)</parameter>
          </include>
        </markup>
    - id: l2
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>l2</parameter>
            <parameter>M:Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)</parameter>
          </include>
        </markup>
    - id: corner
      type: Global.Rope.Corner
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>corner</parameter>
            <parameter>M:Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Rope.DoesLineOverlapCorner(UnityEngine.Vector2,UnityEngine.Vector2,Rope.Corner)</parameter>
          </include>
        </markup>
    content.vb: Public Function DoesLineOverlapCorner(l1 As Vector2, l2 As Vector2, corner As Rope.Corner) As Boolean
  overload: Global.Rope.DoesLineOverlapCorner*
- uid: Global.Rope.AConnect
  commentId: P:Global.Rope.AConnect
  id: AConnect
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: AConnect
  nameWithType: Rope.AConnect
  fullName: Rope.AConnect
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Rope.AConnect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 AConnect { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public ReadOnly Property AConnect As Vector2
  overload: Global.Rope.AConnect*
- uid: Global.Rope.BConnect
  commentId: P:Global.Rope.BConnect
  id: BConnect
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: BConnect
  nameWithType: Rope.BConnect
  fullName: Rope.BConnect
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Rope.BConnect</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Vector2 BConnect { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public ReadOnly Property BConnect As Vector2
  overload: Global.Rope.BConnect*
- uid: Global.Rope.TotalPositions
  commentId: P:Global.Rope.TotalPositions
  id: TotalPositions
  parent: Global.Rope
  langs:
  - csharp
  - vb
  name: TotalPositions
  nameWithType: Rope.TotalPositions
  fullName: Rope.TotalPositions
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Rope.TotalPositions</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int TotalPositions { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TotalPositions As Integer
  overload: Global.Rope.TotalPositions*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Room
  commentId: T:Global.Room
  isExternal: true
  href: Room.html
  name: Room
  nameWithType: Room
  fullName: Room
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Collections.Generic.List{Rope.Corner}
  commentId: T:System.Collections.Generic.List{Rope.Corner}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Rope.Corner>
  nameWithType: List<Rope.Corner>
  fullName: System.Collections.Generic.List<Rope.Corner>
  nameWithType.vb: List(Of Rope.Corner)
  fullName.vb: System.Collections.Generic.List(Of Rope.Corner)
  name.vb: List(Of Rope.Corner)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Global.Rope
    name: Rope
    isExternal: true
    href: Rope.html
  - name: .
  - uid: Global.Rope.Corner
    name: Corner
    isExternal: true
    href: Rope.Corner.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Rope
    name: Rope
    isExternal: true
    href: Rope.html
  - name: .
  - uid: Global.Rope.Corner
    name: Corner
    isExternal: true
    href: Rope.Corner.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Global.Rope.RopeDebugVisualizer
  commentId: T:Global.Rope.RopeDebugVisualizer
  isExternal: true
  href: Rope.html
  name: Rope.RopeDebugVisualizer
  nameWithType: Rope.RopeDebugVisualizer
  fullName: Rope.RopeDebugVisualizer
  spec.csharp:
  - uid: Global.Rope
    name: Rope
    isExternal: true
    href: Rope.html
  - name: .
  - uid: Global.Rope.RopeDebugVisualizer
    name: RopeDebugVisualizer
    isExternal: true
    href: Rope.RopeDebugVisualizer.html
  spec.vb:
  - uid: Global.Rope
    name: Rope
    isExternal: true
    href: Rope.html
  - name: .
  - uid: Global.Rope.RopeDebugVisualizer
    name: RopeDebugVisualizer
    isExternal: true
    href: Rope.RopeDebugVisualizer.html
- uid: Global.Rope.GetPosition*
  commentId: Overload:Global.Rope.GetPosition
  isExternal: true
  href: Global.Rope.html#Rope_GetPosition_System_Int32_
  name: GetPosition
  nameWithType: Rope.GetPosition
  fullName: Rope.GetPosition
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.Rope.GetAllPositions*
  commentId: Overload:Global.Rope.GetAllPositions
  isExternal: true
  href: Global.Rope.html#Rope_GetAllPositions
  name: GetAllPositions
  nameWithType: Rope.GetAllPositions
  fullName: Rope.GetAllPositions
- uid: System.Collections.Generic.List{UnityEngine.Vector2}
  commentId: T:System.Collections.Generic.List{UnityEngine.Vector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Vector2>
  nameWithType: List<Vector2>
  fullName: System.Collections.Generic.List<UnityEngine.Vector2>
  nameWithType.vb: List(Of Vector2)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Vector2)
  name.vb: List(Of Vector2)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.Rope.#ctor*
  commentId: Overload:Global.Rope.#ctor
  isExternal: true
  href: Global.Rope.html#Rope__ctor_Room_UnityEngine_Vector2_UnityEngine_Vector2_System_Single_
  name: Rope
  nameWithType: Rope.Rope
  fullName: Rope.Rope
  nameWithType.vb: Rope.New
  fullName.vb: Rope.New
  name.vb: New
- uid: Global.Rope.Reset*
  commentId: Overload:Global.Rope.Reset
  isExternal: true
  href: Global.Rope.html#Rope_Reset
  name: Reset
  nameWithType: Rope.Reset
  fullName: Rope.Reset
- uid: Global.Rope.Update*
  commentId: Overload:Global.Rope.Update
  isExternal: true
  href: Global.Rope.html#Rope_Update_UnityEngine_Vector2_UnityEngine_Vector2_
  name: Update
  nameWithType: Rope.Update
  fullName: Rope.Update
- uid: Global.Rope.DoesLineOverlapCorner*
  commentId: Overload:Global.Rope.DoesLineOverlapCorner
  isExternal: true
  href: Global.Rope.html#Rope_DoesLineOverlapCorner_UnityEngine_Vector2_UnityEngine_Vector2_Rope_Corner_
  name: DoesLineOverlapCorner
  nameWithType: Rope.DoesLineOverlapCorner
  fullName: Rope.DoesLineOverlapCorner
- uid: Global.Rope.Corner
  commentId: T:Global.Rope.Corner
  isExternal: true
  href: Rope.html
  name: Rope.Corner
  nameWithType: Rope.Corner
  fullName: Rope.Corner
  spec.csharp:
  - uid: Global.Rope
    name: Rope
    isExternal: true
    href: Rope.html
  - name: .
  - uid: Global.Rope.Corner
    name: Corner
    isExternal: true
    href: Rope.Corner.html
  spec.vb:
  - uid: Global.Rope
    name: Rope
    isExternal: true
    href: Rope.html
  - name: .
  - uid: Global.Rope.Corner
    name: Corner
    isExternal: true
    href: Rope.Corner.html
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.Rope.AConnect*
  commentId: Overload:Global.Rope.AConnect
  isExternal: true
  href: Global.Rope.html#Rope_AConnect
  name: AConnect
  nameWithType: Rope.AConnect
  fullName: Rope.AConnect
- uid: Global.Rope.BConnect*
  commentId: Overload:Global.Rope.BConnect
  isExternal: true
  href: Global.Rope.html#Rope_BConnect
  name: BConnect
  nameWithType: Rope.BConnect
  fullName: Rope.BConnect
- uid: Global.Rope.TotalPositions*
  commentId: Overload:Global.Rope.TotalPositions
  isExternal: true
  href: Global.Rope.html#Rope_TotalPositions
  name: TotalPositions
  nameWithType: Rope.TotalPositions
  fullName: Rope.TotalPositions
