### YamlMime:ManagedReference
items:
- uid: Global.AImap
  commentId: T:Global.AImap
  id: AImap
  parent: Global
  children:
  - Global.AImap.#ctor(Room,System.Int32,System.Int32)
  - Global.AImap.AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.ConnectionCostForCreature(MovementConnection,CreatureTemplate)
  - Global.AImap.CreatureSpecificAImap(CreatureTemplate)
  - Global.AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  - Global.AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)
  - Global.AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  - Global.AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  - Global.AImap.GetCompressedVisibilityMap
  - Global.AImap.IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)
  - Global.AImap.NewWorld(System.Int32)
  - Global.AImap.SetVisibilityMapFromCompressedArray(System.Int32[])
  - Global.AImap.TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)
  - Global.AImap.TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)
  - Global.AImap.TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)
  - Global.AImap.TileCostForCreature(WorldCoordinate,CreatureTemplate)
  - Global.AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)
  - Global.AImap.TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)
  - Global.AImap.Visibility(RWCustom.IntVector2)
  - Global.AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)
  - Global.AImap.creatureSpecificAImaps
  - Global.AImap.getAItile(RWCustom.IntVector2)
  - Global.AImap.getAItile(System.Int32,System.Int32)
  - Global.AImap.getAItile(Unity.Mathematics.float2)
  - Global.AImap.getAItile(Unity.Mathematics.int2)
  - Global.AImap.getAItile(UnityEngine.Vector2)
  - Global.AImap.getAItile(WorldCoordinate)
  - Global.AImap.getClampedAItile(System.Int32,System.Int32)
  - Global.AImap.getClampedAItile(UnityEngine.Vector2)
  - Global.AImap.getTerrainProximity(RWCustom.IntVector2)
  - Global.AImap.getTerrainProximity(System.Int32,System.Int32)
  - Global.AImap.getTerrainProximity(Unity.Mathematics.float2)
  - Global.AImap.getTerrainProximity(Unity.Mathematics.int2)
  - Global.AImap.getTerrainProximity(UnityEngine.Vector2)
  - Global.AImap.getTerrainProximity(WorldCoordinate)
  - Global.AImap.height
  - Global.AImap.map
  - Global.AImap.room
  - Global.AImap.standardTile
  - Global.AImap.terrainProximity
  - Global.AImap.width
  langs:
  - csharp
  - vb
  name: AImap
  nameWithType: AImap
  fullName: AImap
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:AImap</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class AImap
    content.vb: Public Class AImap
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.AImap.map
  commentId: F:Global.AImap.map
  id: map
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: map
  nameWithType: AImap.map
  fullName: AImap.map
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AImap.map</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile[,] map
    return:
      type: Global.AItile[,]
    content.vb: Public map As AItile(,)
- uid: Global.AImap.terrainProximity
  commentId: F:Global.AImap.terrainProximity
  id: terrainProximity
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: terrainProximity
  nameWithType: AImap.terrainProximity
  fullName: AImap.terrainProximity
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AImap.terrainProximity</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int[] terrainProximity
    return:
      type: System.Int32[]
    content.vb: Public terrainProximity As Integer()
- uid: Global.AImap.standardTile
  commentId: F:Global.AImap.standardTile
  id: standardTile
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: standardTile
  nameWithType: AImap.standardTile
  fullName: AImap.standardTile
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AImap.standardTile</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile standardTile
    return:
      type: Global.AItile
    content.vb: Public standardTile As AItile
- uid: Global.AImap.room
  commentId: F:Global.AImap.room
  id: room
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: room
  nameWithType: AImap.room
  fullName: AImap.room
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AImap.room</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Room room
    return:
      type: Global.Room
    content.vb: Public room As Room
- uid: Global.AImap.width
  commentId: F:Global.AImap.width
  id: width
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: width
  nameWithType: AImap.width
  fullName: AImap.width
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AImap.width</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int width
    return:
      type: System.Int32
    content.vb: Public width As Integer
- uid: Global.AImap.height
  commentId: F:Global.AImap.height
  id: height
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: height
  nameWithType: AImap.height
  fullName: AImap.height
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AImap.height</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int height
    return:
      type: System.Int32
    content.vb: Public height As Integer
- uid: Global.AImap.creatureSpecificAImaps
  commentId: F:Global.AImap.creatureSpecificAImaps
  id: creatureSpecificAImaps
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: creatureSpecificAImaps
  nameWithType: AImap.creatureSpecificAImaps
  fullName: AImap.creatureSpecificAImaps
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:AImap.creatureSpecificAImaps</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public CreatureSpecificAImap[] creatureSpecificAImaps
    return:
      type: Global.CreatureSpecificAImap[]
    content.vb: Public creatureSpecificAImaps As CreatureSpecificAImap()
- uid: Global.AImap.#ctor(Room,System.Int32,System.Int32)
  commentId: M:Global.AImap.#ctor(Room,System.Int32,System.Int32)
  id: '#ctor(Room,System.Int32,System.Int32)'
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: AImap(Room, int, int)
  nameWithType: AImap.AImap(Room, int, int)
  fullName: AImap.AImap(Room, int, int)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>AImap</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AImap(Room rm, int w, int h)
    parameters:
    - id: rm
      type: Global.Room
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rm</parameter>
            <parameter>M:AImap.#ctor(Room,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: w
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>w</parameter>
            <parameter>M:AImap.#ctor(Room,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: h
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>h</parameter>
            <parameter>M:AImap.#ctor(Room,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(rm As Room, w As Integer, h As Integer)
  overload: Global.AImap.#ctor*
  nameWithType.vb: AImap.New(Room, Integer, Integer)
  fullName.vb: AImap.New(Room, Integer, Integer)
  name.vb: New(Room, Integer, Integer)
- uid: Global.AImap.NewWorld(System.Int32)
  commentId: M:Global.AImap.NewWorld(System.Int32)
  id: NewWorld(System.Int32)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: NewWorld(int)
  nameWithType: AImap.NewWorld(int)
  fullName: AImap.NewWorld(int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.NewWorld(System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void NewWorld(int newRoomIndex)
    parameters:
    - id: newRoomIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newRoomIndex</parameter>
            <parameter>M:AImap.NewWorld(System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Sub NewWorld(newRoomIndex As Integer)
  overload: Global.AImap.NewWorld*
  nameWithType.vb: AImap.NewWorld(Integer)
  fullName.vb: AImap.NewWorld(Integer)
  name.vb: NewWorld(Integer)
- uid: Global.AImap.IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)
  commentId: M:Global.AImap.IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)
  id: IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: IsConnectionAllowedForCreature(MovementConnection, CreatureTemplate)
  nameWithType: AImap.IsConnectionAllowedForCreature(MovementConnection, CreatureTemplate)
  fullName: AImap.IsConnectionAllowedForCreature(MovementConnection, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool IsConnectionAllowedForCreature(MovementConnection connection, CreatureTemplate crit)
    parameters:
    - id: connection
      type: Global.MovementConnection
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>connection</parameter>
            <parameter>M:AImap.IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.IsConnectionAllowedForCreature(MovementConnection,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function IsConnectionAllowedForCreature(connection As MovementConnection, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.IsConnectionAllowedForCreature*
- uid: Global.AImap.ConnectionCostForCreature(MovementConnection,CreatureTemplate)
  commentId: M:Global.AImap.ConnectionCostForCreature(MovementConnection,CreatureTemplate)
  id: ConnectionCostForCreature(MovementConnection,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: ConnectionCostForCreature(MovementConnection, CreatureTemplate)
  nameWithType: AImap.ConnectionCostForCreature(MovementConnection, CreatureTemplate)
  fullName: AImap.ConnectionCostForCreature(MovementConnection, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.ConnectionCostForCreature(MovementConnection,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PathCost ConnectionCostForCreature(MovementConnection connection, CreatureTemplate crit)
    parameters:
    - id: connection
      type: Global.MovementConnection
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>connection</parameter>
            <parameter>M:AImap.ConnectionCostForCreature(MovementConnection,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.ConnectionCostForCreature(MovementConnection,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.ConnectionCostForCreature(MovementConnection,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ConnectionCostForCreature(connection As MovementConnection, crit As CreatureTemplate) As PathCost
  overload: Global.AImap.ConnectionCostForCreature*
- uid: Global.AImap.getAItile(UnityEngine.Vector2)
  commentId: M:Global.AImap.getAItile(UnityEngine.Vector2)
  id: getAItile(UnityEngine.Vector2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getAItile(Vector2)
  nameWithType: AImap.getAItile(Vector2)
  fullName: AImap.getAItile(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getAItile(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getAItile(Vector2 pos)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getAItile(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getAItile(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getAItile(pos As Vector2) As AItile
  overload: Global.AImap.getAItile*
- uid: Global.AImap.getAItile(RWCustom.IntVector2)
  commentId: M:Global.AImap.getAItile(RWCustom.IntVector2)
  id: getAItile(RWCustom.IntVector2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getAItile(IntVector2)
  nameWithType: AImap.getAItile(IntVector2)
  fullName: AImap.getAItile(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getAItile(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getAItile(IntVector2 pos)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getAItile(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getAItile(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getAItile(pos As IntVector2) As AItile
  overload: Global.AImap.getAItile*
- uid: Global.AImap.getAItile(WorldCoordinate)
  commentId: M:Global.AImap.getAItile(WorldCoordinate)
  id: getAItile(WorldCoordinate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getAItile(WorldCoordinate)
  nameWithType: AImap.getAItile(WorldCoordinate)
  fullName: AImap.getAItile(WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getAItile(WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getAItile(WorldCoordinate pos)
    parameters:
    - id: pos
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getAItile(WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getAItile(WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function getAItile(pos As WorldCoordinate) As AItile
  overload: Global.AImap.getAItile*
- uid: Global.AImap.getAItile(Unity.Mathematics.int2)
  commentId: M:Global.AImap.getAItile(Unity.Mathematics.int2)
  id: getAItile(Unity.Mathematics.int2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getAItile(int2)
  nameWithType: AImap.getAItile(int2)
  fullName: AImap.getAItile(Unity.Mathematics.int2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getAItile(Unity.Mathematics.int2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getAItile(int2 pos)
    parameters:
    - id: pos
      type: Unity.Mathematics.int2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getAItile(Unity.Mathematics.int2)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getAItile(Unity.Mathematics.int2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getAItile(pos As int2) As AItile
  overload: Global.AImap.getAItile*
- uid: Global.AImap.getAItile(Unity.Mathematics.float2)
  commentId: M:Global.AImap.getAItile(Unity.Mathematics.float2)
  id: getAItile(Unity.Mathematics.float2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getAItile(float2)
  nameWithType: AImap.getAItile(float2)
  fullName: AImap.getAItile(Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getAItile(Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getAItile(float2 pos)
    parameters:
    - id: pos
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getAItile(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getAItile(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getAItile(pos As float2) As AItile
  overload: Global.AImap.getAItile*
- uid: Global.AImap.getAItile(System.Int32,System.Int32)
  commentId: M:Global.AImap.getAItile(System.Int32,System.Int32)
  id: getAItile(System.Int32,System.Int32)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getAItile(int, int)
  nameWithType: AImap.getAItile(int, int)
  fullName: AImap.getAItile(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getAItile(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getAItile(int x, int y)
    parameters:
    - id: x
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:AImap.getAItile(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:AImap.getAItile(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getAItile(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function getAItile(x As Integer, y As Integer) As AItile
  overload: Global.AImap.getAItile*
  nameWithType.vb: AImap.getAItile(Integer, Integer)
  fullName.vb: AImap.getAItile(Integer, Integer)
  name.vb: getAItile(Integer, Integer)
- uid: Global.AImap.getClampedAItile(UnityEngine.Vector2)
  commentId: M:Global.AImap.getClampedAItile(UnityEngine.Vector2)
  id: getClampedAItile(UnityEngine.Vector2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getClampedAItile(Vector2)
  nameWithType: AImap.getClampedAItile(Vector2)
  fullName: AImap.getClampedAItile(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getClampedAItile(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getClampedAItile(Vector2 pos)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getClampedAItile(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getClampedAItile(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getClampedAItile(pos As Vector2) As AItile
  overload: Global.AImap.getClampedAItile*
- uid: Global.AImap.getClampedAItile(System.Int32,System.Int32)
  commentId: M:Global.AImap.getClampedAItile(System.Int32,System.Int32)
  id: getClampedAItile(System.Int32,System.Int32)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getClampedAItile(int, int)
  nameWithType: AImap.getClampedAItile(int, int)
  fullName: AImap.getClampedAItile(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getClampedAItile(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public AItile getClampedAItile(int x, int y)
    parameters:
    - id: x
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:AImap.getClampedAItile(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:AImap.getClampedAItile(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: Global.AItile
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getClampedAItile(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function getClampedAItile(x As Integer, y As Integer) As AItile
  overload: Global.AImap.getClampedAItile*
  nameWithType.vb: AImap.getClampedAItile(Integer, Integer)
  fullName.vb: AImap.getClampedAItile(Integer, Integer)
  name.vb: getClampedAItile(Integer, Integer)
- uid: Global.AImap.getTerrainProximity(UnityEngine.Vector2)
  commentId: M:Global.AImap.getTerrainProximity(UnityEngine.Vector2)
  id: getTerrainProximity(UnityEngine.Vector2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getTerrainProximity(Vector2)
  nameWithType: AImap.getTerrainProximity(Vector2)
  fullName: AImap.getTerrainProximity(UnityEngine.Vector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getTerrainProximity(UnityEngine.Vector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int getTerrainProximity(Vector2 pos)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getTerrainProximity(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getTerrainProximity(UnityEngine.Vector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getTerrainProximity(pos As Vector2) As Integer
  overload: Global.AImap.getTerrainProximity*
- uid: Global.AImap.getTerrainProximity(RWCustom.IntVector2)
  commentId: M:Global.AImap.getTerrainProximity(RWCustom.IntVector2)
  id: getTerrainProximity(RWCustom.IntVector2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getTerrainProximity(IntVector2)
  nameWithType: AImap.getTerrainProximity(IntVector2)
  fullName: AImap.getTerrainProximity(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getTerrainProximity(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int getTerrainProximity(IntVector2 pos)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getTerrainProximity(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getTerrainProximity(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getTerrainProximity(pos As IntVector2) As Integer
  overload: Global.AImap.getTerrainProximity*
- uid: Global.AImap.getTerrainProximity(WorldCoordinate)
  commentId: M:Global.AImap.getTerrainProximity(WorldCoordinate)
  id: getTerrainProximity(WorldCoordinate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getTerrainProximity(WorldCoordinate)
  nameWithType: AImap.getTerrainProximity(WorldCoordinate)
  fullName: AImap.getTerrainProximity(WorldCoordinate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getTerrainProximity(WorldCoordinate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int getTerrainProximity(WorldCoordinate pos)
    parameters:
    - id: pos
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getTerrainProximity(WorldCoordinate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getTerrainProximity(WorldCoordinate)</parameter>
          </include>
        </markup>
    content.vb: Public Function getTerrainProximity(pos As WorldCoordinate) As Integer
  overload: Global.AImap.getTerrainProximity*
- uid: Global.AImap.getTerrainProximity(Unity.Mathematics.int2)
  commentId: M:Global.AImap.getTerrainProximity(Unity.Mathematics.int2)
  id: getTerrainProximity(Unity.Mathematics.int2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getTerrainProximity(int2)
  nameWithType: AImap.getTerrainProximity(int2)
  fullName: AImap.getTerrainProximity(Unity.Mathematics.int2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getTerrainProximity(Unity.Mathematics.int2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int getTerrainProximity(int2 pos)
    parameters:
    - id: pos
      type: Unity.Mathematics.int2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getTerrainProximity(Unity.Mathematics.int2)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getTerrainProximity(Unity.Mathematics.int2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getTerrainProximity(pos As int2) As Integer
  overload: Global.AImap.getTerrainProximity*
- uid: Global.AImap.getTerrainProximity(Unity.Mathematics.float2)
  commentId: M:Global.AImap.getTerrainProximity(Unity.Mathematics.float2)
  id: getTerrainProximity(Unity.Mathematics.float2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getTerrainProximity(float2)
  nameWithType: AImap.getTerrainProximity(float2)
  fullName: AImap.getTerrainProximity(Unity.Mathematics.float2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getTerrainProximity(Unity.Mathematics.float2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int getTerrainProximity(float2 pos)
    parameters:
    - id: pos
      type: Unity.Mathematics.float2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.getTerrainProximity(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getTerrainProximity(Unity.Mathematics.float2)</parameter>
          </include>
        </markup>
    content.vb: Public Function getTerrainProximity(pos As float2) As Integer
  overload: Global.AImap.getTerrainProximity*
- uid: Global.AImap.getTerrainProximity(System.Int32,System.Int32)
  commentId: M:Global.AImap.getTerrainProximity(System.Int32,System.Int32)
  id: getTerrainProximity(System.Int32,System.Int32)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: getTerrainProximity(int, int)
  nameWithType: AImap.getTerrainProximity(int, int)
  fullName: AImap.getTerrainProximity(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.getTerrainProximity(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int getTerrainProximity(int x, int y)
    parameters:
    - id: x
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:AImap.getTerrainProximity(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:AImap.getTerrainProximity(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.getTerrainProximity(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Function getTerrainProximity(x As Integer, y As Integer) As Integer
  overload: Global.AImap.getTerrainProximity*
  nameWithType.vb: AImap.getTerrainProximity(Integer, Integer)
  fullName.vb: AImap.getTerrainProximity(Integer, Integer)
  name.vb: getTerrainProximity(Integer, Integer)
- uid: Global.AImap.Visibility(RWCustom.IntVector2)
  commentId: M:Global.AImap.Visibility(RWCustom.IntVector2)
  id: Visibility(RWCustom.IntVector2)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: Visibility(IntVector2)
  nameWithType: AImap.Visibility(IntVector2)
  fullName: AImap.Visibility(RWCustom.IntVector2)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.Visibility(RWCustom.IntVector2)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float Visibility(IntVector2 pos)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.Visibility(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.Visibility(RWCustom.IntVector2)</parameter>
          </include>
        </markup>
    content.vb: Public Function Visibility(pos As IntVector2) As Single
  overload: Global.AImap.Visibility*
- uid: Global.AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)
  commentId: M:Global.AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)
  id: TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TileAccessibleToCreature(int, int, CreatureTemplate)
  nameWithType: AImap.TileAccessibleToCreature(int, int, CreatureTemplate)
  fullName: AImap.TileAccessibleToCreature(int, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool TileAccessibleToCreature(int x, int y, CreatureTemplate crit)
    parameters:
    - id: x
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TileAccessibleToCreature(x As Integer, y As Integer, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.TileAccessibleToCreature*
  nameWithType.vb: AImap.TileAccessibleToCreature(Integer, Integer, CreatureTemplate)
  fullName.vb: AImap.TileAccessibleToCreature(Integer, Integer, CreatureTemplate)
  name.vb: TileAccessibleToCreature(Integer, Integer, CreatureTemplate)
- uid: Global.AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)
  commentId: M:Global.AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)
  id: WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: WorldCoordinateAccessibleToCreature(WorldCoordinate, CreatureTemplate)
  nameWithType: AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate, CreatureTemplate)
  fullName: AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool WorldCoordinateAccessibleToCreature(WorldCoordinate pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.WorldCoordinateAccessibleToCreature(WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function WorldCoordinateAccessibleToCreature(pos As WorldCoordinate, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.WorldCoordinateAccessibleToCreature*
- uid: Global.AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  id: TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TileOrNeighborsAccessibleToCreature(IntVector2, CreatureTemplate)
  nameWithType: AImap.TileOrNeighborsAccessibleToCreature(IntVector2, CreatureTemplate)
  fullName: AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool TileOrNeighborsAccessibleToCreature(IntVector2 pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TileOrNeighborsAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TileOrNeighborsAccessibleToCreature(pos As IntVector2, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.TileOrNeighborsAccessibleToCreature*
- uid: Global.AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  id: ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: ClampedTileAccessibleToCreature(IntVector2, CreatureTemplate)
  nameWithType: AImap.ClampedTileAccessibleToCreature(IntVector2, CreatureTemplate)
  fullName: AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool ClampedTileAccessibleToCreature(IntVector2 pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.ClampedTileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ClampedTileAccessibleToCreature(pos As IntVector2, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.ClampedTileAccessibleToCreature*
- uid: Global.AImap.TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)
  commentId: M:Global.AImap.TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)
  id: TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TileAccessibleToCreature(Vector2, CreatureTemplate)
  nameWithType: AImap.TileAccessibleToCreature(Vector2, CreatureTemplate)
  fullName: AImap.TileAccessibleToCreature(UnityEngine.Vector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool TileAccessibleToCreature(Vector2 pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(UnityEngine.Vector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TileAccessibleToCreature(pos As Vector2, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.TileAccessibleToCreature*
- uid: Global.AImap.TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  id: TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TileAccessibleToCreature(IntVector2, CreatureTemplate)
  nameWithType: AImap.TileAccessibleToCreature(IntVector2, CreatureTemplate)
  fullName: AImap.TileAccessibleToCreature(RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool TileAccessibleToCreature(IntVector2 pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TileAccessibleToCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TileAccessibleToCreature(pos As IntVector2, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.TileAccessibleToCreature*
- uid: Global.AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)
  commentId: M:Global.AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)
  id: TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TileCostForCreature(int, int, CreatureTemplate)
  nameWithType: AImap.TileCostForCreature(int, int, CreatureTemplate)
  fullName: AImap.TileCostForCreature(int, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PathCost TileCostForCreature(int x, int y, CreatureTemplate crit)
    parameters:
    - id: x
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>x</parameter>
            <parameter>M:AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: y
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>y</parameter>
            <parameter>M:AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TileCostForCreature(System.Int32,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TileCostForCreature(x As Integer, y As Integer, crit As CreatureTemplate) As PathCost
  overload: Global.AImap.TileCostForCreature*
  nameWithType.vb: AImap.TileCostForCreature(Integer, Integer, CreatureTemplate)
  fullName.vb: AImap.TileCostForCreature(Integer, Integer, CreatureTemplate)
  name.vb: TileCostForCreature(Integer, Integer, CreatureTemplate)
- uid: Global.AImap.TileCostForCreature(WorldCoordinate,CreatureTemplate)
  commentId: M:Global.AImap.TileCostForCreature(WorldCoordinate,CreatureTemplate)
  id: TileCostForCreature(WorldCoordinate,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TileCostForCreature(WorldCoordinate, CreatureTemplate)
  nameWithType: AImap.TileCostForCreature(WorldCoordinate, CreatureTemplate)
  fullName: AImap.TileCostForCreature(WorldCoordinate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TileCostForCreature(WorldCoordinate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PathCost TileCostForCreature(WorldCoordinate pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.TileCostForCreature(WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TileCostForCreature(WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TileCostForCreature(WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TileCostForCreature(pos As WorldCoordinate, crit As CreatureTemplate) As PathCost
  overload: Global.AImap.TileCostForCreature*
- uid: Global.AImap.TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)
  id: TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TileCostForCreature(IntVector2, CreatureTemplate)
  nameWithType: AImap.TileCostForCreature(IntVector2, CreatureTemplate)
  fullName: AImap.TileCostForCreature(RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public PathCost TileCostForCreature(IntVector2 pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: Global.PathCost
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TileCostForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TileCostForCreature(pos As IntVector2, crit As CreatureTemplate) As PathCost
  overload: Global.AImap.TileCostForCreature*
- uid: Global.AImap.CreatureSpecificAImap(CreatureTemplate)
  commentId: M:Global.AImap.CreatureSpecificAImap(CreatureTemplate)
  id: CreatureSpecificAImap(CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: CreatureSpecificAImap(CreatureTemplate)
  nameWithType: AImap.CreatureSpecificAImap(CreatureTemplate)
  fullName: AImap.CreatureSpecificAImap(CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.CreatureSpecificAImap(CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public CreatureSpecificAImap CreatureSpecificAImap(CreatureTemplate crit)
    parameters:
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.CreatureSpecificAImap(CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: Global.CreatureSpecificAImap
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.CreatureSpecificAImap(CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function CreatureSpecificAImap(crit As CreatureTemplate) As CreatureSpecificAImap
  overload: Global.AImap.CreatureSpecificAImap*
- uid: Global.AImap.TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)
  id: TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TryForAccessibleNeighbor(IntVector2, CreatureTemplate)
  nameWithType: AImap.TryForAccessibleNeighbor(IntVector2, CreatureTemplate)
  fullName: AImap.TryForAccessibleNeighbor(RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public IntVector2 TryForAccessibleNeighbor(IntVector2 tile, CreatureTemplate crit)
    parameters:
    - id: tile
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tile</parameter>
            <parameter>M:AImap.TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TryForAccessibleNeighbor(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TryForAccessibleNeighbor(tile As IntVector2, crit As CreatureTemplate) As IntVector2
  overload: Global.AImap.TryForAccessibleNeighbor*
- uid: Global.AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)
  id: TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TriangulateDistance(IntVector2, IntVector2, CreatureTemplate)
  nameWithType: AImap.TriangulateDistance(IntVector2, IntVector2, CreatureTemplate)
  fullName: AImap.TriangulateDistance(RWCustom.IntVector2, RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int TriangulateDistance(IntVector2 A, IntVector2 B, CreatureTemplate crit)
    parameters:
    - id: A
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: B
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TriangulateDistance(RWCustom.IntVector2,RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TriangulateDistance(A As IntVector2, B As IntVector2, crit As CreatureTemplate) As Integer
  overload: Global.AImap.TriangulateDistance*
- uid: Global.AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)
  commentId: M:Global.AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)
  id: TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: TriangulateDistance(WorldCoordinate, WorldCoordinate, CreatureTemplate)
  nameWithType: AImap.TriangulateDistance(WorldCoordinate, WorldCoordinate, CreatureTemplate)
  fullName: AImap.TriangulateDistance(WorldCoordinate, WorldCoordinate, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int TriangulateDistance(WorldCoordinate A, WorldCoordinate B, CreatureTemplate crit)
    parameters:
    - id: A
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>A</parameter>
            <parameter>M:AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: B
      type: Global.WorldCoordinate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>B</parameter>
            <parameter>M:AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.TriangulateDistance(WorldCoordinate,WorldCoordinate,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function TriangulateDistance(A As WorldCoordinate, B As WorldCoordinate, crit As CreatureTemplate) As Integer
  overload: Global.AImap.TriangulateDistance*
- uid: Global.AImap.AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)
  id: AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: AccessibilityForCreature(IntVector2, CreatureTemplate)
  nameWithType: AImap.AccessibilityForCreature(IntVector2, CreatureTemplate)
  fullName: AImap.AccessibilityForCreature(RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public float AccessibilityForCreature(IntVector2 pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.AccessibilityForCreature(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function AccessibilityForCreature(pos As IntVector2, crit As CreatureTemplate) As Single
  overload: Global.AImap.AccessibilityForCreature*
- uid: Global.AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  commentId: M:Global.AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  id: ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: ExitDistanceForCreatureAndCheckNeighbours(IntVector2, int, CreatureTemplate)
  nameWithType: AImap.ExitDistanceForCreatureAndCheckNeighbours(IntVector2, int, CreatureTemplate)
  fullName: AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int ExitDistanceForCreatureAndCheckNeighbours(IntVector2 pos, int creatureSpecificExitIndex, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureSpecificExitIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureSpecificExitIndex</parameter>
            <parameter>M:AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ExitDistanceForCreatureAndCheckNeighbours(pos As IntVector2, creatureSpecificExitIndex As Integer, crit As CreatureTemplate) As Integer
  overload: Global.AImap.ExitDistanceForCreatureAndCheckNeighbours*
  nameWithType.vb: AImap.ExitDistanceForCreatureAndCheckNeighbours(IntVector2, Integer, CreatureTemplate)
  fullName.vb: AImap.ExitDistanceForCreatureAndCheckNeighbours(RWCustom.IntVector2, Integer, CreatureTemplate)
  name.vb: ExitDistanceForCreatureAndCheckNeighbours(IntVector2, Integer, CreatureTemplate)
- uid: Global.AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  commentId: M:Global.AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  id: ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: ExitDistanceForCreature(IntVector2, int, CreatureTemplate)
  nameWithType: AImap.ExitDistanceForCreature(IntVector2, int, CreatureTemplate)
  fullName: AImap.ExitDistanceForCreature(RWCustom.IntVector2, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int ExitDistanceForCreature(IntVector2 pos, int creatureSpecificExitIndex, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: creatureSpecificExitIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>creatureSpecificExitIndex</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ExitDistanceForCreature(pos As IntVector2, creatureSpecificExitIndex As Integer, crit As CreatureTemplate) As Integer
  overload: Global.AImap.ExitDistanceForCreature*
  nameWithType.vb: AImap.ExitDistanceForCreature(IntVector2, Integer, CreatureTemplate)
  fullName.vb: AImap.ExitDistanceForCreature(RWCustom.IntVector2, Integer, CreatureTemplate)
  name.vb: ExitDistanceForCreature(IntVector2, Integer, CreatureTemplate)
- uid: Global.AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)
  commentId: M:Global.AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)
  id: ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: ExitDistanceForCreature(Vector2, int, CreatureTemplate)
  nameWithType: AImap.ExitDistanceForCreature(Vector2, int, CreatureTemplate)
  fullName: AImap.ExitDistanceForCreature(UnityEngine.Vector2, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int ExitDistanceForCreature(Vector2 pos, int exitNumber, CreatureTemplate crit)
    parameters:
    - id: pos
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: exitNumber
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exitNumber</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.ExitDistanceForCreature(UnityEngine.Vector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ExitDistanceForCreature(pos As Vector2, exitNumber As Integer, crit As CreatureTemplate) As Integer
  overload: Global.AImap.ExitDistanceForCreature*
  nameWithType.vb: AImap.ExitDistanceForCreature(Vector2, Integer, CreatureTemplate)
  fullName.vb: AImap.ExitDistanceForCreature(UnityEngine.Vector2, Integer, CreatureTemplate)
  name.vb: ExitDistanceForCreature(Vector2, Integer, CreatureTemplate)
- uid: Global.AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  commentId: M:Global.AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  id: ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: ExitReachableFromTile(IntVector2, int, CreatureTemplate)
  nameWithType: AImap.ExitReachableFromTile(IntVector2, int, CreatureTemplate)
  fullName: AImap.ExitReachableFromTile(RWCustom.IntVector2, int, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool ExitReachableFromTile(IntVector2 pos, int globalNodeIndex, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: globalNodeIndex
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>globalNodeIndex</parameter>
            <parameter>M:AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.ExitReachableFromTile(RWCustom.IntVector2,System.Int32,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function ExitReachableFromTile(pos As IntVector2, globalNodeIndex As Integer, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.ExitReachableFromTile*
  nameWithType.vb: AImap.ExitReachableFromTile(IntVector2, Integer, CreatureTemplate)
  fullName.vb: AImap.ExitReachableFromTile(RWCustom.IntVector2, Integer, CreatureTemplate)
  name.vb: ExitReachableFromTile(IntVector2, Integer, CreatureTemplate)
- uid: Global.AImap.AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)
  commentId: M:Global.AImap.AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)
  id: AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: AnyExitReachableFromTile(IntVector2, CreatureTemplate)
  nameWithType: AImap.AnyExitReachableFromTile(IntVector2, CreatureTemplate)
  fullName: AImap.AnyExitReachableFromTile(RWCustom.IntVector2, CreatureTemplate)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public bool AnyExitReachableFromTile(IntVector2 pos, CreatureTemplate crit)
    parameters:
    - id: pos
      type: RWCustom.IntVector2
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:AImap.AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    - id: crit
      type: Global.CreatureTemplate
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>crit</parameter>
            <parameter>M:AImap.AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    return:
      type: System.Boolean
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.AnyExitReachableFromTile(RWCustom.IntVector2,CreatureTemplate)</parameter>
          </include>
        </markup>
    content.vb: Public Function AnyExitReachableFromTile(pos As IntVector2, crit As CreatureTemplate) As Boolean
  overload: Global.AImap.AnyExitReachableFromTile*
- uid: Global.AImap.GetCompressedVisibilityMap
  commentId: M:Global.AImap.GetCompressedVisibilityMap
  id: GetCompressedVisibilityMap
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: GetCompressedVisibilityMap()
  nameWithType: AImap.GetCompressedVisibilityMap()
  fullName: AImap.GetCompressedVisibilityMap()
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.GetCompressedVisibilityMap</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public int[] GetCompressedVisibilityMap()
    return:
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:AImap.GetCompressedVisibilityMap</parameter>
          </include>
        </markup>
    content.vb: Public Function GetCompressedVisibilityMap() As Integer()
  overload: Global.AImap.GetCompressedVisibilityMap*
- uid: Global.AImap.SetVisibilityMapFromCompressedArray(System.Int32[])
  commentId: M:Global.AImap.SetVisibilityMapFromCompressedArray(System.Int32[])
  id: SetVisibilityMapFromCompressedArray(System.Int32[])
  parent: Global.AImap
  langs:
  - csharp
  - vb
  name: SetVisibilityMapFromCompressedArray(int[])
  nameWithType: AImap.SetVisibilityMapFromCompressedArray(int[])
  fullName: AImap.SetVisibilityMapFromCompressedArray(int[])
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:AImap.SetVisibilityMapFromCompressedArray(System.Int32[])</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public void SetVisibilityMapFromCompressedArray(int[] ca)
    parameters:
    - id: ca
      type: System.Int32[]
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ca</parameter>
            <parameter>M:AImap.SetVisibilityMapFromCompressedArray(System.Int32[])</parameter>
          </include>
        </markup>
    content.vb: Public Sub SetVisibilityMapFromCompressedArray(ca As Integer())
  overload: Global.AImap.SetVisibilityMapFromCompressedArray*
  nameWithType.vb: AImap.SetVisibilityMapFromCompressedArray(Integer())
  fullName.vb: AImap.SetVisibilityMapFromCompressedArray(Integer())
  name.vb: SetVisibilityMapFromCompressedArray(Integer())
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.AItile[,]
  isExternal: true
  href: AItile.html
  name: AItile[,]
  nameWithType: AItile[,]
  fullName: AItile[,]
  nameWithType.vb: AItile(,)
  fullName.vb: AItile(,)
  name.vb: AItile(,)
  spec.csharp:
  - uid: Global.AItile
    name: AItile
    isExternal: true
    href: AItile.html
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - uid: Global.AItile
    name: AItile
    isExternal: true
    href: AItile.html
  - name: (
  - name: ','
  - name: )
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: Global.AItile
  commentId: T:Global.AItile
  isExternal: true
  href: AItile.html
  name: AItile
  nameWithType: AItile
  fullName: AItile
- uid: Global.Room
  commentId: T:Global.Room
  isExternal: true
  href: Room.html
  name: Room
  nameWithType: Room
  fullName: Room
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.CreatureSpecificAImap[]
  isExternal: true
  href: CreatureSpecificAImap.html
  name: CreatureSpecificAImap[]
  nameWithType: CreatureSpecificAImap[]
  fullName: CreatureSpecificAImap[]
  nameWithType.vb: CreatureSpecificAImap()
  fullName.vb: CreatureSpecificAImap()
  name.vb: CreatureSpecificAImap()
  spec.csharp:
  - uid: Global.CreatureSpecificAImap
    name: CreatureSpecificAImap
    isExternal: true
    href: CreatureSpecificAImap.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.CreatureSpecificAImap
    name: CreatureSpecificAImap
    isExternal: true
    href: CreatureSpecificAImap.html
  - name: (
  - name: )
- uid: Global.AImap.#ctor*
  commentId: Overload:Global.AImap.#ctor
  isExternal: true
  href: Global.AImap.html#AImap__ctor_Room_System_Int32_System_Int32_
  name: AImap
  nameWithType: AImap.AImap
  fullName: AImap.AImap
  nameWithType.vb: AImap.New
  fullName.vb: AImap.New
  name.vb: New
- uid: Global.AImap.NewWorld*
  commentId: Overload:Global.AImap.NewWorld
  isExternal: true
  href: Global.AImap.html#AImap_NewWorld_System_Int32_
  name: NewWorld
  nameWithType: AImap.NewWorld
  fullName: AImap.NewWorld
- uid: Global.AImap.IsConnectionAllowedForCreature*
  commentId: Overload:Global.AImap.IsConnectionAllowedForCreature
  isExternal: true
  href: Global.AImap.html#AImap_IsConnectionAllowedForCreature_MovementConnection_CreatureTemplate_
  name: IsConnectionAllowedForCreature
  nameWithType: AImap.IsConnectionAllowedForCreature
  fullName: AImap.IsConnectionAllowedForCreature
- uid: Global.MovementConnection
  commentId: T:Global.MovementConnection
  isExternal: true
  href: MovementConnection.html
  name: MovementConnection
  nameWithType: MovementConnection
  fullName: MovementConnection
- uid: Global.CreatureTemplate
  commentId: T:Global.CreatureTemplate
  isExternal: true
  href: CreatureTemplate.html
  name: CreatureTemplate
  nameWithType: CreatureTemplate
  fullName: CreatureTemplate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.AImap.ConnectionCostForCreature*
  commentId: Overload:Global.AImap.ConnectionCostForCreature
  isExternal: true
  href: Global.AImap.html#AImap_ConnectionCostForCreature_MovementConnection_CreatureTemplate_
  name: ConnectionCostForCreature
  nameWithType: AImap.ConnectionCostForCreature
  fullName: AImap.ConnectionCostForCreature
- uid: Global.PathCost
  commentId: T:Global.PathCost
  isExternal: true
  href: PathCost.html
  name: PathCost
  nameWithType: PathCost
  fullName: PathCost
- uid: Global.AImap.getAItile*
  commentId: Overload:Global.AImap.getAItile
  isExternal: true
  href: Global.AImap.html#AImap_getAItile_UnityEngine_Vector2_
  name: getAItile
  nameWithType: AImap.getAItile
  fullName: AImap.getAItile
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: RWCustom.IntVector2
  commentId: T:RWCustom.IntVector2
  parent: RWCustom
  isExternal: true
  href: RWCustom.IntVector2.html
  name: IntVector2
  nameWithType: IntVector2
  fullName: RWCustom.IntVector2
- uid: RWCustom
  commentId: N:RWCustom
  isExternal: true
  href: RWCustom.html
  name: RWCustom
  nameWithType: RWCustom
  fullName: RWCustom
- uid: Global.WorldCoordinate
  commentId: T:Global.WorldCoordinate
  isExternal: true
  href: WorldCoordinate.html
  name: WorldCoordinate
  nameWithType: WorldCoordinate
  fullName: WorldCoordinate
- uid: Unity.Mathematics.int2
  isExternal: true
  name: int2
  nameWithType: int2
  fullName: Unity.Mathematics.int2
- uid: Unity.Mathematics.float2
  isExternal: true
  name: float2
  nameWithType: float2
  fullName: Unity.Mathematics.float2
- uid: Global.AImap.getClampedAItile*
  commentId: Overload:Global.AImap.getClampedAItile
  isExternal: true
  href: Global.AImap.html#AImap_getClampedAItile_UnityEngine_Vector2_
  name: getClampedAItile
  nameWithType: AImap.getClampedAItile
  fullName: AImap.getClampedAItile
- uid: Global.AImap.getTerrainProximity*
  commentId: Overload:Global.AImap.getTerrainProximity
  isExternal: true
  href: Global.AImap.html#AImap_getTerrainProximity_UnityEngine_Vector2_
  name: getTerrainProximity
  nameWithType: AImap.getTerrainProximity
  fullName: AImap.getTerrainProximity
- uid: Global.AImap.Visibility*
  commentId: Overload:Global.AImap.Visibility
  isExternal: true
  href: Global.AImap.html#AImap_Visibility_RWCustom_IntVector2_
  name: Visibility
  nameWithType: AImap.Visibility
  fullName: AImap.Visibility
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.AImap.TileAccessibleToCreature*
  commentId: Overload:Global.AImap.TileAccessibleToCreature
  isExternal: true
  href: Global.AImap.html#AImap_TileAccessibleToCreature_System_Int32_System_Int32_CreatureTemplate_
  name: TileAccessibleToCreature
  nameWithType: AImap.TileAccessibleToCreature
  fullName: AImap.TileAccessibleToCreature
- uid: Global.AImap.WorldCoordinateAccessibleToCreature*
  commentId: Overload:Global.AImap.WorldCoordinateAccessibleToCreature
  isExternal: true
  href: Global.AImap.html#AImap_WorldCoordinateAccessibleToCreature_WorldCoordinate_CreatureTemplate_
  name: WorldCoordinateAccessibleToCreature
  nameWithType: AImap.WorldCoordinateAccessibleToCreature
  fullName: AImap.WorldCoordinateAccessibleToCreature
- uid: Global.AImap.TileOrNeighborsAccessibleToCreature*
  commentId: Overload:Global.AImap.TileOrNeighborsAccessibleToCreature
  isExternal: true
  href: Global.AImap.html#AImap_TileOrNeighborsAccessibleToCreature_RWCustom_IntVector2_CreatureTemplate_
  name: TileOrNeighborsAccessibleToCreature
  nameWithType: AImap.TileOrNeighborsAccessibleToCreature
  fullName: AImap.TileOrNeighborsAccessibleToCreature
- uid: Global.AImap.ClampedTileAccessibleToCreature*
  commentId: Overload:Global.AImap.ClampedTileAccessibleToCreature
  isExternal: true
  href: Global.AImap.html#AImap_ClampedTileAccessibleToCreature_RWCustom_IntVector2_CreatureTemplate_
  name: ClampedTileAccessibleToCreature
  nameWithType: AImap.ClampedTileAccessibleToCreature
  fullName: AImap.ClampedTileAccessibleToCreature
- uid: Global.AImap.TileCostForCreature*
  commentId: Overload:Global.AImap.TileCostForCreature
  isExternal: true
  href: Global.AImap.html#AImap_TileCostForCreature_System_Int32_System_Int32_CreatureTemplate_
  name: TileCostForCreature
  nameWithType: AImap.TileCostForCreature
  fullName: AImap.TileCostForCreature
- uid: Global.AImap.CreatureSpecificAImap*
  commentId: Overload:Global.AImap.CreatureSpecificAImap
  isExternal: true
  href: Global.AImap.html#AImap_CreatureSpecificAImap_CreatureTemplate_
  name: CreatureSpecificAImap
  nameWithType: AImap.CreatureSpecificAImap
  fullName: AImap.CreatureSpecificAImap
- uid: Global.CreatureSpecificAImap
  commentId: T:Global.CreatureSpecificAImap
  isExternal: true
  href: CreatureSpecificAImap.html
  name: CreatureSpecificAImap
  nameWithType: CreatureSpecificAImap
  fullName: CreatureSpecificAImap
- uid: Global.AImap.TryForAccessibleNeighbor*
  commentId: Overload:Global.AImap.TryForAccessibleNeighbor
  isExternal: true
  href: Global.AImap.html#AImap_TryForAccessibleNeighbor_RWCustom_IntVector2_CreatureTemplate_
  name: TryForAccessibleNeighbor
  nameWithType: AImap.TryForAccessibleNeighbor
  fullName: AImap.TryForAccessibleNeighbor
- uid: Global.AImap.TriangulateDistance*
  commentId: Overload:Global.AImap.TriangulateDistance
  isExternal: true
  href: Global.AImap.html#AImap_TriangulateDistance_RWCustom_IntVector2_RWCustom_IntVector2_CreatureTemplate_
  name: TriangulateDistance
  nameWithType: AImap.TriangulateDistance
  fullName: AImap.TriangulateDistance
- uid: Global.AImap.AccessibilityForCreature*
  commentId: Overload:Global.AImap.AccessibilityForCreature
  isExternal: true
  href: Global.AImap.html#AImap_AccessibilityForCreature_RWCustom_IntVector2_CreatureTemplate_
  name: AccessibilityForCreature
  nameWithType: AImap.AccessibilityForCreature
  fullName: AImap.AccessibilityForCreature
- uid: Global.AImap.ExitDistanceForCreatureAndCheckNeighbours*
  commentId: Overload:Global.AImap.ExitDistanceForCreatureAndCheckNeighbours
  isExternal: true
  href: Global.AImap.html#AImap_ExitDistanceForCreatureAndCheckNeighbours_RWCustom_IntVector2_System_Int32_CreatureTemplate_
  name: ExitDistanceForCreatureAndCheckNeighbours
  nameWithType: AImap.ExitDistanceForCreatureAndCheckNeighbours
  fullName: AImap.ExitDistanceForCreatureAndCheckNeighbours
- uid: Global.AImap.ExitDistanceForCreature*
  commentId: Overload:Global.AImap.ExitDistanceForCreature
  isExternal: true
  href: Global.AImap.html#AImap_ExitDistanceForCreature_RWCustom_IntVector2_System_Int32_CreatureTemplate_
  name: ExitDistanceForCreature
  nameWithType: AImap.ExitDistanceForCreature
  fullName: AImap.ExitDistanceForCreature
- uid: Global.AImap.ExitReachableFromTile*
  commentId: Overload:Global.AImap.ExitReachableFromTile
  isExternal: true
  href: Global.AImap.html#AImap_ExitReachableFromTile_RWCustom_IntVector2_System_Int32_CreatureTemplate_
  name: ExitReachableFromTile
  nameWithType: AImap.ExitReachableFromTile
  fullName: AImap.ExitReachableFromTile
- uid: Global.AImap.AnyExitReachableFromTile*
  commentId: Overload:Global.AImap.AnyExitReachableFromTile
  isExternal: true
  href: Global.AImap.html#AImap_AnyExitReachableFromTile_RWCustom_IntVector2_CreatureTemplate_
  name: AnyExitReachableFromTile
  nameWithType: AImap.AnyExitReachableFromTile
  fullName: AImap.AnyExitReachableFromTile
- uid: Global.AImap.GetCompressedVisibilityMap*
  commentId: Overload:Global.AImap.GetCompressedVisibilityMap
  isExternal: true
  href: Global.AImap.html#AImap_GetCompressedVisibilityMap
  name: GetCompressedVisibilityMap
  nameWithType: AImap.GetCompressedVisibilityMap
  fullName: AImap.GetCompressedVisibilityMap
- uid: Global.AImap.SetVisibilityMapFromCompressedArray*
  commentId: Overload:Global.AImap.SetVisibilityMapFromCompressedArray
  isExternal: true
  href: Global.AImap.html#AImap_SetVisibilityMapFromCompressedArray_System_Int32___
  name: SetVisibilityMapFromCompressedArray
  nameWithType: AImap.SetVisibilityMapFromCompressedArray
  fullName: AImap.SetVisibilityMapFromCompressedArray
