### YamlMime:ManagedReference
items:
- uid: Global.RXMath
  commentId: T:Global.RXMath
  id: RXMath
  parent: Global
  children:
  - Global.RXMath.#ctor
  - Global.RXMath.DOUBLE_PI
  - Global.RXMath.DTOR
  - Global.RXMath.GetDegreeDelta(System.Single,System.Single)
  - Global.RXMath.GetOffsetFromAngle(System.Single,System.Single)
  - Global.RXMath.GetRadianDelta(System.Single,System.Single)
  - Global.RXMath.HALF_PI
  - Global.RXMath.INVERSE_DOUBLE_PI
  - Global.RXMath.INVERSE_PI
  - Global.RXMath.PI
  - Global.RXMath.PingPong(System.Single,System.Single)
  - Global.RXMath.RTOD
  - Global.RXMath.Wrap(System.Int32,System.Int32)
  - Global.RXMath.Wrap(System.Single,System.Single)
  langs:
  - csharp
  - vb
  name: RXMath
  nameWithType: RXMath
  fullName: RXMath
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:RXMath</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public class RXMath
    content.vb: Public Class RXMath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Global.RXMath.RTOD
  commentId: F:Global.RXMath.RTOD
  id: RTOD
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: RTOD
  nameWithType: RXMath.RTOD
  fullName: RXMath.RTOD
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RXMath.RTOD</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const float RTOD = 57.295776
    return:
      type: System.Single
    content.vb: Public Const RTOD As Single = 57.295776
- uid: Global.RXMath.DTOR
  commentId: F:Global.RXMath.DTOR
  id: DTOR
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: DTOR
  nameWithType: RXMath.DTOR
  fullName: RXMath.DTOR
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RXMath.DTOR</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const float DTOR = 0.017453292
    return:
      type: System.Single
    content.vb: Public Const DTOR As Single = 0.017453292
- uid: Global.RXMath.DOUBLE_PI
  commentId: F:Global.RXMath.DOUBLE_PI
  id: DOUBLE_PI
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: DOUBLE_PI
  nameWithType: RXMath.DOUBLE_PI
  fullName: RXMath.DOUBLE_PI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RXMath.DOUBLE_PI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const float DOUBLE_PI = 6.2831855
    return:
      type: System.Single
    content.vb: Public Const DOUBLE_PI As Single = 6.2831855
- uid: Global.RXMath.HALF_PI
  commentId: F:Global.RXMath.HALF_PI
  id: HALF_PI
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: HALF_PI
  nameWithType: RXMath.HALF_PI
  fullName: RXMath.HALF_PI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RXMath.HALF_PI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const float HALF_PI = 1.5707964
    return:
      type: System.Single
    content.vb: Public Const HALF_PI As Single = 1.5707964
- uid: Global.RXMath.PI
  commentId: F:Global.RXMath.PI
  id: PI
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: PI
  nameWithType: RXMath.PI
  fullName: RXMath.PI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RXMath.PI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const float PI = 3.1415927
    return:
      type: System.Single
    content.vb: Public Const PI As Single = 3.1415927
- uid: Global.RXMath.INVERSE_PI
  commentId: F:Global.RXMath.INVERSE_PI
  id: INVERSE_PI
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: INVERSE_PI
  nameWithType: RXMath.INVERSE_PI
  fullName: RXMath.INVERSE_PI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RXMath.INVERSE_PI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const float INVERSE_PI = 0.31830987
    return:
      type: System.Single
    content.vb: Public Const INVERSE_PI As Single = 0.31830987
- uid: Global.RXMath.INVERSE_DOUBLE_PI
  commentId: F:Global.RXMath.INVERSE_DOUBLE_PI
  id: INVERSE_DOUBLE_PI
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: INVERSE_DOUBLE_PI
  nameWithType: RXMath.INVERSE_DOUBLE_PI
  fullName: RXMath.INVERSE_DOUBLE_PI
  type: Field
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>F:RXMath.INVERSE_DOUBLE_PI</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public const float INVERSE_DOUBLE_PI = 0.15915494
    return:
      type: System.Single
    content.vb: Public Const INVERSE_DOUBLE_PI As Single = 0.15915494
- uid: Global.RXMath.Wrap(System.Int32,System.Int32)
  commentId: M:Global.RXMath.Wrap(System.Int32,System.Int32)
  id: Wrap(System.Int32,System.Int32)
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: Wrap(int, int)
  nameWithType: RXMath.Wrap(int, int)
  fullName: RXMath.Wrap(int, int)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXMath.Wrap(System.Int32,System.Int32)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static int Wrap(int input, int range)
    parameters:
    - id: input
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXMath.Wrap(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    - id: range
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>range</parameter>
            <parameter>M:RXMath.Wrap(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    return:
      type: System.Int32
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXMath.Wrap(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Wrap(input As Integer, range As Integer) As Integer
  overload: Global.RXMath.Wrap*
  nameWithType.vb: RXMath.Wrap(Integer, Integer)
  fullName.vb: RXMath.Wrap(Integer, Integer)
  name.vb: Wrap(Integer, Integer)
- uid: Global.RXMath.Wrap(System.Single,System.Single)
  commentId: M:Global.RXMath.Wrap(System.Single,System.Single)
  id: Wrap(System.Single,System.Single)
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: Wrap(float, float)
  nameWithType: RXMath.Wrap(float, float)
  fullName: RXMath.Wrap(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXMath.Wrap(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float Wrap(float input, float range)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXMath.Wrap(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: range
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>range</parameter>
            <parameter>M:RXMath.Wrap(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXMath.Wrap(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function Wrap(input As Single, range As Single) As Single
  overload: Global.RXMath.Wrap*
  nameWithType.vb: RXMath.Wrap(Single, Single)
  fullName.vb: RXMath.Wrap(Single, Single)
  name.vb: Wrap(Single, Single)
- uid: Global.RXMath.GetDegreeDelta(System.Single,System.Single)
  commentId: M:Global.RXMath.GetDegreeDelta(System.Single,System.Single)
  id: GetDegreeDelta(System.Single,System.Single)
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: GetDegreeDelta(float, float)
  nameWithType: RXMath.GetDegreeDelta(float, float)
  fullName: RXMath.GetDegreeDelta(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXMath.GetDegreeDelta(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float GetDegreeDelta(float startAngle, float endAngle)
    parameters:
    - id: startAngle
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startAngle</parameter>
            <parameter>M:RXMath.GetDegreeDelta(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: endAngle
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>endAngle</parameter>
            <parameter>M:RXMath.GetDegreeDelta(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXMath.GetDegreeDelta(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetDegreeDelta(startAngle As Single, endAngle As Single) As Single
  overload: Global.RXMath.GetDegreeDelta*
  nameWithType.vb: RXMath.GetDegreeDelta(Single, Single)
  fullName.vb: RXMath.GetDegreeDelta(Single, Single)
  name.vb: GetDegreeDelta(Single, Single)
- uid: Global.RXMath.GetRadianDelta(System.Single,System.Single)
  commentId: M:Global.RXMath.GetRadianDelta(System.Single,System.Single)
  id: GetRadianDelta(System.Single,System.Single)
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: GetRadianDelta(float, float)
  nameWithType: RXMath.GetRadianDelta(float, float)
  fullName: RXMath.GetRadianDelta(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXMath.GetRadianDelta(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float GetRadianDelta(float startAngle, float endAngle)
    parameters:
    - id: startAngle
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startAngle</parameter>
            <parameter>M:RXMath.GetRadianDelta(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: endAngle
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>endAngle</parameter>
            <parameter>M:RXMath.GetRadianDelta(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXMath.GetRadianDelta(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetRadianDelta(startAngle As Single, endAngle As Single) As Single
  overload: Global.RXMath.GetRadianDelta*
  nameWithType.vb: RXMath.GetRadianDelta(Single, Single)
  fullName.vb: RXMath.GetRadianDelta(Single, Single)
  name.vb: GetRadianDelta(Single, Single)
- uid: Global.RXMath.PingPong(System.Single,System.Single)
  commentId: M:Global.RXMath.PingPong(System.Single,System.Single)
  id: PingPong(System.Single,System.Single)
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: PingPong(float, float)
  nameWithType: RXMath.PingPong(float, float)
  fullName: RXMath.PingPong(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXMath.PingPong(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static float PingPong(float input, float range)
    parameters:
    - id: input
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:RXMath.PingPong(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: range
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>range</parameter>
            <parameter>M:RXMath.PingPong(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXMath.PingPong(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function PingPong(input As Single, range As Single) As Single
  overload: Global.RXMath.PingPong*
  nameWithType.vb: RXMath.PingPong(Single, Single)
  fullName.vb: RXMath.PingPong(Single, Single)
  name.vb: PingPong(Single, Single)
- uid: Global.RXMath.GetOffsetFromAngle(System.Single,System.Single)
  commentId: M:Global.RXMath.GetOffsetFromAngle(System.Single,System.Single)
  id: GetOffsetFromAngle(System.Single,System.Single)
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: GetOffsetFromAngle(float, float)
  nameWithType: RXMath.GetOffsetFromAngle(float, float)
  fullName: RXMath.GetOffsetFromAngle(float, float)
  type: Method
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>M:RXMath.GetOffsetFromAngle(System.Single,System.Single)</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public static Vector2 GetOffsetFromAngle(float angle, float distance)
    parameters:
    - id: angle
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>angle</parameter>
            <parameter>M:RXMath.GetOffsetFromAngle(System.Single,System.Single)</parameter>
          </include>
        </markup>
    - id: distance
      type: System.Single
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>distance</parameter>
            <parameter>M:RXMath.GetOffsetFromAngle(System.Single,System.Single)</parameter>
          </include>
        </markup>
    return:
      type: UnityEngine.Vector2
      description: >-
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:RXMath.GetOffsetFromAngle(System.Single,System.Single)</parameter>
          </include>
        </markup>
    content.vb: Public Shared Function GetOffsetFromAngle(angle As Single, distance As Single) As Vector2
  overload: Global.RXMath.GetOffsetFromAngle*
  nameWithType.vb: RXMath.GetOffsetFromAngle(Single, Single)
  fullName.vb: RXMath.GetOffsetFromAngle(Single, Single)
  name.vb: GetOffsetFromAngle(Single, Single)
- uid: Global.RXMath.#ctor
  commentId: M:Global.RXMath.#ctor
  id: '#ctor'
  parent: Global.RXMath
  langs:
  - csharp
  - vb
  name: RXMath()
  nameWithType: RXMath.RXMath()
  fullName: RXMath.RXMath()
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>RXMath</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public RXMath()
    content.vb: Public Sub New()
  overload: Global.RXMath.#ctor*
  nameWithType.vb: RXMath.New()
  fullName.vb: RXMath.New()
  name.vb: New()
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.RXMath.Wrap*
  commentId: Overload:Global.RXMath.Wrap
  isExternal: true
  href: Global.RXMath.html#RXMath_Wrap_System_Int32_System_Int32_
  name: Wrap
  nameWithType: RXMath.Wrap
  fullName: RXMath.Wrap
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.RXMath.GetDegreeDelta*
  commentId: Overload:Global.RXMath.GetDegreeDelta
  isExternal: true
  href: Global.RXMath.html#RXMath_GetDegreeDelta_System_Single_System_Single_
  name: GetDegreeDelta
  nameWithType: RXMath.GetDegreeDelta
  fullName: RXMath.GetDegreeDelta
- uid: Global.RXMath.GetRadianDelta*
  commentId: Overload:Global.RXMath.GetRadianDelta
  isExternal: true
  href: Global.RXMath.html#RXMath_GetRadianDelta_System_Single_System_Single_
  name: GetRadianDelta
  nameWithType: RXMath.GetRadianDelta
  fullName: RXMath.GetRadianDelta
- uid: Global.RXMath.PingPong*
  commentId: Overload:Global.RXMath.PingPong
  isExternal: true
  href: Global.RXMath.html#RXMath_PingPong_System_Single_System_Single_
  name: PingPong
  nameWithType: RXMath.PingPong
  fullName: RXMath.PingPong
- uid: Global.RXMath.GetOffsetFromAngle*
  commentId: Overload:Global.RXMath.GetOffsetFromAngle
  isExternal: true
  href: Global.RXMath.html#RXMath_GetOffsetFromAngle_System_Single_System_Single_
  name: GetOffsetFromAngle
  nameWithType: RXMath.GetOffsetFromAngle
  fullName: RXMath.GetOffsetFromAngle
- uid: UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.RXMath.#ctor*
  commentId: Overload:Global.RXMath.#ctor
  isExternal: true
  href: Global.RXMath.html#RXMath__ctor
  name: RXMath
  nameWithType: RXMath.RXMath
  fullName: RXMath.RXMath
  nameWithType.vb: RXMath.New
  fullName.vb: RXMath.New
  name.vb: New
