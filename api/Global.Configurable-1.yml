### YamlMime:ManagedReference
items:
- uid: Global.Configurable`1
  commentId: T:Global.Configurable`1
  id: Configurable`1
  parent: Global
  children:
  - Global.Configurable`1.#ctor(`0,ConfigAcceptableBase)
  - Global.Configurable`1.#ctor(`0,ConfigurableInfo)
  - Global.Configurable`1.BoxedValue
  - Global.Configurable`1.OnChange
  - Global.Configurable`1.Value
  langs:
  - csharp
  - vb
  name: Configurable<T>
  nameWithType: Configurable<T>
  fullName: Configurable<T>
  type: Class
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>T:Configurable`1</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: 'public sealed class Configurable<T> : ConfigurableBase'
    typeParameters:
    - id: T
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>T:Configurable`1</parameter>
          </include>
        </markup>
    content.vb: Public NotInheritable Class Configurable(Of T) Inherits ConfigurableBase
  inheritance:
  - System.Object
  - Global.ConfigurableBase
  inheritedMembers:
  - Global.ConfigurableBase.OI
  - Global.ConfigurableBase.key
  - Global.ConfigurableBase.settingType
  - Global.ConfigurableBase.defaultValue
  - Global.ConfigurableBase.info
  - Global.ConfigurableBase.IsCosmetic
  - Global.ConfigurableBase.BoundUIconfig
  - Global.ConfigurableBase.Tab
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  nameWithType.vb: Configurable(Of T)
  fullName.vb: Configurable(Of T)
  name.vb: Configurable(Of T)
- uid: Global.Configurable`1.#ctor(`0,ConfigurableInfo)
  commentId: M:Global.Configurable`1.#ctor(`0,ConfigurableInfo)
  id: '#ctor(`0,ConfigurableInfo)'
  parent: Global.Configurable`1
  langs:
  - csharp
  - vb
  name: Configurable(T, ConfigurableInfo)
  nameWithType: Configurable<T>.Configurable(T, ConfigurableInfo)
  fullName: Configurable<T>.Configurable(T, ConfigurableInfo)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Configurable`1</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Configurable(T defaultValue, ConfigurableInfo info = null)
    parameters:
    - id: defaultValue
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defaultValue</parameter>
            <parameter>M:Configurable`1.#ctor(`0,ConfigurableInfo)</parameter>
          </include>
        </markup>
    - id: info
      type: Global.ConfigurableInfo
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:Configurable`1.#ctor(`0,ConfigurableInfo)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(defaultValue As T, info As ConfigurableInfo = Nothing)
  overload: Global.Configurable`1.#ctor*
  nameWithType.vb: Configurable(Of T).New(T, ConfigurableInfo)
  fullName.vb: Configurable(Of T).New(T, ConfigurableInfo)
  name.vb: New(T, ConfigurableInfo)
- uid: Global.Configurable`1.#ctor(`0,ConfigAcceptableBase)
  commentId: M:Global.Configurable`1.#ctor(`0,ConfigAcceptableBase)
  id: '#ctor(`0,ConfigAcceptableBase)'
  parent: Global.Configurable`1
  langs:
  - csharp
  - vb
  name: Configurable(T, ConfigAcceptableBase)
  nameWithType: Configurable<T>.Configurable(T, ConfigAcceptableBase)
  fullName: Configurable<T>.Configurable(T, ConfigAcceptableBase)
  type: Constructor
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCAutoDocConstructor">
        <parameter>Configurable`1</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public Configurable(T defaultValue, ConfigAcceptableBase accept)
    parameters:
    - id: defaultValue
      type: '{T}'
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defaultValue</parameter>
            <parameter>M:Configurable`1.#ctor(`0,ConfigAcceptableBase)</parameter>
          </include>
        </markup>
    - id: accept
      type: Global.ConfigAcceptableBase
      description: >-
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>accept</parameter>
            <parameter>M:Configurable`1.#ctor(`0,ConfigAcceptableBase)</parameter>
          </include>
        </markup>
    content.vb: Public Sub New(defaultValue As T, accept As ConfigAcceptableBase)
  overload: Global.Configurable`1.#ctor*
  nameWithType.vb: Configurable(Of T).New(T, ConfigAcceptableBase)
  fullName.vb: Configurable(Of T).New(T, ConfigAcceptableBase)
  name.vb: New(T, ConfigAcceptableBase)
- uid: Global.Configurable`1.Value
  commentId: P:Global.Configurable`1.Value
  id: Value
  parent: Global.Configurable`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Configurable<T>.Value
  fullName: Configurable<T>.Value
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Configurable`1.Value</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: Global.Configurable`1.Value*
  nameWithType.vb: Configurable(Of T).Value
  fullName.vb: Configurable(Of T).Value
- uid: Global.Configurable`1.BoxedValue
  commentId: P:Global.Configurable`1.BoxedValue
  id: BoxedValue
  parent: Global.Configurable`1
  langs:
  - csharp
  - vb
  name: BoxedValue
  nameWithType: Configurable<T>.BoxedValue
  fullName: Configurable<T>.BoxedValue
  type: Property
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>P:Configurable`1.BoxedValue</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public override object BoxedValue { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Overrides Property BoxedValue As Object
  overridden: Global.ConfigurableBase.BoxedValue
  overload: Global.Configurable`1.BoxedValue*
  nameWithType.vb: Configurable(Of T).BoxedValue
  fullName.vb: Configurable(Of T).BoxedValue
- uid: Global.Configurable`1.OnChange
  commentId: E:Global.Configurable`1.OnChange
  id: OnChange
  parent: Global.Configurable`1
  langs:
  - csharp
  - vb
  name: OnChange
  nameWithType: Configurable<T>.OnChange
  fullName: Configurable<T>.OnChange
  type: Event
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: >-
    <markup>
      <include item="SMCMissingTag">
        <parameter>summary</parameter>
        <parameter>E:Configurable`1.OnChange</parameter>
      </include>
    </markup>
  example: []
  syntax:
    content: public event OnEventHandler OnChange
    return:
      type: Menu.Remix.MixedUI.OnEventHandler
    content.vb: Public Event OnChange As OnEventHandler
  nameWithType.vb: Configurable(Of T).OnChange
  fullName.vb: Configurable(Of T).OnChange
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ConfigurableBase
  commentId: T:Global.ConfigurableBase
  isExternal: true
  href: ConfigurableBase.html
  name: ConfigurableBase
  nameWithType: ConfigurableBase
  fullName: ConfigurableBase
- uid: Global.ConfigurableBase.OI
  commentId: F:Global.ConfigurableBase.OI
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_OI
  name: OI
  nameWithType: ConfigurableBase.OI
  fullName: ConfigurableBase.OI
- uid: Global.ConfigurableBase.key
  commentId: F:Global.ConfigurableBase.key
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_key
  name: key
  nameWithType: ConfigurableBase.key
  fullName: ConfigurableBase.key
- uid: Global.ConfigurableBase.settingType
  commentId: F:Global.ConfigurableBase.settingType
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_settingType
  name: settingType
  nameWithType: ConfigurableBase.settingType
  fullName: ConfigurableBase.settingType
- uid: Global.ConfigurableBase.defaultValue
  commentId: F:Global.ConfigurableBase.defaultValue
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_defaultValue
  name: defaultValue
  nameWithType: ConfigurableBase.defaultValue
  fullName: ConfigurableBase.defaultValue
- uid: Global.ConfigurableBase.info
  commentId: F:Global.ConfigurableBase.info
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_info
  name: info
  nameWithType: ConfigurableBase.info
  fullName: ConfigurableBase.info
- uid: Global.ConfigurableBase.IsCosmetic
  commentId: P:Global.ConfigurableBase.IsCosmetic
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_IsCosmetic
  name: IsCosmetic
  nameWithType: ConfigurableBase.IsCosmetic
  fullName: ConfigurableBase.IsCosmetic
- uid: Global.ConfigurableBase.BoundUIconfig
  commentId: P:Global.ConfigurableBase.BoundUIconfig
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_BoundUIconfig
  name: BoundUIconfig
  nameWithType: ConfigurableBase.BoundUIconfig
  fullName: ConfigurableBase.BoundUIconfig
- uid: Global.ConfigurableBase.Tab
  commentId: P:Global.ConfigurableBase.Tab
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_Tab
  name: Tab
  nameWithType: ConfigurableBase.Tab
  fullName: ConfigurableBase.Tab
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Configurable`1.#ctor*
  commentId: Overload:Global.Configurable`1.#ctor
  isExternal: true
  href: Global.Configurable-1.html#Configurable_1__ctor__0_ConfigurableInfo_
  name: Configurable
  nameWithType: Configurable<T>.Configurable
  fullName: Configurable<T>.Configurable
  nameWithType.vb: Configurable(Of T).New
  fullName.vb: Configurable(Of T).New
  name.vb: New
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Global.ConfigurableInfo
  commentId: T:Global.ConfigurableInfo
  isExternal: true
  href: ConfigurableInfo.html
  name: ConfigurableInfo
  nameWithType: ConfigurableInfo
  fullName: ConfigurableInfo
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Global.ConfigAcceptableBase
  commentId: T:Global.ConfigAcceptableBase
  isExternal: true
  href: ConfigAcceptableBase.html
  name: ConfigAcceptableBase
  nameWithType: ConfigAcceptableBase
  fullName: ConfigAcceptableBase
- uid: Global.Configurable`1.Value*
  commentId: Overload:Global.Configurable`1.Value
  isExternal: true
  href: Global.Configurable-1.html#Configurable_1_Value
  name: Value
  nameWithType: Configurable<T>.Value
  fullName: Configurable<T>.Value
  nameWithType.vb: Configurable(Of T).Value
  fullName.vb: Configurable(Of T).Value
- uid: Global.ConfigurableBase.BoxedValue
  commentId: P:Global.ConfigurableBase.BoxedValue
  parent: Global.ConfigurableBase
  isExternal: true
  href: Global.ConfigurableBase.html#ConfigurableBase_BoxedValue
  name: BoxedValue
  nameWithType: ConfigurableBase.BoxedValue
  fullName: ConfigurableBase.BoxedValue
- uid: Global.Configurable`1.BoxedValue*
  commentId: Overload:Global.Configurable`1.BoxedValue
  isExternal: true
  href: Global.Configurable-1.html#Configurable_1_BoxedValue
  name: BoxedValue
  nameWithType: Configurable<T>.BoxedValue
  fullName: Configurable<T>.BoxedValue
  nameWithType.vb: Configurable(Of T).BoxedValue
  fullName.vb: Configurable(Of T).BoxedValue
- uid: Menu.Remix.MixedUI.OnEventHandler
  commentId: T:Menu.Remix.MixedUI.OnEventHandler
  parent: Menu.Remix.MixedUI
  isExternal: true
  href: Menu.Remix.MixedUI.OnEventHandler.html
  name: OnEventHandler
  nameWithType: OnEventHandler
  fullName: Menu.Remix.MixedUI.OnEventHandler
- uid: Menu.Remix.MixedUI
  commentId: N:Menu.Remix.MixedUI
  isExternal: true
  href: Menu.html
  name: Menu.Remix.MixedUI
  nameWithType: Menu.Remix.MixedUI
  fullName: Menu.Remix.MixedUI
  spec.csharp:
  - uid: Menu
    name: Menu
    isExternal: true
    href: Menu.html
  - name: .
  - uid: Menu.Remix
    name: Remix
    isExternal: true
    href: Menu.Remix.html
  - name: .
  - uid: Menu.Remix.MixedUI
    name: MixedUI
    isExternal: true
    href: Menu.Remix.MixedUI.html
  spec.vb:
  - uid: Menu
    name: Menu
    isExternal: true
    href: Menu.html
  - name: .
  - uid: Menu.Remix
    name: Remix
    isExternal: true
    href: Menu.Remix.html
  - name: .
  - uid: Menu.Remix.MixedUI
    name: MixedUI
    isExternal: true
    href: Menu.Remix.MixedUI.html
